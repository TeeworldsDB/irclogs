00:55 < bridge_> <TsFreddie> wow
00:55 < bridge_> <TsFreddie> https://cdn.discordapp.com/attachments/293493549758939136/1235364064243224667/image.png?ex=663419f0&is=6632c870&hm=1c9dc899e3f16ae55d2a30793ccbe347821d25c584a6606f818e73ec8665acee&
02:17 < ws-client> <ChillerDragon> > whatsapp doesn't get access to the contact book if you decline it.
02:18 < ws-client> <ChillerDragon> but whatsapp gets access to people in your contact book that did not agree to anything whatsapp related. So that is you violating the gdpr unless you asked all your friends if you can share their contact details with whatsapp.
02:23 < ws-client> <ChillerDragon> If you accept*
03:19 < bridge_> <zhn> lol? i actually do use adblocker and this thing has its own blacklist so i can choose to proceed or not
03:20 < bridge_> <zhn> it really helps on surfing some fishy sites to grab some relatable info on old thing
05:22 < bridge_> <cellegenrih> that is a fucked up way to get people to allegedly spy on us
05:28 < bridge_> <Ewan> heino needs vacation
05:48 < ws-client> <ChillerDragon> @reitw how did you fix the nvidia debian 12 issue?
05:51 < bridge_> <Ewan> hi chiller
05:55 < bridge_> <reitw> @chillerdragon switch to your older kernel version which is still installed & doesn't panic, uninstall the newer version, and wait for debian to fix their shit
05:55 < bridge_> <reitw> Actually it is alrdy fixed tho
05:59 < ws-client> <ChillerDragon> My laptop wasn't booting anymore and i did some stuff to make it boot again. I think that was also using the older kernel. But now apt update and install always compiles the nvidia patches and then fails.
05:59 < ws-client> <ChillerDragon> So if i switch to the new kernel everything latest it should just work?
06:00 < ws-client> <ChillerDragon> I am a bit scared
06:10 < bridge_> <reitw> You can always select which kernel version you want to boot up
06:10 < bridge_> <reitw> If it is installed locally
06:11 < bridge_> <reitw> My lap at work is using latest ddnet kernel version without any issue now
06:13 < bridge_> <reitw> Apparently it is nvidia who fixed it
06:13 < bridge_> <reitw> https://forums.developer.nvidia.com/t/debian-12-and-nvidia-driver-nvidia-linux-x86-64-470-223-02-run/282473
07:37 < bridge_> <heinrich5991> yes, a blacklist can help. it's not something the user has to confirm for every HTTPS redirect
07:38 < bridge_> <heinrich5991> chillerdragon: I do not think this is how the GDPR works
07:38 < bridge_> <heinrich5991> whatsapp might violate the GDPR here, but I don't think the end user is
07:55 < bridge_> <heinrich5991> (as for whatsapp being GDPR-compliant, that hinges on a probably illegal treaty between the US and the EU, the first one was called "international safe harbor privacy principles", but was successfully challenged by max schrems and declared illegal in 2015. they then put up the next treaty called "privacy shield", which was declared illegal in 2020. then they just put up the next treaty "data privacy framework", which is likely illegal, too, b
08:43 < bridge_> <ryozuki> TSMC to build massive chips twice the size of today's largest — chips will use thousands of watts of power https://www.tomshardware.com/tech-industry/tsmc-to-build-massive-chips-twice-the-size-of-todays-largest-that-draw-thousands-of-watts-of-power-120x120mm-chips-with-12-hbm4e-stacks-in-2027
08:43 < bridge_> <ryozuki> @jupeyy_keks xd
08:48 < bridge_> <meloƞ> so they didnt lie after all with needing a secondary power supply just for the CPU °-°
08:49 < bridge_> <meloƞ> so they didnt lie after all with needing a second power supply just for the CPU °-°
10:12 < bridge_> <sans._.> How would I ping a server and measure the response time? Basically get these numbers, but on the command line or with some script
10:12 < bridge_> <sans._.> https://cdn.discordapp.com/attachments/293493549758939136/1235504087148265522/image.png?ex=66349c58&is=66334ad8&hm=3772fddd4dc8a8a8c8d0c05fc3895330cc1cb6b4df420acea2a8e816e7666943&
10:14 < bridge_> <teero777> use ping with the server ip??
10:14 < bridge_> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1235504665190469682/image.png?ex=66349ce2&is=66334b62&hm=2dd46312a10535c69d2122ffa88cce07fa7048d220fbee3a6eb3d60d90e9442d&
10:14 < bridge_> <teero777> use ping with the server ip?
10:14 < bridge_> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1235504665190469682/image.png?ex=66349ce2&is=66334b62&hm=2dd46312a10535c69d2122ffa88cce07fa7048d220fbee3a6eb3d60d90e9442d&
10:15 < bridge_> <sans._.> does port not matter?
10:15 < bridge_> <teero777> nope
10:15 < bridge_> <sans._.> oh
10:15 < bridge_> <sans._.> thanks xd
10:15 < bridge_> <teero777> np xd
10:15 < bridge_> <sans._.> I am bad at networking lol
10:32 < bridge_> <avolicious> ping is a very weak indicator. A much better approach would be traceroute ( MTR ), you can use WinMTR for this task for example.
10:32 < bridge_> <sans._.> indicator of what
10:32 < bridge_> <sans._.> response time?
10:36 < bridge_> <avolicious> If you want to troubleshoot where the problem occurs, you have to diagnose the network at each turnpoint - done via traceroute.
10:36 < bridge_> <avolicious> 
10:36 < bridge_> <avolicious> Just pinging a server is mostly used to check if the server is alive 🙂 But it doesnt give you a hint where its slowed down.
10:36 < bridge_> <avolicious> 
10:36 < bridge_> <avolicious> So why traceroute?
10:36 < bridge_> <avolicious> If a hoster has multiple peerings/upstreams, they can choose where your package should be coming from ( Border-Gateway-Protocol ( BGP ), is used for this task ).
10:37 < bridge_> <sans._.> I (and I mean quite literally) only need the response time
10:37 < bridge_> <sans._.> i.e. if it's alive or not
10:37 < bridge_> <sans._.> so...
10:37 < bridge_> <avolicious> okay 🙂 then you can just ping
10:38 < bridge_> <heinrich5991> only servers that are alive should be in the serverlist – you could also check whether the server is in there (https://master1.ddnet.org/ddnet/15/servers.json)
10:39 < bridge_> <avolicious> But be aware, if you extensive ping you can get blocked or in our case, we dont allow ICMP at all 🙂
10:40 < bridge_> <sans._.> Then how does the ddnet client get server pings then?
10:41 < bridge_> <avolicious> They use a built in method to get server data. Its not based on ICMP
10:41 < bridge_> <heinrich5991> they check the ping while being connected to the server
10:42 < bridge_> <avolicious> So to solve this ping/response time stuff. What do you want to achieve?
10:43 < bridge_> <avolicious> Pinging all servers?
10:43 < bridge_> <lier_0n> how do I install your client?
10:44 < bridge_> <sans._.> Display this list, with about as much information as there is in the client, in any other environment, for example, a discord bot
10:44 < bridge_> <sans._.> https://cdn.discordapp.com/attachments/293493549758939136/1235512126596976690/image.png?ex=6634a3d5&is=66335255&hm=8e11effb7f22aa735c87dd12fc87f5ef343fc64a0cc32ed6e2e5eb1c8a90245b&
10:44 < bridge_> <avolicious> Then I would suggest to use the HTTPS master, heinrich mentioned before
10:44 < bridge_> <avolicious> (https://master1.ddnet.org/ddnet/15/servers.json)
10:45 < bridge_> <heinrich5991> (it doesn't have ping info though. but only live servers are listed there)
10:45 < bridge_> <avolicious> But ping/response time info is very location based. Its a bad indicator for a discord bot 😄
10:46 < bridge_> <avolicious> Even two players within the same country but different ISPs can get different pings to a server
10:46 < bridge_> <avolicious> Even two players within the same country & city & street but different ISPs can get different pings to a server
10:46 < bridge_> <heinrich5991> true
10:47 < bridge_> <avolicious> And the https master is I'd say a trusted source
10:47 < bridge_> <sans._.> that's what im trying to solve
10:47 < bridge_> <avolicious> You get all information in json ( great for parsing ). You dont have to wait for servers to respond
10:47 < bridge_> <sans._.> with pytagora's theorem xd
10:48 < bridge_> <avolicious> ???
10:48 < bridge_> <avolicious> Now I am confused tbh
10:50 < bridge_> <ryozuki> https://www.insideprecisionmedicine.com/topics/oncology/mrna-cancer-vaccine-reprograms-immune-system-to-tackle-glioblastoma/
10:50 < bridge_> <ryozuki> :poggers2:
10:51 < bridge_> <sans._.> - Have a ping command to measure response time from discord user's pc to bot
10:51 < bridge_> <sans._.> - Have whatever server is hosting the bot ping the ddnet server
10:51 < bridge_> <sans._.> - Use Pythagorean theorem to get an approximate ping value between discord user's pc to ddnet server
10:51 < bridge_> <sans._.> - Have a ping command to measure response time from discord user's pc to bot
10:51 < bridge_> <sans._.> - Have whatever server is hosting the bot ping the ddnet server
10:51 < bridge_> <sans._.> - Use Pythagorean theorem to get an approximate ping value for discord user's pc to ddnet server
10:53 < bridge_> <meloƞ> you want to calculate the "distance" between the user and the server using... pythagorean theorem? - just to be sure, are you talking about the good old `a^2 + b^2 = c^2` ? XD
10:53 < bridge_> <avolicious> Yes
10:53 < bridge_> <sans._.> well, sort of, yea
10:54 < bridge_> <avolicious> The internet doesnt work that way, but he want to try
10:54 < bridge_> <avolicious> ¯\_(ツ)_/¯
10:54 < bridge_> <heinrich5991> using the pythagorean theorem implies that there's a right angle between the game server, the discord bot and the user
10:54 < bridge_> <heinrich5991> I see no reason to believe that there's a right angle there
11:01 < bridge_> <meloƞ> XD find the angle (a) between the server and the host and calculate it using tan(a) = a/b !!!
11:01 < bridge_> <sans._.> im bad at math :dumb:
11:01 < bridge_> <meloƞ> XD find the angle (a) between the server and the host and calculate it using tan(a) = a/c !!!
11:01 < bridge_> <meloƞ> wait.. was tan a/c ? or was that sin
11:01 < bridge_> <heinrich5991> can I see the project somewhere?
11:01 < bridge_> <sans._.> https://github.com/Sans3108/DDNet
11:01 < bridge_> <sans._.> I named it 2 years ago when I had no idea what I was doing, I still dont, but I'm better than back then :kek:
11:02 < bridge_> <meloƞ> hey this is pretty neat - i might fall back to that in a discord bot with appropriate credit ofc
11:02 < bridge_> <meloƞ> hey this is pretty neat - i might fall back to that in a discord bot with appropriate credit ofc <a:catxplosion:1082715870893195274>
11:03 < bridge_> <sans._.> That'd be pretty cool :PES_Cool:
11:03 < bridge_> <heinrich5991> naming your npm package "ddnet" is pretty presumptuous
11:03 < bridge_> <sans._.> .
11:03 < bridge_> <sans._.> I might have to change it
11:05 < bridge_> <heinrich5991> the package looks useful 🙂
11:07 < bridge_> <sans._.> So far it's loosely put together, and doesn't really offer much on top of what you can get by just parsing the json yourself, but I'm working on it :D
11:07 < bridge_> <avolicious> Ah, because it remembered it. Can we add a http map download url to the ddnet master?
11:08 < bridge_> <avolicious> Right now we are sending it in the map data request package afaik, but adding it to the master to "prefetch" would be also neat, no?
11:14 < bridge_> <heinrich5991> you can add a field to the JSON yourself. no need to wait for ddnet
11:15 < bridge_> <heinrich5991> for the client? doesn't really seem necessary
12:13 < bridge_> <ryozuki> https://ret2pop.nullring.xyz/blog/cognition.html
12:16 < bridge_> <ryozuki> https://github.com/pcwalton/offset-allocator
12:16 < bridge_> <ryozuki> > This is a port of Sebastian Aaltonen's OffsetAllocator package for C++ to 100% safe Rust. It's a fast, simple, hard real time allocator. This is especially useful for managing GPU resources, and the goal is to use it in Bevy.
12:16 < bridge_> <ryozuki> cc @jupeyy_keks
12:26 < ws-client> <ChillerDragon> @heinrich5991 so whats the plan for #5949 and #7777 ? c:
12:50 < bridge_> <ryozuki> https://github.com/QuState/PhastFT
12:50 < bridge_> <meloƞ> :justatest:
12:50 < bridge_> <meloƞ> https://cdn.discordapp.com/attachments/293493549758939136/1235543843361914950/image.png?ex=6634c15f&is=66336fdf&hm=dfee29ca1cfe607edf039435cf0f89eac587f5a9549d8283b1dc1e70491a70be&
13:08 < bridge_> <meloƞ> @heinrich5991 quick question about style, currently adding indicator for team0mode, how am i supposed to actually call it, because
13:08 < bridge_> <meloƞ> `int m_Team0ModeModeOffset` looks ugly as hell, while `int m_Team0ModeOffset` might be confusing
13:08 < bridge_> <meloƞ> @heinrich5991 quick question about style, currently adding indicator for team0mode, how am i supposed to actually call it, because
13:08 < bridge_> <meloƞ> `int m_Team0ModeModeOffset` for example looks ugly as hell, while `int m_Team0ModeOffset` might be confusing
13:16 < ws-client> <ChillerDragon> create a class Team0Mode and add a member ``int m_ModeOffset`` <:troll:490644344341135380>
13:26 < bridge_> <meloƞ> :pepe_holy:
13:31 < bridge_> <heinrich5991> why do you want to repeat "Mode"?
13:32 < bridge_> <meloƞ> because Team0Mode is its own name
13:32 < bridge_> <meloƞ> 
13:32 < bridge_> <meloƞ> `PRACTICE_MODE` makes sense
13:32 < bridge_> <meloƞ> `TEAM0_MODE` makes less sense
13:32 < bridge_> <meloƞ> `TEAM0MODE_MODE` looks ugly
13:32 < bridge_> <heinrich5991> just call it TEAM0_MODE then
13:32 < bridge_> <heinrich5991> like you suggested
13:32 < bridge_> <meloƞ> (Y)
13:33 < bridge_> <teero777> TEAM_M0DE
13:42 < bridge_> <heinrich5991> you mean the team number?
13:42 < bridge_> <meloƞ> the enum TEAM_FLOCK and the TeamFlock member of Teams()
13:43 < bridge_> <meloƞ> aswell as anything else associated with team0mode beeing called flock in the src atm
13:43 < bridge_> <heinrich5991> TEAM_FLOCK → TEAM0_MODE doesn't seem to make sense
13:43 < bridge_> <heinrich5991> TEAM_FLOCK is 0
13:44 < bridge_> <heinrich5991> but TEAM0_MODE doesn't sound like a team name
13:45 < bridge_> <Bota> This is amusing to read 🍿
13:45 < bridge_> <meloƞ> ```cpp
13:45 < bridge_> <meloƞ> void CTeamsCore::Team(int ClientId, int Team)
13:45 < bridge_> <meloƞ> {
13:45 < bridge_> <meloƞ>     dbg_assert(Team >= TEAM0_MODE && Team <= TEAM_SUPER, "invalid team");
13:45 < bridge_> <meloƞ>     m_aTeam[ClientId] = Team;
13:45 < bridge_> <meloƞ> }
13:45 < bridge_> <meloƞ> ```
13:45 < bridge_> <meloƞ> 
13:45 < bridge_> <meloƞ> vs
13:45 < bridge_> <meloƞ> 
13:45 < bridge_> <meloƞ> ```cpp
13:45 < bridge_> <meloƞ> void CTeamsCore::Team(int ClientId, int Team)
13:45 < bridge_> <meloƞ> {
13:45 < bridge_> <meloƞ>     dbg_assert(Team >= TEAM_FLOCK && Team <= TEAM_SUPER, "invalid team");
13:45 < bridge_> <meloƞ>     m_aTeam[ClientId] = Team;
13:45 < bridge_> <meloƞ> }
13:45 < bridge_> <meloƞ> ```
13:45 < bridge_> <heinrich5991> but team 0 isn't "team 0 mode"
13:45 < bridge_> <heinrich5991> team 0 mode is a mode that can be applied to teams other than team 0
13:46 < bridge_> <meloƞ> alright, just wanted clarification before unneccesarily doing work :P ty
13:48 < bridge_> <heinrich5991> ChillerDragon: https://github.com/ddnet/ddnet/pull/5949 needs a (hopefully final) round of reviews?
14:42 < bridge_> <meloƞ> https://github.com/BlaiZephyr/ddnet/commit/9bbe238159bfc655541a9c5b9ad00919fb6ac3b5
14:42 < bridge_> <meloƞ> 
14:42 < bridge_> <meloƞ> what da hell am i missing so it actually gets displayed.. dobry help
14:42 < bridge_> <meloƞ> 
14:42 < bridge_> <meloƞ> also pls rate initial design, i gave it my all
15:01 < bridge_> <ryozuki> https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html
15:04 < bridge_> <learath2> I still can't quite wrap my head around the fact that we are merging a +6k -200 patch to add support for a dead fork. At least the patch seems to mostly be contained within conditionals that we'll never realistically get to remove but atleast can be folded out of the way
15:07 < bridge_> <ryozuki> epyc version
15:20 < bridge_> <heinrich5991> what do you like in particular?
15:20 < bridge_> <ryozuki> the diagnostics
15:20 < bridge_> <ryozuki> new llvm version
15:20 < bridge_> <ryozuki> u128 align is correct now too
15:20 < bridge_> <ryozuki> but specially the diagnostics
15:21 < bridge_> <ryozuki> https://doc.rust-lang.org/stable/reference/attributes/diagnostics.html#the-diagnostic-tool-attribute-namespace
15:21 < bridge_> <heinrich5991> have you seen them used somewhere?
15:21 < bridge_> <heinrich5991> have you seen them used somewhere already?
15:21 < bridge_> <ryozuki> ```
15:21 < bridge_> <ryozuki> #[diagnostic::on_unimplemented(
15:21 < bridge_> <ryozuki>     message = "the size for values of type `{Self}` cannot be known at compilation time",
15:21 < bridge_> <ryozuki>     label = "doesn't have a size known at compile-time"
15:21 < bridge_> <ryozuki> )]
15:21 < bridge_> <ryozuki> pub trait Sized {}
15:21 < bridge_> <ryozuki> ```
15:21 < bridge_> <ryozuki> std uses them
15:21 < bridge_> <ryozuki> for example
15:21 < bridge_> <ryozuki> now you can use them on ur own libs
15:21 < bridge_> <heinrich5991> tbf they already had them before
15:22 < bridge_> <ryozuki> but i think it was std only
15:22 < bridge_> <ryozuki> > Rust now supports a #[diagnostic] attribute namespace to influence compiler error messages. These are treated as hints which the compiler is not required to use, and it is also not an error to provide a diagnostic that the compiler doesn't recognize. This flexibility allows source code to provide diagnostics even when they're not supported by all compilers, whether those are different versions or entirely different implementations.
15:22 < bridge_> <ryozuki> also the debug unsafe assert preconditions
15:22 < bridge_> <ryozuki> seems nice
15:23 < bridge_> <ryozuki> they also did `impl Read for &Stdin`
15:23 < bridge_> <ryozuki> but havent tried it to know how it looks
15:25 < bridge_> <heinrich5991> yea, debug unsafe assert preconditions seem nice
15:25 < bridge_> <heinrich5991> however I saw it leading to not using these functions anymore inside std
15:25 < bridge_> <heinrich5991> because "slow"
15:26 < bridge_> <heinrich5991> sounds bad if you don't even use these functions yourselves
16:26 < bridge_> <zhn> user will be able to make his whitelist if asked everytime
16:32 < bridge_> <zhn> but ping between user and bot is just ping between bot server and discord api server
16:33 < bridge_> <sans._.> no, that's found in client.ws.ping i believe
16:33 < bridge_> <sans._.> with djs at least
16:34 < bridge_> <sans._.> between user and bot is literally how long it took the bot to respond to the user
16:34 < bridge_> <zhn> you should ping bot directly then
16:36 < bridge_> <sans._.> the bot does that yea
16:36 < bridge_> <zhn> how? you need the discord client to run your program to work
16:36 < bridge_> <sans._.> when the user runs a ping command or similar, the bot takes the timestamp of the user's message, sends a new message, and then subtracts the first timestamp from the new message timestamp, and edits that message to display the response time
16:36 < bridge_> <sans._.> it's the most accurate approximation i can do with djs
16:36 < bridge_> <sans._.> idk if there's a better way
16:38 < bridge_> <zhn> but still user doesn't communicate with your bot directly, they do it via discord servers
16:38 < bridge_> <zhn> you actually measure response time between you discord server and user
16:39 < bridge_> <sans._.> could probably use this to offset the result
16:39 < bridge_> <sans._.> then
16:39 < bridge_> <sans._.> idk
16:40 < bridge_> <zhn> routing in world wide network is kinda unpredictable by third party observer
16:41 < bridge_> <zhn> thats why http masterserver doesn't give you any info about ping
16:41 < bridge_> <zhn> if you didn't connect manually
16:42 < bridge_> <furo> Looks great, also the code seems to work for me.
17:16 < bridge_> <Jupstar ✪> no more winter, epyc
17:16 < bridge_> <Jupstar ✪> sounds cool
17:16 < bridge_> <teero777> everyday sauna lets gooo :D
17:18 < bridge_> <Jupstar ✪> @patiga if i might suggest you smth for your lib:
17:18 < bridge_> <Jupstar ✪> 
17:18 < bridge_> <Jupstar ✪> https://docs.rs/virtual-fs/0.11.3/virtual_fs/
17:18 < bridge_> <Jupstar ✪> 
17:18 < bridge_> <Jupstar ✪> https://docs.rs/virtual-fs/0.11.3/virtual_fs/struct.ScopedDirectoryFileSystem.html
17:18 < bridge_> <Jupstar ✪> 
17:18 < bridge_> <Jupstar ✪> it's not really documented and some decisions are a bit weird, but wasmer uses it for their WASI isolation.
17:18 < bridge_> <Jupstar ✪> 
17:18 < bridge_> <Jupstar ✪> I use it now, works quite well
17:19 < bridge_> <patiga> what advantages do you see in using them?
17:20 < bridge_> <Jupstar ✪> it scopes your filesystem operation to the given directory
17:20 < bridge_> <patiga> does it disallow symlinks?
17:21 < bridge_> <Jupstar ✪> if WASI disallows it
17:21 < bridge_> <Jupstar ✪> this should too
17:21 < bridge_> <Jupstar ✪> or only inside that directory
17:23 < bridge_> <meloƞ> weird - because it doesnt for me XD
17:24 < bridge_> <Jupstar ✪> ```
17:24 < bridge_> <Jupstar ✪> cargo clean
17:24 < bridge_> <Jupstar ✪>      Removed 250209 files, 133.7GiB total
17:24 < bridge_> <Jupstar ✪> ```
17:24 < bridge_> <Jupstar ✪> 
17:24 < bridge_> <Jupstar ✪> ah yeah
17:24 < bridge_> <Jupstar ✪> always nice
17:24 < bridge_> <Jupstar ✪> lmao
17:24 < bridge_> <Jupstar ✪> i'll add a test case for my lib and check it
17:26 < bridge_> <patiga> is another advantage that the api would then also work on wasi?
17:26 < bridge_> <Jupstar ✪> i guess it would work on wasi anyway
17:27 < bridge_> <patiga> I would expect that to limit the scope of fs accesses to the ddnet directories, looking out for `..` would be sufficient
17:27 < bridge_> <furo> Are you testing on a LAN server? If you aren't, it won't work because you've done server changes as well.
17:27 < bridge_> <Jupstar ✪> well i dunno if wasi allows reading from a config dir or smth, but i assume it can. maybe it also only allows it in the directory of the exe
17:27 < bridge_> <Jupstar ✪> haven't really read about it
17:27 < bridge_> <patiga> ah does rust with wasi have std::fs?
17:27 < bridge_> <meloƞ> :justatest:
17:28 < bridge_> <Jupstar ✪> yes that is basically the idea
17:28 < bridge_> <patiga> ah nice
17:29 < bridge_> <Jupstar ✪> "Unlike many filesystem APIs, WASI filesystem is capability-oriented. Instead of having functions that implicitly reference a filesystem namespace, WASI filesystems' APIs are passed a directory handle along with a path, and the path is looked up relative to the given handle, and sandboxed to be resolved within that directory."
17:29 < bridge_> <Jupstar ✪> 
17:29 < bridge_> <Jupstar ✪> "WASI filesystem hides some of the surface differences between Windows and Unix-style filesystems, however much of its behavior, including the semantics of path lookup, and the semantics of files, directories, and symlinks, and the constraints on filesystem paths, is host-dependent.
17:30 < bridge_> <Jupstar ✪> 
17:30 < bridge_> <Jupstar ✪> WASI filesystem is not intended to be used as a virtual API for accessing arbitary resources. Unix's "everything is a file" philosophy is in conflict with the goals of supporting modularity and the principle of least authority."
17:30 < bridge_> <Jupstar ✪> https://github.com/WebAssembly/wasi-filesystem?tab=readme-ov-file#non-goals
17:30 < bridge_> <patiga> @jupeyy_keks I managed to get ffmpeg encoding to work with my renderer btw, I can now render to mp4 🎉
17:31 < bridge_> <Jupstar ✪> oh nice, i tried hard to not depend on ffmpeg
17:31 < bridge_> <patiga> (currently using libx264rgb, I'll try to switch to AV12)
17:31 < bridge_> <Jupstar ✪> but i can't get the MKV (webm) lib to work
17:31 < bridge_> <Jupstar ✪> epyc
17:31 < bridge_> <patiga> why is that?
17:32 < bridge_> <Jupstar ✪> currently i only depend on very few c libs:
17:32 < bridge_> <Jupstar ✪> - opus (only for converting legacy maps)
17:32 < bridge_> <Jupstar ✪> - vorbis, no rust encoder implementation yet (also for legacy map converting)
17:32 < bridge_> <Jupstar ✪> - ring, bcs no rust alternative
17:32 < bridge_> <patiga> ah ^^
17:33 < bridge_> <Jupstar ✪> i'd like to keep it.. but yeah if i don't get other stuff to work i'm also open to use ffmpeg 😄
17:33 < bridge_> <patiga> gotta say ffmpeg doesn't hold hands with its error messages, had to get tons of help from a friend with much more experience in encoding
17:38 < bridge_> <patiga> but for video that is enough
17:38 < bridge_> <Jupstar ✪> do you use a ffmpeg binding
17:38 < bridge_> <Jupstar ✪> or a ffmpeg high level library
17:38 < bridge_> <patiga> I use ffmpeg-next
17:38 < bridge_> <patiga> more high-level
17:39 < bridge_> <patiga> although not high-level enough imo
17:39 < bridge_> <patiga> ffmpeg is simply too complicated I guess
17:39 < bridge_> <Jupstar ✪> it is
17:40 < bridge_> <Jupstar ✪> i defs want highest level possible, bcs i feel like the performance gain of doing everything your own is too small when most of the work happens inside ffmpeg anyway
17:40 < bridge_> <patiga> during our degbugging sessions, we already found some (non-critical) bugs in some of the ffmpeg-next functions
17:41 < bridge_> <patiga> return codes that are not bein checked, a return code that is checked not quite right, a parameter that do absolutely nothing
17:41 < bridge_> <patiga> and ofc the absolutely broken example for x264 encoding
17:47 < bridge_> <Jupstar ✪> apparently it does, lmao
17:47 < bridge_> <Jupstar ✪> i did not expect that tbh 😄
17:48 < bridge_> <patiga> same ^^
17:48 < bridge_> <patiga> I do want symlinks to be followed in ddnet dirs tho
17:48 < bridge_> <Jupstar ✪> especially bcs i already added tests for relative path that try to escape the isolation
17:48 < bridge_> <patiga> wait it allows or disallows symlinks]
17:48 < bridge_> <Jupstar ✪> it does allow them
17:48 < bridge_> <patiga> ah
17:49 < bridge_> <patiga> then that was my expected outcome ^^
17:49 < bridge_> <Jupstar ✪> i wonder if wasi generally allows it
17:49 < bridge_> <Jupstar ✪> bcs the sys link cannot be created in first place
17:49 < bridge_> <Jupstar ✪> only by a "real" user
17:51 < bridge_> <Jupstar ✪> i mean it here says it's host-dependent
17:51 < bridge_> <patiga> I'm still unusure what the appeal of virtual_fs is for me, as checking for `..` should be fully sufficient
17:52 < bridge_> <Jupstar ✪> but if u add 3 different open_file version u might accidentially forget it in one
17:53 < bridge_> <Jupstar ✪> with a virtual_fs this cannot happen, except the impl is buggy
17:54 < bridge_> <patiga> yes, thats the advantage I see as well
18:07 < bridge_> <Jupstar ✪> https://docs.rs/virtual-fs/0.11.3/virtual_fs/mem_fs/struct.FileSystem.html
18:07 < bridge_> <Jupstar ✪> 
18:07 < bridge_> <Jupstar ✪> is also neat.
18:07 < bridge_> <Jupstar ✪> 
18:07 < bridge_> <Jupstar ✪> i can now ship my executable without a data dir, since all mount points in my file system implementations are a variant of these virtual_fs file systems
18:07 < bridge_> <Jupstar ✪> esp. nice for android. no need to deal with APK anymore 😬
18:28 < bridge_> <meloƞ> @sedonya my favourite interaction
18:28 < bridge_> <meloƞ> https://cdn.discordapp.com/attachments/293493549758939136/1235629103944564856/image.png?ex=663510c7&is=6633bf47&hm=901b7006931497d985861c82a3d8620c3545890f772e5d96b187352ed5299899&
18:31 < bridge_> <sedonya> Thanks, but the free OpenAI API has run out for the day :owo:
18:31 < bridge_> <sedonya> https://cdn.discordapp.com/attachments/293493549758939136/1235629695970705459/image.png?ex=66351154&is=6633bfd4&hm=fe18bbe8dad21e038d151cf84a053b9294cb835793b6e3d620991e2d4b0f30ad&
18:31 < bridge_> <meloƞ> :crythumbsup:
18:32 < bridge_> <sedonya> But I've already solved that problem, I have many ways around the restrictions 🫡
18:32 < bridge_> <sedonya> https://cdn.discordapp.com/attachments/293493549758939136/1235630060061462579/image.png?ex=663511ab&is=6633c02b&hm=46584aac95465462225a96c463fb394f3a267eea75df5f9a3153bb0db27b2d28&
18:45 < bridge_> <teero777> quick question about naming.
18:45 < bridge_> <teero777> supposing a variable is part of a class, a pointer and static. how do i call it?
18:45 < bridge_> <teero777> `static Foo *msp_Instance;` or
18:45 < bridge_> <teero777> `static Foo *mps_Instance;`
18:45 < bridge_> <zhn> `static Foo *ms_pInstance;` xd
18:45 < bridge_> <teero777> im stpid yoea
18:45 < bridge_> <teero777> sry
18:46 < bridge_> <zhn> oh wait
18:46 < bridge_> <teero777> just noticed
18:46 < bridge_> <zhn> ah you deleted it
18:46 < bridge_> <teero777> yea sry
18:46 < bridge_> <zhn> irc remembers everything :P
18:46 < bridge_> <teero777> xdd
18:51 < bridge_> <teero777> should i prefix member vars of structs also with m_?
18:54 < bridge_> <zhn> i think so
18:54 < bridge_> <meloƞ> Hungarian notation, so i guess? even tho we dont 100% follow that
18:54 < bridge_> <meloƞ> Hungarian notation, so i guess? even tho we dont 100% follow that iirc
20:17 < bridge_> <sedonya> @blaiszephyr ^^
20:17 < bridge_> <sedonya> https://cdn.discordapp.com/attachments/293493549758939136/1235656484243902575/image.png?ex=66352a47&is=6633d8c7&hm=5affeb330de430bb68c5da7e484dbfaaef7356849ac8fe462d999231285fde15&
20:17 < bridge_> <meloƞ> oh thaaaats good
20:55 < bridge_> <learath2> Easily the best part is `Barrier::new()` in const contexts. `impl Read for &Stdin` was surprising, if asked I'd have said it already existed 😄
21:00 < bridge_> <learath2> I'm currently at peak dunning kruger with golang. I suddenly feel very comfortable with it
21:15 < bridge_> <ryozuki> its normal u feel comfy it's meant to be that way
