07:26 < bridge> <chillerdragon> Use ddnet++ it has ddnet + extra features such as rainbow
07:26 < bridge> <chillerdragon> (@„Ç®„Éî„ÉÑ„ÇØ„Ç≤„ÉºÔæè„Éº)
08:48 < bridge> <Learath2> Why would you rewrite the coolest part of the ddnet code? It's ingenious, a macro that immediately makes something allocate in a pool
12:07 < bridge> <gerdoe> not thread safe
12:08 < bridge> <gerdoe> also i can rewrite this into another macro that just uses different pools
12:08 < bridge> <gerdoe> but bruh why would i do that
12:12 < bridge> <Learath2> Not like you can have any useful level of thread safety there without locking
12:14 < bridge> <gerdoe> bro 3 different cserver instances literally used same pools
12:14 < bridge> <gerdoe> like what i supposed to do
12:14 < bridge> <gerdoe> mess up with offsets
12:14 < bridge> <gerdoe> or anything
12:15 < bridge> <gerdoe> anyway its not most wanted thing i want to pr
12:16 < bridge> <Jupstar ‚ú™> not global safe, true story
12:16 < bridge> <gerdoe> ccharacter shouldn't have bidirectional relations with cplayer
12:16 < bridge> <Jupstar ‚ú™> globals suck for instances üòÑ
12:16 < bridge> <gerdoe> cplayer pointer in ccharacter is not even used for ccharacter purposes
12:16 < bridge> <Learath2> This is true, but I don't get what pools have to do with it
12:17 < bridge> <gerdoe> theres handlebroadcast thingie that fully appears to be cplayer method xd
12:17 < bridge> <Learath2> Actually, it might be useful to have a pointer upwards the hierarchy, but it should just be a pointer, nothing more
12:17 < bridge> <gerdoe> yeah pools have nothing to do with this
12:18 < bridge> <gerdoe> just explicit pool is more clear
12:18 < bridge> <Learath2> Lot's of spaghetti everywhere
12:18 < bridge> <gerdoe> client id would be enough
12:26 < bridge> <heinrich5991> cool stuff üòÆ
12:43 < bridge> <heinrich5991> ChillerDragon: no, don't have one right now, sorry
12:50 < bridge> <heinrich5991> ChillerDragon: the rust bridge itself isn't very documented‚Ä¶ given that my goal was to document it, I guess I failed
12:55 < bridge> <Jupstar ‚ú™> üòÑ heinrich reading 1 month of chat again xDD
12:55 < bridge> <Jupstar ‚ú™> wb#+
13:02 < bridge> <heinrich5991> only really on linux, it's the only OS where the syscall layer is stable. on macos, windows, *bsd, it's not, and your code will get broken (as did the go code, it only does the direct syscalls on linux now)
13:07 < bridge> <heinrich5991> it's only unused in 0.7, I think, and I didn't really document 0.7 a lot. packet 7 is documented here: https://github.com/heinrich5991/libtw2/blob/7885c99974ee445ce13297b72ae3e7c6ea3b969d/doc/packet7.md
13:09 < bridge> <Learath2> Dont bsds have the cool syscall compatibility layer for backwards compat?
13:11 < bridge> <heinrich5991> interesting :p
13:12 < bridge> <heinrich5991> hmm. you don't pay for that multiplication? that's weird‚Ä¶ üòÆ
13:18 < bridge> <Jupstar ‚ú™> will u also read all #off-topic msgs üòÅ
13:18 < bridge> <heinrich5991> ChillerDragon: if I don't group the int with the data, the packet wouldn't know how long it is. treat it as a "data with specified size" üôÇ
13:20 < bridge> <heinrich5991> that's not legal, you can ping me if it happens again
13:31 < bridge> <Jupstar ‚ú™> MICROSOFT
13:31 < bridge> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1097122012679376957/image.png
13:31 < bridge> <Jupstar ‚ú™> the same as last time it was down xD
13:31 < bridge> <murpi> Naughty Jupstar
13:36 < bridge> <heinrich5991> cool stuff üòÆ must be hard finding renderings that are *slightly* off but still look nice
13:43 < bridge> <heinrich5991> oof. is it bad if I want to watch that video?
13:44 < bridge> <heinrich5991> ah, here
13:44 < bridge> <heinrich5991> the network stuff is being worked on‚Ä¶ slowly
13:52 < bridge> <heinrich5991> hi o/
13:52 < bridge> <heinrich5991> no, only for compat with linux, I think
13:52 < bridge> <heinrich5991> done \o/
13:53 < bridge> <Learath2> https://wiki.freebsd.org/AddingSyscalls#Backward_compatibily
13:53 < bridge> <Learath2> Afaik they take atleast backward compat very seriously aswell
14:13 < bridge> <heinrich5991> interesting. I wonder where I got my impression from
14:13 < bridge> <heinrich5991> perhaps some other bsd?
14:15 < bridge> <Ryozuki> macos is bsd derived right
14:16 < bridge> <heinrich5991> yes, but I didn't mean macos
14:16 < bridge> <heinrich5991> I think
14:16 < bridge> <Jupstar ‚ú™> in my entire life, i've never seen heinrichs status to be online instead of busy
14:17 < bridge> <heinrich5991> https://github.com/golang/go/issues/36435
14:17 < bridge> <heinrich5991> I set it to busy because it mutes the sounds discord makes
14:17 < bridge> <heinrich5991> there's probably a better way ^^
14:17 < bridge> <Ryozuki> https://news.ycombinator.com/item?id=35588997
14:17 < bridge> <Jupstar ‚ú™> i muted the whole server üòÑ
14:17 < bridge> <heinrich5991> too many discords, can't mute everything
14:18 < bridge> <Jupstar ‚ú™> i c
14:18 < bridge> <Ryozuki> i dont c
14:18 < bridge> <Ryozuki> i rust
14:46 < bridge> <Learath2> I mute when I join
14:53 < bridge> <gerdoe> mobile discord can't get me to old messages heinrich referring to xd
15:29 <+ChillerDragon> had to switch to fakin matrix to deciper all reply cuz irc aint doing any ._. but this still seems off. How does this look on discord? https://zillyhuhn.com/cs/.1681651712.png
15:30 < bridge> <Learath2> It's a post with an attachment
15:30 < bridge> <Learath2> https://cdn.discordapp.com/attachments/293493549758939136/1097152070768922644/image0.jpg
15:30 <+ChillerDragon> tap
15:30 <+ChillerDragon> tap
15:30 <+ChillerDragon> tap
15:32 <+ChillerDragon> yo @heinrich5991 check out this readme. You like uwu? https://gitlab.com/teeworlds-network/twnet_parser/-/tree/master/examples/print_pcap_files
15:32 <+ChillerDragon> notice me senpaiii
15:35 <+ChillerDragon> @Jupstar ‚ú™ ms so broken jopsti we need to switch to gitlab hehe
15:39 <+ChillerDragon> @Jupstar ‚ú™ also jopsti my ai proxy can u generate some documentation for heinrichs rust code make a pr which forces him to reply with whats wrong feed that back to ai and update pr ok? this guy is rly scared of readmes somehow
15:39 < bridge> <jao> :justatest:
15:39 <+ChillerDragon> jao!
15:39 <+ChillerDragon> henlo u still alive?
15:39 <+ChillerDragon> long time no see
15:40 < bridge> <Learath2> OMG it's jao again
15:40 <+ChillerDragon> u still got the magnet with cig profile pic on discord?
15:46 < bridge> <DefaultO> he got a smiling man as his pfp
15:46 < bridge> <DefaultO> if you meant jao
15:48 < bridge> <Jupstar ‚ú™> lol
15:50 <+ChillerDragon> yes did mean jao hm sad
15:50 <+ChillerDragon> @heinrich5991 now u back ill ping u all day again :p any reason there are no message flags in the json? I would really like to see which message is vital in here https://github.com/heinrich5991/libtw2/blob/7885c99974ee445ce13297b72ae3e7c6ea3b969d/gamenet/generate/spec/teeworlds-0.7.5.json
15:51 < bridge> <Jupstar ‚ú™> he's gone already again
15:51 <+ChillerDragon> fk
15:51 <+ChillerDragon> where does he even go
15:51 < bridge> <Jupstar ‚ú™> maybe he has a social life
15:51 <+ChillerDragon> wtf
15:51 < bridge> <Jupstar ‚ú™> ikr
16:06 < bridge> <Learath2> Typical grass toucher
17:28 <+ChillerDragon> @Learath2 lerato! daily paiton trivia!!!!!!!!!!!!!!!!! syntax erro or no?
17:28 <+ChillerDragon> https://zillyhuhn.com/cs/.1681658866.png
17:30 < bridge> <Jupstar ‚ú™> show selection
17:30 <+ChillerDragon> wot is selection?
17:31 < bridge> <Jupstar ‚ú™> mark the text xd
17:31 < bridge> <Learath2> Hm, are those tabs or spaces or wat
17:31 <+ChillerDragon> u want vims set list?
17:31 <+ChillerDragon> spaces
17:31 <+ChillerDragon> https://zillyhuhn.com/cs/.1681659093.png
17:32 <+ChillerDragon> selecztion just all wite in ma terminallo
17:32 <+ChillerDragon> sec ima boot the electron. But dont try it out ! use pyton brain no cheating in trivia or ban
17:32 < bridge> <Learath2> Assuming all just regular whitespaces. Methinks it's a syntax error
17:32 < bridge> <chillerdragon> ```python
17:32 < bridge> <chillerdragon> def foo():
17:32 < bridge> <chillerdragon>     print('indentation'); \
17:33 < bridge> <chillerdragon>    print('matters')
17:33 < bridge> <chillerdragon>     print(\
17:33 < bridge> <chillerdragon>             1, \
17:33 < bridge> <chillerdragon>     2, \
17:33 < bridge> <chillerdragon>                               22, \
17:33 < bridge> <chillerdragon>             3)
17:33 < bridge> <chillerdragon> 
17:33 < bridge> <chillerdragon> foo()
17:33 < bridge> <chillerdragon> 
17:33 < bridge> <chillerdragon> ```
17:33 < bridge> <Learath2> But only god himself knows what flavour of glue people were sniffing while they made python
17:33 < bridge> <Learath2> So maybe it does compile so granny can also code
17:33 <+ChillerDragon> no syntax error because \ escapes the newline essentially putting it all in one line and spaces in between stuff in one line is legal
17:33 <+ChillerDragon> https://zillyhuhn.com/cs/.1681659022.png
17:33 <+ChillerDragon> so if you escape the end of the line you can indent like a meth head
17:33 < bridge> <Learath2> Oh I didn't even see the \
17:33 < bridge> <Learath2> I blame phon
17:36 <+ChillerDragon> python* u dislexic fk
17:41 <+ChillerDragon> https://zillyhuhn.com/cs/.1681659657.png
17:41 <+ChillerDragon> allows for smooth line shortening xd
17:45 < bridge> <Jupstar ‚ú™> pls chillerdragon
17:45 < bridge> <Jupstar ‚ú™> reading python hurts
17:45 <+ChillerDragon> axaxaxax
17:46 <+ChillerDragon> ill be bak tomorow with more trivia for py fan lerato
17:49 < bridge> <Jupstar ‚ú™> lets face it chillerdragores.. this is more awesome:
17:49 < bridge> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1097187052715507804/ez.mp4
17:50 < bridge> <Jupstar ‚ú™> satisfying not having to care about code style
17:50 <+ChillerDragon> eww auto format makes me nervous
17:51 <+ChillerDragon> i love running ./scripts/fix_style.py tho. Agree typing like a crack head and then running formatter is amazing!
17:51 < bridge> <Jupstar ‚ú™> i do that pretty often actually üòÑ
17:51 <+ChillerDragon> same here
17:52 <+ChillerDragon> i made so many style mistakes getting a red ci that i had to run it anyways
17:52 <+ChillerDragon> so if i have to run it why care about style in the first place xd
17:52 < bridge> <Jupstar ‚ú™> epic
17:53 <+ChillerDragon> jupeyy/Schreibtisch
17:53 <+ChillerDragon> omg :beer: :de: :prezel: 
17:58 <+ChillerDragon> wait isnt that trol? https://github.com/ddnet/ddnet/blob/a36e81532f1256ab9ae499f3dbe7157aa92dfd98/src/engine/shared/network.cpp#L327
17:58 <+ChillerDragon> ah no nvm xd
17:59 <+ChillerDragon> thought for a sec that some madlad did & 0xff on a unsigned char but its on sequence which is a 4 byte int so all good i guess
17:59 <+ChillerDragon> bits break my head
18:00 <+ChillerDragon> this is basically saying gimme one byte from this 4 byte int right?
18:01 <+ChillerDragon> assuming its a sane system where ints are 4 bytes 
18:02 < bridge> <Jupstar ‚ú™> ^^ pro organization
18:08 < bridge> <Chairn> code is valid
18:09 <+ChillerDragon> todays medal goes to mr chair
18:09 < bridge> <Chairn> useful when braking long line string or simply long if conditions
18:09 <+ChillerDragon> https://zillyhuhn.com/cs/.1681661378.png
18:09 < bridge> <Chairn> you can also just use return when inside function
18:09 < bridge> <Chairn> without the need for \
18:10 < bridge> <Chairn> you have a mouse in your appartment sir @ChillerDragon.*
18:10 <+ChillerDragon> wot
18:10 <+ChillerDragon> a
18:10 <+ChillerDragon> now i get it
18:10 <+ChillerDragon> good one xd
18:16 < bridge> <Chairn> python trivia: is this valid code? if yes, what does it print?
18:16 < bridge> <Chairn> ```python
18:16 < bridge> <Chairn> a = [1,2,3,4,56]
18:16 < bridge> <Chairn> print(*a)
18:16 < bridge> <Chairn> ```
18:16 <+ChillerDragon> u forgot to ping lerato he really likes it
18:17 < bridge> <Jupstar ‚ú™> is this some kind of for all?
18:17 <+ChillerDragon> maybe it prints every number on a new line? xd
18:18 < bridge> <Jupstar ‚ú™> SHIT i dont want to learn anything about python
18:18 <+ChillerDragon> wait no space seperated
18:18 < bridge> <Jupstar ‚ú™> https://tenor.com/view/harry-potter-dumbledore-pensieve-magic-gif-17242310
18:19 <+ChillerDragon> i think it evaluates to ``print(1,2,3..)``
18:19 <+ChillerDragon> which would print space seperated
18:19 < bridge> <Chairn> it does üôÇ
18:19 < bridge> <Learath2> I'd guess it's valid and the output is `1 2 3 56`
18:19 <+ChillerDragon> ez
18:19 < bridge> <Learath2> 4 too
18:19 < bridge> <Chairn> wrong
18:19 <+ChillerDragon> wot
18:19 < bridge> <Chairn> output is 1 2 3 4 56 üòÑ
18:19 <+ChillerDragon> wow
18:19 <+ChillerDragon> trol
18:19 < bridge> <Chairn> my parser is inflexible
18:19 < bridge> <Learath2> Yeyeye whatever, am on phon
18:19 <+ChillerDragon> xd
18:20 < bridge> <Chairn> same question now:
18:20 < bridge> <Chairn> ```python
18:20 < bridge> <Chairn> a = {1 : "hello", "world": 2}
18:20 < bridge> <Chairn> print(**a)
18:20 < bridge> <Chairn> ```
18:20 <+ChillerDragon> bro its 50/50
18:20 <+ChillerDragon> i say it prints 1 world
18:20 < bridge> <Jupstar ‚ú™> @Ryozuki https://www.reddit.com/r/rust/comments/12hlshh/introducing_zunepng_extremely_fast_png_decoding/
18:20 < bridge> <Jupstar ‚ú™> 
18:20 < bridge> <Jupstar ‚ú™> that's the reason png crate got so much faster xd
18:21 < bridge> <Jupstar ‚ú™> "The maintainers of png crate are looking to integrate some of these optimizations, and have also been working on performance improvements to the png crate independently from this effort. The initial results are really promising, although there is more work to be done.
18:21 < bridge> <Jupstar ‚ú™> 
18:21 < bridge> <Jupstar ‚ú™> If this work pans out, the png crate will become nearly as fast as zune-png. Exciting times!"
18:21 < bridge> <Chairn> nah, it's syntax valid code, but exception at runtime
18:21 <+ChillerDragon> put rust stuff in #off-topic this is a python channel!
18:21 < bridge> <Chairn> *a would print 1 world
18:21 <+ChillerDragon> o
18:21 < bridge> <Chairn> **a passes dictionnary as keyword to function
18:21 < bridge> <Jupstar ‚ú™> chillerwagon pls
18:21 <+ChillerDragon> hihi litle prenk jopsti
18:22 < bridge> <Chairn> so it's equivalent to
18:22 < bridge> <Chairn> ```python
18:22 < bridge> <Chairn> print(1=hello, world=2)
18:22 < bridge> <Chairn> ```
18:22 <+ChillerDragon> so it fails bcs 1 is illegal var name?
18:22 <+ChillerDragon> interesting
18:22 <+ChillerDragon> ye i never used the star thingy maybe i should do now to flex
18:23 < bridge> <Chairn> it passes dict key as keyword to function, so you can have global dict options and passes it to every function you use with **myglobaloptions
18:23 < bridge> <Chairn> especially useful in big frameworks such as numpy, tensorflow and matplotlib
18:23 <+ChillerDragon> neat
18:23 < bridge> <Learath2> ```py
18:23 < bridge> <Learath2> num = 10
18:23 <+ChillerDragon> i really like the named options in python
18:23 < bridge> <Learath2> print(--num)
18:23 < bridge> <Learath2> ```
18:23 <+ChillerDragon> 10?
18:23 < bridge> <Chairn> yup, double minus operator
18:24 < bridge> <Chairn> there's no -- operator in python
18:24 < bridge> <Chairn> neither ++
18:24 <+ChillerDragon> so its just 10 right?
18:24 <+ChillerDragon> lerato reveal!
18:24 <+ChillerDragon> or riot
18:25 < bridge> <Chairn> it is 10
18:26 <+ChillerDragon> ``git push -fvfvfvfvvfvfvf`` git arg error or no?
18:26 < bridge> <Learath2> 10
18:27 <+ChillerDragon> ez
18:27 < bridge> <Learath2> Ok, I can think of one more
18:27 < bridge> <Learath2> ```py
18:27 < bridge> <Learath2> a, b = 257, 257
18:27 < bridge> <Learath2> print(a is b)
18:27 < bridge> <Learath2> ```
18:27 <+ChillerDragon> True
18:28 < bridge> <Learath2> ```py
18:28 < bridge> <Learath2> a = 257
18:28 < bridge> <Learath2> b = 257
18:28 < bridge> <Learath2> print(a is b)
18:28 < bridge> <Learath2> ```
18:28 < bridge> <Learath2> How about this one?
18:28 <+ChillerDragon> True
18:28 < bridge> <Learath2> Anyone else want to try?
18:29 <+ChillerDragon> sounds like im wrong then xd
18:29 < bridge> <Learath2> Who knows? I want to let others try too
18:30 <+ChillerDragon> u got a quiz show or sumsin?
18:30 <+ChillerDragon> quality moderation
18:30 < bridge> <Chairn> False
18:30 < bridge> <Chairn> works only until 255 i think
18:30 <+ChillerDragon> wtf
18:30 < bridge> <Chairn> all 8-bit numbers are shared in python
18:30 <+ChillerDragon> thats cursed
18:31 < bridge> <Chairn> i dont remember the reasoning behind this
18:31 <+ChillerDragon> holy shit this could cause some major debugging brain damage
18:31 <+ChillerDragon> xd
18:31 <+ChillerDragon> worked until 255 xxxxxxxxxxxxxD
18:31 < bridge> <Chairn> oh you tried the code?
18:31 < bridge> <Chairn> you cheater !!!
18:31 <+ChillerDragon> after u said it
18:32 <+ChillerDragon> i checked 0
18:32 <+ChillerDragon> and it true while 257 is false
18:32 <+ChillerDragon> so i believed u
18:32 < bridge> <Chairn> 256 is true or false?
18:32 < bridge> <Chairn> i think it's false
18:32 < bridge> <Chairn> 255 should be last true
18:32 <+ChillerDragon> true
18:32 < bridge> <Chairn> damn, so all 8-bit + 256 üòÑ
18:32 <+ChillerDragon> 256 is last cuz trol
18:33 <+ChillerDragon> i guess u spoiled leratos follow up
18:33 < bridge> <Chairn> little useless trivia, what's the sizeof of an int in python?
18:33 <+ChillerDragon> it was a 3 step master piece trivia
18:33 <+ChillerDragon> 4?
18:33 <+ChillerDragon> or maybe something dynamic
18:34 <+ChillerDragon> i know py can do big numbers
18:34 < bridge> <Learath2> Funnily enough first one will be True and the second one will be False due to the reason Chairn gave
18:34 < bridge> <Jupstar ‚ú™> inifinite
18:34 < bridge> <Jupstar ‚ú™> its a string
18:34 <+ChillerDragon> xd
18:34 <+ChillerDragon> chairn rly py pro
18:34 <+ChillerDragon> ngl
18:34 < bridge> <Learath2> Some tuple unpacking optimization makes the first onw work out, atleast in the CPython version I used
18:34 < bridge> <Jupstar ‚ú™> the best part about python is, that u can uninstall it
18:35 <+ChillerDragon> i use Jython bcs jvm so nice im a tru java fan
18:35 < bridge> <Jupstar ‚ú™> xD
18:35 < bridge> <Jupstar ‚ú™> java + python
18:35 < bridge> <Jupstar ‚ú™> awesome
18:35 < bridge> <Chairn> yes, they are dynamic cuz they can represent all numbers
18:35 < bridge> <Chairn> but default size is 28 bytes
18:35 < bridge> <Jupstar ‚ú™> wat
18:35 <+ChillerDragon> i know its a meme but somehow these bloat languages somehow beat c implentation in some benchmarks
18:35 < bridge> <Jupstar ‚ú™> thats huge
18:35 < bridge> <Jupstar ‚ú™> and a random number
18:35 <+ChillerDragon> jopsti there is pypy its python written in python and its faster than python in c
18:35 <+ChillerDragon> xd
18:36 < bridge> <Learath2> Isn't this still all up to the implementation?
18:36 < bridge> <Chairn> in Cpython then
18:36 < bridge> <Chairn> not sure about others
18:36 < bridge> <Jupstar ‚ú™> how does that even work chiller
18:36 <+ChillerDragon> also there is truffleruby which is ruby in java instead of in c which also is faster
18:36 <+ChillerDragon> idk
18:36 < bridge> <Jupstar ‚ú™> python in python but what runs python?
18:36 <+ChillerDragon> i only red there marketing heading
18:36 <+ChillerDragon> and rq
18:36 <+ChillerDragon> https://www.pypy.org/
18:36 < bridge> <Chairn> but they need a way to represent all integers numbers and detect overflow, so they should all be bigger than 8 bytes
18:36 < bridge> <Jupstar ‚ú™> python-ception
18:36 <+ChillerDragon> > On average, PyPy is 4.8 times faster than CPython 3.7
18:36 < bridge> <Ryozuki> there is rustpython
18:37 <+ChillerDragon> wait
18:37 <+ChillerDragon> no pypy might be not python
18:37 < bridge> <Chairn> JIT, so it's asm-python in real time üòÑ
18:37 <+ChillerDragon> its RPython languzage xd
18:37 <+ChillerDragon> ok that might be false info
18:37 < bridge> <Jupstar ‚ú™> isnt there a compiler actually
18:37 < bridge> <Jupstar ‚ú™> cant remember the name
18:37 < bridge> <Jupstar ‚ú™> but there was one
18:37 < bridge> <Learath2> How is pypy a thing even? Do they just run on an instance of cpython?
18:37 <+ChillerDragon> > 
18:37 <+ChillerDragon>     TruffleRuby is the fastest Ruby implementation for many CPU-intensive benchmarks.
18:38 <+ChillerDragon> https://github.com/oracle/truffleruby
18:38 <+ChillerDragon> ruby in the jvm claims to outperform ruby written in c
18:39 < bridge> <Jupstar ‚ú™> they all claim stuff
18:39 <+ChillerDragon> ikr
18:39 <+ChillerDragon> xd
18:39 < bridge> <Jupstar ‚ú™> i only trust the benchmark game
18:39 < bridge> <Jupstar ‚ú™> for highly optimized almost assembler code that nobody can read xD
18:40 <+ChillerDragon> i should really replace my system cpython with jython just for the memes
18:40 < bridge> <Learath2> This is quite bizarre actually
18:40 <+ChillerDragon> yes it is
18:40 < bridge> <Learath2> But it's probably just the fact that the JVM has decades of work done on it
18:40 <+ChillerDragon> tru vs this new C language thing
18:41 < bridge> <Learath2> While who even uses Ruby except github and the couple others that got scammed around the time ruby became a thing
18:41 <+ChillerDragon> xd
18:41 <+ChillerDragon> not many
18:41 < bridge> <Jupstar ‚ú™> chiller used it
18:41 < bridge> <Jupstar ‚ú™> he got scammed
18:41 <+ChillerDragon> i tru github fan
18:41 <+ChillerDragon> so i gotta
18:41 < bridge> <Ryozuki> use rust
18:41 <+ChillerDragon> ok
18:42 < bridge> <Learath2> Use C
18:42 <+ChillerDragon> is there a rust compiler written in java?
18:42 < bridge> <Jupstar ‚ú™> man who still uses java in 2023
18:42 < bridge> <Learath2> Currently the only "complete" implementation of Rust is the llvm one
18:42 < bridge> <Jupstar ‚ú™> stop
18:42 < bridge> <Learath2> Companies love it still for some reason
18:42 <+ChillerDragon> then i can not use it sorry
18:42 <+ChillerDragon> i need my java
18:42 < bridge> <Ryozuki> java 19
18:42 < bridge> <Learath2> Corporations biggest Java shills
18:42 <+ChillerDragon> can rust do sharding?
18:43 < bridge> <Ryozuki> they actually giving faster pace to java dev
18:43 < bridge> <Jupstar ‚ú™> even they now only use typescript & c# for new projects, dont they xd
18:43 < bridge> <Learath2> But is it web scale?
18:43 <+ChillerDragon> xd
18:43 < bridge> <Ryozuki> the best db is dev null
18:43 < bridge> <Ryozuki> dev random also has all the data
18:43 < bridge> <Chairn> dev urandom master race
18:43 < bridge> <Chairn> don't use dev random
18:43 < bridge> <Chairn> never
18:44 < bridge> <Ryozuki> i forgot the device name
18:44 < bridge> <Ryozuki> dont kill me
18:44 < bridge> <Learath2> They keep making weird ts and c# frontends for their ancient java backends that are just bridges to some COBOL and FORTRAN running on an IBM mainframe in some datacenter god himself forgot
18:44 < bridge> <Chairn> i wont
18:44 < bridge> <Chairn> your user will
18:44 <+ChillerDragon> urandom?
18:44 < bridge> <Chairn> /dev/random is blocking file
18:44 < bridge> <Chairn> /dev/urandom is non blocking
18:44 < bridge> <Jupstar ‚ú™> xd but tru
18:44 < bridge> <Jupstar ‚ú™> u random dev
18:44 < bridge> <Ryozuki> nasa has fallen into that
18:44 <+ChillerDragon> ``cat /dev/urandom`` make funi gnome sounds
18:44 < bridge> <Ryozuki> ja interfaces
18:45 < bridge> <Chairn> if you try `xxd /dev/random` it will hang immediately
18:45 < bridge> <Ryozuki> js
18:45 <+ChillerDragon> what will hang?
18:45 <+ChillerDragon> xxd?
18:45 < bridge> <Chairn> xxd
18:45 <+ChillerDragon> or everything?
18:45 < bridge> <Chairn> because it cannot read
18:45 <+ChillerDragon> ok borin
18:45 < bridge> <Ryozuki> xkcd
18:45 <+ChillerDragon> what happens if one does ``chsh -s /dev/random`` ?
18:46 < bridge> <Ryozuki> is there a xkcd about xkcd
18:46 <+ChillerDragon> settin login shell to /dev/random instead something like /bin/bash
18:46 <+ChillerDragon> can someone try? thanks
18:46 <+ChillerDragon> xd
18:47 <+ChillerDragon> holy shit i do not know what it does might be equivalent to rm -rf / pls dont run the cmd i sent ._.
18:47 < bridge> <Chairn> probably nothing
18:48 <+ChillerDragon> im pretty sure its bad
18:48 < bridge> <Chairn> you cant execute /dev/random anyway
18:48 <+ChillerDragon> yea and if you can not execute your login shell wat do u do?
18:48 <+ChillerDragon> xd
18:50 < bridge> <Chairn> you boot in single mode
18:50 < bridge> <Chairn> or you ssh as root
18:50 < bridge> <Chairn> i believe there's a fallback shell anyway
18:51 <+ChillerDragon> i wouldnt wanna test it on any machine i own xd
18:51 <+ChillerDragon> but yea adding a tmp user seems safish
18:53 < bridge> <Ryozuki> chiller make ur own fake shell thats a honeypot
18:53 < bridge> <Ryozuki> and only u know how to bypass
18:54 <+ChillerDragon> as main entrance? that i use all the time?
18:54 <+ChillerDragon> sounds fun
18:54 <+ChillerDragon> if you can bypass its not really a honeypot is it?
18:55 < bridge> <Ryozuki> it is
18:55 < bridge> <Ryozuki> cuz u knownit
18:56 < bridge> <Ryozuki> its for others
18:56 < bridge> <Ryozuki> ur mom
18:56 <+ChillerDragon> my mom? xd
18:57 <+ChillerDragon> you mean locally on my device everytime on terminal boot? oof i thought u meant in ssh in case someone cracks my pass
18:57 <+ChillerDragon> on a vps
18:57 <+ChillerDragon> you mean a honeypot screen locker?
18:57 <+ChillerDragon> heinrich has a cool one :) i hope he doesnt kill me that i leaked it xd ask him for details i guess
19:19 < bridge> <Jupstar ‚ú™> he is online again
19:19 < bridge> <Jupstar ‚ú™> now u can ask your questions
19:19 < bridge> <Jupstar ‚ú™> chillerdragon
19:26 <+ChillerDragon> xd
19:26 <+ChillerDragon> jpstr new discord online status bot
19:27 < bridge> <Jupstar ‚ú™> Don't you remember? I am your personal assistant
19:27 <+ChillerDragon> thats new
19:27 <+ChillerDragon> i only remember you being: my lawyer, my financial advisor, my ai proxy
19:28 < bridge> <Jupstar ‚ú™> you did the !help command
19:29 < bridge> <Jupstar ‚ú™> can i trigger your command btw?
19:29 < bridge> <Jupstar ‚ú™> !help
19:29 < bridge> <Jupstar ‚ú™> apparently not
19:29 <+ChillerDragon> hehe no
19:29 <+ChillerDragon> it check if chiler
19:29 <+ChillerDragon> !help
19:29 < chillerbot> https://github.com/ChillerDragon/ddnet-bot-irc eth0=192.168.178.22 commands: !mods
19:29 <+ChillerDragon> ah wait help u can trigger
19:29 <+ChillerDragon> but not from bridge
19:30 <+ChillerDragon> i gotta add bridge support soooon
19:31 < bridge> <heinrich5991> permalink: https://gitlab.com/teeworlds-network/twnet_parser/-/tree/e3411f7f989530b2ed1317ac2557f52418db627a/examples/print_pcap_files (apparently gitlab doesn't support 'y' on directories, apparently)
19:31 < bridge> <heinrich5991> that looks cool üôÇ
19:31 <+ChillerDragon> also noticed that
19:31 <+ChillerDragon> so i rq on the perma link
19:31 <+ChillerDragon> also heinrich for sure is a perma link bot xd
19:32 < bridge> <heinrich5991> ChillerDragon: could probably try to add that, with the rule "only non-vital if input or snap"
19:33 <+ChillerDragon> oh i see
19:33 <+ChillerDragon> seems reasonable
19:33 <+ChillerDragon> is that for both game and system?
19:33 <+ChillerDragon> still would be cool in the json wouldn't it?
19:35 < bridge> <heinrich5991> `1 2 3 4 56`, no?
19:35 <+ChillerDragon> idk how did u check?
19:35 <+ChillerDragon> also what
19:35 <+ChillerDragon> a
19:35 <+ChillerDragon> omg
19:36 <+ChillerDragon> 56 is not even a message id xd
19:36 <+ChillerDragon> its a reply
19:36 <+ChillerDragon> fakin irc
19:36 < bridge> <heinrich5991> I'd guess invalid?
19:36 <+ChillerDragon> trivia enjoyer
19:37 < bridge> <heinrich5991> `True`
19:37 < bridge> <heinrich5991> `False`
19:37 < bridge> <heinrich5991> in cpython
19:38 <+ChillerDragon> !ping
19:38 < chillerbot> pong
19:38 <+ChillerDragon> jopsti try
19:38 <+ChillerDragon> 10% chance it doesnt crash xd
19:39 < bridge> <Jupstar ‚ú™> !ping
19:39 <+ChillerDragon> hm it added space
19:39 <+ChillerDragon> i see
19:39 <+ChillerDragon> sec
19:39 <+ChillerDragon> re
19:40 < bridge> <chillerdragon> !ping
19:40 < bridge> <chillerdragon> forgot to restart xd
19:40 < bridge> <chillerdragon> !ping
19:40 < bridge> <Jupstar ‚ú™> !ping
19:40 < bridge> <Jupstar ‚ú™> !help
19:41 <+ChillerDragon> i think it stuck 
19:41 < bridge> <Jupstar ‚ú™> pro coder live
19:41 <+ChillerDragon> banned by quakenet xd
19:41 < bridge> <Learath2> Now the same question but `s/257/256/g`
19:41 <+ChillerDragon> doesnt he read all in order so he gets spoiled anyways
19:42 < bridge> <heinrich5991> 256 is small enough already? thought it's 255
19:42 <+ChillerDragon> yes thats the trol
19:42 < bridge> <heinrich5991> but the way you ask the question makes me think it's `True True`
19:43 < bridge> <Cellegen | RiH> a = 20
19:43 < bridge> <Cellegen | RiH> b = 4 * 5
19:43 < bridge> <Cellegen | RiH> print(a is b)
19:43 < bridge> <Cellegen | RiH> 
19:43 < bridge> <Cellegen | RiH> true or false :lol:
19:43 < bridge> <heinrich5991> (cpython)
19:43 < bridge> <Learath2> Yep it is small enough already
19:43 < bridge> <heinrich5991> `True` (cpython)
19:43 < bridge> <Cellegen | RiH> :justatest:
19:43 < bridge> <Cellegen | RiH> I'm afraid I have to say it's false tho
19:43 < bridge> <heinrich5991> fun begins when you mess with the cached values of the small integers btw
19:44 < bridge> <Cellegen | RiH> it's because of variable identification, one is 20, but the other one is a calculation
19:44 < bridge> <Learath2> Are you sure? I'm also pretty certain that's True in cpython
19:44 < bridge> <heinrich5991> ```py
19:44 < bridge> <heinrich5991> >>> a = 20
19:44 < bridge> <heinrich5991> >>> b = 4 * 5
19:44 < bridge> <heinrich5991> >>> print(a is b)
19:44 < bridge> <heinrich5991> True
19:44 < bridge> <heinrich5991> ```
19:44 < bridge> <chillerdragon> !ping
19:44 < chillerbot> pong
19:44 <+ChillerDragon> ez
19:44 < bridge> <Jupstar ‚ú™> !help
19:44 < chillerbot> https://github.com/ChillerDragon/ddnet-bot-irc eth0=192.168.178.22 commands: !mods
19:44 < bridge> <heinrich5991> (CPython 3.10.10)
19:45 <+ChillerDragon> if mods works im in trouble xd
19:45 < bridge> <heinrich5991> have you tried it? ^^
19:45 < bridge> <Souly> itsabot
19:45 <+ChillerDragon> no proof
19:45 < bridge> <Learath2> If the result is greater than 256 then you do run into troubl
19:46 < bridge> <Cellegen | RiH> It doesn't even let me, because the variable cannot be used for "is" while it is a calculation
19:46 <+ChillerDragon> wait i found a loophole aa
19:46 < bridge> <Cellegen | RiH> :YEP:
19:46 < bridge> <Cellegen | RiH> sometimes I love gdscript
19:46 < bridge> <heinrich5991> can you show the error message and what your input is?
19:46 < bridge> <Cellegen | RiH> https://cdn.discordapp.com/attachments/293493549758939136/1097216575901286430/image.png
19:47 < bridge> <heinrich5991> ah, godot script
19:47 < bridge> <Learath2> We are talking about python
19:47 < bridge> <Cellegen | RiH> it's weird, in C++ is it the same?
19:48 < bridge> <Cellegen | RiH> gdscript is a combination of C++ with python structure
19:49 <+ChillerDragon> wat u buildin
19:49 < bridge> <heinrich5991> C++ doesn't really have `is`
19:49 < bridge> <Cellegen | RiH> https://cdn.discordapp.com/attachments/293493549758939136/1097217330435588096/image.png
19:49 < bridge> <Cellegen | RiH> Oh
19:50 < bridge> <Jupstar ‚ú™> Oo sounds horrible xd
19:50 < bridge> <Cellegen | RiH> I'm building an extension, which Godot fucking needs, because it lacks features
19:51 < bridge> <chillerdragon> ok but for what do you need the extension wat u building in godot?
19:51 < bridge> <Cellegen | RiH> Including a proper character, more advanced functions which is really just regular functions and other neat tricks which Godot enables me to do
19:51 < bridge> <Cellegen | RiH> I'm building a plugin, which you can use to improve your game dev
19:51 < bridge> <Cellegen | RiH> Nothing fancy, but I didn't see anybody do it, so I'll do it
19:52 < bridge> <Cellegen | RiH> Yeah a little :kek: 
19:52 < bridge> <Cellegen | RiH> But it's managable since the IDE is highly flexible with scripts
19:52 < bridge> <Cellegen | RiH> Yeah a little :kek: 
19:52 < bridge> <Cellegen | RiH> But it's manageable since the IDE is highly flexible with scripts
19:53 < bridge> <Cellegen | RiH> It has limitations and missing features, but it's a good engine regardless üôÇ
21:01 < bridge> <Ryozuki> i wonder how hard it is to make a python interpreter
21:01 < bridge> <Ryozuki> the lowered python is not that complicated maybe
21:16 <+ChillerDragon> ryo being bold
21:47 < bridge> <Devinci> ```pub fn rgb2gray(&self) -> [f32; 256*256] {
21:47 < bridge> <Devinci>         let mut gray_pixels: [f32; 256*256] = [0.0; 256*256];
21:48 < bridge> <Devinci>         gray_pixels
21:48 < bridge> <Devinci> } ```
21:48 < bridge> <Devinci> 
21:48 < bridge> <Devinci> @Ryozuki I got a question for you. In rust, where is gray_pinxels allocated? And if it's on the stack, how come you can use it outside of this function scope?
21:51 < bridge> <Ryozuki> stack and moved
21:51 < bridge> <Ryozuki> also that mut is useless
21:51 < bridge> <Devinci> I removed some code
21:52 < bridge> <Ryozuki> but yeah ur doing a copy
21:52 < bridge> <Devinci> But thanks
21:52 < bridge> <Ryozuki> https://doc.rust-lang.org/rust-by-example/scope/move.html
22:59 < bridge> <frank456> "I'll help anyone interested on how to earn 100k in just 24hours  from the crypto market. But you will have to pay me my commission! when you receive your profit! if interested send me a direct message https://t.me/victormarck by asking me HOW
23:08 < bridge> <Robyt3> Can we upgrade to SDL 2.0.18 on Windows or is there some SDL bug preventing it? We need 2.0.18 or 2.0.20 for correct IME handling, because they broke it in 2.0.16 (which is currently used on Windows) and they also broke it in a different way starting with 2.0.22 until the latest version. https://github.com/libsdl-org/SDL/issues/7616
23:35 < bridge> <Chairn> https://www.reddit.com/r/ProgrammerHumor/comments/12o8vco/javascript_forbidden_practices_part_4/
