05:35 < bridge> <Aoe> suggestion: add more emotes like the once from twitch.tv to the discord group? like widepeepoHappy, Pogu , monkaW etc etc...? - https://betterttv.com/emotes/top
06:21 < bridge> <always> who did this
06:21 < bridge> <always> gitg blam
11:31 < bridge> <robyt3> Readability is a significantly more relevant concern than having the most compact/abstract code. The original code is easy to read. Using several macros is not.
11:31 < bridge> <robyt3> 
11:31 < bridge> <robyt3> This also makes it complicated to change the code later, because it confines everything to strict component and sub-component classes, which breaks down if you try to do anything else.
11:35 < bridge> <ryozuki> hello fellow devs
11:36 < bridge> <Jupstar ‚ú™> hello php devs and others
11:37 < bridge> <Solly (bun bun)> anything else is rare and still can be done otherwise
11:37 < bridge> <Solly (bun bun)> using cpp wizardry the initalization of the componentinterface is also done
11:37 < bridge> <Solly (bun bun)> uhmmm, i disagree with the "most compact abstratc code" bit, i would call it reducing repetition, its not very abstract and i think reducing repetition is important cuz its annoying to keep 4 things updated (which would have to be the case without the macro), however youre a maintainer so .---.
11:38 < bridge> <ryozuki> > Readability is a significantly more relevant concern than having the most compact/abstract code. The original code is easy to read. Using several macros is not.
11:38 < bridge> <ryozuki> agree fully
11:38 < bridge> <ryozuki> (same thing in rust, avoid macros if possible)
11:39 < bridge> <ryozuki> (and avoid relying too much on traits if possible, i guess in c++ it would be interfaces or abstract classes xd but idk if the same applies)
11:40 < bridge> <robyt3> That's already a lot of abstraction. The repetion is just adding like 5 lines of code in specific places when you add a new component, which should only happen rarely. Whereas this code is read all the time. If it takes 1 second longer to read and understand this code, it becomes a net loss of time quickly.
11:41 < bridge> <Solly (bun bun)> i add components quite frequently üëÄ
11:41 < bridge> <ryozuki> https://ntietz.com/blog/the-most-important-goal-in-designing-software-is-understandability/
11:41 < bridge> <robyt3> Not nearly as often as you read the code, unless you deliver entirely untested code
11:41 < bridge> <Solly (bun bun)> idk wym by that
11:42 < bridge> <Solly (bun bun)> i add the component in the 3 places and never need to look back
11:42 < bridge> <robyt3> yeah, that's a simple change, so saving you a few seconds to make this faster is not worth making it less understandable
11:42 < bridge> <Solly (bun bun)> unless i forgot to add it in 1 of the three places
11:43 < bridge> <Solly (bun bun)> it becomes 4 if you want to move the constructor to the cpp file, and you have to write std::make_unique(...)
11:43 < bridge> <Solly (bun bun)> it becomes 4 if you want to move the constructor to the cpp file, and you have to write
11:43 < bridge> <Solly (bun bun)> ```cpp
11:43 < bridge> <Solly (bun bun)> m_pA = std::make_unique(...)
11:43 < bridge> <Solly (bun bun)> m_A = *m_pA
11:43 < bridge> <Solly (bun bun)> ```
11:43 < bridge> <robyt3> When I read that code, I know that it does immediately
11:44 < bridge> <robyt3> (not this snippet)
11:44 < bridge> <robyt3> If I have to understand several macros, I don't
11:44 < bridge> <Solly (bun bun)> (if we have to keep using . instead of ->)
11:44 < bridge> <Solly (bun bun)> it becomes 4 if you want to move the constructor to the cpp file, and you have to write
11:44 < bridge> <Solly (bun bun)> ```cpp
11:44 < bridge> <Solly (bun bun)> m_pA = std::make_unique(...)
11:44 < bridge> <Solly (bun bun)> m_A = *m_pA
11:44 < bridge> <Solly (bun bun)> ```
11:44 < bridge> <Solly (bun bun)> (if we have to keep using . instead of ->)
11:44 < bridge> <Solly (bun bun)> (you also have to have te types in the gameclient)
11:44 < bridge> <Solly (bun bun)> i deleted this msg idk why its still there
11:45 < bridge> <Solly (bun bun)> https://cdn.discordapp.com/attachments/293493549758939136/1388455128549429298/image.png?ex=68610b1a&is=685fb99a&hm=b0c47b9154a210dc30e4c04ef385929df2b9b2e9ef0cc79bf8c0b7866351842e&
11:45 < bridge> <robyt3> This feels like the XY problem. We have a good solution for this. If you don't want to use it, then we shouldn't change.
11:45 < bridge> <Solly (bun bun)> i dont think the current solution is good
11:46 < bridge> <Solly (bun bun)> due to forcing large recompiles all the time
11:46 < bridge> <robyt3> Replacing it with something worse is not better
11:46 < bridge> <Solly (bun bun)> due to forcing large recompiles all the time when editing compoennt headers
11:46 < bridge> <Solly (bun bun)> as i said before i think the worse caused in readability is not outweighed by the better from incremental recompile speedup
11:46 < bridge> <Solly (bun bun)> *but* youre the maintainer
11:47 < bridge> <Solly (bun bun)> as i said before i think the worse caused in readability is not outweighed by the better from incremental recompile speedup
11:47 < bridge> <Solly (bun bun)> *but* youre the maintainer, so my opinion doesn matter üòì
11:47 < bridge> <Solly (bun bun)> comments could be added explaining it faster than you would take to figure it out, but i doubt thats enough
11:47 < bridge> <robyt3> What I'm saying is, you are trying to solve the problem with the wrong solution because you don't want the good solution. That would be, using pointers and adding component getter functions.
11:47 < bridge> <ryozuki> https://thedecisionlab.com/biases/the-sunk-cost-fallacy
11:48 < bridge> <ryozuki> personally i never had problems with ddnet compile times
11:48 < bridge> <Solly (bun bun)> that just adds more repettion which is what im trying to avoid aswell
11:48 < bridge> <ryozuki> on release i compile in 20 seconds
11:48 < bridge> <Solly (bun bun)> good for you, i dont
11:48 < bridge> <Solly (bun bun)> ):
11:48 < bridge> <ryozuki> debug should be way faster
11:49 < bridge> <robyt3> It solves the problem of faster recompiles. The repetion is negligible compared to the cost to understandability by using macros.
11:49 < bridge> <Solly (bun bun)> one of the macros disapears if you use pointes, i dont see the point of having getters
11:49 < bridge> <ryozuki> im against macros too if possible
11:50 < bridge> <ryozuki> why not do this
11:50 < bridge> <robyt3> Because if you are already changing everything you might as well do it properly. Getters allow for easier change in the future, if we decide to revert to component members or do something entirely different.
11:50 < bridge> <robyt3> Would be a very large diff, so forks wouldn't like it
11:50 < bridge> <ryozuki> why do we need to care about forks
11:50 < bridge> <ryozuki> i dont agree with that argument
11:51 < bridge> <Solly (bun bun)> grr
11:51 < bridge> <Solly (bun bun)> youre a fork
11:51 < bridge> <ryozuki> :justatest:
11:51 < bridge> <ryozuki> üç¥
11:51 < bridge> <ryozuki> i dislike limitingo urselves more by "forks" we already are limited by backwards compat and old protocols
11:52 < bridge> <ryozuki> i dislike limiting ourselves more by "forks" we already are limited by backwards compat and old protocols
11:52 < bridge> <ryozuki> and getters also make refactoring easier
11:52 < bridge> <ryozuki> avoiding bigger diffs in the future
11:52 < bridge> <Solly (bun bun)> forks are activley maintained, the things which backwards compat supports isnt
11:52 < bridge> <ryozuki> yeah but we dont need to cater to forks
11:53 < bridge> <ryozuki> specially when it would bring compile time improvements and probably cleaner code
11:53 < bridge> <Jupstar ‚ú™> How long does it take for you?
11:53 < bridge> <Solly (bun bun)> a couple of minutes
11:53 < bridge> <Solly (bun bun)> (yes im impatient)
11:53 < bridge> <ryozuki> o ndebug?
11:53 < bridge> <ryozuki> debug*
11:54 < bridge> <Solly (bun bun)> release
11:54 < bridge> <Solly (bun bun)> debug is unplayable for testing
11:54 < bridge> <ryozuki> why do u code in release
11:54 < bridge> <Jupstar ‚ú™> Then buy better hardware xD
11:54 < bridge> <Solly (bun bun)> no!
11:54 < bridge> <Jupstar ‚ú™> Ofc
11:54 < bridge> <ryozuki> add ur own -O1 mode
11:54 < bridge> <ryozuki> it shoudl be playable
11:54 < bridge> <Jupstar ‚ú™> Let the computer work for you, not other way around
11:54 < bridge> <ryozuki> 2 mins is insane tho
11:54 < bridge> <ryozuki> do u have a pentium
11:55 < bridge> <Solly (bun bun)> 8virtual cores x 2ghz on a vps
11:55 < bridge> <Solly (bun bun)> and im on a laptop with 2 cores 4 threads
11:55 < bridge> <ryozuki> why u code on a vps
11:55 < bridge> <Solly (bun bun)> because my pc is 3 hours away
11:55 < bridge> <Solly (bun bun)> and broken
11:55 < bridge> <ryozuki> rip
11:56 < bridge> <Solly (bun bun)> yeah but theres going to be so much pushback for that
11:56 < bridge> <Solly (bun bun)> (including from me)
11:57 < bridge> <Solly (bun bun)> both because large diff (which i dont want to deal with) and extra repetiton (which i dont like)
11:58 < bridge> <ryozuki> @jupeyy_keks do u agree bein limited by forks on large refactors
11:58 < bridge> <ryozuki> i hate it
11:58 < bridge> <Solly (bun bun)> if the iwyu changes from my pr are merged i would hapilly merge the rest downstream x-x
11:59 < bridge> <ryozuki> i wont merge the macro one
11:59 < bridge> <Solly (bun bun)> (im afraid to say you already tried)
11:59 < bridge> <robyt3> I don't really agree about being limited by forks, I simply raised the point. I'll break all editor forks when adding multiple map support eventually maybe.
12:00 < bridge> <Jupstar ‚ú™> We should focus on us.
12:00 < bridge> <Jupstar ‚ú™> 
12:00 < bridge> <Jupstar ‚ú™> If we'd design a good & modular software base, then forks profit from that too in the long run.
12:00 < bridge> <Jupstar ‚ú™> 
12:00 < bridge> <Jupstar ‚ú™> You always make someone unhappy, that's the nature of change
12:00 < bridge> <Solly (bun bun)> ~~ (im afraid to say you already tried)~~ (different pr)
12:00 < bridge> <ryozuki> i like clang tidy, hope u finish it xd
12:00 < bridge> <ryozuki> yeah thats my point
12:00 < bridge> <Jupstar ‚ú™> `make  147,61s user 22,22s system 100% cpu 2:48,59 total`
12:00 < bridge> <Jupstar ‚ú™> 
12:00 < bridge> <Jupstar ‚ú™> On a single CPU it takes 2m 48s for me.
12:00 < bridge> <Jupstar ‚ú™> 
12:01 < bridge> <Jupstar ‚ú™> Maybe you could switch to a root server (dedicated CPU cores)
12:01 < bridge> <Jupstar ‚ú™> `make  147,61s user 22,22s system 100% cpu 2:48,59 total`
12:01 < bridge> <Jupstar ‚ú™> 
12:01 < bridge> <Jupstar ‚ú™> On a single CPU thread it takes 2m 48s for me.
12:01 < bridge> <Jupstar ‚ú™> 
12:01 < bridge> <Jupstar ‚ú™> Maybe you could switch to a root server (dedicated CPU cores)
12:02 < bridge> <ryozuki> @sollybunny i can give u access to my dedicated server
12:02 < bridge> <ryozuki> if u promise to not do bad stuff
12:02 < bridge> <ryozuki> its the one that hosts the wiki
12:02 < bridge> <Solly (bun bun)> wouldnt compiling ddos it :--;
12:02 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1388459612252016732/image.png?ex=68610f47&is=685fbdc7&hm=fd553ac622ed3184d359176ca1d061550b2ce6e8387c3f369bc345ae69a8301e&
12:02 < bridge> <ryozuki> no its powerfull af
12:03 < bridge> <ryozuki> 64gb ram and a ryzen 3600
12:03 < bridge> <ryozuki> u can limit ur make to half the cores
12:03 < bridge> <ryozuki> and u wont give problem
12:03 < bridge> <Solly (bun bun)> why you willing to give me free hardware
12:03 < bridge> <ryozuki> because u are coding for ddnet
12:03 < bridge> <Solly (bun bun)> what did i do to desrve this x-x
12:03 < bridge> <ryozuki> im all for it
12:03 < bridge> <Solly (bun bun)> brp
12:03 < bridge> <Solly (bun bun)> i mean
12:03 < bridge> <Solly (bun bun)> i wont like say no
12:03 < bridge> <ryozuki> ok just give me ur ssh key
12:03 < bridge> <ryozuki> and never share the ip
12:04 < bridge> <ryozuki> or u will ddos the wiki :p
12:04 < bridge> <Solly (bun bun)> oke
12:04 < bridge> <Solly (bun bun)> you could do it via cloudflare tunnel
12:04 < bridge> <Solly (bun bun)> then i dont get the ip
12:04 < bridge> <Jupstar ‚ú™> so the ip is that of the wiki? xddd
12:04 < bridge> <ryozuki> i host the wiki on that monster
12:04 < bridge> <ryozuki> along other side projects
12:04 < bridge> <ryozuki> xd
12:04 < bridge> <ryozuki> like ddstats
12:05 < bridge> <ryozuki> nah i can change ip if smth happens xd
12:05 < bridge> <totar> I would like the component compliation fix thing to be merged in some capacity, idc if it means changing all the files
12:06 < bridge> <Solly (bun bun)> is there a way we can do no reperition without macros
12:06 < bridge> <Solly (bun bun)> constexpr map?
12:06 < bridge> <totar> Template?
12:06 < bridge> <totar> no..
12:06 < bridge> <Solly (bun bun)> thats a bit icky
12:06 < bridge> <Solly (bun bun)> so is veerything
12:06 < bridge> <robyt3> No, just https://en.wikipedia.org/wiki/KISS_principle
12:07 < bridge> <totar> I think pointers without getters is fine
12:08 < bridge> <totar> im not sure what the getters  would ever do
12:08 < bridge> <robyt3> Getters are better, as we already change every line and it allows easier future change
12:08 < bridge> <totar> What change?
12:08 < bridge> <robyt3> Changing to a different representation of components
12:08 < bridge> <totar> Like what?
12:09 < bridge> <robyt3> If I knew the perfect solution of the future, I would suggest it right now
12:09 < bridge> <robyt3> Making future change easier is a virtue in itself
12:09 < bridge> <totar> But it adds a maintainbility cost of creating the getters for no stated reason
12:10 < bridge> <robyt3> We have getters for everything else
12:10 < bridge> <totar> have they been useful in some way that would apply here
12:11 < bridge> <robyt3> Yes, the offer the same benefit of easier future change
12:11 < bridge> <totar> That's not very specific
12:12 < bridge> <robyt3> Then check git blame if this benefit has been actualized for any interface so far
12:12 < bridge> <robyt3> Consistency is also important
12:12 < bridge> <totar> This seems like premature abstraction, if we come up with a new component representation you can add them then
12:13 < bridge> <robyt3> I'm not merging it without getters, that's just wasted review effort
12:15 < bridge> <totar> Minimizing boilerplate isn't a worthless task, if someone has to figure out the 5 places you change to make a new component they will be less likely to make it in the first place and just cram their code somewhere worse, we already have this issue
12:18 < bridge> <robyt3> Easy of future change and consistency are more important to me. @sollybunny Do you want to work on using pointers and getters? Otherwise we can close the PR.
12:19 < bridge> <Solly (bun bun)> i dont want that to be merged really
12:19 < bridge> <Solly (bun bun)> can i keep the iwyu changes
12:19 < bridge> <Solly (bun bun)> even though they should be enforced and autoamted with some tool
12:21 < bridge> <ryozuki> @sollybunny btw
12:21 < bridge> <ryozuki> u can use mold
12:21 < bridge> <ryozuki> idk if ddnet uses it by default if installed
12:22 < bridge> <ryozuki> but its on the server
12:22 < bridge> <ryozuki> (way faster link time)
12:22 < bridge> <Solly (bun bun)> that is useful to me
12:22 < bridge> <Solly (bun bun)> probably
12:22 < bridge> <Solly (bun bun)> was
12:22 < bridge> <ryozuki> ```cmake
12:22 < bridge> <ryozuki> * **-DFUSE_LD=[OFF|LINKER]** <br>
12:22 < bridge> <ryozuki>     Linker to use. Default value is OFF to try mold, lld, gold.
12:22 < bridge> <ryozuki> ```
12:27 < bridge> <ryozuki> playing 1 minute on linear https://share.firefox.dev/4ewuEMw
12:27 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1388465833633906799/image.png?ex=68611513&is=685fc393&hm=d2459713d128b458bf7adc5cd6a1e6207b6965c2c702b8b73b28750e4426bb4a&
12:27 < bridge> <robyt3> The includes would probably change again when using component pointers, so I don't think it's worth it
12:31 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1388466813767254088/image.png?ex=686115fc&is=685fc47c&hm=4e3d19a023a69ccf88e741539c69b1c0ca039376dce670d029c0ee9b4663206c&
12:31 < bridge> <ryozuki> curios skins take a lot
12:31 < bridge> <ryozuki> https://share.firefox.dev/4kWGW2W
12:32 < bridge> <ryozuki> ah its teerender infos
12:32 < bridge> <robyt3> Latest master or release?
12:32 < bridge> <ryozuki> not skins xd
12:32 < bridge> <ryozuki> last master
12:33 < bridge> <ryozuki> im just profiling a bit
12:33 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1388467288004366510/image.png?ex=6861166d&is=685fc4ed&hm=bb6e146893c02938b04ac000015455b32eceddf9c66ed2be2ac1947e6a1bbd9e&
12:34 < bridge> <robyt3> I tried to optimize skin container performance after latest release. Looks like we still validate the skin name each time when retrieving a container though. Maybe that could still be avoided somehow.
12:39 < bridge> <Solly (bun bun)> You need the headers for components you use regardless of how you access them
12:49 < bridge> <kebscs> What do you use for profiling
12:50 < bridge> <ryozuki> samply, a nice wrapper for perf that auto matically opens firefox profiler viewer (the best) but maybe u dont want to use it since its made in Rust
12:52 < bridge> <kebscs> :kek:
13:14 < bridge> <ryozuki> @jupeyy_keks https://github.com/ddnet/ddnet/pull/7169
13:14 < bridge> <ryozuki> is this relevant
13:14 < bridge> <ryozuki> 2023
13:15 < bridge> <kebscs> format and tidy are different
13:16 < bridge> <ryozuki> oh true, well still would close it since its there for years
13:16 < bridge> <kebscs> better to keep open maybe someone revives
13:16 < bridge> <kebscs> if closed it just gets lost if theres no issue
13:17 < bridge> <ryozuki> ill open a issue
13:25 < bridge> <Jupstar ‚ú™> If we are ok with the binary diff this will create, we can rebase & merge xd
13:31 < bridge> <robyt3> The question is whether we could apply it only to changed files
13:33 < bridge> <Jupstar ‚ú™> I dunno, I won't do that xD
13:33 < bridge> <Jupstar ‚ú™> Way too complicated
13:33 < bridge> <Jupstar ‚ú™> data should simply be a submodule
13:34 < bridge> <Jupstar ‚ú™> `shallow = true`
14:10 < bridge> <chairn> https://www.reddit.com/r/ProgrammerHumor/comments/1lmeq0f/useridvsuserid/
14:10 < bridge> <chairn> #7750
14:10 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/7750
14:11 < bridge> <Jupstar ‚ú™> Ddnet
14:11 < bridge> <Jupstar ‚ú™> Ddrace
14:12 < bridge> <Jupstar ‚ú™> But yeah it's funny bcs it's defs a divisive topic xD
14:24 < bridge> <Jupstar ‚ú™> @tsfreddie is master4 not chinese master server list anymore? Or generally do we not have chinese master server list anymore?
14:24 < bridge> <TsFreeeeeeeeeddie> We never had any Chinese master list
14:24 < bridge> <TsFreeeeeeeeeddie> Http hosting in china need registration
14:26 < bridge> <Jupstar ‚ú™> Mh okee
14:59 < bridge> <vahemaaa> chillerdragon when antiping for ZillyWods
15:00 < bridge> <vahemaaa> turki players get high ping on eu servers
15:03 < ChillerDragon> not planned i tried it once was too hard xd
15:03 < ChillerDragon> just use ddnet :shrug:
15:28 < bridge> <melon> Is this just GitHub on phone or is formatting broken
15:28 < bridge> <melon> https://cdn.discordapp.com/attachments/293493549758939136/1388511342935408751/Screenshot_20250628-152459.png?ex=68613f75&is=685fedf5&hm=4759ab702e59027804c93a33a2f6ef887658770bf0e2161380b3dba8e4cd49c4&
15:29 < ws-client> <ChillerDragon> @melon buy new phone
15:30 < bridge> <melon> <a:nicmoji_angry:417333827506274304>
15:35 < bridge> <kebscs> your phone too small :/
15:35 < bridge> <kebscs> open in desktop view
15:50 < bridge> <kebscs> @blaiszephyr yes /practice 0 is a real thing to vote against it
15:50 < bridge> <kebscs> üòÇ
15:51 < bridge> <melon> But why does this exist :dTeuMonkaW:
15:51 < bridge> <kebscs> if you want to change your vote
15:51 < bridge> <melon> There was a practice bug to have dummy maps allow more than 2 people in a team, that's where my concern comes from
15:51 < bridge> <kebscs> but is very useles
15:51 < bridge> <melon> Ye that's why I thought you added it
15:52 < bridge> <kebscs> yea ik bcs practice didnt have a way to disable it
15:52 < bridge> <kebscs> so it was new
15:52 < bridge> <melon> :justatest:
15:52 < bridge> <kebscs> for team0mode i just added voting
15:52 < bridge> <melon> üëç
15:52 < bridge> <kebscs> disabling and other stuff i didnt touch
15:52 < bridge> <kebscs> so everything is same
16:02 < bridge> <learath2> Didn't we host just a read only master in china?
18:51 < ws-client> <ChillerDragon> @robyt3 my diff in server.cpp and network.cpp is basically insignificant. Yet my fork has a few asan errors and they seem to be introduced around the time i merged a commit of urs
18:52 < ws-client> <ChillerDragon> this is not a confirmed ddnet bug might be a fork issue but any chance you could have a quick look at  https://github.com/ddnet-insta/ddnet-insta/issues/367
18:55 < bridge> <robyt3> We also had this in the past, but no idea how to reproduce it: #3346
18:55 < bridge> <robyt3> Maybe you send longer messages and you run into #9126
18:55 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/3346
18:55 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/9126
19:13 < ws-client> <ChillerDragon> issue from 2020 o.O
19:13 < ws-client> <ChillerDragon> mine seems new and frequent <:tee_thinking:478629518358085653>
19:13 < ws-client> <ChillerDragon> i had it like 10 times this month
19:17 < bridge> <robyt3> If it happens frequently enough, try to add some debug messages in `CNetRecvUnpacker::FetchChunk` to log information of the `CNetChunk`
19:18 < ws-client> <ChillerDragon> i rather not touch network.cpp or server.cpp
20:00 < bridge> <ryozuki> https://worksonmymachine.substack.com/p/mcp-an-accidentally-universal-plugin
21:05 < bridge> <murpi> l
22:18 < bridge> <cartman46> Hello i had been banned today from DDNET and i don't know why ??? I didn't do bad things so why i had been banned ?? PLease help me!
22:19 < bridge> <Assa> please open a ticket at https://discord.com/channels/252358080522747904/1124657351442579486
22:20 < bridge> <cartman46> ok thank you for the help
22:20 < bridge> <Assa> Does anybody know a good VS-Code extension for clang format? I installed one but it seems not to work anymore, I guess it's a different version?
22:26 < bridge> <Jupstar ‚ú™> We have a vscode workspace that suggests everything
22:31 < bridge> <Assa> ü§î
23:31 < bridge> <Solly (bun bun)> i just use ./scripts/fix-style.py, its fast and i only have to run it on push
23:31 < bridge> <Solly (bun bun)> i just use ./scripts/fix-style.py, its pretty fast and i only have to run it on push
23:39 < bridge> <Solly (bun bun)> https://cdn.discordapp.com/attachments/293493549758939136/1388634827519033557/image.png?ex=6861b276&is=686060f6&hm=03957e5eaaa4f111d7b3895b917196eefb8ba99f50e92851116233e9ab7f22be&
23:39 < bridge> <Solly (bun bun)> thats a jank description
23:40 < bridge> <kebscs> üíÄ
23:42 < bridge> <maksymswag> "Token limit has been reached"
