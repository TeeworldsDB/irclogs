00:06 <+bridge> [ddnet] <Ryozuki> https://godotengine.org/article/release-management-4-0-and-beyond
01:34 <+bridge> [ddnet] <Cellegen | RiH> If the code editor preferences are still buggy, then I won't need it :Madge:
07:27 <+bridge> [ddnet] <Ryozuki> https://adventofcode.com/
07:31 <+bridge> [ddnet] <Ryozuki> if you havent joined previous years, you can join our private leaderboard with this code: 677828-82ec4df2
07:31 <+bridge> [ddnet] <Ryozuki> <https://adventofcode.com/2022/leaderboard/private/view/677828>
07:33 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1047399840386142320/image.png
08:32 <+bridge> [ddnet] <Anime.pdf> :justatest:
08:32 <+bridge> [ddnet] <ReiTW> what are the langages you can use for that?
08:33 <+bridge> [ddnet] <Anime.pdf> > Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like.
08:33 <+bridge> [ddnet] <ReiTW> ok ok nice
08:39 <+bridge> [ddnet] <ReiTW> i'm bad but will try!
08:43 <+bridge> [ddnet] <Anime.pdf> it will start at 7 am ü•π
08:43 <+bridge> [ddnet] <Anime.pdf> by my time
08:43 <+bridge> [ddnet] <Anime.pdf> that sucks
08:45 <+bridge> [ddnet] <ReiTW> ah same
08:51 <+bridge> [ddnet] <Jupstar ‚ú™> Sounds indeed very interesting, but i suck at writing applications. And English doesnt make this easier
12:03 <+bridge> [ddnet] <noisyftp> –°—Ç–∏–º –¥–∞—Ä–∏—Ç –î–∏—Å–∫–æ—Ä–¥ –ù–∏—Ç—Ä–æ –Ω–∞ 3 –º–µ—Å—è—Ü–∞!
12:03 <+bridge> [ddnet] <noisyftp> –ê–∫—Ü–∏—è –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ 15 –¥–µ–∫–∞–±—Ä—è!
12:03 <+bridge> [ddnet] <noisyftp> https://tinyurl.com/gift-steam
13:48 <+bridge> [ddnet] <deen> Just apply anyway, thank me later üòÑ
13:56 <+bridge> [ddnet] <Nouaa> when will it start?
13:56 <+bridge> [ddnet] <Nouaa> And how long will it last?
14:16 <+bridge> [ddnet] <deen> Advent of Code? December 1 to 24 would make sense since it's like an Advent Calendar.
14:21 <+bridge> [ddnet] <Nouaa> yup, Alright !
18:23 <+bridge> [ddnet] <Sedonya> Is it possible to somehow connect to RCON without being on the server?
18:25 <+bridge> [ddnet] <Sedonya> @deen
18:36 <+bridge> [ddnet] <Ryozuki> @Learath2 u played this right https://btm.qva.mybluehost.me/optimizing-instructions-in-opus-magnum/
18:36 <+bridge> [ddnet] <Ryozuki> i did
18:36 <+bridge> [ddnet] <Ryozuki> this blog is amazing
18:36 <+bridge> [ddnet] <Ryozuki> it goes so much in depth about game stuff
18:36 <+bridge> [ddnet] <Ryozuki> https://btm.qva.mybluehost.me/building-arbitrary-life-patterns-in-15-gliders/
18:37 <+bridge> [ddnet] <Ryozuki> > The Conway‚Äôs Game of Life community celebrated a landmark achievement on November 9th, 2022. An idea years in the making, the ‚ÄúReverse Caber Tosser‚Äù design finally had all of the pieces it needed to achieve its stated goal.
18:37 <+bridge> [ddnet] <Ryozuki> > 
18:37 <+bridge> [ddnet] <Ryozuki> > That goal is simple. Select any pattern that can be built in Life ‚Äì for example, the Waterbear. Begin with a small number of gliders (now 15) in an otherwise empty Game of Life universe. After enough time goes by, those gliders need to build that pattern. No extra leftover debris, no stray scaffolding, just a pure synthesis of whatever you chose.
18:37 <+bridge> [ddnet] <Learath2> I haven‚Äôt gotten around to playing it myself, but I did watch people play it
18:37 <+bridge> [ddnet] <Ryozuki> well this guy goes beyond xd
18:37 <+bridge> [ddnet] <Ryozuki> https://btm.qva.mybluehost.me/using-opus-magnum-computers-irrationally/
18:38 <+bridge> [ddnet] <Ryozuki> ppl built computers in it
18:38 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=ShpMkV21uyc
18:44 <+bridge> [ddnet] <deen> We use sv_input_fifo for that, there is also econ
18:47 <+bridge> [ddnet] <Sedonya> Well
18:57 <+bridge> [ddnet] <Ryozuki> https://asahilinux.org/2022/11/tales-of-the-m1-gpu/
18:57 <+bridge> [ddnet] <Ryozuki> @Not Keks
18:57 <+bridge> [ddnet] <Ryozuki> new blog
18:58 <+bridge> [ddnet] <Ryozuki> interesting bit lol
18:59 <+bridge> [ddnet] <Ryozuki> > Normally, the GPU driver is responsible for details such as scheduling and prioritizing work on the GPU, and preempting jobs when they take too long to run to allow apps to use the GPU fairly. Sometimes the driver takes care of power management, and sometimes that is done by dedicated firmware running on a power management coprocessor. And sometimes there is other firmware taking care of some details of command processing, but it‚Äôs most
18:59 <+bridge> [ddnet] <Ryozuki> > 
18:59 <+bridge> [ddnet] <Ryozuki> > Just like other parts of the M1 chip, the GPU has a coprocessor called an ‚ÄúASC‚Äù that runs Apple firmware and manages the GPU. This coprocessor is a full ARM64 CPU running an Apple-proprietary real-time OS called RTKit‚Ä¶ and it is in charge of everything! It handles power management, command scheduling and preemption, fault recovery, and even performance counters, statistics, and things like temperature measurement! In fact, the macOS
18:59 <+bridge> [ddnet] <Ryozuki> they actually run a coprocessor
19:04 <+bridge> [ddnet] <deen> processors are cheap, there were even floppy devices with their own full-blown cpu
19:18 <+bridge> [ddnet] <Jupstar ‚ú™> nice
19:39 <+bridge> [ddnet] <Ryozuki> oh lol nice idea
19:39 <+bridge> [ddnet] <Ryozuki> advent of ddnet
19:41 <+bridge> [ddnet] <Ryozuki> 5 people joined
19:41 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1047583048167858236/image.png
20:14 <+bridge> [ddnet] <Alexander> @Chikowitz https://discord.com/channels/252358080522747904/293493549758939136/1047398395049934888
20:54 <+bridge> [ddnet] <Anime.pdf> Yes, its called econ
20:56 <+bridge> [ddnet] <Anime.pdf> https://github.com/gerdoe-jr/tw-econ
20:56 <+bridge> [ddnet] <Anime.pdf> Here's nice econ client by gerdoe
20:56 <+bridge> [ddnet] <Anime.pdf> Look for econ config vars on website or in souces
21:00 <+bridge> [ddnet] <Anime.pdf> Look for server econ config vars on website or in souces
21:12 <+bridge> [ddnet] <Anime.pdf> Look for server econ config vars on website or in sources
21:15 <+bridge> [ddnet] <Learath2> I always do a couple then remember I don't actually enjoy doing these convoluted challanges and stop üòÑ
21:15 <+bridge> [ddnet] <Ryozuki> xd
21:15 <+bridge> [ddnet] <Sedonya> WoW thx
21:17 <+bridge> [ddnet] <Sedonya> Here I have to write the IP and PORT of my server? @uwu
21:34 <+bridge> [ddnet] <Anime.pdf> Yes, look readme
21:37 <+bridge> [ddnet] <Sedonya> Ok
21:37 <+bridge> [ddnet] <Sedonya> Thx
21:40 <+bridge> [ddnet] <Sedonya> @uwu help
21:45 <+bridge> [ddnet] <Anime.pdf> ChillerDragon: stop making me or gerdoe work
21:48 <+ChillerDragon> hehe :p
21:48 <+ChillerDragon> you advertised a repo full of bugs :p
21:49 <+bridge> [ddnet] <Robyt3> Even repos full of bugs are useful https://github.com/rjust/defects4j üòÑ
21:49 <+ChillerDragon> trol
21:55 <+bridge> [ddnet] <Anime.pdf> i just dont know any, also it was used with discord bridge and we used it with fng server, didnt run into any bugs ü•π
22:01 <+ChillerDragon> i dont unserstand why this is async https://github.com/gerdoe-jr/tw-econ/blob/925b4a6e720fd1cafdb214ab2c216d4e4e870db2/src/lib.rs#L87
22:02 <+ChillerDragon> i feel like this is luck based if the tcpstream gets a packet it will return ok if the packet is delayed or something like that it wont get any response YET and then go to the _ branch and error with no response
22:03 <+ChillerDragon> imo it should match for Err and panic then otherwise in the _ case it should just retry
22:04 <+ChillerDragon> or not be async and do a blocking tcp connect?
22:09 <+bridge> [ddnet] <Anime.pdf> @gerdoe
22:09 <+bridge> [ddnet] <Anime.pdf> ¬Ø\_(„ÉÑ)_/¬Ø
22:31 <+bridge> [ddnet] <heinrich5991> why is it bad that it's async? ChillerDragon?
22:31 <+bridge> [ddnet] <heinrich5991> just read it like blocking code
22:31 <+bridge> [ddnet] <heinrich5991> I guess
22:33 <+ChillerDragon> doesnt seem to work like blocking code
22:33 <+bridge> [ddnet] <heinrich5991> in what way?
22:33 <+ChillerDragon> tbh idk shit about rust but i just do not see the use case of async here so it seems to add unneeded complexity
22:33 <+ChillerDragon> as in that connecting to econ is random for me
22:35 <+ChillerDragon> But yea i probably can read async as blocking aslong as await is called i guess
22:35 <+ChillerDragon> then something else is the issue
22:35 <+bridge> [ddnet] <heinrich5991> you have to put await in a couple places
22:36 <+ChillerDragon> i do not see any missing awaits maybe me balming async was wrong dunno but still when await is called everywhere why even use async
22:38 <+ChillerDragon> how do i even read those ``let``s? https://github.com/gerdoe-jr/tw-econ/blob/925b4a6e720fd1cafdb214ab2c216d4e4e870db2/src/lib.rs#L115 i thought let is for variable assignment but i would not assume that Ok(out) or Err(_) is a valid variable name
22:39 <+bridge> [ddnet] <heinrich5991> as long as `try_read` returns `Err`, do the following
22:39 <+bridge> [ddnet] <heinrich5991> hmm
22:40 <+bridge> [ddnet] <heinrich5991> the code looks severely broken
22:40 <+ChillerDragon> it is
22:40 <+ChillerDragon> so i need let to check the return value? and can omit the variable name?
22:40 <+bridge> [ddnet] <heinrich5991> I don't see how it can work
22:40 <+ChillerDragon> it works 30% for me xd
22:41 <+ChillerDragon> why can't i just say ``if s.read() {``
22:41 <+bridge> [ddnet] <heinrich5991> basically, it first checks if the receive returns an error
22:41 <+ChillerDragon> why isnt Err falsy and Ok truthy?
22:42 <+bridge> [ddnet] <heinrich5991> if not, it just skips any data
22:42 <+bridge> [ddnet] <heinrich5991> if it returns an error, it'll try reading again
22:42 <+bridge> [ddnet] <heinrich5991> if it's not an error, it'll actually use the data
22:42 <+ChillerDragon> yea i get it conceptually but syntactically the let makes no sense to me
22:43 <+bridge> [ddnet] <heinrich5991> it's pattern matching
22:43 <+bridge> [ddnet] <Jupstar ‚ú™> and if it fails and then works it skips the data
22:43 <+ChillerDragon> pattern matching needs a ``let`` keyword?
22:43 <+bridge> [ddnet] <Jupstar ‚ú™> err -> err -> no err, while over
22:43 <+bridge> [ddnet] <heinrich5991> no, it's just one of the places
22:43 <+bridge> [ddnet] <heinrich5991> where pattern matching works
22:43 <+bridge> [ddnet] <heinrich5991> basically `while` takes a boolean
22:44 <+bridge> [ddnet] <heinrich5991> and `while let` allows you to pattern-match
22:44 <+ChillerDragon> thats cursed
22:44 <+bridge> [ddnet] <heinrich5991> why is that cursed?
22:44 <+bridge> [ddnet] <heinrich5991> the code might be cursed
22:44 <+bridge> [ddnet] <heinrich5991> because it works with 50% chance
22:44 <+ChillerDragon> why not make while allow pattern matching?
22:44 <+ChillerDragon> why use ``let`` without a variable name to indicate pattern matching
22:44 <+bridge> [ddnet] <heinrich5991> because it's two different things and it's good that it's differentiated syntactally, I'd say
22:44 <+ChillerDragon> its so counter intutuive to me
22:45 <+bridge> [ddnet] <heinrich5991> let also does pattern-matching
22:45 <+bridge> [ddnet] <heinrich5991> `let (a, mut b) = (1, 2);`
22:45 <+ChillerDragon> thats pattern matching?
22:45 <+bridge> [ddnet] <heinrich5991> yes
22:45 <+ChillerDragon> uff 
22:46 <+bridge> [ddnet] <heinrich5991> let on its own could only do irrefutable pattern matching before
22:46 <+bridge> [ddnet] <heinrich5991> let on its own could only do irrefutable pattern matching in the past
22:46 <+bridge> [ddnet] <heinrich5991> (now there's `let ‚Ä¶ else {}`)
22:47 <+bridge> [ddnet] <Jupstar ‚ú™> chillerdragon stop `bash`ing `let`, you `sh`ould learn rust
22:47 <+ChillerDragon> trol
22:48 <+ChillerDragon> honestly my motivation to learn rust dropped a lot in the last hour
22:48 <+bridge> [ddnet] <heinrich5991> because you read buggy rust code? ^^
22:48 <+ChillerDragon> it took like 20minutes to compile this 10line project
22:48 <+ChillerDragon> rust is such a bloat
22:48 <+bridge> [ddnet] <Jupstar ‚ú™> thats sadly the biggest downside of rust indeed
22:48 <+bridge> [ddnet] <heinrich5991> really? sounds really long to me
22:48 <+ChillerDragon> ikr
22:49 <+bridge> [ddnet] <heinrich5991> have you compiled a rust project before?
22:49 <+ChillerDragon> maybe not compiling but "fetching" some crates.io things watever
22:49 <+ChillerDragon> yes
22:49 <+ChillerDragon> but usually bigger ones so i didnt complain too much there
22:49 <+bridge> [ddnet] <Jupstar ‚ú™> just buy better hardware nobo
22:49 <+bridge> [ddnet] <heinrich5991> that crates.io stuff is a git repo that is updated
22:49 <+ChillerDragon> i feel like i downloaded 40gb from crates.io
22:49 <+bridge> [ddnet] <heinrich5991> but it'll take longer the longer you don't compile a rust project
22:50 <+bridge> [ddnet] <heinrich5991> because it needs to download more git history
22:50 <+ChillerDragon> oh wait
22:50 <+ChillerDragon> i see
22:50 <+ChillerDragon> so this is just fetching the current rust repo state
22:50 <+ChillerDragon> its like a ``apt update`` ?
22:50 <+bridge> [ddnet] <heinrich5991> it's fetching the current crates.io index
22:50 <+ChillerDragon> i see
22:50 <+ChillerDragon> ok
22:50 <+ChillerDragon> hm
22:50 <+ChillerDragon> still annoying
22:50 <+bridge> [ddnet] <heinrich5991> basically metadata for all the packages
22:51 <+bridge> [ddnet] <heinrich5991> I think they're trying to fix it by supporting 'sparse' registries
22:51 <+ChillerDragon> like on mac when you want to install ``htop`` which takes 0sec but you gotta let brew do 10mins of git clone first
22:51 <+ChillerDragon> git pull*
22:52 <+ChillerDragon> wait so ALLL creates are ONE git repo!?
22:52 <+bridge> [ddnet] <heinrich5991> no, only their metadata
22:52 <+ChillerDragon> ye but still
22:52 <+ChillerDragon> https://github.com/rust-lang/crates.io-index
22:52 <+ChillerDragon> this?
22:52 <+bridge> [ddnet] <ReiTW> apple sux
22:53 <+ChillerDragon> this nuts
22:53 <+ChillerDragon> this repo will get suuuuuuper unsuablely bloated very soon
22:53 <+ChillerDragon> is that for decrentralization or something?
22:54 <+ChillerDragon> i see "collapse index into one commit" xd
22:55 <+bridge> [ddnet] <Jupstar ‚ú™> we should also host https master servers on github
22:55 <+ChillerDragon> ms sok
22:55 <+bridge> [ddnet] <Jupstar ‚ú™> do u run gitlab urself
22:55 <+bridge> [ddnet] <Jupstar ‚ú™> or r u just hipster gitlab user
22:56 <+ChillerDragon> i maintain our companies gitlab and it doesnt motivate me to selfhost tbh xd
22:56 <+ChillerDragon> just saying ms is crap and they do random bans and billgates chips all coders because he is a repteloid
22:56 <+ChillerDragon> and bruu the 500s
22:57 <+bridge> [ddnet] <Jupstar ‚ú™> xd
22:57 <+ChillerDragon> it feels like github has more downtime than uptime
22:57 <+bridge> [ddnet] <Jupstar ‚ú™> i honestly never know if ms is an argument against github
22:57 <+bridge> [ddnet] <Jupstar ‚ú™> 
22:57 <+bridge> [ddnet] <Jupstar ‚ú™> i mean open source projects are open
22:57 <+bridge> [ddnet] <Jupstar ‚ú™> not like they couldnt steal anything they want also from gitlab
22:58 <+ChillerDragon> do you think github steals as much from gitlab as they do from github?
22:58 <+bridge> [ddnet] <Jupstar ‚ú™> but if u have moral support for my decision go ahead
22:58 <+ChillerDragon> i feel like the code pilot stuff is github projects only
22:58 <+bridge> [ddnet] <Jupstar ‚ú™> yeah but if gitlab would be #1 they would simply "steal" it there xd
22:58 <+bridge> [ddnet] <DDNet> https://github.com/ddnet/ddnet/issues/1
22:58 <+bridge> [ddnet] <Jupstar ‚ú™> as if they care
22:59 <+ChillerDragon> gitlab might care if they scrape all repos
22:59 <+bridge> [ddnet] <Jupstar ‚ú™> also doesnt ms also host stackoverflow
22:59 <+bridge> [ddnet] <Jupstar ‚ú™> i bet lot of stuff also comes from there
22:59 <+ChillerDragon> yes for sure
22:59 <+bridge> [ddnet] <Jupstar ‚ú™> bcs human text describes stuff
22:59 <+bridge> [ddnet] <Jupstar ‚ú™> very important for AIs
22:59 <+ChillerDragon> but imo stealing code is not that dramatic
22:59 <+ChillerDragon> more the deleting code part
23:00 <+ChillerDragon> or code not being available due to downtime
23:00 <+bridge> [ddnet] <Jupstar ‚ú™> what do they delete? viruses?
23:00 <+bridge> [ddnet] <Ryozuki> the crate.io index is quite cull
23:00 <+bridge> [ddnet] <Ryozuki> rust-lang has a thing called crater
23:00 <+ChillerDragon> jopstar didnt u hear of the swarfey case?
23:00 <+bridge> [ddnet] <Ryozuki> they literally run tests over all the crates in existance
23:00 <+ChillerDragon> they deleted ALL his repos?
23:00 <+bridge> [ddnet] <Jupstar ‚ú™> no
23:00 <+ChillerDragon> like all
23:00 <+bridge> [ddnet] <Jupstar ‚ú™> what did he do
23:00 <+bridge> [ddnet] <Ryozuki> https://github.com/rust-lang/crater
23:00 <+ChillerDragon> notin
23:01 <+bridge> [ddnet] <Jupstar ‚ú™> lets get detectives chiller
23:01 <+bridge> [ddnet] <Jupstar ‚ú™> and heal the world
23:01 <+bridge> [ddnet] <heinrich5991> > this repo will get suuuuuuper unsuablely bloated very soonthis repo will get suuuuuuper unsuablely bloated very soon
23:01 <+bridge> [ddnet] <heinrich5991> they're working on the sparse registry thing ^^
23:01 <+ChillerDragon> wat?
23:01 <+ChillerDragon> wat is a sparse reg
23:02 <+bridge> [ddnet] <Jupstar ‚ú™> @heinrich5991 when do you get rust v-tuber?
23:02 <+bridge> [ddnet] <Ryozuki> https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html
23:02 <+ChillerDragon> teeint
23:02 <+ChillerDragon> pog
23:02 <+ChillerDragon> https://github.com/rust-lang/crates.io-index/blob/684e10ccf8807694fcc1bc031f244aca53b642f0/te/ei/teeint
23:03 <+bridge> [ddnet] <heinrich5991> what do you mean? there's this rust vtuber writing a kernel module for the apple gpu ^^
23:03 <+ChillerDragon> xd
23:03 <+bridge> [ddnet] <Jupstar ‚ú™> yes but when do i learn rust stuff for teeworlds from u
23:03 <+ChillerDragon> send link
23:05 <+ChillerDragon> ok sparse index seems sane
23:05 <+ChillerDragon> but that it is not a thing yet feels like rust being such a immature ecosystem
23:06 <+bridge> [ddnet] <Jupstar ‚ú™> but its tooling is actually the best part about rust
23:13 <+bridge> [ddnet] <ReiTW> yeet!
23:40 <+ChillerDragon> yo @heinrich5991 did you ever see or respond to my rust test gitlab pipeline failing :( ?
23:43 <+bridge> [ddnet] <heinrich5991> what fails?
23:43 <+ChillerDragon> running tests in my curses fork
23:43 <+ChillerDragon> the rust_test thing
23:44 <+ChillerDragon> https://gitlab.com/chillerbot/chillerbot-ux/-/jobs/3384569397
23:44 <+bridge> [ddnet] <heinrich5991> you need to link the curses libraries there
23:44 <+ChillerDragon> it does link it
23:44 <+ChillerDragon> i see it being linked
23:44 <+ChillerDragon> also running the same commands as the CI runs fine on my local machine
23:46 <+ChillerDragon> HOLY SHIT
23:46 <+ChillerDragon> i got flagged
23:46 <+ChillerDragon> https://zillyhuhn.com/cs/.1669848247.png
23:46 <+ChillerDragon> https://zillyhuhn.com/cs/.1669848277.png
23:46 <+ChillerDragon> who of u trols reported zillyhuhn xd
23:55 <+bridge> [ddnet] <Anime.pdf> You site never worked for me, it just infinitely loaded:monkalaugh:
23:55 <+ChillerDragon> wotrefek
