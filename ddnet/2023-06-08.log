01:33 <+bridge> <Ewan> good afternoon
03:44 <+bridge> <Ewan> in testing my code i noticed the game does not handle opening a huge file properly
03:44 <+bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1116181006303645766/image.png
03:44 <+bridge> <Ewan> segfault here
03:44 <+bridge> <Ewan> buffer address makes me think it's an ignored HRESULT or smth
03:45 <+bridge> <Ewan> winduhs
03:57 <+bridge> <Ewan> the file is ~8GB, but `io_length()` is returning 0
03:57 <+bridge> <Ewan> it allocates `len` (0) + 1 bytes, the resulting buffer is too small for any reading, disaster ensues
03:57 <+bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1116184186584305804/image.png
04:01 <+bridge> <Ewan> i think unsigned is too small for this, `size_t` or `ulong` should be used if anyone's trying to refactor this 😃
04:02 <+bridge> <Ewan> but afaik there are no existing issues with this, it just came up in testing my code which reports if the file is too big
04:02 <+bridge> <Ewan> unrealistic scenario
04:05 <+bridge> <Ewan> but yeah either you can expand io_length to return a larger size or you can return from io_read_all if the result is 0 or negative, this at least lets me handle a file being too big
04:08 <+bridge> <Ewan> actually `io_length()` already returns a long, i don't know what's going on
04:15 <+bridge> <Ewan> ftell is returning 0 on this file even though its `IOHANDLE` is non-null
04:16 <+bridge> <Ewan> io_tell is returning 0 on this file even though its `IOHANDLE` is non-null
04:17 <+bridge> <Ewan> this is probably known behavior and i'm just silly
04:17 <+bridge> <Ewan> it's `8425177088` bytes which is well within the boundaries of even a signed long
04:26 <+bridge> <tsfreddie> rip
04:26 <+bridge> <tsfreddie> my discord number is robbed
04:27 <+bridge> <tsfreddie> now i'm just `tsfreddie`
04:32 <+bridge> <Ewan> sad
04:48 <+bridge> <Ewan> i'm not finding a fstat io_ euqivalent
04:48 <+bridge> <Ewan> agh
04:49 <+bridge> <tsfreddie> agh
05:30 <+bridge> <Ewan> anyone ever heard of mingw misunderstanding windows file permissions
05:31 <+bridge> <Ewan> i set the perms of this file through windows security, readable only to admins
05:31 <+bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1116207789715496981/image.png
05:31 <+bridge> <Ewan> msys's stat compiled with mingw doesn't get it
05:31 <+bridge> <Ewan> my checks using std::filesystem::perms also wrongfully report it as readable
05:32 <+bridge> <Ewan> i'd have to compile with msvc to make sure this isn't a different issue but setting up vcpkg or whatever would be required to compile ddnet sounds like a nightmare
05:43 <+bridge> <Ewan> unrelated but what's the naming convention for C++ style loop iterator names
05:43 <+bridge> <Ewan> i usually do `it` (lowercase) but would `It` be more appropriate?
06:00 <+bridge> <Ewan> symlink detection is also screwed
07:13 <+bridge> <Jupstar ✪> @Ewan Green i hope u are aware u compiled for 32bit
07:13 <+bridge> <Jupstar ✪> At least it looks so
07:14 <+bridge> <Jupstar ✪> Besides that, yes our system CPP uses int very often instead of the correct usize
07:14 <+bridge> <Jupstar ✪> So you probably run out of luck with ddnet for such stuff
07:17 <+bridge> <Jupstar ✪> You could read it in chunks. Maybe then it works ^^
07:35 <+bridge> <Ewan> what makes you think that
07:40 <+bridge> <Jupstar ✪> The memory location is 32bit in your image
07:40 <+bridge> <Ewan> the address width in the screenshot? it's automatically truncated
07:40 <+bridge> <Ewan> it's a 64 bit binary
07:41 <+bridge> <Ewan> mingw w64 and PE header says 64
07:42 <+bridge> <Jupstar ✪> Mh ok weird
07:43 <+bridge> <Ewan> i'm not sure what's going on with the file loading but i'm convinced that it's not actually ddnet's fault
07:44 <+bridge> <Ewan> yes it should use long wherever needed, but `io_tell` (which wraps ftell directly) has nothing between the caller and the libc that should narrow the number, and still has this issue
07:44 <+bridge> <Ewan> it may be a mingw issue, but i am using the 64 bit compiler
07:44 <+bridge> <Ewan> the limit is 2GiB exactly
07:44 <+bridge> <Ewan> 1 byte less works
07:44 <+bridge> <Jupstar ✪> What function signature does it have
07:44 <+bridge> <Ewan> this is classic 32 bit issue
07:44 <+bridge> <Ewan> returns long
07:44 <+bridge> <Ewan> ill look up actual sig
07:45 <+bridge> <Jupstar ✪> Long would be 32b on 32b windows xd
07:45 <+bridge> <Jupstar ✪> But yeah dunno. Windows is always the problem
07:47 <+bridge> <Ewan> I think this is specific to MSVC
07:49 <+bridge> <Ewan> oh i guess not
07:50 <+bridge> <Ewan> ug
07:51 <+bridge> <Ewan> ftell vs. ftello
07:52 <+bridge> <Ewan> ftell returns long which is 32 bit and that's the issue
07:52 <+bridge> <Ewan> ftello is the correct function to use in this case
07:52 <+bridge> <Ewan> annoying
07:52 <+bridge> <Jupstar ✪> I c
07:54 <+bridge> <Jupstar ✪> But with std FS it should work tho
07:55 <+bridge> <Ewan> idk, what u mean
07:55 <+bridge> <Ewan> i could overcome this by doing what the system.cpp does and just casting my IOHANDLE to a FILE * and using ftello myself instead of io_tell
07:55 <+bridge> <Jupstar ✪> Std filesystem
07:55 <+bridge> <Ewan> the std fs issue is different
07:55 <+bridge> <Jupstar ✪> What issue?
07:55 <+bridge> <Jupstar ✪> I mean try using the std
07:56 <+bridge> <Ewan> std filesystem doesn't define an API for opening and reading/writing from/to files
07:56 <+bridge> <Jupstar ✪> ?
07:57 <+bridge> <Ewan> what's confusing
07:57 <+bridge> <Jupstar ✪> I mean there must be some CPP way
07:57 <+bridge> <totar> I think escape button is broken in the server browser
07:58 <+bridge> <Ewan> oh i thought u meant std::filesystem
07:58 <+bridge> <totar> is it supposed to work in the server browser?
07:58 <+bridge> <Ewan> yes i could use stl apis for this but i think most ddnet devs would think that using existing ddnet apis is better
07:58 <+bridge> <Ewan> because they can be wrapped and adapted etc
07:58 <+bridge> <Ewan> idk, #bugs
07:59 <+bridge> <totar> I was wondering if its related to #6709
07:59 <+bridge> <DDNet> https://github.com/ddnet/ddnet/pull/6709
07:59 <+bridge> <Jupstar ✪> If u run old code
07:59 <+bridge> <totar> Im on latest
08:02 <+bridge> <Jupstar ✪> Ping rob or create issue then
08:03 <+bridge> <Ewan> i wonder if adding templates to ddnet system functions would be the move
08:03 <+bridge> <Ewan> type inference should make existing code still work
08:03 <+bridge> <Ewan> but the functions can use ulong/size_t (ull) and the corresponding libc functions
08:04 <+bridge> <Ewan> but the system functions can then use ulong/size_t (ull) and the corresponding libc functions
08:04 <+bridge> <Ewan> i am also happy to live with this limitation lol nobody needs >2GB files
08:04 <+bridge> <Ewan> but future proofing and whatnot
08:05 <+bridge> <Jupstar ✪> If u expose it additionally
08:05 <+bridge> <Jupstar ✪> 
08:05 <+bridge> <Jupstar ✪> Also no harm in using CPP standard directly
08:05 <+bridge> <Jupstar ✪> The system stuff is rather useless
08:05 <+bridge> <Jupstar ✪> Most of it
08:05 <+bridge> <Jupstar ✪> Not all
08:05 <+bridge> <Ewan> well, there are a lot of gotchas when using the libc across systems
08:05 <+bridge> <Ewan> platform and compiler differences make things complicated
08:05 <+bridge> <Ewan> having system apis like this lets us account for it
08:05 <+bridge> <Jupstar ✪> Yes that's why u don't rely on c
08:06 <+bridge> <Ewan> afaik the only cpp apis for this sort of thing are wrapped C APIs (std::fopen, std::fread, etc) and file streams
08:07 <+bridge> <Jupstar ✪> I mean there is ifstream and stuff
08:07 <+bridge> <Ewan> those are file streams
08:07 <+bridge> <Jupstar ✪> I doubt there is no CPP way xd
08:07 <+bridge> <Ewan> ifstream = input file stream
08:07 <+bridge> <Jupstar ✪> Perfect
08:07 <+bridge> <Jupstar ✪> Then u have it
08:07 <+bridge> <Ewan> xd
08:07 <+bridge> <Ewan> streaming :(
08:07 <+bridge> <Jupstar ✪> It's fastest
08:08 <+bridge> <Ewan> if i use a cpp api then im mixing cpp apis and ddnet system apis
08:08 <+bridge> <Ewan> which i guess there's nothing wrong with at a small scale like this but that kind of irks me
08:09 <+bridge> <Jupstar ✪> Mh yeah, ddnets API simply sucks😂😂
08:09 <+bridge> <Jupstar ✪> Why do u need 8gb btw
08:09 <+bridge> <Ewan> i don't, it's just that i want the file loader thing to be future proof
08:10 <+bridge> <Ewan> i think for now i will just use the ddnet apis, since if ddnet ever needs >2GB files, the ddnet system apis will just be updated
08:10 <+bridge> <Jupstar ✪> Yeah^^
08:11 <+bridge> <Ewan> this std::filesystem perms/symlink thing is a real bummer
08:11 <+bridge> <Ewan> i expected more of mingw
08:11 <+bridge> <Ewan> if i want to expose this functionality
08:11 <+bridge> <Ewan> i have to use winapi
08:11 <+bridge> <Jupstar ✪> I didn't read everything u said sry
08:11 <+bridge> <Ewan> yea so i have a hunch that mingw is incorrectly reporting filesystem stuff
08:12 <+bridge> <Ewan> firstly std::filesystem::perms and std::filesystem::is_symlink and the like do not work for me on mingw
08:12 <+bridge> <Jupstar ✪> Oh
08:12 <+bridge> <Ewan> perms incorrectly reporting files as readable. and is_symlink thinking that the symbolic link i made with powershell is indeed not a symlink
08:13 <+bridge> <Jupstar ✪> Sad
08:13 <+bridge> <Ewan> yea
08:13 <+bridge> <Ewan> though, fs_* functions could be added to stat permissions and symlink status
08:14 <+bridge> <Ewan> oh shit
08:15 <+bridge> <Jupstar ✪> Long would be 32b on windows xd
08:15 <+bridge> <Ewan> `fs_listdir_fileinfo` leverages `WIN32_FIND_DATAW` on windows, contains a symlink flag
08:16 <+bridge> <Ewan> but it's not exposed by `CFsFileInfo`, the file info type used by `FS_LISTDIR_CALLBACK_FILEINFO` which is the fn ptr signature that `fs_listdir_fileinfo` uses
08:16 <+bridge> <Ewan> annoying!
08:16 <+bridge> <Ewan> i think this is a conversation for later on github
08:17 <+bridge> <Ewan> i either add this stupid functionality or i don't add file permission/symlink status to the file loader
08:20 <+bridge> <Ewan> just saw this for the first time in the loading menu. cheeky
08:20 <+bridge> <Ewan> ```cpp
08:20 <+bridge> <Ewan>         if(m_Menus.IsInit())
08:20 <+bridge> <Ewan>         {
08:20 <+bridge> <Ewan>             char aBuff[256];
08:20 <+bridge> <Ewan>             str_format(aBuff, std::size(aBuff), "%s [%d/%d]", CompCounter == 40 ? Localize("Why are you slowmo replaying to read this?") : Localize("Initializing components"), (CompCounter + 1), (int)ComponentCount());
08:20 <+bridge> <Ewan>             m_Menus.RenderLoading(pLoadingDDNetCaption, aBuff, 1 + SkippedComps);
08:20 <+bridge> <Ewan>             SkippedComps = 0;
08:21 <+bridge> <Ewan>         }
08:21 <+bridge> <Ewan> ```
08:21 <+bridge> <totar> I'm so glad the translators localize that text
08:21 <+bridge> <totar> lol
08:21 <+bridge> <Ewan> Yea
08:21 <+bridge> <Ewan> localize all
08:21 <+bridge> <Ewan> it's the way to go
08:28 <+bridge> <Ewan> I have no idea why they would std::regex without an error checking mechanism besides a single exception
08:28 <+bridge> <Ewan> which I can't even use because... exceptions are off
08:29 <+bridge> <Ewan> so i have to just pray the expression passed is valid, or do my own stupid regex parsing
08:29 <+bridge> <Ewan> I have no idea why they would allow std::regex in the standard without an error checking mechanism besides a single exception
08:29 <+bridge> <Ewan> they don't even have an `operator bool()`
08:31 <+bridge> <Jupstar ✪> Yep sucks hard
08:31 <+bridge> <Jupstar ✪> I wanted to add regex search support a while ago
08:32 <+bridge> <Ewan> they don't provide comparison operators either, so i can't even have a known dud std::regex object for comparison
08:32 <+bridge> <Ewan> you're just fucked
08:59 <+ChillerDragon> !jup emote and pinger completion now appends a : and a space for better emote spam and pingering
08:59 < chillerbot1> @Jupstar ✪
09:00 <+ChillerDragon> because pings without space at the end dont hit. like this one @Jupstar ✪! so now you can instantly type after complete no need for : or space
09:00 < ws-client> <ChillerDragon> <:poggers2:1008007455936094328> 
09:01 <+bridge> <Jupstar ✪> Epic
09:02 < ws-client> <Jupstar> 😂 yeah very nice 
09:05 < ws-client> <ChillerDragon22> https://zillyhuhn.com/cs/.1686207916.png
09:05 < ws-client> <ChillerDragon22> is that me being color blind or is that ugly af and super hard to read?
09:06 < ws-client> <ChillerDragon22> oh and html moment it swallowed the spaces
09:07 <+bridge> <fokkonaut> I am colorblind and I can say it is ugly af and super hard to read
09:08 < ws-client> <ChillerDragon> men are blind af
09:08 < ws-client> <ChillerDragon> where developer girls?
09:09 <+bridge> <fokkonaut> When fix ur client
09:09 <+bridge> <fokkonaut> https://cdn.discordapp.com/attachments/293493549758939136/1116262611797938196/image.png
09:10 <+bridge> <Jupstar ✪> deentroll
09:11 < ws-client> <ChillerDragon> oh yea @fokkonaut that looks much more sexy
09:11 <+bridge> <Jupstar ✪> im not colorblind but dark blue on dark background is risky xd
09:12 < ws-client> <ChillerDragon> since 50% of the webclient users are color blind i gotta do something
09:12 <+bridge> <fokkonaut> yes
09:12 <+bridge> <fokkonaut> https://bratgpt.com/
09:13 <+bridge> <Jupstar ✪> @fokkonaut do you read your user name here in discord in blue color?
09:13 <+bridge> <fokkonaut> u mean dev role?
09:13 <+bridge> <Jupstar ✪> yes
09:13 <+bridge> <fokkonaut> no thats purple to me
09:13 <+bridge> <Jupstar ✪> what color blindness do you have then?
09:13 <+bridge> <Jupstar ✪> most ppl have green red
09:14 <+bridge> <fokkonaut> me too, but i think also some other degree. Colors I can easily mix up depending on light level, etc:
09:14 <+bridge> <fokkonaut> brown - red
09:14 <+bridge> <fokkonaut> green - orange
09:14 <+bridge> <fokkonaut> yellow - light green
09:14 <+bridge> <fokkonaut> pink - grey
09:14 <+bridge> <fokkonaut> blue - purple
09:14 <+bridge> <fokkonaut> etc.
09:15 <+bridge> <Jupstar ✪> i c
09:15 <+bridge> <fokkonaut> sometimes its more clear sometimes not, depending on tone, light, and other factors
09:15 <+bridge> <Jupstar ✪> don't tell others, but my test to check if gamer girl is girl is to ask if dark purple is blue 😂
09:15 <+bridge> <Jupstar ✪> worked a few times already xD
09:16 <+bridge> <fokkonaut> first question people have: "how do you see traffic lights" - well, first im not dumb and green is at the bottom, and next up that green is more white already xD
09:16 <+bridge> <fokkonaut> xDDD
09:16 < ws-client> <ChillerDragon> because gril eye more op than male?
09:16 <+bridge> <Jupstar ✪> yeah
09:16 < ws-client> <ChillerDragon> indeed
09:16 < ws-client> <ChillerDragon> smort test
09:16 <+bridge> <Jupstar ✪> statistically like 10% of men are color blind, but only like 1% of women
09:16 <+bridge> <Jupstar ✪> smth like that
09:16 < ws-client> <ChillerDragon> so u gamer girl?
09:17 <+bridge> <fokkonaut> I am hehe
09:17 <+bridge> <Jupstar ✪> i am gamer girliest
09:18 < ws-client> <ChillerDragon> UwU
09:20 <+bridge> <fokkonaut> https://cdn.discordapp.com/attachments/293493549758939136/1116265442990903386/IMG-20210815-WA0000.jpg
09:20 <+bridge> <fokkonaut> @Jupeyy_Keks
09:20 < ws-client> <ChillerDragon> international foggonut
09:21 <+bridge> <fokkonaut> for me the top 5 bars are very very similar, except in the 2nd and 3rd row the yellow/green spectrum is a little more bright/pale
09:21 <+bridge> <Jupstar ✪> uff, for me all are completely different 😄
09:21 <+bridge> <fokkonaut> Then I am definitely more colorblind than you :P Yet I can see the dev role as purple
09:22 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116266042914775050/image.png
09:22 <+bridge> <Jupstar ✪> how about this?
09:22 <+bridge> <fokkonaut> fuck you
09:22 <+bridge> <Jupstar ✪> what color do you see?
09:22 <+bridge> <fokkonaut> thats blue
09:23 <+bridge> <fokkonaut> xD?
09:23 <+bridge> <Jupstar ✪> ah ok
09:23 <+bridge> <fokkonaut> IS IT
09:23 <+bridge> <fokkonaut> ??
09:23 <+bridge> <Jupstar ✪> yeah the color often works
09:23 <+bridge> <Jupstar ✪> no its purple too
09:23 <+bridge> <Jupstar ✪> but a darker version
09:23 <+bridge> <fokkonaut> it looks more blue to me
09:23 <+bridge> <Jupstar ✪> seems like they especially struggle with dark purple
09:23 <+bridge> <ryozuki> its on the edfe
09:23 <+bridge> <ryozuki> edge
09:23 < ws-client> <ChillerDragon> edge-l
09:23 <+bridge> <ryozuki> but purple
09:24 <+bridge> <fokkonaut> ryo here when its gettin edgy
09:24 <+bridge> <fokkonaut> xdd
09:25 <+bridge> <fokkonaut> when i was younger, i painted the sky purple until my teacher said "ehh, why you do that"
09:25 <+bridge> <Ewan> lol
09:25 <+bridge> <fokkonaut> thats when i first really noticed xdxd and another teacher was mad at me until i said "dude, im colorblind you fucking cunt" and then she shut up and apologized
09:25 <+bridge> <fokkonaut> xd
09:25 <+bridge> <Jupstar ✪> lel
09:27 <+bridge> <fokkonaut> @Jupeyy_Keks ask me yellow/green ish
09:27 <+bridge> <fokkonaut> its so hard for me
09:27 <+bridge> <fokkonaut> tee skins
09:27 <+bridge> <ryozuki> @fokkonaut yellow/green ish?
09:27 <+bridge> <fokkonaut> skins
09:27 <+bridge> <ryozuki> dad joke
09:27 <+bridge> <fokkonaut> wat
09:28 <+bridge> <Jupstar ✪> have to make a skin first 😄
09:28 <+bridge> <fokkonaut> oki
09:28 <+bridge> <ryozuki> my bad joke flew by
09:28 <+bridge> <ryozuki> not good morning
09:28 <+bridge> <fokkonaut> did you skip gym today
09:28 <+bridge> <ryozuki> im at gym rj
09:28 <+bridge> <fokkonaut> ah
09:28 <+bridge> <fokkonaut> makes sense
09:29 <+bridge> <ryozuki> xd
09:29 <+bridge> <fokkonaut> u need to stimulate your brain
09:29 <+bridge> <fokkonaut> then it works better
09:29 <+bridge> <fokkonaut> xd
09:29 <+bridge> <fokkonaut> its like those who need coffee
09:29 <+bridge> <fokkonaut> or me who needs nictoine :x
09:29 <+bridge> <Jupstar ✪> this one is hard
09:29 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116267749220552746/image.png
09:29 <+bridge> <fokkonaut> thats green
09:29 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116267850953412660/image.png
09:30 <+bridge> <Jupstar ✪> its closer to yellow than green
09:30 <+bridge> <fokkonaut> where the fuck is green and yellow
09:30 <+bridge> <fokkonaut> https://cdn.discordapp.com/attachments/293493549758939136/1116267933837054012/image.png
09:30 <+bridge> <Jupstar ✪> yellow is left
09:30 <+bridge> <Jupstar ✪> red to yellow to green
09:30 <+bridge> <fokkonaut> put the slider to where green begins
09:30 <+bridge> <Ewan> i think it's hard to say even for non colorblind
09:31 <+bridge> <National Insurance Clerk (Cyan)> That's true, but it looks very similar to the apple skin, named "apple green"
09:31 <+bridge> <National Insurance Clerk (Cyan)> Kinda canon?
09:31 <+bridge> <National Insurance Clerk (Cyan)> Well what the hell does canon mean in this context
09:31 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116268239018803281/image.png
09:31 <+bridge> <National Insurance Clerk (Cyan)> I gotta think before I type
09:31 <+bridge> <Jupstar ✪> i'd around here is "clear" green
09:31 <+bridge> <National Insurance Clerk (Cyan)> Yeah that's sensible
09:32 <+bridge> <fokkonaut> @Jupeyy_Keks for example, now in comparison, and with the box around it, i can see the differences pretty good
09:32 <+bridge> <fokkonaut> comparison is always a good thing for colorblind people
09:32 <+bridge> <National Insurance Clerk (Cyan)> But theres everything in between yellow and  you'd typically call a shade of green, rather than a shade of yellow
09:33 <+bridge> <fokkonaut> sensitive*
09:33 <+bridge> <Jupstar ✪> the default skin probably makes it a bit darker
09:33 <+bridge> <National Insurance Clerk (Cyan)> No no
09:33 <+bridge> <Jupstar ✪> but i'd say it's still yellow
09:33 <+bridge> <National Insurance Clerk (Cyan)> Sensible
09:33 <+bridge> <National Insurance Clerk (Cyan)> As in makes sense
09:33 <+bridge> <fokkonaut> ah
09:33 <+bridge> <fokkonaut> ye
09:33 <+bridge> <fokkonaut> sry i thought u r @ChillerDragon english pro
09:34 < ws-client> <ChillerDragon> wot
09:34 < ws-client> <ChillerDragon> pinger
09:34 <+bridge> <fokkonaut> https://github.com/ddnet/ddnet/pull/1272
09:34 <+bridge> <fokkonaut> xD
09:34 < ws-client> <ChillerDragon> axaxax
09:34 <+bridge> <Jupstar ✪> "Lime is a color that is a shade of yellow-green, so named because it is a representation of the color of the citrus fruit called limes. "
09:34 <+bridge> <Jupstar ✪> https://en.wikipedia.org/wiki/Lime_(color)
09:34 <+bridge> <fokkonaut> its 5 years ago why i still remember this shit
09:34 <+bridge> <Jupstar ✪> i'd say its on the yellow part of the lime color xD
09:34 <+bridge> <fokkonaut> lime best
09:36 <+bridge> <Jupstar ✪> left is the color in the ddnet color picker, then comes lime from wikipedia, then the color the tee has
09:36 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116269539823468624/image.png
09:37 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116269653971447868/image.png
09:37 <+bridge> <fokkonaut> default skins has always been more green/beige for me
09:37 <+bridge> <Jupstar ✪> same colors 
09:37 <+bridge> <Jupstar ✪> tee, color picker, wiki
09:39 <+bridge> <fokkonaut> its so warm in the office...
09:40 <+bridge> <fokkonaut> since i have just opened one of these, which color is this?
09:40 <+bridge> <fokkonaut> https://cdn.discordapp.com/attachments/293493549758939136/1116270475677552680/fanta-exotic-330ml-9262-001-e1593974801426.png
09:40 <+bridge> <Jupstar ✪> id say thats green like the leaf on it
09:41 <+bridge> <Jupstar ✪> grass green maybe
09:41 <+bridge> <Jupstar ✪> bit lighter
09:41 <+bridge> <fokkonaut> green yes, but the green from the leaf is way darker
09:41 <+bridge> <Jupstar ✪> its a bit darker yes
09:41 <+bridge> <fokkonaut> in real life at least
09:41 <+bridge> <fokkonaut> but ye its green i guess so too
09:42 <+bridge> <fokkonaut> @Jupeyy_Keks u work in an office?
09:42 <+bridge> <Jupstar ✪> sometimes xd
09:42 <+bridge> <fokkonaut> u have a table that u can change the height?
09:42 <+bridge> <Jupstar ✪> yes
09:42 <+bridge> <fokkonaut> do you use it
09:42 <+bridge> <Jupstar ✪> no 😂
09:42 <+bridge> <fokkonaut> im using it right now for the first time, its pretty nice actually
09:42 <+bridge> <Jupstar ✪> i used it 5 times and then decided it sucks
09:43 <+bridge> <fokkonaut> i dont think it sucks tbh, been standing for one hour almost
09:43 <+bridge> <Jupstar ✪> generally its cool to adjust the height but i probably prefer to work while sitting
09:43 <+bridge> <fokkonaut> me too, but its nice and healthy
09:43 <+bridge> <fokkonaut> ofc not 8h standing
09:43 <+bridge> <fokkonaut> but being able to stand up when ur back hurts or whatever
09:44 <+bridge> <Jupstar ✪> office jobs are always bad for your health xd
09:44 <+bridge> <Jupstar ✪> i slowly feel that im getting older xD
09:44 <+bridge> <fokkonaut> ye but mostly back problems
09:44 <+bridge> <fokkonaut> working on the roof for years is also not good
09:44 <+bridge> <fokkonaut> or on baustel
09:45 <+bridge> <fokkonaut> baustelle
09:45 <+bridge> <fokkonaut> construction side worker
09:45 <+bridge> <fokkonaut> whatever
09:47 <+bridge> <Jupstar ✪> conclusion: work is not healthy
09:48 <+bridge> <fokkonaut> conclusion: life sux
09:48 <+bridge> <Jupstar ✪> 🥲
09:48 <+bridge> <fokkonaut> cant argue about that
09:48 <+bridge> <fokkonaut> xddd
09:48 <+bridge> <ryozuki> :fuckyousnail:
09:48 <+bridge> <fokkonaut> but its still worth it
09:49 <+bridge> <ryozuki> use rust to ease the pain
09:49 <+bridge> <fokkonaut> <a:pepedrive:1022784911679172638> 🌴
09:49 <+bridge> <fokkonaut> sorry i dont need more pain
09:49 <+bridge> <ryozuki> :greenthing:
09:51 < ws-client> <ChillerDragon> wait i still didnt add :fuckyousnail: id?
09:52 < ws-client> <ChillerDragon> ryo go leak id
09:52 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/emojis/691290240266141766.webp
09:54 < ws-client> <ChillerDragon> ty
09:56 < ws-client> <ChillerDragon2> pog pog <:fuckyousnail:691290240266141766> 
09:57 <+bridge> <cyberFighter> @fokkonaut
09:57 <+bridge> <fokkonaut> hi
09:57 <+bridge> <cyberFighter> you are lurking
09:57 <+bridge> <fokkonaut> i like ur tortilla picture
09:58 <+bridge> <fokkonaut> no
09:58 <+bridge> <fokkonaut> i am working laptop + 2 screens so i can spot your pings faster than the light travels
09:58 <+bridge> <cyberFighter> ok
09:58 <+bridge> <fokkonaut> WAIT
09:58 <+bridge> <cyberFighter> ?
09:58 <+bridge> <fokkonaut> is your profile picture
09:58 <+bridge> <fokkonaut> this one thing
09:58 < ws-client> <ChillerDragon2> ?xd
09:59 <+bridge> <fokkonaut> wait
09:59 <+bridge> <cyberFighter> what thing
09:59 <+bridge> <fokkonaut> https://www.youtube.com/watch?v=WtO3AHMBePY
09:59 <+bridge> <fokkonaut> this
09:59 <+bridge> <cyberFighter> no
10:00 <+bridge> <fokkonaut> ok
10:00 <+bridge> <Ewan> u should consider using the discord api
10:00 <+bridge> <Ewan> instead of asking for every emoji xd
10:00 <+bridge> <cyberFighter> :troll:
10:01 < ws-client> <ChillerDragon2> @Ewan i got all
10:01 <+bridge> <Ewan> nice
10:01 < ws-client> <ChillerDragon> all i need*
11:10 <+bridge> <fokkonaut> i hate css flip animations
11:10 <+bridge> <fokkonaut> why is it so dumb
11:10 <+ChillerDragon> flippin css
11:11 <+ChillerDragon> i am still waiting for a browser with proper front end error messages for html and css
11:11 <+ChillerDragon> because i refuse to use bloated css and html generators
11:12 <+ChillerDragon> we should replace ddnet desktop client with a mobile first electron app
11:12 <+bridge> <Ewan> great idea
11:14 <+bridge> <ryozuki> tauri
11:15 <+bridge> <Robyt3> write a DDNet launcher in rust, so graphics settings can be changed outside of the client
11:15 <+ChillerDragon> oh yea ddnet launcher like polyMC would be cool
11:15 <+bridge> <ryozuki> a settings editor should be ez
11:15 <+bridge> <ryozuki> i could make it
11:15 <+bridge> <ryozuki> with egui
11:16 <+bridge> <Robyt3> we just need to be able to change the graphics settings that crash the client for some people
11:16 <+ChillerDragon> different config directories and different bot versions in one launcher 
11:16 <+bridge> <Robyt3> and buttons to open the config directory, website etc would be nice
11:16 <+bridge> <ryozuki> true
11:17 <+bridge> <ryozuki> ill look into it
11:17 <+ChillerDragon> are there configs that crash the client on launch even?
11:17 <+ChillerDragon> never seen it
11:17 <+bridge> <Robyt3> it could also detect if the client crashes and show a helpful message
11:17 <+ChillerDragon> ye!
11:18 <+bridge> <Robyt3> for some graphics cards and backends it seems to crash
11:18 <+bridge> <Robyt3> and we can't detect this in the client, so we need a launcher
11:18 <+ChillerDragon> how would it work with steam tho?
11:18 <+ChillerDragon> does the steam game launch the ddnet launcher?
11:18 <+bridge> <Robyt3> yeah, but we could at an option to the launcher to skip it maybe
11:18 <+bridge> <Robyt3> add*
11:18 <+ChillerDragon> ye
11:18 <+bridge> <fokkonaut> since when heinrich not admin but this weird role xd
11:18 <+bridge> <fokkonaut> https://cdn.discordapp.com/attachments/293493549758939136/1116295283580612640/image.png
11:19 <+ChillerDragon> sounds like a lot of work but would be cool
11:19 <+bridge> <ryozuki> since always
11:19 <+bridge> <fokkonaut> really
11:19 <+bridge> <ryozuki> @fokkonaut actually idk if its cuz me
11:19 <+bridge> <ryozuki> probs not
11:19 <+ChillerDragon> heinrich refuses to in game admin him self
11:19 <+bridge> <fokkonaut> i never saw this role before
11:19 <+bridge> <ryozuki> but back then
11:19 <+bridge> <ryozuki> i rly was anti heinrich being admin
11:19 <+bridge> <ryozuki> xd
11:19 <+ChillerDragon> heinrich is ssh admin only
11:19 <+bridge> <ryozuki> so i guess they made it not obvious
11:19 <+bridge> <fokkonaut> ah so he is admin but not officially
11:19 <+bridge> <fokkonaut> ye
11:20 <+bridge> <fokkonaut> very unobvious
11:20 <+bridge> <fokkonaut> xd
11:20 <+ChillerDragon> he is also technically never authed in game
11:20 <+bridge> <ryozuki> xd
11:20 <+ChillerDragon> you can ez kickvote him
11:20 <+ChillerDragon> i know from a friend
11:20 <+bridge> <ryozuki> we all know he gets to decide most stuff
11:20 <+ChillerDragon> decide yes
11:20 <+ChillerDragon> but no ingame powa 
11:20 <+ChillerDragon> so no regular admin
11:20 <+bridge> <fokkonaut> thats not the definition of admin
11:20 <+bridge> <ryozuki> he has
11:20 <+ChillerDragon> you cant pinger him for ingame moderation
11:21 <+bridge> <ryozuki> ingame admin is the least of problems lel
11:21 <+bridge> <ryozuki> like i couldnt care less
11:21 <+bridge> <fokkonaut> hot topics
11:21 <+ChillerDragon> ye other than that he might be the person in tw with the most power
11:21 <+bridge> <ReiTW> forgot to mention chiller
11:21 <+bridge> <ReiTW> docker is cool for auto-restart when crashing, no need to make a bash script for that
11:22 <+ChillerDragon> bash script is cool for auto restarz when crashing, no need to use docker for that
11:22 <+ChillerDragon> ``while :; do DDNet-Server; done``
11:22 <+bridge> <ryozuki> heinrich for example decided (mostly alone?) the hold hammer on freeze thing
11:22 <+bridge> <ryozuki> which has been a before and after for ddnet
11:22 <+ChillerDragon> that was intense change yes
11:22 <+bridge> <Mr.Gh0s7> btw @Robyt3 is this a good place for the Preview button?
11:22 <+bridge> <Mr.Gh0s7> https://cdn.discordapp.com/attachments/293493549758939136/1116296253219819640/PreviewButtonPlace.png
11:23 <+bridge> <Robyt3> feels weird being together with the buttons that change the sorting
11:23 <+bridge> <ryozuki> @Reteah was it hard to implement?
11:23 <+bridge> <ryozuki> i didnt look at the pr but im curious
11:23 <+bridge> <Mr.Gh0s7> Since I managed to do it nope
11:23 <+bridge> <ryozuki> nice feature
11:24 <+bridge> <ryozuki> xd
11:25 <+bridge> <Mr.Gh0s7> Hmm it must be on the Filemanager/explorer though else it'll be frustrating to change it
11:25 <+bridge> <Robyt3> yeah. what if it's on the right side like you can expand the server browser in vanilla
11:25 <+bridge> <Mr.Gh0s7> well I just hooked it up to the editor code so I didn't do much tbh
11:25 <+bridge> <Mr.Gh0s7> ok will do that ;)
11:26 <+bridge> <Robyt3> https://cdn.discordapp.com/attachments/293493549758939136/1116297178466492446/image.png
11:26 <+bridge> <fokkonaut> ye and either did he not think about it or just went for it
11:26 <+bridge> <cellegenrih> No multiline texts?
11:26 <+bridge> <Robyt3> maybe not outside if that causes issues
11:27 <+bridge> <Robyt3> I think they exist but vanilla chose not to do it
11:28 <+bridge> <cellegenrih> Or they didn't need it
11:28 <+bridge> <fokkonaut> hi roby
11:28 <+bridge> <Robyt3> we didn't use the whole "Playing/Spectating ... on ... " text either
11:28 <+bridge> <Robyt3> hi fokko
11:29 <+bridge> <ryozuki> kokkonaut
11:29 <+bridge> <fokkonaut> ryozoozki
11:29 <+bridge> <fokkonaut> :zooz:
11:29 <+bridge> <ryozuki> 🥥
11:29 <+bridge> <bencie> 🥥
11:29 <+bridge> <ryozuki> fun fact, i dont zooz on fng
11:29 <+bridge> <cellegenrih> yet :troll:
11:30 <+bridge> <fokkonaut> fun fact, i have a proxy which fills up fng server so every part of the map is visible for at least 1 client and then all the info gets sent to my main client so i can zooz in peace
11:30 <+bridge> <Mr.Gh0s7> which fng though?
11:30 <+bridge> <fokkonaut> its a joke
11:30 <+bridge> <cellegenrih> Ah yes, you just invented dos
11:31 <+bridge> <fokkonaut> no?
11:31 <+bridge> <fokkonaut> i find it funny, 90% of the things you say are random
11:31 <+bridge> <cellegenrih> :kek: not the dos operator
11:31 <+bridge> <cellegenrih> dos attacks
11:31 <+bridge> <fokkonaut> so random xd
11:31 <+bridge> <cellegenrih> sorry, I'll write more specifically in the future
11:32 <+bridge> <cellegenrih> please try /cellegen random to make me say random bs
11:32 <+bridge> <cellegenrih> please try /cellegen random to make me say random bs (don't make a bot which does that :justatest: )
11:33 <+bridge> <ryozuki> always been like this
11:33 <+bridge> <ryozuki> :justatest:
11:34 <+bridge> <cellegenrih> that's why you guys hate me so much, and I'm living for it
11:41 <+bridge> <Ewan> What syntax highlighting lib are you using?
11:41 <+bridge> <Ewan> All of them i tried sucked
11:41 <+bridge> <Ewan> I ended up using monaco editor guts and it works pretty well
11:42 <+bridge> <ryozuki> nothing is better than tree sitter
11:42 <+bridge> <Ewan> <https://github.com/ewancg/ewancg.github.io/blob/4bb740396c4e847788073dd240d67c4a6ee3f76c/gist.js#L77>
11:42 <+bridge> <ryozuki> but idk if it has a js lib
11:42 <+bridge> <ryozuki> tree sitter is best
11:42 <+bridge> <ryozuki> neovim uses it
11:43 <+bridge> <Ewan> yea i meant web ones
11:43 <+bridge> <ryozuki> its so good its on par with a lsp backed highlighter
11:43 <+bridge> <ryozuki> yeah tree sitter is standalone too
11:43 <+bridge> <ryozuki> https://github.com/edg-l/treelight
11:43 <+bridge> <ryozuki> i made this
11:43 <+bridge> <ryozuki> but may be a bit broken
11:45 <+bridge> <ryozuki> i should retake it xd
11:45 <+bridge> <Ewan> yea my website surely needs a bit of love too
11:45 <+bridge> <Ewan> i just don’t do the web stuff often
11:45 <+bridge> <Ewan> the vanilla js approach sucks more and more
11:45 <+bridge> <Ewan> as time goes on
11:48 <+bridge> <Ewan> hey @Robyt3 while you're doing all these dope UI improvements, should u add a horizontal mode to the scroll viewer?
11:49 <+bridge> <Robyt3> do we need horizontal scrolling anywhere though?
11:49 <+bridge> <Ewan> i did for some stuff, my implementation is outdated now, and it blows anyway
11:49 <+bridge> <Robyt3> it's somewhat inconvenient I'd say, because most users don't have horizontal scrolling mouse wheels either
11:50 <+bridge> <Ewan> as long as it's not bi-directional scroll main mouse wheel works too
11:50 <+bridge> <Ewan> also, shift or alt + scroll wheel is the convention for that
11:51 <+bridge> <Robyt3> I'll consider adding it eventually
11:52 <+bridge> <Ewan> all my implementation did was map x/y to y/x and w/h to h/w, etc.
11:52 <+bridge> <Ewan> swap dimensions
11:53 <+bridge> <Ewan> it was fine
11:53 <+bridge> <Ewan> it just would have been better if there was more time put into it and less fear of breaking other shit
11:57 <+bridge> <Ewan> oh yeah, it would be nice if when the game is maximized on close it'll be maximized when opened again
13:13 <+bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1116324211179409428/image.png
13:13 <+bridge> <Ewan> sweet
13:17 <+bridge> <Ewan> i added `fs_is_readable` and fs_is_symlink`
13:17 <+bridge> <Ewan> i added `fs_is_readable` and `fs_is_symlink`
13:17 <+bridge> <Ewan> the former is easily expandible to account for write and exec access too, i just have it that way atm
13:18 <+bridge> <Robyt3> how does `fs_is_readable` work? as far as I know, you can never know if you can truly read/write a file unless you try
13:19 <+bridge> <Robyt3> at least on Windows
13:19 <+bridge> <Ewan> i was originally using std::filesystem for checking readable/symlink status, but it turns out that on MinGW the platform differences of how permissions and softlinks work are so different, they just decided screw it & to make the API report wrong stuff
13:19 <+bridge> <Ewan> on Windows i'm using security APIs for is readable
13:20 <+bridge> <Robyt3> well, as long as nobody tries using the game on a network drive
13:20 <+bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1116325832508583946/snippet.cpp
13:21 <+bridge> <Ewan> `generic_access_rights` on line 10 is only checking for read access, we can easily bind this enum & add another parameter if anyone cares
13:21 <+bridge> <Ewan> `generic_access_rights` on line 10 is saying to only check for read access, we can easily bind this enum & add another parameter if anyone cares
13:21 <+bridge> <Robyt3> what do you need this for?
13:22 <+bridge> <Ewan> i'm creating an object that will read files in batches & since it's going to be relatively abstract i want it to be versatile and the errors to be descriptive
13:23 <+bridge> <Ewan> i plan to make an async version and use that for skin and asset loading. but it's not needed for those atm, though it would be nice to say why a read failed
13:23 <+bridge> <Robyt3> couldn't you call `GetLastError` on Windows or check `errno` on UNIX after the operation already failed?
13:24 <+bridge> <Jupstar ✪> PANIC
13:24 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116326801220837376/image.png
13:24 <+bridge> <Voxel> @RYOzu
13:24 <+bridge> <Jupstar ✪> lel
13:24 <+bridge> <Voxel> shit
13:24 <+bridge> <Jupstar ✪> nice ping
13:24 <+bridge> <Jupstar ✪> Hi RYO
13:24 <+bridge> <Jupstar ✪> welcome to dev chat
13:24 <+bridge> <Robyt3> ```
13:24 <+bridge> <Robyt3> ddnet_engine_shared.lib(std-391022a4250a8b9a.std.feb3b897-cgu.0.rcgu.o) : error LNK2019: unresolved external symbol __imp_NtCreateFile referenced in function _ZN3std3sys7windows2fs20open_link_no_reparse17h9b3d5753800c4b4fE [D:\a\ddnet\ddnet\debug\game-server.vcxproj]
13:24 <+bridge> <Robyt3> ddnet_engine_shared.lib(std-391022a4250a8b9a.std.feb3b897-cgu.0.rcgu.o) : error LNK2019: unresolved external symbol __imp_RtlNtStatusToDosError referenced in function _ZN3std3sys7windows2fs20open_link_no_reparse17h9b3d5753800c4b4fE [D:\a\ddnet\ddnet\debug\game-server.vcxproj]
13:25 <+bridge> <Robyt3> ddnet_engine_shared.lib(std-391022a4250a8b9a.std.feb3b897-cgu.0.rcgu.o) : error LNK2019: unresolved external symbol __imp_NtReadFile referenced in function _ZN3std3sys7windows6handle6Handle16synchronous_read17h609a485d92162e8dE [D:\a\ddnet\ddnet\debug\game-server.vcxproj]
13:25 <+bridge> <Robyt3> ddnet_engine_shared.lib(std-391022a4250a8b9a.std.feb3b897-cgu.0.rcgu.o) : error LNK2019: unresolved external symbol __imp_NtWriteFile referenced in function _ZN3std3sys7windows6handle6Handle17synchronous_write17h5e143db420a86fa8E [D:\a\ddnet\ddnet\debug\game-server.vcxproj]
13:25 <+bridge> <Robyt3> D:\a\ddnet\ddnet\debug\DDNet-Server.exe : fatal error LNK1120: 4 unresolved externals [D:\a\ddnet\ddnet\debug\game-server.vcxproj]
13:25 <+bridge> <Robyt3> ```
13:25 <+bridge> <Robyt3> This is the third time a CI build failed on Windows like this in the last two days
13:25 <+bridge> <Ewan> not afaik, seems unintended with io_* because it's all wrapped
13:25 <+bridge> <Ewan> and it wouldn't be as descriptive anyway
13:25 <+bridge> <deen> Even better, github is not loading for me at all 😄
13:25 <+bridge> <Ewan> wow this blows
13:25 <+bridge> <Voxel> oh man
13:27 <+bridge> <deen> I'm wondering how we can break linking non-deterministically. My assumption is that is a VS problem?
13:32 <+bridge> <ReiTW> damn my new laptop is great, but not graphic card rip
13:32 <+bridge> <Jupstar ✪> VS forget the mutex
13:33 <+bridge> <Jupstar ✪> hardware info or did not happen
13:33 <+bridge> <ReiTW> I have a intel iris xe
13:33 <+bridge> <murpi> Maybe the sliders in settings? Some games do that
13:33 <+bridge> <ReiTW> i5-1240p, 16gb ddr5 4800MHz, and a beautiful oled screen 2.8k
13:34 <+bridge> <Ewan> that is some fast ram
13:34 <+bridge> <Robyt3> yeah, we have the value sliders, but we don't have any scroll regions where the content scrolls horizontally
13:34 <+bridge> <Jupstar ✪> nice, but how can it not have a GPU then 😂
13:34 <+bridge> <ReiTW> it's a pro laptop, not for gaming
13:34 <+bridge> <ReiTW> zenbook 14 ux3402za
13:34 <+bridge> <Ewan> fwiw i added it in my status bar settings gui, it was sort of unique https://cdn.discordapp.com/attachments/806786136474910730/1093164149846061177/2023-04-05_07-23-04.mp4
13:35 <+bridge> <Ewan> mute video
13:35 <+bridge> <cellegenrih> some CPUs don't have graphic drivers compatibility
13:35 <+bridge> <Ewan> what
13:35 <+bridge> <Jupstar ✪> wat xd
13:35 <+bridge> <Jupstar ✪> fresh music 😂
13:36 <+bridge> <Ewan> sorry
13:36 <+bridge> <Ewan> this is old video
13:36 <+bridge> <Ewan> i forgot to mute
13:36 <+bridge> <cellegenrih> As I wrote, some intel CPUs cannot use intel graphic drivers like UHD, because it is not compatible
13:36 <+bridge> <ReiTW> by gpu I meant a nvidia chip or smth like that, It is using the iGPU obv
13:36 <+bridge> <Jupstar ✪> wat xd
13:36 <+bridge> <Ewan> that makes no more sense
13:36 <+bridge> <Jupstar ✪> yeah i read it like that 😄
13:37 <+bridge> <Jupstar ✪> the only case that i know where the iGPU could not be used was when the monitor was plugged into the gpu (even for laptops this exists)
13:37 <+bridge> <Jupstar ✪> so it was forced to use the high perf GPU instead
13:38 <+bridge> <Jupstar ✪> even then it might™️ still be usable offscreen
13:38 <+bridge> <Jupstar ✪> depending if the driver allows this
13:39 <+bridge> <cellegenrih> Ok, in technical terms, what I mean is, some CPUs' **Processor Graphics** don't have a driver for you to install and instead uses the system based Graphics driver to display
13:39 <+bridge> <Jupstar ✪> https://www.intel.com/content/www/us/en/support/articles/000058958/graphics.html
13:39 <+bridge> <cellegenrih> So yes, you cannot use drivers on some CPUs like mobile CPUs cuz it only uses the system graphics
13:39 <+bridge> <Ewan> Only if the igpu is really really old
13:39 <+bridge> <Ewan> and that's moot since a driver *did* exist for it at some point
13:40 <+bridge> <Jupstar ✪> its called OEM and u can disable that/ignore that
13:40 <+bridge> <cellegenrih> Some 2010 computers are still around
13:40 <+bridge> <cellegenrih> Some 2010 computers / laptops are still around
13:40 <+bridge> <Ewan> It would have to be even older
13:40 <+bridge> <Jupstar ✪> even they simply got the drivers from intel and simply customized them a bit
13:40 <+bridge> <Jupstar ✪> bcs what do i know.. they maybe added a wifi controler or stuff like that
13:41 <+bridge> <Jupstar ✪> that would break else
13:41 <+bridge> <Jupstar ✪> back in the old days the GPUs also often were not part of the CPU
13:41 <+bridge> <Jupstar ✪> but of the motherboard
13:42 <+bridge> <cellegenrih> I think who knows how an old 2000's computer ran would know this info
13:42 <+bridge> <Ewan> Why are you sassing
13:42 <+bridge> <Jupstar ✪> anyway anything before 2015 is dead for me
13:42 <+bridge> <Jupstar ✪> xd
13:42 <+bridge> <Jupstar ✪> oh we in 2023 already
13:42 <+bridge> <Jupstar ✪> then lets up it to 2018
13:43 <+bridge> <Jupstar ✪> 5 years support
13:43 <+bridge> <Jupstar ✪> chairn trigger warning ^
13:44 <+bridge> <cellegenrih> I think for today's standards, thats still a pretty good date
13:44 <+bridge> <Jupstar ✪> computer industry evolves so fast, everything gets bloated, nobody understands anything anymore
13:44 <+bridge> <Jupstar ✪> AMD releases integrated gpus and drop support after only like 2 years lmao
13:49 <+bridge> <deen> I'll keep reporting problems on my 2009 laptop though 😄
13:49 <+bridge> <Jupstar ✪> 2000 what?
13:52 <+bridge> <Jupstar ✪> the funny thing about computer industry is that it's completely different than any other industry
13:52 <+bridge> <Jupstar ✪> 
13:52 <+bridge> <Jupstar ✪> it evolves insanely fast
13:52 <+bridge> <Jupstar ✪> almost no backward compability
13:52 <+bridge> <Jupstar ✪> open source (free premium quality luxus stuff, wtf :D)
13:52 <+bridge> <Jupstar ✪> relatively progressive community (complete opposite of most "normal" ppl)
13:52 <+bridge> <Jupstar ✪> i mean in just 20-30 years we got so far xd
13:52 <+bridge> <Mr.Gh0s7> I didn't managed to do it outside the file{manager,explorer} so I did it inside 😉 . Also I made it so the `View` resizes whether map preview is active
13:52 <+bridge> <Mr.Gh0s7> https://cdn.discordapp.com/attachments/293493549758939136/1116334022461759588/live_map_preview_in_editor3.mp4
13:52 <+bridge> <Jupstar ✪> that's why u have to stay on the train
13:53 <+bridge> <Jupstar ✪> friss oder stirb
13:53 <+bridge> <cellegenrih> cuz we care of this tech, people make insane money off of it and we found ways to exploit many things in the world with computers alone
13:54 <+bridge> <Mr.Gh0s7> I should also mention I still haven't managed to successfully clip the contents of some maps. idk what breaks
13:54 <+bridge> <cellegenrih> Can you snap the camera to the checkpoint 1 entity, so that wherever that cp1 entity is, it'll default the camera's position to that?
13:55 <+bridge> <Mr.Gh0s7> I haven't reached that part but yeah I will do that ;)
13:55 <+bridge> <Teero> nice desktop envirement ⭐
13:55 <+bridge> <Mr.Gh0s7> it's dwm with gaps and picom with round corners and stuff
13:56 <+bridge> <Teero> ah nice
13:56 <+bridge> <Teero> what distro?
13:56 <+bridge> <Mr.Gh0s7> artix
13:56 <+bridge> <Jupstar ✪> does it now use a viewport, or did u solve it differently?
13:56 <+bridge> <Teero> what do you use for the bar?
13:56 <+bridge> <Mr.Gh0s7> dwm has a bar and I use that
13:56 <+bridge> <Teero> hmm okay
13:57 <+bridge> <deen> I'm extremely skeptical of new developments in the software industry. It's layers upon layers of abstractions which are hiding all the interesting interactions and make debugging and end-to-end testing nigh impossible. It works for megacorps, but for smaller companies I think it can actually be a competitive advantage not to buy into all the hype.
13:57 <+bridge> <Mr.Gh0s7> It still as it is I didn't manage to use the background menu's inner workings :pepeH:
13:59 <+bridge> <Jupstar ✪> you are not wrong. but the mega corps give the direction, that's why i wrote "friss oder stirb"
13:59 <+bridge> <Jupstar ✪> 
13:59 <+bridge> <Jupstar ✪> that's their spirit.
13:59 <+bridge> <Jupstar ✪> 
13:59 <+bridge> <Jupstar ✪> I also agree that it can get very annoying that abstractions destroy everything, but not every abstraction comes because of making stuff easier, but are also build for backward compability.
13:59 <+bridge> <Jupstar ✪> 
13:59 <+bridge> <Jupstar ✪> If you'd redesign an OS nowadays u probably have to add many layers to it, just to emulate existing stuff 😄
14:00 <+bridge> <Jupstar ✪> i'd generally say modern APIs are often bloated bcs they want to support to many varrying hardware
14:00 <+bridge> <Jupstar ✪> 
14:00 <+bridge> <Jupstar ✪> controllers, joysticks, what do i know what exists
14:00 <+bridge> <Jupstar ✪> 
14:00 <+bridge> <Jupstar ✪> and users having one of the unsupported things get directly mad xD
14:04 <+bridge> <heinrich5991> you probably want to open the file and report the error of that instead
14:04 <+bridge> <heinrich5991> checking access rights is incredibly error-prone and not actually guaranteed to work
14:05 <+bridge> <Ewan> that’s not the only thing I’m checking kill
14:05 <+bridge> <Ewan> that’s not the only thing I’m checking lol
14:05 <+ChillerDragon> heinrich ur name is so hard to make a funny nickname of
14:05 <+ChillerDragon> but when python huffman?
14:05 <+bridge> <heinrich5991> hmmmm :/
14:05 <+ChillerDragon> this summer?
14:05 <+bridge> <heinrich5991> theoretically I'd love to have a release of uniffi
14:06 <+bridge> <heinrich5991> but I guess I can't wait for that
14:06 <+ChillerDragon> any ETA?
14:06 <+bridge> <heinrich5991> so maybe(!) I can look into it this evening
14:06 <+ChillerDragon> how fast is their dev cycle?
14:06 <+bridge> <heinrich5991> no ETA
14:06 <+ChillerDragon> release sounds good
14:06 <+bridge> <heinrich5991> so let me try without
14:06 <+bridge> <heinrich5991> sorry for the wait already
14:06 <+ChillerDragon> np
14:06 <+ChillerDragon> i told u im ok w wait
14:06 <+bridge> <heinrich5991> (in the evening, maybe(!))
14:06 <+ChillerDragon> i rather wait and have it clean than getting deprecated
14:07 <+ChillerDragon> you can also code libtw2 snapshot support while waiting for release :p
14:17 <+bridge> <heinrich5991> you mean wireshark dissector snapshot suppor?
14:17 <+bridge> <heinrich5991> you mean wireshark dissector snapshot support?
14:17 <+bridge> <heinrich5991> is that still interesting to you?
14:22 <+bridge> <ryozuki> @Jupeyy_Keks anything before 2020
14:22 <+bridge> <ryozuki> :justatest:
14:23 <+bridge> <Jupstar ✪> rust stable :cammostripes:
14:24 <+bridge> <ryozuki> :gigachad:
14:24 <+bridge> <ryozuki> my case is pre 2020, old hardware
14:24 <+bridge> <ryozuki> gotta replace
14:24 <+bridge> <Jupstar ✪> xDDDDD
14:37 <+bridge> <Ewan> 👺
14:37 <+bridge> <Jupstar ✪> robsterbyte, u have to change server config and restart
14:37 <+bridge> <Jupstar ✪> friendly reminder
14:53 <+ChillerDragon> @heinrich5991 probably always will be even after i finished all my protocol implementations and 0.7 support
14:54 <+ChillerDragon> it would be a nice to have for traffic analsis in general but yea also would help a lot to create test cases for my implentations but i can also manage without
14:55 <+ChillerDragon> i implemented snap items in ruby already so yeah .. but would be nice anyways
15:25 <+bridge> <bencie> when are fast emotes back
15:31 <+ChillerDragon> just edit your client to render emote event instead of sending emote msg
15:31 <+bridge> <Jupstar ✪> yes pls
15:31 <+bridge> <Jupstar ✪> i die so hard
15:31 <+bridge> <bencie> isnt the change already in
15:31 <+ChillerDragon> then it feels fast eventho u dont send anything xd
15:31 <+bridge> <heinrich5991> yes
15:31 <+bridge> <Robyt3> not all servers restarted yet
15:31 <+bridge> <heinrich5991> still need to be recompiled
15:31 <+bridge> <heinrich5991> ah, did you already recompile?
15:31 <+bridge> <ryozuki> fast fast
15:31 <+bridge> <ryozuki> <a:pepeFASTJAM:799388844491276311>
15:32 <+bridge> <Jupstar ✪> u accidentially use evil emote, cant even correct for 1 seond
15:32 <+bridge> <Jupstar ✪> 
15:32 <+bridge> <Jupstar ✪> all ppl on server completely mad on you
15:33 < ws-client> <ChillerDragon2> yea ik i miss emote 50% correction so important xd
15:33 < ws-client> <ChillerDragon2> nice emote ryo xd
15:34 < ws-client> <Jupstar> oh, why can u see it
15:34 < ws-client> <Jupstar> why are messages grouped so weirdly
15:35 < ws-client> <Jupstar> confusing af xD
15:35 < ws-client> <ChillerDragon2> because i did hotreload while deving
15:35 < ws-client> <ChillerDragon2> to see ryo emote xd
15:35 < ws-client> <Jupstar> lel
15:35 < ws-client> <ChillerDragon2> i have a 6 letter alias to deploy to prod
15:36 < ws-client> <Jupstar> does hotreload work now?
15:37 < ws-client> <Jupstar> did u document that command?
15:39 <+bridge> <fokkonaut> @ChillerDragon why dont you send the webhook message properly btw, by using the username field for the actual username?...
15:41 <+bridge> <learath2> It's not a discord webhook. It's an irc bot actually
15:47 <+bridge> <fokkonaut> ah yea, true
15:51 < ws-client> <ChillerDragon> ``ssh chiller@zillyhuhn.com -t "cd /var/www/discord-irc/ && source ~/.nvm/nvm.sh && git pull && npm run build"``
15:52 <+bridge> <fokkonaut> leak
15:52 < ws-client> <ChillerDragon> @Jupstar no hot reload just effortless deploy to production for me
15:55 < ws-client> <ChillerDragon> fakin newlines are so hard ._.
16:00 <+bridge> <ryozuki> what u doing
16:00 <+bridge> <ryozuki> wdym by fake
16:00 <+bridge> <ryozuki> new lines
16:00 <+bridge> <ryozuki> p {
16:00 <+bridge> <ryozuki>   white-space: pre;
16:00 <+bridge> <ryozuki> }
16:00 <+bridge> <ryozuki> or pre-line
16:00 <+ChillerDragon> ye ye ik pre
16:01 <+ChillerDragon> but somehow my fake irc multi line causes newlines to be duped
16:01 <+ChillerDragon> its not really a css issue its more a chiler brain issue
16:36 <+bridge> <Jupstar ✪> Robyte full time ddnet employee
16:36 <+bridge> <Jupstar ✪> 😬
16:43 <+bridge> <ryozuki> 😬
16:47 <+bridge> <Jupstar ✪> 😬
16:47 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116378083977592843/image.png
16:49 <+bridge> <heinrich5991> he's separating his work more cleanly, makes for more commits
16:49 <+bridge> <heinrich5991> but he's also been active quiiiite a lot
16:52 <+bridge> <Jupstar ✪> better delete 1.3 million _whatever_ 😬
16:52 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1116379241525805106/image.png
16:52 <+bridge> <Jupstar ✪> @ryozuki did your contribution mapping finally pay out 😂
16:54 <+bridge> <ryozuki> nope
16:54 <+bridge> <ryozuki> github is dumb
16:54 <+bridge> <ryozuki> so im missing 100 commits
16:55 <+bridge> <Jupstar ✪> https://tenor.com/view/sad-upset-violin-sponge-bob-mr-crab-gif-3530280
17:16 <+ChillerDragon> skill issue
17:16 <+ChillerDragon> github gaming
17:29 <+bridge> <learath2> I wonder how that happened 😄
17:31 <+bridge> <Jupstar ✪> let's guess
17:31 <+bridge> <Jupstar ✪> libraries
17:31 <+bridge> <heinrich5991> prolly
18:57 <+bridge> <Chairn> i believe that's when someone added boost to the repo
19:02 <+bridge> <Jupstar ✪> wat, why did they remove it ;~;
19:14 <+bridge> <heinrich5991> boost has bad compile times, I think
19:14 <+bridge> <heinrich5991> factorio removed it due to that
19:24 <+bridge> <Jupstar ✪> if thats an argument you should never use rust xD
19:24 < ws-client> <ChillerDragon> was about to say that
19:29 <+bridge> <Chairn> because you don't add boost to a git repo, you just use it and add it to the dependency list
19:30 <+bridge> <Jupstar ✪> where is the dependency then :^)
19:35 <+bridge> <Chairn> https://discord.com/channels/252358080522747904/293493549758939136/989718018005299260
19:36 <+bridge> <Jupstar ✪> how do you create these good looking message links?
19:36 <+bridge> <Jupstar ✪> https://discord.com/channels/252358080522747904/293493549758939136/1116419017549283430
19:36 <+bridge> <Jupstar ✪> ah
19:36 <+bridge> <Jupstar ✪> discord added a parser for them 😄
19:58 <+bridge> <ryozuki> rust programs compile faster than boost
19:59 <+bridge> <ryozuki> source: gentoo user
20:02 <+bridge> <Voxel> what, did mozilla make gentoo as well?
20:22 <+bridge> <cyberFighter> sup
20:22 <+bridge> <Jupstar ✪> the correct answer would be:
20:22 <+bridge> <Jupstar ✪> Buy hardware from 2020+ 😏
20:23 <+bridge> <cyberFighter> i disagree
20:23 <+bridge> <Jupstar ✪> boomer
20:23 <+bridge> <Jupstar ✪> welcome to stone age
20:44 <+bridge> <heinrich5991> I heard rust build times are faster than C++ with heavy template usage
20:44 <+bridge> <heinrich5991> due to SFINAE
20:54 <+bridge> <Jupstar ✪> mh i can't say. Compile times are obviously already higher bcs of the static linking. Generally coding with rust tools (the analyzer etc.) feels slower than using the same with clangd
20:54 <+bridge> <Jupstar ✪> 
20:54 <+bridge> <Jupstar ✪> so either the tool is badly written or it has a harder time to reparse certain code snips
20:55 <+bridge> <ryozuki> yeah clangd is surprisingly fast
20:55 <+bridge> <ryozuki> i wonder how they differ
20:55 <+bridge> <ryozuki> i know rust analyzer is like another compiler frontend
20:55 <+bridge> <ryozuki> idk
20:56 <+bridge> <Jupstar ✪> anyway
20:56 <+bridge> <Jupstar ✪> just buy better hardware is good solution
20:57 <+bridge> <ryozuki> ye
20:57 <+bridge> <Jupstar ✪> i got 16 cores for 250€
20:57 <+bridge> <ryozuki> m1 is surprisingly fast
20:57 <+bridge> <Jupstar ✪> nobody can tell me thats too much money xd
20:57 <+bridge> <ryozuki> nearly on par to 5800x
20:57 <+bridge> <ryozuki> or on par
20:57 <+bridge> <ryozuki> idk
20:57 <+bridge> <Jupstar ✪> i wish we'd have m2 with proper software
20:57 <+bridge> <ryozuki> idk the cost ratio to a 5800x tho
20:57 <+bridge> <Jupstar ✪> sad af
20:57 <+bridge> <Jupstar ✪> lmao
20:57 <+bridge> <ryozuki> yeah m2 is fail right
20:58 <+bridge> <ryozuki> i want m1 on a linux laptop
20:58 <+bridge> <ryozuki> with non propietary bloat
20:58 <+bridge> <ryozuki> a completly open source processor
20:58 <+bridge> <Jupstar ✪> i am interested so much in m2 bcs it has almost desktop class GPU and shares the memory with CPU
20:58 <+bridge> <ryozuki> but i heard it gets too hot
20:58 <+bridge> <Jupstar ✪> so u can zero copy images etc into GPU memory
20:59 <+bridge> <Jupstar ✪> i'd give it water cooling 😂
20:59 <+bridge> <Jupstar ✪> if it wouldnt be apple
20:59 <+bridge> <ryozuki> xd
20:59 <+bridge> <ryozuki> but its meant for laptops
20:59 <+bridge> <ryozuki> no?
20:59 <+bridge> <Jupstar ✪> soon they release an imac
20:59 <+bridge> <Jupstar ✪> with m2
20:59 <+bridge> <Chairn> all the people who have to eat for the rest of the month with 50€ can
21:00 <+bridge> <Jupstar ✪> yayayaya
21:00 <+bridge> <Chairn> llvm no?
21:01 <+bridge> <ryozuki> no
21:01 <+bridge> <ryozuki> rust analyzer emulates rustc
21:01 <+bridge> <ryozuki> to find errors
21:01 <+bridge> <ryozuki> > A Rust compiler front-end for IDEs
21:02 <+bridge> <ryozuki> https://rust-analyzer.github.io/
21:02 <+bridge> <ryozuki> llvm is the backend
21:02 <+bridge> <ryozuki> clang is frontend
21:02 <+bridge> <ryozuki> clangd is probs rly interwined with clang
21:02 <+bridge> <ryozuki> so it works fast
21:02 <+bridge> <ryozuki> idk rly the ins and outs
21:04 <+bridge> <ryozuki> @Jupeyy_Keks making a rly good LSP is haaaard
21:04 <+bridge> <ryozuki> rust analyzer has to identify broken rust code
21:04 <+bridge> <ryozuki> and show what it can
21:04 <+bridge> <ryozuki> autocomplete
21:04 <+bridge> <ryozuki> u have to autocomplete even when u have bad code
21:04 <+bridge> <ryozuki> they do some blog posts
21:04 <+bridge> <Jupstar ✪> it also often doesnt work for me inside code inside macros :/
21:04 <+bridge> <ryozuki> https://rust-analyzer.github.io/blog/2020/09/16/challeging-LR-parsing.html
21:04 <+bridge> <ryozuki> https://rust-analyzer.github.io/blog/2020/10/24/introducing-ungrammar.html
21:05 <+bridge> <ryozuki> https://rust-analyzer.github.io/blog/2021/11/21/ides-and-macros.html
21:05 <+bridge> <ryozuki> ye macros are hard
21:05 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1116442999925248080/image.png
21:05 <+bridge> <ryozuki> @Jupeyy_Keks last  post is about macros
21:05 <+bridge> <ryozuki> and why they hard
21:06 <+bridge> <ReiTW> is it really useful to keep cargo.lock on a project or you add it to gitignore ?
21:07 <+bridge> <ryozuki> if its a binary keep it
21:07 <+bridge> <ryozuki> if its a library
21:07 <+bridge> <ReiTW> why that
21:07 <+bridge> <ryozuki> keep it if u want to have consistent CI
21:07 <+bridge> <Jupstar ✪> reproducable builds
21:07 <+bridge> <ryozuki> otherwise not
21:07 <+bridge> <Jupstar ✪> but it also sucks when u have merge conflicts
21:07 <+bridge> <Jupstar ✪> at least for npm package locks i had it few times, then u delete and recreate it xd
21:08 <+bridge> <ryozuki> this is for reproducible builds indeed, rust follows semver
21:08 <+bridge> <ryozuki> so
21:08 <+bridge> <ryozuki> if when u build the binary u want to use the frozen lockfile u use --frozen
21:08 <+bridge> <ryozuki> otherwise rust may find a minor newer version on a dep
21:08 <+bridge> <ryozuki> and use it
21:08 <+bridge> <ryozuki> if a package follows semver this is fine
21:08 <+bridge> <ReiTW> ah
21:08 <+bridge> <heinrich5991> my opinion: always add a lockfile
21:08 <+bridge> <heinrich5991> it gives you reproducible builds which is very nice
21:09 <+bridge> <ryozuki> i recommend https://github.com/killercup/cargo-edit too
21:09 <+bridge> <ryozuki> cargo upgrade
21:09 <+bridge> <ryozuki> will find new deps
21:09 <+bridge> <heinrich5991> you can `cargo update` if you want to update your dependencies. other people using your library will ignore your lockfile
21:09 <+bridge> <ReiTW> ok ok thank you both for explaining
21:09 <+bridge> <ryozuki> i also have cargo install-update to manage deps
21:10 <+bridge> <ryozuki> @heinrich5991 update ur deps within the semver
21:10 <+bridge> <ReiTW> ok ok thank you both for explaining (+ jup too !)
21:10 <+bridge> <ryozuki> upgrade modifies the toml (the extension i sent)
21:10 <+bridge> <heinrich5991> ye
21:10 <+bridge> <ReiTW> ok ok thank you both for explaining (+ jupstar too !)
21:10 <+bridge> <ryozuki> it also allows managing ur crate version
21:10 <+bridge> <ryozuki> xd
21:10 <+bridge> <ryozuki> cargo set-version --bump major
21:11 <+bridge> <ryozuki> i also use cargo install-update to manage  binaries installed with rust
21:11 <+bridge> <gerdoe> is there any good article/book to learn macro-magic?
21:11 <+bridge> <ryozuki> and cargo cache
21:11 <+bridge> <ryozuki> this is a thing u need to try urself too to learn
21:12 <+bridge> <ryozuki> apart from reading
21:12 <+bridge> <ryozuki> syn and quote ur friends
21:12 <+bridge> <gerdoe> yeah i know that i need practice
21:12 <+bridge> <ryozuki> you use syn to receive the ast tokens
21:12 <+bridge> <ryozuki> and quote to easily create the generated code
21:13 <+bridge> <gerdoe> i also had a task that i wanted to do with macro derives but stuck on first steps
21:13 <+bridge> <heinrich5991> copy some existing crate doing it I guess
21:13 <+bridge> <ryozuki> https://doc.rust-lang.org/book/ch19-06-macros.html
21:14 <+bridge> <ryozuki> @gerdoe i made this useless thing back in time https://github.com/edg-l/formy
21:14 <+bridge> <heinrich5991> I think I've never had to write a non-declarative macro before
21:14 <+bridge> <gerdoe> oh i tried to learn something from reading alkahest macro derives but its too complicated
21:14 <+bridge> <gerdoe> gave up instantly xd
21:15 <+bridge> <ryozuki> u mean proc macros?
21:15 <+bridge> <ryozuki> @gerdoe check this out https://github.com/edg-l/formy/blob/master/formy_derive/src/lib.rs
21:16 <+bridge> <gerdoe> yeah im lurking around rn
21:16 <+bridge> <gerdoe> thanks, cute lib xd
21:16 <+bridge> <ryozuki> its easier if you have dealt with AST before
21:16 <+bridge> <ryozuki> abstract syntax trees
21:16 <+bridge> <gerdoe> like never
21:16 <+bridge> <ryozuki> `fn get_meta_list(nested_meta: &syn::MetaList) -> Result<Vec<(&syn::Path, &syn::Lit)>, TokenStream> {`
21:16 <+bridge> <ryozuki> for example
21:16 <+bridge> <gerdoe> messed around with cpp templates and c macroproc
21:16 <+bridge> <ryozuki> syn is a crate that has most of rust ast representations
21:16 <+bridge> <ryozuki> here you get a meta list
21:17 <+bridge> <ryozuki> if i remember correctly its #[stuffhere]
21:17 <+bridge> <heinrich5991> ye
21:17 <+bridge> <ryozuki> this functio receives the meta list
21:17 <+bridge> <ryozuki> and returns a list of paths and literals
21:17 <+bridge> <Jupstar ✪> proc macros are cool xd
21:17 <+bridge> <Jupstar ✪> u can write a completly new language in it
21:17 <+bridge> <ryozuki> paths are type symbols for example
21:17 <+bridge> <ryozuki> proc macros are epic
21:17 <+bridge> <ryozuki> @Jupeyy_Keks proc macros are even better when the diagnostic RFC lands
21:18 <+bridge> <ryozuki> it allows macros to report errors cleanly
21:18 <+bridge> <gerdoe> so i get metadata about struct/struct field and use it to do stuff right
21:18 <+bridge> <ryozuki> in that function yeah
21:18 <+bridge> <ryozuki> ```rust
21:18 <+bridge> <ryozuki> 
21:18 <+bridge> <ryozuki> fn get_meta_list(nested_meta: &syn::MetaList) -> Result<Vec<(&syn::Path, &syn::Lit)>, TokenStream> {
21:18 <+bridge> <ryozuki>     let mut list = vec![];
21:18 <+bridge> <ryozuki>     for v in &nested_meta.nested {
21:18 <+bridge> <ryozuki>         match v {
21:18 <+bridge> <ryozuki>             syn::NestedMeta::Meta(m) => {
21:18 <+bridge> <ryozuki>                 if let syn::Meta::NameValue(value) = &m {
21:18 <+bridge> <ryozuki>                     list.push((&value.path, &value.lit));
21:18 <+bridge> <ryozuki>                 } else {
21:18 <+bridge> <ryozuki>                     return Err(
21:18 <+bridge> <ryozuki>                         quote_spanned! {m.span()=> compile_error!("Must be a named value.")}.into(),
21:18 <+bridge> <ryozuki>                     );
21:18 <+bridge> <ryozuki>                 }
21:18 <+bridge> <ryozuki>             }
21:18 <+bridge> <ryozuki>             x => {
21:18 <+bridge> <ryozuki>                 return Err(
21:18 <+bridge> <ryozuki>                     quote_spanned! {x.span()=> compile_error!("Invalid meta type.")}.into(),
21:18 <+bridge> <ryozuki>                 );
21:19 <+bridge> <ryozuki>             }
21:19 <+bridge> <ryozuki>         }
21:19 <+bridge> <ryozuki>     }
21:19 <+bridge> <ryozuki> 
21:19 <+bridge> <ryozuki>     Ok(list)
21:19 <+bridge> <ryozuki> }
21:19 <+bridge> <ryozuki> ```
21:19 <+bridge> <ryozuki> this is my old rust code tho
21:19 <+bridge> <ryozuki> not perfect
21:19 <+bridge> <ryozuki> quote! allows you to construct TokenStreams
21:19 <+bridge> <ryozuki> using rust syntax directly
21:19 <+bridge> <ryozuki> its epic
21:19 <+bridge> <ryozuki> otherwise u would need to do ugly stuff
21:19 <+bridge> <ryozuki> build it manually u know
21:19 <+bridge> <ryozuki> quote_spanned is like quote! but adds spans where the macro is expanded
21:19 <+bridge> <ryozuki> so u see i put a compile_error!
21:19 <+bridge> <ryozuki> it will show a compiler error there
21:19 <+bridge> <ryozuki> if u use a wrong meta attribute
21:20 <+bridge> <ryozuki> (thanks to the spans)
21:20 <+bridge> <gerdoe> huhuhu
21:20 <+bridge> <ryozuki> here u can do anything
21:20 <+bridge> <ryozuki> u can do a http request
21:21 <+bridge> <ryozuki> and generate a struct from a json u received
21:21 <+bridge> <gerdoe> okey i'll try to do some kind of serialization to learn more
21:21 <+bridge> <gerdoe> thanks a lot ryozoozki
21:21 <+bridge> <ryozuki> use dbg!
21:21 <+bridge> <ryozuki> everywhere
21:21 <+bridge> <gerdoe> kekw
21:21 <+bridge> <ryozuki> did u know about dbg?
21:21 <+bridge> <gerdoe> nope actually
21:21 <+bridge> <ryozuki> https://edgarluque.com/blog/rust-dbg-macro/
21:21 <+bridge> <ryozuki> kek
21:24 <+bridge> <ryozuki> @gerdoe its hilarious cuz im doing heavy proc macro stuff at work rn
21:24 <+bridge> <ryozuki> and tbh idk how it will look
21:24 <+bridge> <ryozuki> we literally call libclang to parse c++ stuff and gen stuff
21:24 <+bridge> <ryozuki> cxx didnt look good enough
21:24 <+bridge> <gerdoe> cxx -> c**
21:25 <+bridge> <gerdoe> cжж
21:25 <+bridge> <ryozuki> :justatest:
21:25 <+bridge> <gerdoe> sounds complicated
21:25 <+bridge> <gerdoe> does it mean you parse c++ to make it rusty or something
21:26 <+bridge> <gerdoe> don't get it
21:27 <+bridge> <heinrich5991> you're doing c++ rust interop at work, @ryozuki?
21:27 <+bridge> <ryozuki> y
21:27 <+bridge> <heinrich5991> heh, interesting
21:27 <+bridge> <ryozuki> im sure c++ purists would die
21:27 <+bridge> <ryozuki> anyway
21:29 <+bridge> <ryozuki> there is a reason why people make bindings to c and not cpp
21:29 <+bridge> <ryozuki> xd
21:29 <+bridge> <ryozuki> but well, using libclang, we analyze the classes etc
21:30 <+bridge> <ryozuki> we store them as [x;u8]
21:30 <+bridge> <ryozuki> and get the align and size
21:30 <+bridge> <ryozuki> with libclang
21:30 <+bridge> <ryozuki> and more weird stuff
21:30 <+bridge> <ryozuki> my coworker is more c++ savy than me
21:30 <+bridge> <Jupstar ✪> u still didnt rewrite llvm in rust?
21:30 <+bridge> <ryozuki> no
21:30 <+bridge> <Jupstar ✪> mhh
21:30 <+bridge> <ryozuki> i would
21:30 <+bridge> <ryozuki> llvm has millions of lines
21:30 <+bridge> <ryozuki> if im paid i would
21:30 <+bridge> <ryozuki> it for sure would make me have a 2y job
21:30 <+bridge> <ryozuki> xdd
21:30 <+bridge> <Jupstar ✪> probably longer xd
21:31 <+bridge> <ryozuki> xd
21:31 <+bridge> <Jupstar ✪> well depends on how useful most of the code is
21:31 <+bridge> <Jupstar ✪> maybe u make a clean version
21:31 <+bridge> <gerdoe> cpp parsing is very complicated isn't it tho
21:31 <+bridge> <gerdoe> cpp has so much in it
21:31 <+bridge> <ryozuki> yeah but that doesnt matter
21:31 <+bridge> <ryozuki> cuz we use libclang
21:31 <+bridge> <Jupstar ✪> name me one github project (binary) that is older than 5 years and isnt bloated 😂
21:32 <+bridge> <ryozuki> @gerdoe u dont make bindings to c instead of cpp cuz its hard to parse
21:32 <+bridge> <ryozuki> its cuz c is simpler, has less edge cases, and idk seems more "stable" or smth
21:32 <+bridge> <gerdoe> c has stable abi yup
21:32 <+bridge> <ryozuki> idk if thats right
21:32 <+bridge> <ryozuki> C does not have a standard ABI.Dec 20, 2010
21:33 <+bridge> <ryozuki> > 
21:33 <+bridge> <ryozuki> > 
21:33 <+bridge> <ryozuki> > C defines no ABI. In fact, it bends over backwards to avoid defining an ABI. Those people, who like me, who have spent most of their programming lives programming in C on 16/32/64 bit architectures with 8 bit bytes, 2's complement arithmetic and flat address spaces, will usually be quite surprised on reading the convoluted language of the current C standard.
21:33 <+bridge> <gerdoe> the same so link xd
21:34 <+bridge> <gerdoe> then question remains open kekw
21:51 < ws-client> <ChillerDragon> @Jupstar ✪ totally worth it to spend the whole day polish code snippets xd
21:51 < ws-client> <ChillerDragon> https://zillyhuhn.com/cs/.1686253851.png
21:51 < ws-client> <ChillerDragon> kinda pog that this is single line irc under the hood
21:52 < ws-client> <ChillerDragon> oh no robi wide snippet added the sideway scroll again xd 
21:52 < ws-client> <ChillerDragon> https://zillyhuhn.com/cs/.1686253932.png
22:14 <+bridge> <Jupstar ✪> Nice
22:22 <+bridge> <ryozuki> chiller
22:22 <+bridge> <ryozuki> not to say anything but
22:22 <+bridge> <ryozuki> the snippet is wrong
22:22 <+bridge> <ryozuki> looks like u cant handle <>&
22:26 <+bridge> <Jupstar ✪> Html moment
22:28 <+bridge> <chillerdragon> Oh no
22:30 <+bridge> <Jupstar ✪> Use customized input tag
22:30 <+bridge> <Jupstar ✪> There u don't need these html hacks
22:31 <+bridge> <chillerdragon> Sounds good but I sleepy now
22:32 <+bridge> <heinrich5991> chillerdragon: I tried doing the python module
22:32 <+bridge> <learath2> Huh, cxx really wasn't enough?
22:32 <+bridge> <heinrich5991> but I wasn't able to
22:32 <+bridge> <ryozuki> idk its a bit more hassle
22:33 <+bridge> <ryozuki> unique ptrs everywhere u cant pass by value
22:33 <+bridge> <ryozuki> with libclang we can cuz we know about the data layouts etc
22:33 <+bridge> <ryozuki> also we can find if a method is inline, constexpr, etc and wrap it or etc
22:33 <+bridge> <ryozuki> this is all inside a proc macro xd
22:37 <+bridge> <learath2> I thought the primitive types were mapped so you can pass by value
22:37 <+bridge> <ryozuki> i meant classes
22:37 <+bridge> <ryozuki> i think u kinda can do in cxx if u mix cbindgen or smth
22:37 <+bridge> <ryozuki> or impl the trait
22:38 <+bridge> <ryozuki> i wonder how cxx works around inline methods
22:38 <+bridge> <learath2> hm, can you even really pass classes by value to another language? Classes are too large to really pass by value down at the ABI level
22:38 <+bridge> <ryozuki> it seems to work
22:38 <+bridge> <ryozuki> on rust we just store the bytes as a array of u8
22:38 <+bridge> <ryozuki> we get the align from clang
22:39 <+bridge> <heinrich5991> and apply that align to the struct using some black magic?
22:39 <+bridge> <ryozuki> repr
22:39 <+bridge> <ryozuki> repr(C, align(x)))
22:39 <+bridge> <learath2> but when it comes down to calling a c++ function on it, don't you end up having to use a pointer?
22:40 <+bridge> <ryozuki> yeah
22:40 <+bridge> <ryozuki> this as the first param
22:40 <+bridge> <ryozuki> tbh i just kinda went with my coworker wanted to do xD
22:41 <+bridge> <ryozuki> walking landmines
22:41 <+bridge> <learath2> anyway, becareful, it's really easy to invoke nasal demons when working at C++ in this level
22:41 <+bridge> <ryozuki> ikr
22:41 <+bridge> <ryozuki> he knows too
22:41 <+bridge> <ryozuki> if this works
22:41 <+bridge> <ryozuki> kinda deserves a blog post
22:42 <+bridge> <heinrich5991> chillerdragon: couldn't figure out how to run custom code (build the rust project) using the python build stuff
22:43 <+bridge> <heinrich5991> so I didn't manage to do it this evening
22:43 <+bridge> <ryozuki> i just wish llvm was made in rust
22:43 <+bridge> <ryozuki> but we cant use c++
22:43 <+bridge> <ryozuki> because we need to use rust libraries
22:43 <+bridge> <ryozuki> and doing this the other way around
22:43 <+bridge> <ryozuki> is more hell
22:43 <+bridge> <ryozuki> kek
22:43 <+bridge> <Voxel> make it in rust
22:43 <+bridge> <learath2> So wait, you said passing classes by value, for member functions that's not the case, they use a pointer at the abi level. For normal functions I thought that entailed a copy or move to the stack
22:44 <+bridge> <heinrich5991> I think larger structs are passed by pointer
22:45 <+bridge> <ryozuki> i mean
22:45 <+bridge> <ryozuki> imagine u have a class and constructor
22:45 <+bridge> <ryozuki> we call it
22:45 <+bridge> <ryozuki> the instance  of the class
22:45 <+bridge> <ryozuki> we store it by value on rust side
22:45 <+bridge> <ryozuki> for method calls it seems to accept a pointer on *this yeah
22:45 <+bridge> <ryozuki> atleast on linux and macos
22:45 <+bridge> <ryozuki> xd
22:46 <+bridge> <ryozuki> we didnt go to windows hell
22:46 <+bridge> <learath2> Ah, I think I understand what you mean, and libclang darkmagic gives you the alignment and size you need to allocate on the rust side for the new object
22:46 <+bridge> <ryozuki> also macos seems to put __ before symbols or smth
22:46 <+bridge> <ryozuki> weird stuff
22:46 <+bridge> <ryozuki> ye
22:47 <+bridge> <ryozuki> let me copy some stuff
22:47 <+bridge> <learath2> I guess cxx instead let c++ do the allocations
22:47 <+bridge> <heinrich5991> ye
22:48 <+bridge> <heinrich5991> anyone experience with python packaging? ^^
22:48 <+bridge> <ryozuki> https://pastebin.com/FHXqxsP2
22:48 <+bridge> <ryozuki> @learath2
22:48 <+bridge> <ryozuki> cargo expand
22:48 <+bridge> <ryozuki> of the proc macro
22:48 <+bridge> <ryozuki> well this is a bit older version
22:49 <+bridge> <ryozuki> we now wrap automatically inline functions
22:49 <+bridge> <ryozuki> and something with placement new
22:49 <+bridge> <ryozuki> i forgot
22:50 <+bridge> <ryozuki> ```cpp
22:50 <+bridge> <ryozuki> extern "C" void wrap___ZN4mlir19registerAllDialectsERNS_11MLIRContextE(mlir::MLIRContext & context) {
22:50 <+bridge> <ryozuki>     return registerAllDialects(context);
22:50 <+bridge> <ryozuki> }
22:50 <+bridge> <ryozuki> 
22:50 <+bridge> <ryozuki> extern "C" void wrap___ZNK4mlir8Location4dumpEv(mlir::Location self) {
22:50 <+bridge> <ryozuki>     return mlir::Location::dump(self);
22:50 <+bridge> <ryozuki> }
22:50 <+bridge> <ryozuki> 
22:50 <+bridge> <ryozuki> extern "C" void wrap___ZN4mlir7BuilderC1EPNS_11MLIRContextE(mlir::MLIRContext * context) {
22:50 <+bridge> <ryozuki>     new(context) mlir::Builder(context);
22:50 <+bridge> <ryozuki>     return;
22:50 <+bridge> <ryozuki> }
22:50 <+bridge> <ryozuki> ```
22:50 <+bridge> <ryozuki> the last method
22:50 <+bridge> <ryozuki> is a inline constructor
22:50 <+bridge> <ryozuki> builder
22:51 <+bridge> <learath2> Excellent mangling btw 😄
22:51 <+bridge> <ryozuki> xDD
22:51 <+bridge> <ryozuki> anyway its interesting for sure
22:51 <+bridge> <learath2> A decade looking at this language and it still takes me so long to decode them
22:51 <+bridge> <ryozuki> which is why i love this current job
22:51 <+bridge> <ryozuki> even if i could have more paying
22:51 <+bridge> <ryozuki> but i doubt i can do this crazy stuff elsewhere easily
22:52 <+bridge> <ryozuki> xd
22:52 <+bridge> <ryozuki> @learath2 did u look at rust mangling
22:52 <+bridge> <ryozuki> u get 100+ names
22:52 <+bridge> <learath2> Haven't yet, sounds excellent
22:53 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1116469962085777408/image.png
22:53 <+bridge> <ryozuki> from the blog post from yesterday
22:53 <+bridge> <ryozuki> its not all the name
22:53 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1116470086052610149/image.png
22:53 <+bridge> <learath2> Do you know which language has amazing mangling?
22:53 <+bridge> <ryozuki> no
22:53 <+bridge> <ryozuki> C
22:54 <+bridge> <ryozuki> none
22:54 <+bridge> <learath2> C ofc ❤️
22:54 <+bridge> <ryozuki> xdd
23:03 <+bridge> <Jupstar ✪> Does c literally guarantee no mangling? I mean if a compiler would generate it, would it leave c standard xd
23:03 <+bridge> <heinrich5991> no, it wouldn't
23:03 <+bridge> <heinrich5991> msvc mangles the names a litle
23:04 <+bridge> <Jupstar ✪> Msvc is probably not the best example😂😂😂😂
23:04 <+bridge> <Jupstar ✪> But good to know
23:22 <+bridge> <learath2> C doesn't care
23:25 <+bridge> <ryozuki> theorically rust either
23:26 <+bridge> <ryozuki> but the only impl does it
23:26 <+bridge> <ryozuki> kek
23:47 <+bridge> <gerdoe> huh russian cpp community shared deen's article about haskell
23:47 <+bridge> <gerdoe> unexpected
