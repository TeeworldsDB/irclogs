00:09 < bridge> <kollpotato> money
00:09 < bridge> <kollpotato> !sh echo
00:09 < chillerbot12> bash moved to chat.zillyhuhn.com #off-topic
00:10 < bridge> <kollpotato> chillerdragon: why does chillerbot have 12 in the name?
00:10 < bridge> <kollpotato> is it an easter egg
01:17 < bridge> <teero777> yo chillerdragon you have a license right?
01:17 < bridge> <teero777> yo chillerdragon you have a drivers license right?
01:17 < bridge> <teero777> yo chillerdragon you have a drivers license right?
01:27 < bridge> <.lepinpin> Good idea to recode ddnet in ddnet with quads x) ?
01:47 < bridge> <teero777> the ddnet map format is not turing complete afaik, so probably no
01:48 < bridge> <.lepinpin> Okey so bad apple ?
01:48 < bridge> <.lepinpin> Or maybe doom
01:49 < bridge> <teero777> bad apple was already made. doom isn't possible either
02:23 < bridge> <Solly (bun bun)> with music?
02:23 < bridge> <Solly (bun bun)> with server mods you should be able to make pretty much anything
02:23 < bridge> <Solly (bun bun)> (yeah obviously with musc u can play random sounds)
02:25 < bridge> <teero777> https://www.youtube.com/watch?v=7WPTr4meLIY
02:25 < bridge> <teero777> this was like a week ago how can you not remember xD
02:25 < bridge> <Solly (bun bun)> owo
02:25 < bridge> <Solly (bun bun)> no map download
02:27 < bridge> <teero777> @essigautomat solly is doubting you
02:46 < bridge> <Solly (bun bun)> no i just wna play it on my compooper x-x
08:04 < bridge> <Assa> I want to release it with recorder tiles as fun map in the future
08:07 < bridge> <Assa> you can almost do that without client changes, but good luck syncing anything
08:42 < bridge> <Assa> maybe I can send you the demo tho ü§î
08:46 < bridge> <Assa> maybe I can send you the demo tho ü§î the demo is flickering and not as performant as ingame rendering üôÅ
08:47 < bridge> <Assa> maybe I can send you the demo tho ü§î the demo is flickering and not as performant as ingame rendering üôÅ and it desyncs if you stop it
09:08 < bridge> <Assa> btw I am not sure that doom is impossible üòâ
09:51 < bridge> <ryozuki> i think ill restart edos, i have tech debt from not knowing common patterns from start, i think i can do a way better job now
09:52 < bridge> <Assa> so next you are working on edos reloaded
09:53 < bridge> <learath2> I like doing this with my projects, first attempt is more like a playground where I figure things out
10:18 < bridge> <Assa> I love the new blazingly fast loading times of nightly :brownbear:
11:03 < bridge> <ryozuki> yeah, im also starting with limine now
11:04 < bridge> <ryozuki> https://github.com/jasondyoungberg/limine-rust-template
11:05 < bridge> <ryozuki> also on september 10 i have time off for 10 days so im gonna use it
11:05 < bridge> <ryozuki> looking forward to my time off
11:05 < bridge> <ryozuki> :justatest:
11:07 < bridge> <Ewan> nice
11:14 < bridge> <Assa> I have vacation in 3 weeks, looking forward to it, I need it desperately
11:14 < bridge> <Assa> I have vacation in 3 days, looking forward to it, I need it desperately
11:23 < bridge> <learath2> I should read up on this limine thing
11:48 < ws-client> **<ChillerDragon>** @teero777 my driver license status may or may not be confidental. What do you need?
11:49 < ws-client> **<ChillerDragon>** @kollpotato irc increments a number after the name if it is already used (in the same network i think) so i assume my bot bugged and reconnected or something like that. I was worried when it reached 100
11:49 < ws-client> **<ChillerDragon>** @milkeeycat I could meet in game now
11:52 < ws-client> **<ChillerDragon>** @learath2 yes i want to sit down! when do we do it? how do we do it?
11:58 < bridge> <Solly (bun bun)> y0.1k
11:58 < bridge> <Solly (bun bun)> @chillerdragon
11:58 < bridge> <Solly (bun bun)> same thing happened with browsers
11:58 < bridge> <Solly (bun bun)> `"Chromium";v="139", "Not;A=Brand";v="99"`
12:04 < ws-client> **<ChillerDragon>** same as what
12:05 < bridge> <kollpotato> chiller for some reason ur bot constantly reconnects after some time, u can see that in quakenet webchat
12:06 < bridge> <kollpotato> i assumed it was irc stuff but when i made my bot it was stable and didnt reconnect at all
12:06 < bridge> <kollpotato> so javascript L
12:06 < bridge> <kollpotato> or ur raspi has unstable internet
12:14 < ws-client> **<ChillerDragon>** yea i am aware
12:14 < ws-client> **<ChillerDragon>** no idea how to fix it
12:15 < ws-client> **<ChillerDragon>** my webchat irc client is also unstable and it runs on my vps
12:15 < bridge> <kollpotato> maybe the irc lib forgets to do ping pongs
12:15 < bridge> <kollpotato> but how does it reconnect by itself then
12:16 < bridge> <milkeeycat> chillerdragon: I still don't like builder functions :/ imo default value consts would be enough
12:18 < bridge> <kollpotato> builder pattern sucks
12:18 < bridge> <kollpotato> just define everything beforehand smh
12:18 < ws-client> **<ChillerDragon>** @milkeeycat yea default value consts could also work havent thought about it. I think both work the same for me.
12:18 < ws-client> **<ChillerDragon>** go send pr
12:19 < ws-client> **<ChillerDragon>** and replace the existing builder with default const
12:21 < bridge> <Solly (bun bun)> anyone have expereicne getting windows runners to run
12:21 < bridge> <milkeeycat> chillerdragon: did you think about consts for messages or specific fields?(I was talking about specific fields)
12:22 < bridge> <Ewan> whats the issue w the runners
12:22 < bridge> <Ewan> just waiting forever
12:22 < bridge> <Assa> yes, delete the idea, use a linux runner with MinGW instead and test with wine
12:22 < bridge> <Solly (bun bun)> cant get it to compile
12:22 < bridge> <Solly (bun bun)> or well cant get rust to accept the .dll
12:23 < bridge> <Solly (bun bun)> https://github.com/SollyBunny/libccar/actions/runs/17263478129/job/48990122397
12:23 < bridge> <Solly (bun bun)> (teeros thing)
12:24 < ws-client> **<ChillerDragon>** @milkeeycat oh i thought you mean the entire message. Imo thats the most convienient and the one that actually saves the user time, lines, bugs and typing
12:26 < bridge> <Ewan> ccar.lib is the only thing there with no absolute path
12:26 < bridge> <Ewan> idk what generates that build command since you're using msvc but double check
12:27 < ws-client> **<ChillerDragon>** not ddnet related
12:27 < ws-client> **<ChillerDragon>** ban
12:28 < bridge> <Ewan> that applies to like 50% of the things in here
12:38 < bridge> <Assa> I already suggested having a developer-off-topic
12:39 < bridge> <Assa> but bad-apple is on topic üòÑ
12:46 < bridge> <Assa> second time destroying @chillerdragon in the PR comments üòÑ
13:04 < bridge> <kollpotato> chillerdragon: lerato said everything developa related can be talked about here
13:15 < bridge> <Solly (bun bun)> idk what i did
13:15 < bridge> <Solly (bun bun)> but it works now
13:15 < ws-client> **<ChillerDragon>** @Assa destroy? ^^
13:16 < bridge> <Solly (bun bun)> somewhat
13:16 < bridge> <Solly (bun bun)> https://cdn.discordapp.com/attachments/293493549758939136/1410221307441713242/image.png?ex=68b03a70&is=68aee8f0&hm=2a98ddae2d1cf4210221a4cd71b55260a5009b6a7b363b99cc8976ee81f6a7e2&
13:16 < bridge> <Assa> delete pChillerDragon;
13:16 < ws-client> **<ChillerDragon>** pff
13:16 < bridge> <Assa> xD
13:16 < ws-client> **<ChillerDragon>** that might cause a use after free
13:18 < bridge> <Assa> ||_as if you ever get used_|| you make it too easy to answer like that
13:18 < bridge> <Solly (bun bun)> `free(pChillerDragon); pChillerDragon = NULL`;
13:18 < bridge> <Solly (bun bun)> `free(pChillerDragon); pChillerDragon = NULL;`
13:18 < bridge> <Solly (bun bun)> :)
13:18 < ws-client> **<SollyBunny2>** bing bong
13:19 < bridge> <Solly (bun bun)> sollybunny1 went up in flames
13:19 < bridge> <Assa> `pChillerDragon = std::make_shared<CEvenStrongerChillerdragon>(EDevRole::MAINTAINER);`
13:21 < bridge> <kollpotato> imagine chillerdragon is an irc ai made by admins for developers not to feel lonely
13:48 < bridge> <inv41idu53rn4m3> Chillerdragon AI manifested into existence from the collective consciousness of Teeworlds players
14:02 < bridge> <ryozuki> limine is a bootloader, it supports grub protocols (multiboot 1 and 2) but it also has its own modern protocol. the thing is there is a rust crate for the limine protocol (aka limine boot protocol) which makes it a pleasure to work with in rust, im sure C has the same, the crate is rly easy
14:02 < bridge> <ryozuki> limine is a bootloader/menu, it supports grub protocols (multiboot 1 and 2) but it also has its own modern protocol. the thing is there is a rust crate for the limine protocol (aka limine boot protocol) which makes it a pleasure to work with in rust, im sure C has the same, the crate is rly easy
14:03 < bridge> <ryozuki> https://en.wikipedia.org/wiki/Intel_5-level_paging
14:03 < bridge> <ryozuki> i wonder when this is used
14:05 < bridge> <kollpotato> so that's why he is all knowing and all powerful
14:34 < bridge> <melon> setting up windows dual boot in limine was easy as hell
14:34 < bridge> <melon> Also I could fill my screen with screams and agony when selecting the windows entry
14:34 < bridge> <melon> :owo:
14:43 < bridge> <ryozuki> :owo:
14:45 < bridge> <Assa> > limine 
14:45 < bridge> <Assa> noted down ‚úçÔ∏è
14:56 < bridge> <Assa> oh that is ugly doing this retroactively, you need to install ubuntu on other disks, then run limine and find windows
14:57 < bridge> <Assa> oh god, looking forward to my 6 disk dual boot setup :pepeW:
14:57 < bridge> <melon> huh
14:57 < bridge> <melon> I have windows and Linux on the same disk
14:57 < bridge> <melon> :justatest:
14:58 < bridge> <Assa> yeah this is possible, you don't need physicial disks don't worry
14:58 < bridge> <Assa> it's just my HDD/SSD/NVMESSD is ... spicy
15:02 < bridge> <ryozuki> limine wont find windows for u
15:02 < bridge> <ryozuki> limine is just a config file
15:02 < bridge> <ryozuki> https://wiki.gentoo.org/wiki/Limine#Dual-booting_with_Windows_in_Limine_.28UEFI.29
15:03 < bridge> <ryozuki> ```
15:03 < bridge> <ryozuki> /Windows
15:03 < bridge> <ryozuki> //Windows Example
15:03 < bridge> <ryozuki>         protocol: efi
15:03 < bridge> <ryozuki>         # This tells the efi protocol to call the specified EFI file and load it.
15:03 < bridge> <ryozuki>         path: boot():/EFI/Microsoft/bootmgfw.efi
15:03 < bridge> <ryozuki>         comment: Boot Microsoft Windows!
15:03 < bridge> <ryozuki> ```
15:04 < bridge> <melon> I didn't even have to "find" windows
15:04 < bridge> <melon> 
15:04 < bridge> <melon> I just installed the bootloader files using a live USB :justatest:
15:07 < bridge> <ryozuki> have a cat
15:07 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1410249424575397992/PXL_20250827_130659112.jpg?ex=68b0549f&is=68af031f&hm=033eb678001945d2c2b31a3f873c9fc104ebb3042044d1a9ed307207bc40aeb2&
15:08 < bridge> <milkeeycat> sir, it's #developer channel ü§ì
15:09 < bridge> <pilonpl> silly cat
15:10 < bridge> <ryozuki> my cat codes in rust
15:14 < bridge> <ryozuki> https://milkv.io/jupiter
15:14 < bridge> <ryozuki> @tsfreddie buy one for me pls
15:15 < bridge> <ryozuki> anyone know big riscv boards with sensible ram?
15:15 < bridge> <tsfreddie> <a:angeryping:494137645442793473>
15:15 < bridge> <ryozuki> ohi can ship with the latest option
15:15 < bridge> <ryozuki> ‚Ç¨70,95
15:15 < bridge> <ryozuki> 8gb ram riscv
15:15 < bridge> <ryozuki> not bad
15:15 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1410251450059198484/K1_2048x2048.png?ex=68b05682&is=68af0502&hm=89de0a1f49ff742432f61761dcba699f278e8b4567f8a51b0ba31e73a57c8b78&
15:24 < bridge> <melon> Jupstars alter ego mentioned
15:25 < bridge> <melon> https://cdn.discordapp.com/attachments/293493549758939136/1410253853990981692/Screenshot_20250827-152505.png?ex=68b058c0&is=68af0740&hm=885064ab2d417559420bcba5e744273a14685b3060ac7045b49b47ff0b9fe730&
15:36 < bridge> <Assa> I wonder if we would improve zooming out on maps, if we start to skip clipped regions that are smaller than a pixel or start to fade away high details
15:36 < bridge> <Assa> I wonder if we would improve zooming out on maps, if we start to skip clipped regions that are smaller than a pixel ~~or start to fade away high details~~
15:36 < bridge> <Assa> probably yes, but I am already 3 steps ahead of my PRs
15:43 < bridge> <inv41idu53rn4m3> Render the whole map to a texture, reduce FPS of animations, uhh, some other cursed LoD tricks
16:15 < bridge> <pilonpl> Is every tile it's own quad or how does map rendering work at all
16:16 < bridge> <pilonpl> Is every tile its own quad or how does map rendering work at all
16:17 < bridge> <kollpotato> its beyond our understanding
16:18 < bridge> <kollpotato> only the true developers know how all that works
16:18 < bridge> <kollpotato> jupstar assa patiga
16:19 < bridge> <pilonpl> Yeah
16:19 < bridge> <pilonpl> There should a second dev role
16:19 < bridge> <pilonpl> "Real Developer"
16:19 < bridge> <pilonpl> Lol
16:24 < bridge> <teero777> @0xdeen can you use <t:1759231200:F> in your announcement? `<t:1759231200:F>`
16:24 < bridge> <teero777> ah my bad
16:24 < bridge> <teero777> wrong timestamp
16:24 < bridge> <teero777> tf
16:25 < bridge> <teero777> @0xdeen can you use <t:1759329600:F> in your announcement? `<t:1759231200:F>`
16:25 < bridge> <teero777> @0xdeen can you use <t:1759231200:F> in your announcement? `<t:1759231200:F>`
16:26 < bridge> <teero777> @0xdeen can you use <t:1756656000:F> in your announcement? `<t:1756656000:F>`
16:27 < bridge> <kollpotato> it also should be `Prize pool` not `Price pool`
16:28 < bridge> <pilonpl> That's a funny mistake
16:29 < bridge> <kollpotato> prize pool was misspelled quite a lot here
16:30 < bridge> <kollpotato> mostly by germans
16:30 < bridge> <kollpotato> its the same word in german :justatest:
16:30 < bridge> <teero777> nah you actually have to pay the admins the amount that is given there. there is no prize
16:30 < bridge> <kollpotato> xD
16:31 < bridge> <kollpotato> everyone pays 200‚Ç¨ so ddnet servers keep running
16:31 < bridge> <teero777> it's an involuntary donation if you win the tournament
16:32 < bridge> <teero777> if everyone payed 200‚Ç¨ then the servers would keep running till 2500
16:33 < bridge> <kollpotato> sadly dreams don't come true
16:36 < bridge> <teero777> the average server costs are ~1731‚Ç¨. **all** active players would mean all active players, currently ~6000. so (6000*200‚Ç¨)/1731 = ~693 years of funding
16:37 < bridge> <pilonpl> My playtime is 1k hours
16:37 < bridge> <pilonpl> How much is a fair price to pay?
16:37 < bridge> <kollpotato> but who is gonna manage all those servers besides The Deen
16:37 < bridge> <teero777> lets subtract 100yrs of payment because deen has to buy the immortality potion to manage the servers. seems fine
16:38 < bridge> <kollpotato> reasonable
16:39 < bridge> <pilonpl> DDNet is cheap
16:40 < bridge> <kollpotato> i recently found a free ddnet server hosting
16:40 < bridge> <kollpotato> its not 24/7 but is good enough for testing
16:41 < bridge> <pilonpl> trashmap?
16:41 < bridge> <kollpotato> no another one
16:41 < bridge> <kollpotato> they host many other game servers
16:41 < bridge> <pilonpl> You can also host a server yourself
16:41 < bridge> <pilonpl> On a raspberry pi
16:42 < bridge> <kollpotato> but i dont have a raspberry pi
16:42 < bridge> <pilonpl> Unfortunate
16:42 < bridge> <pilonpl> It's an awesome device
16:42 < bridge> <kollpotato> i can buy a small vps for 2.5‚Ç¨ a month for a ddnet server
16:43 < bridge> <kollpotato> raspberry pi would cost about 50‚Ç¨
16:43 < bridge> <pilonpl> Raspberry pi + HDD is great for torrenting too
16:46 < bridge> <ryozuki> ig im not a real develper anymore
16:46 < bridge> <kollpotato> real maintainer
16:46 < bridge> <ryozuki> afaik there is a tile shader, in vulkan
16:46 < bridge> <kollpotato> :justatest:
16:46 < bridge> <kollpotato> built-in?
16:47 < bridge> <ryozuki> the shader is made by jupstar
16:48 < bridge> <pilonpl> Okay
16:48 < bridge> <pilonpl> A shader
16:48 < bridge> <pilonpl> I have no idea how that works but cool
16:48 < bridge> <ryozuki> https://github.com/ddnet/ddnet/blob/master/data/shader/tile.vert
16:48 < bridge> <ryozuki> https://github.com/ddnet/ddnet/blob/master/data/shader/tile.frag
16:48 < bridge> <ryozuki> https://github.com/ddnet/ddnet/blob/master/data/shader/vulkan/tile.vert
16:52 < bridge> <kollpotato> least complex shaders i have ever seen
16:53 < bridge> <pilonpl> It's sus
16:53 < bridge> <pilonpl> How can it do anything when it doesn't do much?
16:55 < bridge> <kollpotato> because ddnet just renders squares from an image
16:55 < bridge> <kollpotato> it's simple
16:57 < bridge> <pilonpl> And yet zooming out lags
16:57 < bridge> <kollpotato> not for me
16:57 < bridge> <pilonpl> Supposedly, on any half decent hardware it doesn't lag lol
16:57 < bridge> <kollpotato> what are ur specs?
16:59 < bridge> <Assa> it lags because you are rendering everything and cant ignore stuff
17:00 < bridge> <Assa> also remember there are animations slowing things down
17:02 < bridge> <kollpotato> oh well i always play with entities on
17:02 < bridge> <kollpotato> so no lags for me
17:03 < bridge> <Assa> I don't think we have LoD for zoom tbh
17:06 < bridge> <pilonpl> But actually rendering everything to a texture could work
17:06 < bridge> <pilonpl> Or probably multiple textures
17:07 < bridge> <pilonpl> Conceptually it makes sense
17:07 < bridge> <pilonpl> You just need a little bit of memory i guess
17:07 < bridge> <Assa> exactly twice as much texture memory
17:07 < bridge> <pilonpl> Twice as much?
17:08 < bridge> <Assa> yes, like 1 + 0.5 + 0.25 + 0.125 ...
17:10 < bridge> <Assa> oh since this is 2D i am wrong, it's smaller:
17:10 < bridge> <Assa> https://upload.wikimedia.org/wikipedia/commons/5/5c/MipMap_Example_STS101.jpg
17:11 < bridge> <Assa> it's exactyl 1/3rd more üòÑ
17:11 < bridge> <Assa> it's exactyl 1/3rd more data üòÑ
17:12 < bridge> <pilonpl> Okay but like
17:12 < bridge> <Assa> it's exactyl 1/3rd more data (for full mimapping) üòÑ
17:12 < bridge> <pilonpl> This is a mip map
17:13 < bridge> <Assa> I think we could get this working, but I have no idea if this would make things better tbh
17:14 < bridge> <pilonpl> It's impossible to tell without testing it unfortunately
17:14 < bridge> <pilonpl> It's a cool idea tho
17:15 < bridge> <pilonpl> I was always wondering if in 3D games it would be possible to render distant terrain to a texture
17:15 < bridge> <pilonpl> Because it doesn't change much
17:16 < bridge> <pilonpl> And it seems dumb to do so much work every frame when the result is almost the same as the previous frame
17:16 < bridge> <Assa> the vulkan backend seems to support mipmaps, I checked the code. I don't know if this is used anywhere
17:17 < bridge> <pilonpl> But why would mip maps be useful?
17:17 < bridge> <pilonpl> It's not a performance thing
17:17 < bridge> <pilonpl> It makes textures look better i think
17:18 < bridge> <kollpotato> "They are intended to increase rendering speed and reduce aliasing artifacts."
17:18 < bridge> <Assa> https://github.com/ddnet/ddnet/blob/ff74738338202ba06aaf0518c89be40b65204565/src/engine/client/backend/vulkan/backend_vulkan.cpp#L2582
17:18 < bridge> <kollpotato> "They are intended to increase rendering speed and reduce aliasing artifacts." (<https://en.wikipedia.org/wiki/Mipmap>)
17:18 < bridge> <Assa> so vulkan seems to already do this as long as you don't deactivate it
17:19 < bridge> <pilonpl> Wait so how can it make rendeing faster?
17:19 < bridge> <pilonpl> In practice it doesn't matter i think
17:19 < bridge> <Assa> opengl as well
17:19 < bridge> <kollpotato> idk magic
17:19 < bridge> <pilonpl> In minecraft it changes nothing as far as i can tell, textures just look better
17:21 < bridge> <pilonpl> Also doesn't anisotropic filtering do the same thing basically
17:21 < bridge> <pilonpl> Just better?
17:21 < bridge> <pilonpl> Or maybe both approaches are needed?
17:22 < bridge> <pilonpl> Anisotropic filtering also makes textures look better with minimal performance impact
17:23 < bridge> <pilonpl> I guess mip maps are a way of doing anisotropic filtering
17:23 < bridge> <pilonpl> That makes sense actually
17:24 < bridge> <Assa> MipMapLevels are limited to 1 here
17:35 < bridge> <patiga> mipmaps does make rendering faster by offering memory locality: it uses a smaller texture which makes caching more effective
17:36 < bridge> <Assa> I currently don#t see any effect
17:36 < bridge> <patiga> yes, otherwise you get weird artifacts
17:37 < bridge> <patiga> to make the rendering faster, it would need to be a relevant bottleneck. typically, ddnet rendering is cpu bottlenecked iirc
17:40 < bridge> <teero777> @essigautomat the opengl 1 implementation doesn't use mipmaps i think. you can take a look at that xd
17:42 < bridge> <Assa> I now managed to get more fps when zoomed out on a map by just setting mip map level count to 10
17:42 < bridge> <Assa> with vulkan
17:42 < bridge> <Assa> set this to 10:
17:42 < bridge> <Assa> https://github.com/ddnet/ddnet/blob/ff74738338202ba06aaf0518c89be40b65204565/src/engine/client/backend/vulkan/backend_vulkan.cpp#L2583
17:42 < bridge> <Assa> 
17:42 < bridge> <Assa> Done
17:43 < bridge> <Assa> maybe also the 1 in ImgSize below
17:43 < bridge> <teero777> i know for a fact ddnet uses more than 1 mip map level in the vulkan implementation xD
17:43 < bridge> <teero777> else it would look horrible
17:44 < bridge> <teero777> i dont know what that variable controls
17:44 < bridge> <Assa> even setting it to 4 improves this
17:45 < bridge> <Assa> so then one thing is that ImgSize has a depth, and it it used to calculate mip map level, afait it always returns 1
17:46 < bridge> <Assa> ```
17:46 < bridge> <Assa>     static size_t ImageMipLevelCount(size_t Width, size_t Height, size_t Depth)
17:46 < bridge> <Assa>     {
17:46 < bridge> <Assa>         return std::floor(std::log2(maximum(Width, maximum(Height, Depth)))) + 1;
17:46 < bridge> <Assa>     }
17:46 < bridge> <Assa> ```
17:46 < bridge> <Assa> 
17:46 < bridge> <Assa> What is this for Depth 1?
17:46 < bridge> <Assa> ah it's maximum ü§î
17:47 < bridge> <Assa> is the mipmap flag always off? ü§î
17:49 < bridge> <Assa> wtf why does changing this work
17:53 < bridge> <Assa> I think because I have entities overlay turned on, which contains text, which doesn't use mipmaps
17:55 < bridge> <Assa> omg this was exactly it ._. mipmaps are implemented and working
17:55 < bridge> <Assa> they are also deeply integrated so nobody needs to think about it
18:04 < bridge> <Assa> I can confirm this, otherwise the culling wouldn't work
18:04 < bridge> <Assa> ~~I can confirm this, otherwise the culling wouldn't work~~
18:04 < bridge> <Assa> 
18:04 < bridge> <Assa> Idk what I smoked today, culling improves both gpu calls and cpu
18:22 < bridge> <pipk_1> # discordapp.com/invite/5yfVG8BewR @everyone @everyone
18:37 < ws-client> **<ChillerDragon>** @learath2 where u
19:39 < bridge> <ryozuki> time to make blog posts with the restart of edos
19:39 < bridge> <ryozuki> as i progress
19:40 < bridge> <kollpotato> if it's a restart here's a logo
19:40 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1410318005597896845/Screenshot_2025-08-23-17-53-02-91_40deb401b9ffe8e1df2f1cc5ba480b12.jpg?ex=68b0947e&is=68af42fe&hm=ebdc8c4254992fb88506bc9bd80ad70e8abe8b0c9c1849688693abeb6b1d3d7e&
19:40 < bridge> <kollpotato> i made it in some random generator xd
19:40 < bridge> <kollpotato> looks funny
19:40 < bridge> <teero777> highly jpegged OS
19:42 < ws-client> **<ChillerDragon>** pegged OS
19:44 < bridge> <melon> is it FAT64 time?!??!?!?!?!
19:57 < bridge> <cellegenrih> less memory allocation, better vram usage, less memory addresses need to be filled, proper texture scaling on a pixel perfect level
19:57 < bridge> <cellegenrih> why do you even question this as a programmer?
19:58 < bridge> <pilonpl> better vram usage?
19:58 < bridge> <pilonpl> how
19:58 < bridge> <pilonpl> it literally uses more memory
19:58 < bridge> <cellegenrih> you use a lower version of the image, that you can store and use in the GPU's memory as cache
19:59 < bridge> <cellegenrih> since the bitmap version (which you could also just generate at runtime) will be lower res, than the original, while also allow you to run algorithms to make it less pixelated or less distorted, then* storing it to the GPU
20:00 < bridge> <ryozuki> xdd
20:00 < bridge> <cellegenrih> implementing a bitmap system from scratch is a nightmare tho, due to CPU / GPU communication :justatest:
20:00 < bridge> <ryozuki> mipmaps actually use more vram iirc xd
20:01 < bridge> <ryozuki> > A mipmap is a pre-calculated sequence of images, each one half the resolution of the previous level, used to improve rendering performance and visual quality when objects appear at different distances from the camera.
20:01 < bridge> <ryozuki> > 
20:01 < bridge> <ryozuki> > For example, if you have a 1024x1024 texture, the mipmap chain would include:
20:01 < bridge> <ryozuki> > 
20:01 < bridge> <ryozuki> >     Level 0: 1024x1024 (original)
20:01 < bridge> <ryozuki> >     Level 1: 512x512
20:01 < bridge> <ryozuki> >     Level 2: 256x256
20:01 < bridge> <ryozuki> >     Level 3: 128x128
20:01 < bridge> <ryozuki> >     And so on down to 1x1
20:01 < bridge> <ryozuki> > 
20:01 < bridge> <ryozuki> > Yes, using mipmaps increases VRAM usage by approximately 33% compared to storing just the original texture. This is because you're storing multiple versions of the same texture.
20:01 < bridge> <ryozuki> > 
20:01 < bridge> <ryozuki> > However, mipmaps provide significant benefits:
20:01 < bridge> <ryozuki> > 
20:01 < bridge> <ryozuki> >     Reduced texture aliasing (shimmering/flickering at distances)
20:01 < bridge> <ryozuki> >     Better performance when sampling distant objects (GPU can use smaller textures)
20:01 < bridge> <ryozuki> >     Improved cache coherency
20:01 < bridge> <ryozuki> > 
20:01 < bridge> <ryozuki> > The memory overhead is usually worth it for the visual quality and performance gains, which is why mipmaps are enabled by default in most graphics applications.
20:01 < bridge> <cellegenrih> only when you send the full resolution image to the GPU and let the GPU handle bitmapping
20:01 < bridge> <cellegenrih> Then yes, it costs more.
20:01 < bridge> <cellegenrih> But you can assign a cache to the lower resolution image (bitmap image) and discard the full resolution one when it's not needed
20:02 < bridge> <cellegenrih> But to implement such a dynamic system while keeping a record on what bitmap texture is being cached is... eh xdd
20:02 < bridge> <cellegenrih> Possible to do for sure, but takes a lot of trial and error to complete
20:02 < bridge> <cellegenrih> Possible to do for sure, but takes a lot of trial and error to complete (all for not getting GPU memory leaks)
20:04 < bridge> <cellegenrih> I think for chunks that include textures, should be able to have a dynamic LOD system which would benefit from those bitmap changes. Otherwise handling every instance of that texture one by one is a nightmare to do
20:06 < bridge> <cellegenrih> In Teeworlds' case, every block is unique in a way, that shouldn't be chunk-ated due to the visible repetitiveness of such LOD systems.
20:06 < bridge> <cellegenrih> Also the fact that rapid zoom in, zoom out and immediate zoom scale exists, the system has to prepare for discarding / allocating memory for all involved textures and their bitmap (cached) variants, which kinda sucks in performance
20:08 < bridge> <cellegenrih> (And unless you actually keep all those cached bitmaps from the map which is just extra memory in stack, this will be like... idk, exponentially expensive based on the amount of textures in a map used)
20:08 < bridge> <inv41idu53rn4m3> Rename to Erdos
20:09 < bridge> <kollpotato> perdoles?
20:09 < bridge> <kollpotato> :justatest:
20:10 < bridge> <cellegenrih> So based on my knowledge and my nerd factor:
20:10 < bridge> <cellegenrih> - Bitmaps are only useful if you can effectively afford textures to be cached, which will not only yield better performance, but a stable cache line that can be tracked on what to load
20:10 < bridge> <cellegenrih> - Bitmaps only suck if you want to avoid allocating more than one version of the same texture, thus essentially increasing memory, where memory is tight
20:11 < bridge> <cellegenrih> I might miss out on crucial info about this topic, in that case feel free to correct me üòÑ
20:11 < bridge> <kollpotato> u are a goddamn walking encyclopedia
20:12 < bridge> <ryozuki> (of nonsense xd)
20:12 < bridge> <cellegenrih> No, I just experienced with this exact thing a couple of weeks ago in Godot
20:12 < bridge> <chillerdragon> Rude
20:12 < bridge> <inv41idu53rn4m3> In honor of Paul Erd≈ës
20:12 < bridge> <kollpotato> why nonsense?
20:12 < bridge> <cellegenrih> As I said, feel free to correct me
20:12 < bridge> <cellegenrih> master
20:12 < bridge> <kollpotato> nice reference
20:13 < bridge> <cellegenrih> :feelsbadman: üôè
20:13 < bridge> <ryozuki> ugh we have been at the same iteration of this event multiple times
20:13 < bridge> <teero777> correcting takes longer than ignoring and going on
20:13 < bridge> <ryozuki> u started by saying mimaps use less vram, u were already wrong, so lets just stop there
20:13 < bridge> <cellegenrih> true but... eh?
20:14 < bridge> <ryozuki> did u get ur text from a blog post or is ur own
20:14 < bridge> <cellegenrih> So you read only that part and then ignored the rest?
20:14 < bridge> <cellegenrih> damn
20:14 < bridge> <ryozuki> i read a bit what u said, but it just makes no sense to me xD
20:14 < bridge> <cellegenrih> ig I'm cooked then
20:15 < bridge> <cellegenrih> btw was this a chatgpt response?
20:15 < bridge> <cellegenrih> Is AI determining what you know about this topic?
20:15 < bridge> <cellegenrih> If so, I think I know who is more cooked then
20:15 < bridge> <ryozuki> btw by definition a cache also means more vram usage, if said cache is on the gpu, otherwise i guess on the memory but then i would bet my ass a texture transfer from host to gpu is slower than using more vram
20:15 < bridge> <ryozuki> so ur just probs overengineering nonsense
20:16 < bridge> <Assa> btw I already mentioned the 33%, you probably safe more vram by disabling skins.
20:16 < bridge> <ryozuki> that was yeah, but i already knew mimaps used more ram
20:16 < bridge> <ryozuki> anyway mipmaps arent bad u should use them probs nearly always
20:16 < bridge> <cellegenrih> from CPU to GPU is faster, than reading back from GPU
20:16 < bridge> <ryozuki> its still a transfer
20:17 < bridge> <ryozuki> than having all on gpu
20:17 < bridge> <Assa> I already implemented gpu memory clearing so the vram Situation should be better in nightly
20:17 < bridge> <cellegenrih> and???
20:17 < bridge> <kollpotato> skins are really small though
20:17 < bridge> <cellegenrih> It's like "oh my pizza takes a long time cuz it's far away from me"
20:17 < bridge> <cellegenrih> like fucking duh
20:17 < bridge> <ryozuki> my point is Premature Optimization Is the Root of All Evil
20:17 < bridge> <cellegenrih> but I would rather have 100 pizzas arrive in a truck, then having a new pizza every now and then with a car
20:18 < bridge> <cellegenrih> how you process the transfers is where caching matters
20:18 < bridge> <ryozuki> sorry for being rude btw
20:18 < bridge> <cellegenrih> thus why I brought it up xd
20:18 < bridge> <cellegenrih> Well you are from ignoring me, wtf
20:18 < bridge> <Assa> how do you keep them fresh, do you have a pizza fridge?
20:18 < bridge> <cellegenrih> no, that's just called skill issue my friend
20:19 < bridge> <patiga> the only thing I'd say is fishy from the chatgpt response is
20:19 < bridge> <patiga> >  Improved cache coherency
20:19 < bridge> <patiga> especially because if its about the improved locality, then it already said that in the bullet point above
20:19 < bridge> <cellegenrih> ... who told you that
20:19 < bridge> <cellegenrih> :justatest: üî´
20:19 < bridge> <patiga> oop, wrong message reply
20:19 < bridge> <ryozuki> you are often confidently wrong, so arguing against you is a bit tiresome, i probs shouldnt have said anything and let the day continue
20:20 < bridge> <cellegenrih> I just experienced with this in Godot, so I know what I talk about. It looks like some crucial information is missing, which you clearly refuse to tell me
20:20 < bridge> <cellegenrih> Instead, you stick with an AI response
20:20 < bridge> <cellegenrih> And you want me to take you seriously, while you also don't
20:20 < bridge> <ryozuki> premature optimization is not a skill issue, its smth u should avoid
20:21 < bridge> <cellegenrih> What, is it by principle? Will I be in jail if I dare to make a system for a specific purpose?
20:21 < bridge> <kollpotato> but in the end it would be hard to fix all those issues that came from the beginning
20:21 < bridge> <ryozuki> unix philosohpy: "Make it work, then make it beautiful, then if you really, really have to, make it fast"
20:21 < bridge> <cellegenrih> I didn't tell, to implement it in Teeworlds, now didn't I üò≠
20:22 < bridge> <cellegenrih> I would rather use some anti-aliasing technique to smooth out the pixels, than bitmapping, but there are cases where it's useful
20:22 < bridge> <ryozuki> i dont get this sentence
20:22 < bridge> <cellegenrih> that's all I mentioned xd
20:23 < bridge> <ryozuki> you will often want both anyway
20:23 < bridge> <ryozuki> bitmap is not just about making it nice
20:23 < bridge> <ryozuki> it makes it more performant
20:23 < bridge> <inv41idu53rn4m3> not writing excess abstraction is different from doing excess optimization
20:23 < bridge> <cellegenrih> Yeah, so mention it to me, please correct me
20:23 < bridge> <ryozuki> i just said it
20:23 < bridge> <cellegenrih> That?
20:23 < bridge> <ryozuki> yes
20:23 < bridge> <cellegenrih> premature optimization is the root of all evil?
20:23 < bridge> <cellegenrih> that tells me shit about bitmap caching in GPU
20:23 < bridge> <ryozuki> using bitmaps is literally free option on gpus
20:24 < bridge> <cellegenrih> and you know why is that?
20:24 < bridge> <ryozuki> :pepeW:
20:24 < bridge> <cellegenrih> the manufacturers made a specific cache line for this
20:24 < bridge> <cellegenrih> genius ye
20:24 < bridge> <patiga> for a proper response @cellegenrih: you are confusing some sort of texture management system with mipmaps.
20:24 < bridge> <patiga> mipmaps have nothing to with moving textures between the gpu and cpu.
20:25 < bridge> <patiga> instead, they are only about **also** having lower-res version of a texture alongside it. it is a trade-off between more vram usage for better visual quality at a distance + better locality for the texture accesses.
20:25 < bridge> <patiga> 
20:25 < bridge> <patiga> with that in mind, going back to the first statement
20:25 < bridge> <patiga> > less memory allocation, better vram usage, less memory addresses need to be filled, proper texture scaling on a pixel perfect level
20:25 < bridge> <patiga> I'd reduce this to
20:25 < bridge> <patiga> > better ram usage and better image sampling
20:25 < bridge> <inv41idu53rn4m3> ok I have no idea what the context is here but I have a hard time imagining ANY context where this makes sense :pepeW:
20:25 < bridge> <patiga> also everyone please say mipmap and not bitmap :c
20:26 < bridge> <ryozuki> uh did i say bitmap? xd
20:26 < bridge> <ryozuki> i love bitmap fonts!
20:26 < bridge> <inv41idu53rn4m3> I love bitmap fonts
20:26 < bridge> <cellegenrih> I didn't talk about moving memory from GPU to CPU, that is the worst fucking thing to do
20:26 < bridge> <cellegenrih> 
20:26 < bridge> <cellegenrih> I only talked about how the dynamically created bitmap textures are allocated in a GPU cache, and in a way, how to keep track from the CPU what textures are cached onto the GPU in the first place, so the CPU knows what NOT to draw, **as well as what not to cache**
20:27 < bridge> <cellegenrih> idk where that argument about moving stuff out of the GPU comes from
20:27 < bridge> <inv41idu53rn4m3> Ain't it so pretty?
20:27 < bridge> <inv41idu53rn4m3> https://cdn.discordapp.com/attachments/293493549758939136/1410329819211763864/dylex.png?ex=68b09f7f&is=68af4dff&hm=4026242e1efe45162adb9ce8cc15a18f7458884cdf826b5896a0a747af00a382&
20:27 < bridge> <patiga> but keeping track of anything on the cpu has **nothing** to do with the concept of mipmaps
20:27 < bridge> <patiga> ^
20:27 < bridge> <cellegenrih> How do you tell the GPU what cache to store, as well as what to draw?
20:27 < bridge> <kollpotato> hell yeah is that the minecraft font?
20:28 < bridge> <cellegenrih> if not via OpenGL or Vulkan which you desperately need the CPU for communication?
20:28 < bridge> <patiga> I don't understand what you mean as the GPU cache, I believe that cache you are talking about is on the CPU
20:28 < bridge> <inv41idu53rn4m3> nah it's https://github.com/dylex/fonts
20:28 < bridge> <cellegenrih> GPU has a local memory which can store textures, so the CPU doesn't have to always transfer new (but potentially the same) texture all the itme
20:28 < bridge> <cellegenrih> GPU has a local memory which can store textures, so the CPU doesn't have to always transfer new (but potentially the same) texture all the time
20:29 < bridge> <inv41idu53rn4m3> one of those rendered to a texture for my little toy Godot project
20:29 < bridge> <cellegenrih> hence why I brought it up in the first place!!
20:29 < bridge> <Assa> I believe he just means gpu vram
20:29 < bridge> <patiga> that is VRAM
20:29 < bridge> <cellegenrih> And Ryo didn't know that??
20:29 < bridge> <patiga> what?
20:29 < bridge> <Assa> @ryozuki are my render optimizations premature?
20:29 < bridge> <cellegenrih> He mentioned other stuff that was not related to the local GPU memory
20:30 < bridge> <cellegenrih> but rather transfering out from the GPU and other bs
20:30 < bridge> <cellegenrih> idk
20:30 < bridge> <inv41idu53rn4m3> Thing is the way you're referring to it made it sound like you're referring to cache on the GPU processor die itself
20:30 < bridge> <patiga> I don't want to entertain your discussion above, I just wanted to clear up your message like you asked us to
20:30 < bridge> <inv41idu53rn4m3> not normal DRAM on the graphics card
20:30 < bridge> <cellegenrih> prob he misinterpreted it
20:30 < bridge> <cellegenrih> yeah
20:30 < bridge> <kollpotato> storing fonts in a text file xd
20:30 < bridge> <cellegenrih> should've mentioned VRAM, would've been clearer
20:30 < bridge> <ryozuki> i woudlnt say cuz ddnet is already an established product where most work is improvements like these
20:31 < bridge> <inv41idu53rn4m3> hell yeah bdf my goat
20:31 < bridge> <inv41idu53rn4m3> (it's a format made by Apple so idk if it's so goated but it's fun)
20:31 < bridge> <cellegenrih> Oh, so only when I mention it
20:31 < bridge> <cellegenrih> gotcha
20:31 < bridge> <cellegenrih> :pepeW: üëç
20:31 < bridge> <inv41idu53rn4m3> I could've used like a serious big boy library to read the font file but instead I parsed it by hand because I felt like it xd
20:31 < bridge> <ryozuki> i cant xd
20:31 < bridge> <kollpotato> people without ui are crazy, did they use to make fonts by hand?
20:32 < bridge> <kollpotato> absolutely unacceptable
20:32 < bridge> <inv41idu53rn4m3> nah it's just the storage format
20:32 < bridge> <inv41idu53rn4m3> though I *have* modified some of these fonts by modifying the hex values directly
20:32 < bridge> <cellegenrih> shut up at this point
20:32 < bridge> <teero777> what do you mean without ui? xD everything is an ui
20:32 < bridge> <kollpotato> well uh
20:33 < bridge> <kollpotato> i meant gui
20:33 < bridge> <kollpotato> but tui is gui too
20:33 < bridge> <kollpotato> only for text
20:33 < bridge> <inv41idu53rn4m3> I could've also used like a serious big boy library to write the image to a PNG but instead I wrote a NetPBM exporter
20:33 < bridge> <inv41idu53rn4m3> seriously ridiculous case of NIH syndrome
20:34 < bridge> <inv41idu53rn4m3> (to be clear the exporter is like a couple of lines of code that's really trivial to write)
20:34 < bridge> <cellegenrih> Oh
20:41 < bridge> <inv41idu53rn4m3> TUI is VUI but not GUI
20:41 < bridge> <inv41idu53rn4m3> That's why VI is called VI
20:41 < bridge> <inv41idu53rn4m3> I don't know if that's an established term
20:41 < bridge> <kollpotato> gui is ambiguous
20:41 < bridge> <inv41idu53rn4m3> but point is it's visual but not graphical
20:41 < bridge> <kollpotato> it means graphics
20:42 < bridge> <kollpotato> text is graphics
20:42 < bridge> <milkeeycat> chillerdragon: I won't merge the builder pr, sowwy. I think they could be defined either in user's code or some "util" lib. I think we should only provide default values for certain things.
20:45 < bridge> <teero777> context? i wana know
20:45 < bridge> <teero777> context? i wana know pwease
20:46 < bridge> <milkeeycat> I maintain [ddnet_protocol](https://github.com/MilkeeyCat/ddnet_protocol) lib by merging all chiller's prs xd
20:47 < bridge> <Solly (bun bun)> ```cpp
20:47 < bridge> <Solly (bun bun)> class SharedPtr {
20:47 < bridge> <Solly (bun bun)>     constructor(data, deconstruct) {
20:47 < bridge> <Solly (bun bun)>         this._data = data;
20:47 < bridge> <Solly (bun bun)>         this._deconstruct = deconstruct;
20:47 < bridge> <Solly (bun bun)>         this.count = 1;
20:47 < bridge> <Solly (bun bun)>     }
20:47 < bridge> <Solly (bun bun)>     deref() {
20:47 < bridge> <Solly (bun bun)>         if (this.count > 0)
20:47 < bridge> <Solly (bun bun)>             return this._data;
20:47 < bridge> <Solly (bun bun)>     }
20:47 < bridge> <Solly (bun bun)>     clone() {
20:47 < bridge> <Solly (bun bun)>         this.count += 1;
20:47 < bridge> <Solly (bun bun)>         return this;
20:47 < bridge> <Solly (bun bun)>     }
20:47 < bridge> <Solly (bun bun)>     destroy() {
20:47 < bridge> <Solly (bun bun)>         this.count -= 1;
20:47 < bridge> <Solly (bun bun)>         if (this.count === 0 && this._deconstruct) {
20:47 < bridge> <Solly (bun bun)>             this._deconstruct();
20:47 < bridge> <Solly (bun bun)>             delete this._data;
20:47 < bridge> <Solly (bun bun)>         }
20:47 < bridge> <Solly (bun bun)>     }
20:47 < bridge> <Solly (bun bun)> }
20:47 < bridge> <Solly (bun bun)> ```
20:47 < bridge> <Solly (bun bun)> js shared ptr x-x
20:47 < bridge> <kollpotato> ew
20:47 < bridge> <Solly (bun bun)> i need the behaviour
20:49 < bridge> <Assa> so @cellegenrih what do you want? Less VRAM usage, more fps? We have some nice improvements in the Pipeline
20:55 < bridge> <cellegenrih> On Godot? Godot manages it's VRAM very nicely, but the CPU overdraws on textures sent to the GPU, so I manage a system to dynamically allocate caches textures from stack
20:55 < bridge> <cellegenrih> On Godot? Godot manages it's VRAM very nicely, but the CPU overdraws on textures sent to the GPU, so I manage a system to dynamically allocate cached textures from stack
20:55 < bridge> <cellegenrih> (Onto Nodes where it's either being used, or should be visible, even on a far distance)
20:57 < bridge> <cellegenrih> But I won't implement it yet, due to Godot shaders just refusing to cooperate with me
21:00 < bridge> <Assa> were in ddnet here, not in godot
21:03 < bridge> <ryozuki> why c
21:03 < bridge> <cellegenrih> If the entities (as in inmovable blocks) were chunk-ated into like 4 pixel divisible chunks, then probably there could be a pattern for sending less draw commands with bitmapping textures from the local memory by storing less data using unsigned values
21:03 < bridge> <milkeeycat> because I was writing a kernel module https://github.com/MilkeeyCat/n
21:04 < bridge> <milkeeycat> because I was writing a kernel module https://github.com/MilkeeyCat/nodummies
21:04 < bridge> <milkeeycat> because I was writing a kernel module https://github.com/MilkeeyCat/nodummies
21:04 < bridge> <milkeeycat> because I was writing a kernel module https://github.com/MilkeeyCat/nodummies
21:04 < bridge> <Assa> currently we are working on chunking quads in a similar way
21:04 < bridge> <ryozuki> i updated my blog https://edgl.dev/
21:04 < bridge> <ryozuki> uh the image is not mine kek
21:04 < bridge> <cellegenrih> you will lose precision if it's floating point value dependant, but if it can be allocated in integer values, then you can use unsigned bytes to allocate less info, thus feeding more data to the GPU, including bitmap info and such... but this is an entirely different system tho
21:04 < bridge> <ryozuki> i used a theme :justatest:
21:04 < bridge> <cellegenrih> Ah
21:04 < bridge> <ryozuki> soon blog post about kernel dev
21:04 < bridge> <Assa> tiles would be next, i am not sure if this would improve much
21:05 < bridge> <cellegenrih> The point should be to have less draw commands, while the data is small enough for the GPU to draw extremely fast
21:06 < bridge> <cellegenrih> based on the vercidium implementation
21:07 < bridge> <cellegenrih> the more data you can cramp into the unsigned values, the better, including what bitmap textures to use from VRAM
21:07 < bridge> <cellegenrih> if that can be done, perhaps Teeworlds could reach more than 10k FPS while in idle
21:07 < bridge> <ryozuki> ChillerDragon: look the new blog has series https://edgl.dev/series/ddracenetwork/
21:07 < bridge> <cellegenrih> But ofc, that depends on what entities actually store.... which makes it hard af to compress into unsigned values
21:08 < bridge> <cellegenrih> cuz then you'll have to make readable functions that do exactly what you need, otherwise implementing it manually with bit manipulations will be a pain in the ass
21:10 < bridge> <kollpotato> overengineered blog xd
21:10 < bridge> <kollpotato> but the monospace font looks good
21:12 < bridge> <Assa> we are currently at 3-5 K
21:12 < bridge> <Assa> see 10732
21:12 < bridge> <Assa> see #10732
21:12 < bridge> <Assa> #10732
21:12 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/10732
21:35 < bridge> <teero777> is your pfp you irl?
21:37 < bridge> <teero777> can make it wider? all that wasted space ü•≤
21:37 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1410347469778194432/image.png?ex=68b0afef&is=68af5e6f&hm=c8bc472a3a46f4fbd7aeb22a0b32d4fee5d5970e625ddcd44a6152759cbc5065&
21:38 < bridge> <inv41idu53rn4m3> It's called ‚ú®*DESIGN*‚ú®
21:38 < bridge> <teero777> fuck design i can't read shit
21:38 < bridge> <kollpotato> simplicity is best
21:38 < bridge> <inv41idu53rn4m3> It's called *‚ú®DESIGN‚ú®*
21:38 < bridge> <kollpotato> https://motherfuckingwebsite.com/
21:39 < bridge> <teero777> doesn't mean every row has to be limited to 15 characters :(
21:40 < bridge> <ryozuki> what
21:40 < bridge> <inv41idu53rn4m3> replies are considered pings
21:40 < bridge> <kollpotato> wait since when
21:41 < bridge> <kollpotato> can i ping myself
21:41 < bridge> <inv41idu53rn4m3> yes
21:41 < bridge> <inv41idu53rn4m3> @inv41idu53rn4m3
21:41 < bridge> <inv41idu53rn4m3> that line is yellow (brown) on my screen
21:41 < bridge> <kollpotato> @kollpotato
21:42 < bridge> <kollpotato> ghost ping doesnt work sad
21:42 < bridge> <inv41idu53rn4m3> like actually look at the message highlight colour, it's just straight up poop brown
21:42 < bridge> <inv41idu53rn4m3> if you look at it in isolation
21:42 < bridge> <kollpotato> yea i love poop brown
21:53 < bridge> <cellegenrih> So this benefits in maps where there are large quad amounts?
21:53 < bridge> <cellegenrih> @essigautomat
21:53 < bridge> <ryozuki> hmm odd maybe ill switch back
21:54 < bridge> <inv41idu53rn4m3> yes
21:54 < bridge> <teero777> read the fucking description? why are you asking useless questions
21:55 < bridge> <kollpotato> previous one was much better
21:55 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1410352140282630224/dd.png?ex=68b0b449&is=68af62c9&hm=4b1ff67a4dc20400fb17956fd1265eda74612c3e477b7aa28f19110d4846306d&
21:56 < bridge> <cellegenrih> maybe be fucking nice üòÑ
21:57 < bridge> <cellegenrih> I expected a code complexity result
21:57 < bridge> <Assa> yes
22:10 < bridge> <cellegenrih> huhh, this is like the same issue I have, but with Nodes not handling visibility correctly, as well as shaders not disabling computation when not visible
22:11 < bridge> <cellegenrih> the auto quad cropping system I mean
22:11 < bridge> <Assa> ddnet chunks the number of quads anyways, attaching a clip region was not too hard
22:13 < bridge> <cellegenrih> the easiest way that I could think outright would be to get all of the quads inside one chunk and check their position and animations, then get the least and highest vec2 values for an approximation for clipping
22:13 < bridge> <mo_lt> mustard
22:14 < bridge> <cellegenrih> I didn't peek inside the implementation, so this is my hunch xd
22:19 < bridge> <Assa> this is exactly what I am doing, but in an optimized manner by precalculating envelope Extrema. Rotation makes this non trivial
22:20 < bridge> <inv41idu53rn4m3> no :greenthing:
22:20 < bridge> <robyt3> How is https://codedoc.ddnet.org updated? It doesn't seem to have changes from weeks ago (#10620).
22:20 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/10620
22:22 < bridge> <cellegenrih> big
22:34 < bridge> <cellegenrih> Can you make the vec2 values integers, so yo u can store them as bytes?
22:36 < bridge> <cellegenrih> using floor() on the least vec2 and ceil() on highest vec2 to make sure it's still in bounds; should produce less memory allocation without any precision loss since it's gonna be a little bigger, but aligned
22:36 < bridge> <cellegenrih> using floor() on the least vec2 and ceil() on highest vec2 to make sure it's still in bounds; should produce less memory allocation without any precision loss since it's gonna be a little bigger (the cropping size I mean), but aligned
22:44 < bridge> <cellegenrih> I guess the overall formula would be for the position and size:
22:44 < bridge> <cellegenrih> - Chunk position (if each chunk is a size of 32 subpixels), then for a maximum of 1000x1000 block map, it needs a **[u16]**
22:44 < bridge> <cellegenrih> - The estimated cropping position converted to integerized [**x -> u8**] and [**y -> u8**], it needs a **[u16]** (**x** or **y** as float / chunk as float = **x** or **y** as i8, converting it to u8)
22:44 < bridge> <cellegenrih> - The estimated cropping size converted to integerized [**x -> u8**] and [**y -> u8**], it needs a **[u16]** (**x** or **y** as float / chunk as float = **x** or **y** as i8, converting it to u8)
22:44 < bridge> <cellegenrih> 
22:44 < bridge> <cellegenrih> So it needs a u64 to get all the info needed to allocate onto
22:45 < bridge> <cellegenrih> you can also insert m_Clipped and m_Grouped as flags onto it
22:46 < bridge> <cellegenrih> you can also insert m_Clipped as a flag onto it
22:47 < bridge> <cellegenrih> Am I cooking and am I mega cooked? üíÄ
22:47 < bridge> <Assa> read the PR, this exists
22:48 < bridge> <cellegenrih> I read it as a boolean ye
22:48 < bridge> <Assa> u8 is too small
22:48 < bridge> <cellegenrih> I mean, yeah it's for a max 1000x1000 map, which I assume nobody really uses any higher values
22:48 < bridge> <cellegenrih> idk
22:48 < bridge> <Assa> what do you think how many clip regions a map contains? I see no need in optimizing this
22:49 < bridge> <cellegenrih> we don't need the exact position, we just need the index for that grid pos
22:49 < bridge> <Assa> I have a 20000 x 1000 map already
22:49 < bridge> <cellegenrih> actually no clue, Imma guess anywhere from 0 to 10
22:49 < bridge> <cellegenrih> for a normal map made purely by a mapper
22:49 < bridge> <cellegenrih> :justatest:
22:50 < bridge> <cellegenrih> then u64 is... just barely enough
22:50 < bridge> <cellegenrih> if we only store the pos and size
22:50 < bridge> <cellegenrih> both as u32
22:51 < bridge> <cellegenrih> I mean, that should still be faster tho
22:51 < bridge> <Assa> u also doesn't work, you can have negative values
22:51 < bridge> <cellegenrih> mmmm
22:52 < bridge> <cellegenrih> allocate 4 bytes for a flag for negative value (pos x / y and size x / y)?
22:52 < bridge> <cellegenrih> after all, you have to somehow convert back from unsigned values if it's negative
22:52 < bridge> <Assa> or use normal datatypes that can be calulated fast because this is done every frame
22:52 < bridge> <cellegenrih> ... eh?
22:53 < bridge> <cellegenrih> what does it need to calculate each frame?
22:53 < bridge> <Assa> a clip region needs to be checked every frame because players _move_.
22:53 < bridge> <cellegenrih> (or is it the draw call?)
22:54 < bridge> <cellegenrih> eh? What value does it need to change based on camera movement?
22:54 < bridge> <Assa> you could further optimize this with a kd tree or something, but thats a PR you cam write
22:54 < bridge> <Assa> yes on camera basically
22:54 < bridge> <cellegenrih> I can't since I don't really understand the problem fully
22:55 < bridge> <Assa> if thing in range then render
22:55 < bridge> <Assa> meaning you need to check clip region
22:56 < bridge> <cellegenrih> Oh you mean the clipping border rendering
22:56 < bridge> <cellegenrih> cuz that should be the only thing with a draw call
23:01 < bridge> <Assa> the clip regions are not on the gpu or something for quads, other than groups. I don't think you can stack clips on top of each other
23:18 < bridge> <cellegenrih> yeah I think so too, and bummer it doesn't use the GPU xd
23:27 < bridge> <chillerdragon> But ryo where new ddnet blogs
23:36 < bridge> <chairn> you can use ivec2 iirc
23:37 < bridge> <chairn> it's just vec2 but with integers
23:41 < bridge> <cellegenrih> yeah, but the unsigned value allocation I mentioned is for the class having less data cramped in it
23:41 < bridge> <cellegenrih> not for simplifying the data
23:42 < bridge> <cellegenrih> converting an f64 to an i64 does not really benefit anything other than a specific purpose related to integers
23:43 < bridge> <cellegenrih> but converting float values into bytes using different methods of identifying a quad's position via chunks and the distance inside the top left side of the chunk, now that's where it matters
23:43 < bridge> <cellegenrih> the tl;dr version is that bytes are the smallest and fastest, yet hardest and most unsafe way to get your data as small as possible
23:44 < bridge> <cellegenrih> (btw this way, you can use shaders to render the clip)
