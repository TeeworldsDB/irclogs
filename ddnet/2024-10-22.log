00:35 < bridge> <louis> https://github.com/H-M-H/Weylus
00:35 < bridge> <louis> came across this off google and recognized hmh's name from ddnet, pretty cool ðŸ˜…
00:54 < bridge> <learath2> Stopped contributing to ddnet, made something actually useful
11:43 < bridge> <Mr.Gh0s7> :kek:
12:04 < bridge> <meloÆž> Hop on gw2
12:17 < bridge> <ryozuki> TIL that i32::MAX is a (mersenne) prime number
12:18 < bridge> <meloÆž> I could've lived without that information but now I'll read posts about that topic for 2 hours. Let's go
12:21 < bridge> <learath2> That's lucky
12:22 < bridge> <jxsl13> yesterday I learned that 2^136279841 - 1 is prime
12:27 < bridge> <ryozuki> ye
12:27 < bridge> <ryozuki> https://www.johndcook.com/blog/2024/10/21/new-mersenne-prime-found/
12:27 < bridge> <ryozuki> discovered yesterday
12:28 < bridge> <ryozuki> fun fact, in hex its represented like this
12:28 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1298231533336789042/Gab0XgwWMAAFMTv.png?ex=6718cfd5&is=67177e55&hm=62d3fa1faa846269a04901552d11527b7939d6a94099bafdea09956b674b3b64&
12:50 < bridge> <learath2> Did you know that we don't know whether there are infinite Mersenne primes or not?
13:13 < bridge> <ryozuki> yeah
13:13 < bridge> <inv41idu53rn4m3> It would even be practical if it wasn't for the awful latency :)
13:14 < bridge> <inv41idu53rn4m3> ok maybe I'm just picky but even the latency on my Wacom tablet irritates me sometimes
15:56 < bridge> <cat1x_> Hello everyone, can you send me the link to download ddnet to your phone?
15:57 < bridge> <cat1x_> :owo:
15:58 < bridge> <meloÆž> https://discord.com/channels/252358080522747904/1277345584080097320/1295497728226365523 :owo:
17:43 < bridge> <cyberfrighter> i dont get why there wouldnt be infinite of them if you got infinite numbers to deal with
17:46 < bridge> <learath2> Well we don't really understand primes very well. Their distribution is a bit of a mystery. It's easy to show that there are infinite primes, but it's not at all easy to show that there are infinite primes of the type 2^k - 1
17:51 < bridge> <milkeeycat> https://runjs.app/ watafak is this :pepeW:
17:52 < bridge> <milkeeycat> 20 clams for a program which runs the program for you
17:52 < bridge> <milkeeycat> 20 clams for a program which runs js code for you
17:54 < bridge> <learath2> https://math.stackexchange.com/a/3985396 there is this dude on stackexchange that claims they proved that it's infinite using excel in the appendix of a paper they wrote
17:54 < bridge> <learath2> I have my doubts
17:55 < bridge> <nykytakhomyk> hello everyone
17:55 < bridge> <learath2> https://math.stackexchange.com/a/3985396 there is this dude on stackexchange that claims they proved that it's finite using excel in the appendix of a paper they wrote
17:59 < bridge> <Jupstar âœª> hello all 8 billion ppl
17:59 < bridge> <Jupstar âœª> wazzup, what's on your heart today
18:07 < bridge> <powerman3785> $kog
19:44 < bridge> <inv41idu53rn4m3> I'm sure they've managed to fish some noobs with this scam
20:10 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1298347877449334804/GaY3pJoagAAMqIA.png?ex=67193c30&is=6717eab0&hm=df7e604c4e0cc4d7a14286fb1ec1bbe8adb2e1005505686c804c6fd094b1a60a&
20:34 < bridge> <milkeeycat> People who buy it should be ashamed of themselves to the rest of their lives
20:39 < bridge> <chairn> just like all mersenne primes
20:40 < bridge> <chairn> fermat long lost descendant ðŸ˜„
20:46 < bridge> <ryozuki> https://www.memorysafety.org/blog/rustls-performance-outperforms/
20:54 < bridge> <chairn> how do they guarentee security on side channels such as time ?
20:55 < bridge> <ryozuki> ask them
20:55 < bridge> <chairn> i know that's sometimes already hard enough with C, gotta be even harder with rust
20:55 < bridge> <ryozuki> how so?
20:55 < bridge> <ryozuki> both C (clang) and rust use llvm
20:56 < bridge> <ryozuki> rustls is mostly done by amazon team iirc
20:56 < bridge> <ryozuki> https://github.com/aws/aws-lc-rs
20:57 < bridge> <ryozuki> > While Rustls itself is platform independent, by default it uses aws-lc-rs for implementing the cryptography in TLS. See the aws-lc-rs FAQ for more details of the platform/architecture support constraints in aws-lc-rs.
20:57 < bridge> <ryozuki> > 
20:57 < bridge> <ryozuki> > ring is also available via the ring crate feature: see the supported ring target platforms.
20:57 < bridge> <chairn> because high level compiler will optimize code
20:58 < bridge> <chairn> and thus break time/power equality between branches
20:58 < bridge> <ryozuki> idk
20:58 < bridge> <ryozuki> maybe they use inline asm
20:58 < bridge> <ryozuki> i dont rly want to look this now xd but i doubt such a big project didnt consider this stuff
21:00 < bridge> <chairn> yeah, obviously they care about this or nobody would use their lib. Im just curious on how they handle it
21:00 < bridge> <ryozuki> apparently rustls complies with this too https://en.wikipedia.org/wiki/FIPS_140-2
21:00 < bridge> <ryozuki> well whathever latest fips is
21:00 < bridge> <ryozuki> https://en.wikipedia.org/wiki/FIPS_140-3
21:01 < bridge> <ryozuki> i know in llvm u can put function attributes to tell llvm to not optimize  a specific function for example
21:02 < bridge> <totar> how can you ever guarantee constant time if the cpu itself can optimize your machine code?
21:03 < bridge> <chairn> you can also deactivate some cpu opts for critic kernel. you just have to reduce leaks to noise level
21:04 < bridge> <ryozuki> anybody playing factorio?
21:04 < bridge> <ryozuki> the factory must grow (in space)
21:04 < bridge> <totar> I played 7 hours yesterday
21:04 < bridge> <ryozuki> i played like 2
21:04 < bridge> <ryozuki> need more time
21:04 < bridge> <ryozuki> i also play ffxiv tho xd
21:05 < bridge> <totar> requester chests gated behind space science was a huge delay for us because we thought we could make a bot unloader for the trains but it turned out that we need rockets first
21:05 < bridge> <ryozuki> oh spoiler
21:05 < bridge> <ryozuki> xd
21:06 < bridge> <totar> not really, you run into it before you leave the first planet xd
21:06 < bridge> <ryozuki> i havent even left a panet yet xd
21:06 < bridge> <ryozuki> taking it slow
21:06 < bridge> <totar> us neither
21:06 < bridge> <ryozuki> us
21:06 < bridge> <ryozuki> u play coop?
21:06 < bridge> <totar> yeah
21:06 < bridge> <ryozuki> solo for the pros
21:06 < bridge> <ryozuki> :gigachad:
21:06 < bridge> <ryozuki> imagine having friends
21:07 < bridge> <totar> it's sorta hard not to see spoilers while you're playing when the research tree shows you everything from the start
21:07 < bridge> <totar> don't scroll down too much... xd
21:09 < bridge> <totar> 8 friends on steam ingame rn lol
21:09 < bridge> <totar> most played game among my friend list
21:09 < bridge> <ryozuki> tbh i prefer solo cuz i like doing all stuff
21:10 < bridge> <totar> I enjoy 2-4 players the most cause you can still coordinate stuff without everything being a huge mess
21:12 < bridge> <ryozuki> the coop world speedrun is fun
21:12 < bridge> <totar> yeah
21:13 < bridge> <totar> the speedrun achievement for space age looks hard, even if you already know everything
21:33 < bridge> <learath2> my guess would be inline assembly
21:36 < bridge> <milkeeycat> @learath2 my compiler's output isn't even that bad. I was looking different compiler implementations to yoink some stuff. And I found one which transpiles into C. Here's a few lines from output:
21:36 < bridge> <milkeeycat> ```C
21:36 < bridge> <milkeeycat> #line 4 "foo.alu"
21:36 < bridge> <milkeeycat> static _AL6Result57 _AL14try_get_number256(){
21:37 < bridge> <milkeeycat> int32_t _AL0474;
21:37 < bridge> <milkeeycat> 
21:37 < bridge> <milkeeycat> #line 5 "foo.alu"
21:37 < bridge> <milkeeycat> _AL0474=_AL4next229(_AL10thread_rng72(),
21:37 < bridge> <milkeeycat> #line 174 "./sysroot/std/range.alu"
21:37 < bridge> <milkeeycat> (_AL5Range25){._AL0320=
21:37 < bridge> <milkeeycat> #line 5 "foo.alu"
21:37 < bridge> <milkeeycat> ((int32_t)0LL),._AL0321=((int32_t)3LL),});
21:37 < bridge> <milkeeycat> #line 7 "foo.alu"
21:37 < bridge> <milkeeycat> return ((_Bool)(_AL0474>((int32_t)0LL))?
21:37 < bridge> <milkeeycat> #line 128 "./sysroot/std/result.alu"
21:37 < bridge> <milkeeycat> (_AL6Result57){._AL0308=
21:37 < bridge> <milkeeycat> ((_Bool)1),._AL0344=
21:37 < bridge> <milkeeycat> (_AL8_ResultT58){._AL0345=
21:37 < bridge> <milkeeycat> #line 8 "foo.alu"
21:37 < bridge> <milkeeycat> _AL0474,},}:
21:37 < bridge> <milkeeycat> #line 147 "./sysroot/std/result.alu"
21:37 < bridge> <milkeeycat> (_AL6Result57){._AL0308=
21:37 < bridge> <milkeeycat> ((_Bool)0),._AL0344=
21:37 < bridge> <milkeeycat> (_AL8_ResultT58){},});}
21:37 < bridge> <milkeeycat> ```
21:37 < bridge> <learath2> ew
21:37 < bridge> <learath2> nim transpiles to C and it's a little better
22:47 < bridge> <Ewan> i got my work laptop
22:47 < bridge> <Ewan> i have no 2.5g ethernet switch (or an ethernet port on my laptop) but the wifi is bad in my room
22:49 < bridge> <Ewan> so i got a usb ethernet dongle i had, set up networkmanager to share the connection, and then plugged the ethernet into my monitor's ethernet port
22:49 < bridge> <Ewan> so this monitor does 4k video, gigabit ethernet and power all over one cable
22:49 < bridge> <Ewan> i love thunderbolt. my evil amd laptop doesnt have it
