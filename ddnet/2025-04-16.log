01:32 < bridge> <kebscs> tested harpoon and water from the teeworlds pr and they dont seem to do much
01:32 < bridge> <kebscs> harpoon would be useless in ddnet
01:32 < bridge> <kebscs> posted the videos in #9973 if anyone wants to see without compiling it
01:32 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/9973
01:33 < bridge> <louis> not everything needs a unique gameplay niche
01:33 < bridge> <louis> water is better than any combination of tunes imo, it also dampens velocity more waterlike
01:36 < bridge> <kebscs> yea its better than tunes, the visuals especially
01:36 < bridge> <kebscs> but not by a lot
02:11 < bridge> <totar> feel free to ask questions
02:14 < bridge> <gorp_tw> i agree
02:15 < bridge> <gorp_tw> okay, then more switches
07:17 < bridge> <louis> my trivial prs are appreciated 🥺
10:12 < bridge> <Assa> Good morning :owo: who is ASKLL-STAR and how does he find nightly issues so fast?
10:15 < bridge> <Jupstar ✪> He is chinese so the nightly is his daily xd
10:16 < bridge> <Assa> daily quest: break nightly, poetic
11:01 < bridge> <learath2> https://paste.pr0.tips/W1Q
11:01 < bridge> <learath2> 
11:01 < bridge> <learath2> I wrote an Imhex pattern for teehistorian files. It doesn't work great for teehistorian files sadly. It takes 20G of memory to apply the pattern to a 2.6M file
11:02 < bridge> <learath2> I did use it to look into the random unknown items. It well and truly looks like it just randomly decides to record a completely wrong thing
11:11 < bridge> <Assa> do you have an error rate?
11:26 < bridge> <learath2> 1 file in about 30k seems to have some sort of error, and for whatever reason it seems more likely on chinese servers
11:26 < bridge> <Solly (bun bun)> They don't responsibility dispose of nuclear waste
11:26 < bridge> <Solly (bun bun)> Leading to higher chances of cosmic rays
11:26 < bridge> <Solly (bun bun)> Well not cosmic anymore
11:27 < bridge> <Solly (bun bun)> For reasons of not getting smote by the Chinese government, that's was a /j
11:30 < bridge> <learath2> They responsibly dispose it right into our server it seems
11:31 < bridge> <Assa> Cosmic rays would be even rarer, maybe some kind of network issue edge case?
11:32 < bridge> <learath2> I doubt it's a network issue, the files are transferred over with rsync, over tcp, at both layers there are checksums
11:32 < bridge> <learath2> It's more likely that the file was created wrong to begin with
11:34 < bridge> <Assa> do they appear 'at the same place' meaning is there some pattern to it? (Is that the Imhex pattern you're talking about?)
11:34 < bridge> <learath2> The Imhex pattern is basically a rudimentary teehistorian parser, that marks in the hex editor all the chunks
11:37 < bridge> <learath2> There doesn't really seem to be much of a pattern to where it happens
11:38 < bridge> <Assa> we don't have any OS info or something do get stats about? :justatest:
11:39 < bridge> <chillerdragon> CHINA wants the monopoly on spyware. They have their own working teehistorian and corrupt yours
11:41 < bridge> <learath2> It seems to somehow be a "malformed" PlayerDiff item
11:42 < bridge> <learath2> The only pattern I've noticed is that it's always amongst other playerdiff items where I get the broken item
11:44 < bridge> <pioooooo> Chn servers have hdd filled up twice recently
11:45 < bridge> <pioooooo> FYI
11:45 < bridge> <learath2> Actually that might do it
11:46 < bridge> <learath2> Gets filled up, writes fail, we don't disable teehistorian, we get these malformed files that seemingly keep going normally
11:46 < bridge> <pioooooo> After write failure the server should be dead tho
11:47 < bridge> <pioooooo> Which is the case of the last two incidents
11:47 < bridge> <learath2> Hm, how dead? Completely restarted?
11:48 < bridge> <pioooooo> When you vote to change map, it tries to flush teehistorian and fails and don't start anymore
11:48 < bridge> <pioooooo> Prompts cannot write teehistorian file or something
11:48 < bridge> <pioooooo> And anyone cannot connect anymore
11:53 < bridge> <learath2> But the server keeps running, right? I wonder what happens when the disk has space
11:53 < bridge> <learath2> Also these issues are very hard to debug when there are millions and millions of ticks in there
11:54 < bridge> <learath2> Like not many tools handle this well
12:00 < bridge> <learath2> Another thing I noticed is that as the files get larger it's more likely they are broken:
12:00 < bridge> <learath2> `141625e2-904c-4cbc-ad71-178aac2dd91c.teehistorian: Teehistorian(PlayerDiffWithoutNew)` this is a 1.2G one
12:11 < bridge> <robyt3> I assume the fwrite calls will fail and only write as much as possible. We don't check the result in many places so I guess it just assumes that it was written correctly. More correct would be to retry the write and if it fails repeatedly then shutdown the server to prevent malformed teehistorian files.
12:13 < bridge> <learath2> I would rather just stop recording the teehistorian file instead of killing the entire server as I said in #5670
12:13 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/5670
12:14 < bridge> <learath2> Perhaps even try seek back a little and write a special pattern in the file to mark that the file is truncated due to a write issue
12:40 < bridge> <ryozuki> https://www.csoonline.com/article/3963190/cve-program-faces-swift-end-after-dhs-fails-to-renew-contract-leaving-security-flaw-tracking-in-limbo.html
12:40 < bridge> <ryozuki> @learath2 look! vulnerabilities no more! its safe to use C now
12:41 < bridge> <ryozuki> they will dissolve CVE
12:41 < bridge> <ryozuki> there is a eu one tho https://euvd.enisa.europa.eu/
12:42 < bridge> <ryozuki> kek Web site created using create-react-app
12:42 < bridge> <ryozuki> https://osv.dev/
12:43 < bridge> <learath2> Elon is saving the govt billions oer year wooo
13:04 < bridge> <inv41idu53rn4m3> :justatest:
13:16 < ws-client> <ChillerDragon> I just found some old gem while cleaning my flat xd
13:17 < ws-client> <ChillerDragon> Back in the days I decided to print out the entire openCV cpp documentation in color ... who knows why
13:17 < ws-client> <ChillerDragon> https://zillyhuhn.com/cs/.1744802189.png
13:17 < ws-client> <ChillerDragon> any recommendations what to do with it? xd
13:17 < bridge> <milkeeycat> read it
13:18 < ws-client> <ChillerDragon> kek
13:18 < bridge> <Jupstar ✪> Donate it to the kindergarten, so they have paper to draw on
13:19 < ws-client> <ChillerDragon> actually good recommendation jupstar
13:19 < ws-client> <ChillerDragon> maybe the accidentally learn opencv
13:19 < bridge> <milkeeycat> donate it to the kindergarten, so they can learn openCV
13:19 < bridge> <kekomonter> Burn it all with fire
13:19 < bridge> <milkeeycat> fock
13:54 < bridge> <teero777> Yoo nice can i have em chiller? xd
13:54 < bridge> <teero777> Or is it outdated already
14:31 < ws-client> <ChillerDragon> @teero777 its giga outdated but sure come pick it up your are invited to tonights cooking night again!
14:32 < ws-client> <ChillerDragon> @avolicious i have the feeling your initial chat delay breaks my login. Initial chat delay should not be applied for login commands.
14:40 < ws-client> <ChillerDragon> oh my login request is pending forever maybe thats the issue
14:43 < ws-client> <ChillerDragon> @zhn is he trolling me? "we call a person playing with a cheat natural"
14:54 < bridge> <chairn> what's a good tool to navigate in git blame output ? Like go back one commit after i've found the line ?
14:55 < bridge> <ryozuki> i think tig
14:59 < bridge> <chairn> ah yes, thank you 🙂
14:59 < bridge> <chairn> just need to find the keyboard shortcut to go back one commit now :
14:59 < bridge> <chairn> just need to find the keyboard shortcut to go back one commit now 😄
15:00 < bridge> <chairn> okya, it's ','
15:38 < bridge> <chillerdragon> I should try tig for that! I use GitHub or GitHub wrappers for that .\_.
15:56 < bridge> <avolicious> It applies for everything, an exclusion for commands is currently not GA only dev
16:00 < ws-client> <ChillerDragon> whats GA
16:01 < ws-client> <ChillerDragon> maybe not all commands you dont want /rank spammers
16:01 < ws-client> <ChillerDragon> but ideally login should be whitelisted and then unlock the chat too
16:02 < ws-client> <ChillerDragon> "One of our engineers came across your profile as the contributor to Github daily trending project [..] and thought to reach out!"
16:02 < ws-client> <ChillerDragon> common chiller gh influencer moment
16:02 < bridge> <A Moderator> wasnt there a scam going around with something similar?
16:02 < ws-client> <ChillerDragon> with what?
16:03 < bridge> <A Moderator> something something github contributor invitation closed source ssh key
16:03 < ws-client> <ChillerDragon> missed that
16:03 < ws-client> <ChillerDragon> but i noticed that if you spam gh contributions into the void some people will mail you :D 
16:03 < bridge> <A Moderator> :kek:
16:09 < bridge> <ryozuki> ppl mail me
16:09 < bridge> <ryozuki> cuz gh
16:09 < bridge> <Assa> can anyone take a look at #10078 as it's a bugfix for my merge yesterday 🙈  just 4 lines of code
16:09 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/10078
16:10 < bridge> <ryozuki> donete
16:11 < bridge> <Assa> thankete :owo:
17:46 < bridge> <jxsl13> in regard to my c toolchain problem from yesterday, I needed to set the ACLOCAL_PATH to point /usr/share/aclocal which contains a pkg.m4 file which is part of the system's pkg-config.
17:46 < bridge> <jxsl13> and that file defines the macro
17:50 < ws-client> <ChillerDragon> @jxsl13 cring why does it not find it on its own?
17:50 < bridge> <jxsl13> because I build my own toolchain probably
17:50 < bridge> <jxsl13> which is located at /usr/local
17:50 < bridge> <jxsl13> and not at /usr
17:51 < ws-client> <ChillerDragon> ln -s /usr/local /usr
17:51 < bridge> <jxsl13> noo
17:51 < bridge> <jxsl13> that's intentional
17:52 < bridge> <jxsl13> to prevent my built software to even remotely think about having any system dependencies 👀
17:52 < bridge> <jxsl13> might be a wrong approach, who knows
17:52 < bridge> <jxsl13> to not even think*
17:53 < bridge> <jxsl13> but here I needed the system's pkg-config cuz I am not going to compile pkg-config from scratch
18:27 < bridge> <A Moderator> they stole mah job! ( i wrote 100 loc and let it rot for hours)
18:27 < bridge> <A Moderator> they stole mah job! ( i wrote 100 loc and let it rot for weeks)
18:31 < bridge> <Jupstar ✪> tja
18:32 < bridge> <A Moderator> fill tool sounds hot
18:32 < bridge> <A Moderator> ctrl+right click aswell
18:32 < bridge> <A Moderator> and oh mah gawd destructive mode
18:34 < bridge> <Jupstar ✪> dunno how useful it is, but yeah it's fun xd
18:34 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1362103828543177005/Bildschirmaufnahme_20250416_183332.webm?ex=68012d8b&is=67ffdc0b&hm=7feec1b70ccac5f8ba9bc0a25fd5de949facdb00c3cb312b08f3902530b0b090&
18:34 < bridge> <qxdfoxy> holy
18:34 < bridge> <A Moderator> you dont understand HOW useful this is for certain things
18:34 < bridge> <qxdfoxy> agree
18:34 < bridge> <A Moderator> you dont understand HOW useful this is for certain things ????
18:35 < bridge> <hectavoxel> like what
18:35 < bridge> <A Moderator> when remove ddnet-rs and just call it ddnet-editor and ship it with the regular client as a standalone?
18:35 < bridge> <A Moderator> :cat_cracked_hehe:
18:35 < bridge> <Jupstar ✪> xdd, ddnet editor still has some features that ddnet-rs does not have tho
18:36 < bridge> <Jupstar ✪> But it's close now
18:36 < bridge> <A Moderator> given its a bucket tool, imagine us using that on the 2025 photoshoot map
18:36 < bridge> <A Moderator> it for sure could've saved time
18:37 < bridge> <hectavoxel> ohhh its a bucket tool
18:37 < bridge> <hectavoxel> i thought it was just a selection thing
18:37 < bridge> <jxsl13> a combination of paint and minesweeper in one.
18:37 < bridge> <jxsl13> sounds good
18:37 < bridge> <hectavoxel> lowkey i still wanna make automapper turing complete
18:38 < bridge> <A Moderator> ddnet's automapper?
18:38 < bridge> <A Moderator> or the format
18:38 < bridge> <A Moderator> :kek:
18:39 < bridge> <Jupstar ✪> ddnet-rs has wasm auto mapper support
18:39 < bridge> <Jupstar ✪> so it is xd
18:39 < bridge> <A Moderator> :kek:
18:40 < bridge> <Jupstar ✪> wtf i randomly tried the bucket tool and it generated a mouse
18:40 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1362105475990159650/image.png?ex=68012f14&is=67ffdd94&hm=52ec2cb5f2871ef69c8a509f033dcabc5e9b295a3e87c14893c1e4f3ed54e346&
18:40 < bridge> <Jupstar ✪> I am such an ultra artist
18:41 < bridge> <hectavoxel> what does that mean
18:41 < bridge> <Jupstar ✪> But yeah the bucket tool defs needs some threshold value for tiles like this
18:41 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1362105747001049369/image.png?ex=68012f54&is=67ffddd4&hm=7621306636b6167701414282813f3a933db35ecb929e3ad27c7c4379770f8c07&
18:42 < bridge> <Jupstar ✪> that means it can run rules that are literally whole programs
18:44 < bridge> <Jupstar ✪> Can it run doom? Yes it can, if you fire up the auto mapper manually, every "run automap" can generate a new frame
18:44 < bridge> <Jupstar ✪> with the live-automap you could even simulate player input, since it has coordinates where you clicked the mouse
18:45 < bridge> <hectavoxel> i need to try this out
18:58 < bridge> <chillerdragon> Looks like konsti
19:05 < bridge> <gorp_tw> HOLY FUCK WHEN
19:07 < bridge> <Jupstar ✪> dunno half hour ago
19:09 < bridge> <louis> mouse with a huge ballsack
19:16 < bridge> <gorp_tw> its so goooooood need
19:55 < bridge> <TsFredium> HOP ON DDNET-RS
19:56 < bridge> <gorp_tw> if someone makes this gif I will use every day
19:57 < bridge> <gorp_tw> mouse inflation
20:10 < bridge> <kollpotato> holy shit u are a wizard
20:13 < bridge> <Assa> hmm, bringing gimp toolbar to ddnet editor 🤔
20:14 < bridge> <jxsl13> make ddnet a better image editor than gimp
20:15 < bridge> <Assa> can't automap an image
20:15 < bridge> <jxsl13> already better than Gimp
20:15 < bridge> <jxsl13> i see
20:15 < bridge> <Assa> we just need a python Integration and then it's turing complete :justatest:
20:16 < bridge> <jxsl13> :saddo:
20:16 < bridge> <Assa> technically we have that with twmap but external
21:34 < bridge> <A Moderator> i see that we move `dbg_msg` to `log_error`, but i'm curious why and how that started
21:35 < bridge> <A Moderator> they seem to do the exact same thing, just different syntax - and given we still use `dbg_assert` for example i'm curious ._.
21:35 < bridge> <robyt3> `log_*` functions have multiple log levels so you can filter the output, `dbg_msg` is always info level
21:35 < bridge> <A Moderator> they seem to do the exact same thing,- and given we still use `dbg_assert` for example i'm curious ._.
21:36 < bridge> <A Moderator> oh so its log_info log_error log_trace etc?
21:36 < bridge> <A Moderator> okay yeah that makes much more sense
21:36 < bridge> <Jupstar ✪> also dbg_ prefix sux for stuff that is not compiled away in release mode xd
21:36 < bridge> <Jupstar ✪> same with dbg_assert
21:38 < bridge> <Assa> @teero777 
21:38 < bridge> <Assa> > my first thought was a shop to pay admins to merge your prs
21:38 < bridge> <Assa> 
21:38 < bridge> <Assa> That's horrifying
21:38 < bridge> <jxsl13> assertions in release code would be interesting
21:39 < bridge> <Assa> wait is dbg_ not compiled away?
21:39 < bridge> <Jupstar ✪> yes
21:39 < bridge> <Jupstar ✪> that is already the case
21:39 < bridge> <Assa> 🫣
21:40 < bridge> <Jupstar ✪> asserts are fine, it's just the name that sucks
21:40 < bridge> <jxsl13> huh
21:40 < bridge> <Jupstar ✪> also _if_ you want to do expensive asserts for debug only would be nice to have that
21:40 < bridge> <jxsl13> there are non dbg_ asserts?
21:40 < bridge> <Assa> do we have macros for release/debug detection?
21:41 < bridge> <Jupstar ✪> yea
21:41 < bridge> <Assa> I actually will need one for optimization
21:41 < bridge> <Jupstar ✪> i think even in std
21:41 < bridge> <jxsl13> hm
21:41 < bridge> <Jupstar ✪> would be nice if you keep such code low
21:42 < bridge> <Assa> yes but fps are holy for some ppl. I don't know how to force a compiler optimization
21:43 < bridge> <Jupstar ✪> usually there are other ways to get more fps
21:43 < bridge> <Assa> Well I otherwise need to write the code myself but it's kinda ugly
21:43 < bridge> <Jupstar ✪> e.g. optimize smth that is slow in the profiler
21:43 < bridge> <Assa> yeah it's a hot path
21:44 < bridge> <Jupstar ✪> I don't understand what you want that a debug macro would help
21:44 < bridge> <jxsl13> more context!
21:44 < bridge> <Assa> setting the unreachable code attribute in release mode else dbg_assert
21:45 < bridge> <Jupstar ✪> just use assert
21:45 < bridge> <Jupstar ✪> asserts are unreachable code
21:46 < bridge> <Jupstar ✪> or simply use unreachable if that is std
21:46 < bridge> <robyt3> `dbg_assert(false, ...)` is already no-return, but some compilers don't know that so you need `dbg_break` as well
21:46 < bridge> <Assa> RenderTilesetWithBuffering is a switch and a hotpath and I want to make sure the compiler makes a O(1) function array optimization with it
21:46 < bridge> <Jupstar ✪> it probably does
21:47 < bridge> <Assa> does it for unsorted keys in the range from -1 to 5 with a fallover and a default with dbg_assert?
21:47 < bridge> <robyt3> I also prefer real `dbg_assert` to detect bugs instead of invoking undefined behavior
21:48 < bridge> <Jupstar ✪> i can tell you that whatever you do currently is not the hottest path
21:48 < bridge> <Jupstar ✪> if you want more fps optimize somewhere else first
21:48 < bridge> <robyt3> With C++20 we could mark the case as `[[unlikely]]` as well I guess
21:48 < bridge> <jxsl13> please point him to a location to optimize 👀
21:48 < bridge> <robyt3> Make network theaded on Windows :justatest:
21:49 < bridge> <Jupstar ✪> 😂
21:49 < bridge> <Assa> This will be a cpu optimization and we at least both measured some benefit in fps @jupeyy_keks
21:49 < bridge> <A Moderator> when will we make the jump to c++20 anyway
21:49 < bridge> <A Moderator> i remember ryo's PR which was closed
21:50 < bridge> <jxsl13> more constructive optimization answers pls. just saying no is not constructive :/
21:50 < bridge> <robyt3> It all depends on the oldest debian version that deen builds the releases on
21:50 < bridge> <Assa> but I must admit that there are multiple changes and this is just one possible
21:50 < bridge> <jxsl13> oh boi I habe a Debian 7 docker container with glibc 2.13
21:51 < bridge> <jxsl13> have
21:51 < bridge> <jxsl13> is deen's older 😄
21:51 < bridge> <Jupstar ✪> yes but e.g. robytes suggestion is good.
21:51 < bridge> <Jupstar ✪> 
21:51 < bridge> <Jupstar ✪> windows is like a factor of 2 slower than our linux runtime
21:51 < bridge> <Assa> btw what is the GLEW backend? 🙈
21:51 < bridge> <Jupstar ✪> bcs kernel calls on windows are evil
21:51 < bridge> <A Moderator> the "future"
21:51 < bridge> <jxsl13> winapi
21:52 < bridge> <jxsl13> 32
21:52 < bridge> <jxsl13> .dll
21:52 < bridge> <robyt3> Debian 12 it seems https://github.com/ddnet/ddnet/issues/6552#issuecomment-1627069478
21:52 < bridge> <jxsl13> that's bookworm?
21:52 < bridge> <jxsl13> that's new
21:53 < bridge> <teero777> 2 only :nouis:
21:53 < bridge> <teero777> 2 only? :nouis:
21:53 < bridge> <jxsl13> you got old stuff when you need to tell apt-get to use archived repos for fetching packages :kek:
21:53 < bridge> <robyt3> > I'm on Debian 10 which includes GCC 8
21:54 < bridge> <A Moderator> :(
21:54 < bridge> <A Moderator> https://cdn.discordapp.com/attachments/293493549758939136/1362154146400309520/image.png?ex=68015c68&is=68000ae8&hm=806bbc812a6e134f3d83b911eddd23e756e6409cc46617b7752ec5ced1b69cfa&
21:54 < bridge> <jxsl13> and disable ssl cert verification, cuz your ca-bundle is outdated :kek:
21:54 < bridge> <jxsl13> glibc is somewhat shit
21:55 < bridge> <jxsl13> not gonna lie
21:55 < bridge> <Jupstar ✪> Sorry 2 on all PCs except Teeros, which apparently got optimized after being abandoned by intel 30 years ago
21:55 < bridge> <Assa> hmm
21:56 < bridge> <A Moderator> when you think teero codes in c99 for fun ,but its just his PC unable to run anything above glibc 1.09
21:56 < bridge> <teero777> guess who optimized it :troll:
21:57 < bridge> <teero777> im inlining glibc already for my usecases :monkalaugh:
21:58 < bridge> <Jupstar ✪> @teero777 static linking would give more performance
21:58 < bridge> <Jupstar ✪> i even tried to static link openmp, but it has weird deps
21:58 < bridge> <A Moderator> ^ talk to me when you reach 600M tps single threaded ty
21:58 < bridge> <Jupstar ✪> static link + lto is killer
21:58 < bridge> <jxsl13> statically link glibc
21:58 < bridge> <jxsl13> the end boss
21:58 < bridge> <teero777> no no i mean i take the glibc functions, inline them and take out the features that i don't want
21:58 < bridge> <jxsl13> cursed
21:59 < bridge> <A Moderator> "to run this, all you need is something that can write ./main into something that remotely looks like a console"
21:59 < bridge> <teero777> im writing directly to your harddrive
22:00 < bridge> <Assa> is it just ```#ifdef DEBUG```? We have a dbg_assert for example in RenderTileLayer which is called each frame for each tilelayer of a map
22:01 < bridge> <Assa> sounds like a prime candiate for me 💀
22:01 < bridge> <jxsl13> there is optimization potential in ddnet by statically linking stuff :0?
22:01 < bridge> <jxsl13> is that what you are saying @jupeyy_keks ?
22:01 < bridge> <Jupstar ✪> ofc
22:01 < bridge> <Jupstar ✪> lto profits only from static linking
22:02 < bridge> <jxsl13> 🤔
22:02 < bridge> <Jupstar ✪> But spoiler it won't be so much that you probs get more than 1-2%
22:02 < bridge> <Jupstar ✪> our self written algorithms are still the bottleneck
22:03 < bridge> <Assa> hmm or CONF_DEBUG
22:03 < bridge> <Jupstar ✪> DDNet
22:03 < bridge> <Jupstar ✪> ```
22:03 < bridge> <Jupstar ✪> Dynamic Section:
22:03 < bridge> <Jupstar ✪>   NEEDED               libfreetype.so.6
22:03 < bridge> <Jupstar ✪>   NEEDED               libSDL2-2.0.so.0
22:03 < bridge> <Jupstar ✪>   NEEDED               libdl.so.2
22:03 < bridge> <Jupstar ✪>   NEEDED               libvulkan.so.1
22:03 < bridge> <Jupstar ✪>   NEEDED               libGL.so.1
22:03 < bridge> <Jupstar ✪>   NEEDED               libnotify.so.4
22:03 < bridge> <Jupstar ✪>   NEEDED               libgdk_pixbuf-2.0.so.0
22:03 < bridge> <Jupstar ✪>   NEEDED               libgio-2.0.so.0
22:03 < bridge> <Jupstar ✪>   NEEDED               libgobject-2.0.so.0
22:03 < bridge> <Jupstar ✪>   NEEDED               libglib-2.0.so.0
22:04 < bridge> <Jupstar ✪>   NEEDED               libcurl.so.4
22:04 < bridge> <Jupstar ✪>   NEEDED               librt.so.1
22:04 < bridge> <Jupstar ✪>   NEEDED               libm.so.6
22:04 < bridge> <Jupstar ✪>   NEEDED               libpthread.so.0
22:04 < bridge> <Jupstar ✪>   NEEDED               libc.so.6
22:04 < bridge> <Jupstar ✪>   NEEDED               ld-linux-x86-64.so.2
22:04 < bridge> <Jupstar ✪> ```
22:04 < bridge> <Jupstar ✪> ddnet-rs
22:04 < bridge> <Jupstar ✪> ```
22:04 < bridge> <Jupstar ✪> Dynamic Section:
22:04 < bridge> <Jupstar ✪>   NEEDED               libx264.so.164
22:04 < bridge> <Jupstar ✪>   NEEDED               libm.so.6
22:04 < bridge> <Jupstar ✪>   NEEDED               libwayland-client.so.0
22:04 < bridge> <Jupstar ✪>   NEEDED               libasound.so.2
22:04 < bridge> <Jupstar ✪>   NEEDED               libgcc_s.so.1
22:04 < bridge> <Jupstar ✪>   NEEDED               libc.so.6
22:04 < bridge> <Jupstar ✪>   NEEDED               ld-linux-x86-64.so.2
22:04 < bridge> <Jupstar ✪> ```
22:04 < bridge> <jxsl13> libz
22:04 < bridge> <jxsl13> easy candidate
22:04 < bridge> <Jupstar ✪> ok that is probs only for map opening
22:04 < bridge> <Jupstar ✪> so not useful
22:04 < bridge> <teero777> yea
22:04 < bridge> <jxsl13> a starting point
22:04 < bridge> <Jupstar ✪> SDL2 is probs most useful for ddnet
22:04 < bridge> <Jupstar ✪> maybe also freetype
22:04 < bridge> <teero777> the only useful stuff would be libc and libm xD
22:05 < bridge> <jxsl13> what tool do you use for that section outputting?
22:05 < bridge> <Jupstar ✪> objdump -p <bin>
22:05 < bridge> <jxsl13> k, ty
22:07 < bridge> <Jupstar ✪> @teero777 https://musl.libc.org/
22:07 < bridge> <Jupstar ✪> hehe
22:07 < bridge> <A Moderator> :OMEGALUL:
22:07 < bridge> <A Moderator> curl looking at you like `http: https://master3.ddnet.org/ddnet/15/servers.json failed. libcurl error (6): Could not resolve host: master3.ddnet.org`
22:08 < bridge> <teero777> already saw
22:08 < bridge> <teero777> there is `musl-clang`
22:08 < bridge> <teero777> xd
22:08 < bridge> <Jupstar ✪> epyc gemer moment
22:10 < bridge> <jxsl13> there is a musl - glibc translation layer somewhere flying around on alpine linux  ._.
22:37 < bridge> <robyt3> ```
22:37 < bridge> <robyt3> DDNet.js:3667  Uncaught RuntimeError: unreachable
22:37 < bridge> <robyt3>     at DDNet.wasm.a_crash
22:37 < bridge> <robyt3>     at DDNet.wasm.__stack_chk_fail
22:37 < bridge> <robyt3>     at DDNet.wasm.CCommandProcessorFragment_OpenGLES3::Cmd_Init(CCommandProcessorFragment_GLBase::SCommand_Init const*)
22:37 < bridge> <robyt3>     at DDNet.wasm.CCommandProcessorFragment_OpenGLES::RunCommand(CCommandBuffer::SCommand const*)
22:37 < bridge> <robyt3>     at DDNet.wasm.CCommandProcessor_SDL_GL::RunBuffer(CCommandBuffer*)
22:37 < bridge> <robyt3>     at DDNet.wasm.CGraphicsBackend_Threaded::RunBufferSingleThreadedUnsafe(CCommandBuffer*)
22:37 < bridge> <robyt3>     at DDNet.wasm.CGraphicsBackend_Threaded::RunBuffer(CCommandBuffer*)
22:37 < bridge> <robyt3>     at DDNet.wasm.CGraphicsBackend_SDL_GL::Init(char const*, int*, int*, int*, int*, int*, int, int*, int*, int*, int*, IStorage*)
22:37 < bridge> <robyt3>     at DDNet.wasm.CGraphics_Threaded::IssueInit()
22:37 < bridge> <robyt3>     at DDNet.wasm.CGraphics_Threaded::InitWindow()
22:37 < bridge> <robyt3> ```
22:37 < bridge> <robyt3> :pepeW:
22:48 < bridge> <Jupstar ✪> mhh, sad that it is so hard
22:49 < bridge> <robyt3> yeah, I have a list of more than 10 emscripten issues that have been closed as stale often without a solution available
22:52 < bridge> <Jupstar ✪> downgrade to whatever version i used back then xDD
22:52 < bridge> <Jupstar ✪> stale closing is actually so stupid
22:52 < bridge> <Jupstar ✪> it's funny so many repos do it
22:52 < bridge> <robyt3> Maybe also impossible with SDL2 alone. Tried to backport two relevant PRs from SDL3 to SDL2. Also made the graphics non-threaded. Launch then fails with
22:52 < bridge> <robyt3> ```
22:52 < bridge> <robyt3> I gfx: Created OpenGL ES 3.0 context
22:52 < bridge> <robyt3> I gfx: Unable to create graphic context: Could not create webgl context
22:52 < bridge> <robyt3> I gfx: out of ideas. failed to init graphics
22:52 < bridge> <robyt3> E client: couldn't init graphics
22:52 < bridge> <robyt3> ```
22:52 < bridge> <robyt3> Also had to fix a bug still present in SDL3 to even get the error message `Could not create webgl context` because they handle a return value incorrectly.
22:54 < bridge> <Jupstar ✪> So `PROXY_TO_PTHREAD` is not an option?
22:54 < bridge> <Jupstar ✪> for me it at least solved the hanging issue, but the toolchain file also mentions that SDL2 has to fix smth with it (whatever that was xd)
22:55 < bridge> <robyt3> I ported two PRs from SDL3 that seems to fix the pthread stuff for SDL. And `PROXY_TO_PTHREAD` fixed the hanging for HTTP. Together with that and making the graphics threaded the webgl context creation fails for unknown reason.
22:56 < bridge> <robyt3> Without `PROXY_TO_PTHREAD` I get a context and black screen but the above crash
22:56 < bridge> <robyt3> Without `PROXY_TO_PTHREAD` (and by removing HTTP init) I get a context and black screen but the above crash
22:56 < bridge> <always> @jupeyy_keks is there anyway to make my dummy reset when i switch?
22:56 < bridge> <always> like not hold down inputs when i switch
22:57 < bridge> <always> on ddnet-rs
22:57 < bridge> <Jupstar ✪> not yet
22:57 < bridge> <robyt3> With `-O1` I get a bit more debug log, but the operator delete is never used in this function:
22:57 < bridge> <robyt3> ```
22:57 < bridge> <robyt3> DDNet.js:3667  Uncaught RuntimeError: memory access out of bounds
22:57 < bridge> <robyt3>     at DDNet.wasm.emscripten_builtin_free
22:57 < bridge> <robyt3>     at DDNet.wasm.operator delete(void*)
22:57 < bridge> <robyt3>     at DDNet.wasm.operator delete(void*, unsigned long)
22:57 < bridge> <robyt3>     at DDNet.wasm.CCommandProcessorFragment_OpenGLES3::Cmd_Init(CCommandProcessorFragment_GLBase::SCommand_Init const*)
22:57 < bridge> <robyt3> ```
22:57 < bridge> <Jupstar ✪> I still have the old ddnet-libs for wasm xD
22:58 < bridge> <always> how hard would it be for a person that doesnt know rust to imploment it?
22:58 < bridge> <Jupstar ✪> mhh probably not too hard™️?
22:58 < bridge> <Jupstar ✪> 
22:58 < bridge> <Jupstar ✪> you just release all keys?
22:58 < bridge> <always> yea
22:58 < bridge> <always> release hook
22:58 < bridge> <always> fire
22:59 < bridge> <always> jump
22:59 < bridge> <always> left and right
22:59 < bridge> <Jupstar ✪> gimme 5 min
22:59 < bridge> <always> also a command to make your dummy reset would be nice
22:59 < bridge> <Jupstar ✪> what is that?
23:00 < bridge> <always> so u can make it stop holding all inputs
23:00 < bridge> <always> when your not controling it
23:00 < bridge> <always> when your not controlling it
23:00 < bridge> <Jupstar ✪> without switching?
23:00 < bridge> <always> ye
23:00 < bridge> <Jupstar ✪> then why not only add that?
23:00 < bridge> <always> true
23:00 < bridge> <always> because ddnet has option for both
23:00 < bridge> <always> i guess to make binds less complex
23:00 < bridge> <Jupstar ✪> yeah, but i prefer only have one solution to one problem
23:01 < bridge> <always> go fore it
23:01 < bridge> <always> go for it
23:02 < bridge> <robyt3> The problem with `PROXY_TO_PTHREAD` and rendering in a thread is also that you can only use the canvas from one thread and you need to enable offscreen canvas support which just doesn't seem to be implemented by anyone
23:02 < bridge> <Jupstar ✪> dummies in ddnet-rs are too op anyway (tho e.g. the dummy_hook in ddnet is completely broken, since it always tripple fly like a cheat)
23:02 < bridge> <always> yea
23:03 < bridge> <always> in ddnet-rs you can make your dummy aim at you and hook
23:03 < bridge> <Jupstar ✪> But we don't even render in a thread
23:03 < bridge> <always> you cant do that in ddnet
23:03 < bridge> <Jupstar ✪> i disabled the threaded stuff for wasm afaik
23:03 < bridge> <robyt3> But there's a separate thread started for commands?
23:03 < bridge> <Jupstar ✪> not that i am aware of
23:03 < bridge> <Jupstar ✪> it uses main thread
23:03 < bridge> <Jupstar ✪> if it's started then it's unused
23:04 < bridge> <robyt3> yeah, there was some ifdef for emscripten before, but that alone also causes crashes now
23:04 < bridge> <Jupstar ✪> i tried to replicate that in ddnet, but instead of allowing the hook cheat it allows tripple fly.. 
23:04 < bridge> <Jupstar ✪> 
23:04 < bridge> <Jupstar ✪> So I kinda hate both xDD
23:04 < bridge> <robyt3> but I fixed that by removing all the thread related stuff from the backend
23:04 < bridge> <robyt3> yeah, there was some ifdef for emscripten before, but that alone also causes hangs now
23:04 < bridge> <robyt3> yeah, there was some ifdef for emscripten before, but that alone also causes hangs now because you are still starting and waiting for the thread
23:05 < bridge> <robyt3> compiling with ASAN now
23:05 < bridge> <always> tripple fly is thing u cant really stop if you have copy moves
23:07 < bridge> <Jupstar ✪> But the ppl don't use copy moves
23:07 < bridge> <Jupstar ✪> they use the broken cl_dummy_hook
23:07 < bridge> <Jupstar ✪> which for whatever reason always hooks down
23:07 < bridge> <always> they do use copy moves
23:07 < bridge> <Jupstar ✪> Mh
23:08 < bridge> <always> it hooks in the direction you set it to
23:08 < bridge> <Jupstar ✪> In any case, this is just a massive cheat
23:08 < bridge> <Jupstar ✪> for that alone we should ban all existing ddnet clients
23:09 < bridge> <always> i kinda made a fix for dummy_reset
23:09 < bridge> <always> it just binds all actions
23:09 < bridge> <always> and it acts as it
23:09 < bridge> <louis> remove dummy
23:09 < bridge> <teero777> note: if you are planning on banning current clients i'd like to fix some exploits
23:10 < bridge> <always> `bind e +dummy.hook;+dummy.left;+dummy.right;+dummy.jump;+dummy.fire;echo dummy reset!`
23:10 < bridge> <Jupstar ✪> xd
23:16 < bridge> <always> no dummy servers when
23:24 < bridge> <Jupstar ✪> @alw5 cl_dummy_resetonswitch also works on player?
23:25 < bridge> <Jupstar ✪> 1 = dummy
23:25 < bridge> <Jupstar ✪> 2 = player
23:25 < bridge> <always> yea
23:25 < bridge> <always> 2 means
23:25 < bridge> <always> when you switch the player
23:25 < bridge> <always> it resets
23:25 < bridge> <always> inputs
23:25 < bridge> <Assa> Made the first optimization draft, I think especually opengl 1 benefits since it doesn't do layercounting anymore
23:25 < bridge> <Jupstar ✪> so i can simply add a reset +reset_input
23:25 < bridge> <always> yea
23:25 < bridge> <Jupstar ✪> which automatically exist for dummy
23:25 < bridge> <Jupstar ✪> ok
23:25 < bridge> <always> +reset_input would be fine
23:25 < bridge> <always> i can just make it toggle that when i switch
23:27 < bridge> <always> check https://github.com/ddnet/ddnet/pull/3715
23:28 < bridge> <Jupstar ✪> yes
23:28 < bridge> <always> and #1949
23:28 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/1949
23:41 < bridge> <Jupstar ✪> @alw5 https://github.com/ddnet/ddnet-rs/pull/107
23:41 < bridge> <Jupstar ✪> 
23:41 < bridge> <Jupstar ✪> i think you have to use +reset_input to clear the dummy input since the toggle_dummy happens at a later time. So at the moment of reset it's still not the dummy
23:51 < bridge> <robyt3> `AddressSanitizer: nested bug in the same thread, aborting.` seems like ASAN doesn't work with Emscripten even though the documentation says it should be compatible
23:52 < bridge> <Jupstar ✪> is emscripten abandoned or smth. how can we have so many obvious issues xD
23:54 < bridge> <robyt3> I assume minimal examples would work but adding SDL makes it complex immediately
23:54 < bridge> <robyt3> Maybe try again after porting to SDL3
23:55 < bridge> <robyt3> Looks like SDL maintainers don't want to backport the fixes to SDL2
23:55 < bridge> <Jupstar ✪> mh ok, but shouldnt old sdl2 simply work?
23:55 < bridge> <robyt3> I tried the old SDL2 version at some point but that also didn't work
23:56 < bridge> <Jupstar ✪> did it simply not build or not work at runtime?
23:57 < bridge> <robyt3> Had the same issues as the newer SDL versions
23:57 < bridge> <robyt3> But I didn't test all combinations of the several workarounds I found
23:57 < bridge> <robyt3> Just making the graphics non-threaded entirely seems promising, except for this random crash
23:58 < bridge> <robyt3> The pthreads stuff kept getting changed in SDL and emscripten, maybe it only works in a specific old version of emscripten as well because they reverted something
23:59 < bridge> <robyt3> If the pthread stuff would work then graphics could just be threaded but GL context creation and usage is more complicated
