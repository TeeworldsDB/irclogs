00:26 <+bridge> [ddnet] <louis> @Ryozuki did u see the pic
00:26 <+bridge> [ddnet] <louis> they took 1 hour of wiating for that pic lmao
00:26 <+bridge> [ddnet] <louis> its cool tho
00:27 <+bridge> [ddnet] <Ryozuki> have u seen the first pic of the hubble telescope?
00:27 <+bridge> [ddnet] <Ryozuki> this is miles ahead
00:27 <+bridge> [ddnet] <Ryozuki> also its a pic of the universe 16 billion years ago
00:27 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/996180971625906327/unknown.png
00:27 <+bridge> [ddnet] <Ryozuki> this was the first image
00:27 <+bridge> [ddnet] <Ryozuki> from hubble telescope
00:27 <+bridge> [ddnet] <louis> ye
00:27 <+bridge> [ddnet] <Ryozuki> this is james webb
00:27 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/996181042333503579/unknown.png
00:27 <+bridge> [ddnet] <louis> ik im not downplaying it
00:27 <+bridge> [ddnet] <louis> the pic is amazing
00:27 <+bridge> [ddnet] <louis> but the wait was so pointless
00:28 <+bridge> [ddnet] <louis> do u see the gravitational lensing
00:28 <+bridge> [ddnet] <louis> at least i think its gravitational lensing
00:28 <+bridge> [ddnet] <louis> https://cdn.discordapp.com/attachments/293493549758939136/996181323578347570/unknown.png
00:28 <+bridge> [ddnet] <louis> these things are interesting
00:29 <+bridge> [ddnet] <louis> i wonder what causes it
00:41 <+bridge> [ddnet] <Ryozuki> i wonder what that massive star in the middle is
00:41 <+bridge> [ddnet] <Ryozuki> so bright
00:49 <+bridge> [ddnet] <SPYRES> its a faulty camera :p
00:49 <+bridge> [ddnet] <SPYRES> i mean telescope
00:49 <+bridge> [ddnet] <Dragere> https://www.youtube.com/c/DrBecky/videos
00:49 <+bridge> [ddnet] <Dragere> this is a really cool channel this kind of stuff
00:50 <+bridge> [ddnet] <SPYRES> jk btw
00:50 <+bridge> [ddnet] <Dragere> ye its expected for a hexagonal mirror
00:51 <+bridge> [ddnet] <SPYRES> ye i was just joking
00:52 <+bridge> [ddnet] <Dragere> https://www.youtube.com/c/DrBecky/videos
00:52 <+bridge> [ddnet] <Dragere> this is a really cool channel for this kind of stuff
03:02 <+bridge> [ddnet] <Tsin> update to 16.2.2 failed: and ddnet gives this :
03:02 <+bridge> [ddnet] <Tsin> 
03:02 <+bridge> [ddnet] <Tsin> 
03:02 <+bridge> [ddnet] <Tsin> "Can't continue to execute code, because object libcurl.dll not found. Reinstalling the program could resolve it"
03:02 <+bridge> [ddnet] <Tsin> https://cdn.discordapp.com/attachments/293493549758939136/996220046823145533/unknown.png
03:04 <+bridge> [ddnet] <Tsin> took the dll from https://ddnet.tw/downloads/DDNet-16.2.2-win64.zip and works without issue so update for some reason couldn't download that dll
06:21 <+bridge> [ddnet] <louis> can there be a ddnet.tw/releases/novice page for example
06:21 <+bridge> [ddnet] <louis> to see all the novice releases sorted by time of release
06:33 <+bridge> [ddnet] <Voxel> https://ddnet.tw/ranks/novice/
06:34 <+bridge> [ddnet] <louis> that only goes down a handful of recent releases i believe
06:34 <+bridge> [ddnet] <Voxel> oh that makes sense
06:36 <+bridge> [ddnet] <bluesky> can someone clarify 0.7 and 0.6 please
06:40 <+bridge> [ddnet] <bluesky> what version are we on now
06:41 <+bridge> [ddnet] <bluesky> i mean the first instinct would be to say 0.7>0.6 but i got the feeling that its the other way around and that 0.7 is referred to teeworlds 0.7
06:43 <+bridge> [ddnet] <bluesky> i mean the first instinct would be to say 0.7>0.6 but i heard that its the other way around and that 0.7 is referred to teeworlds 0.7
06:48 <+bridge> [ddnet] <Voxel> 0.7 is the Teeworlds client
06:48 <+bridge> [ddnet] <Voxel> 0.6 is the DDNet client
06:48 <+bridge> [ddnet] <Voxel> at least i think
08:51 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/996307723295674378/unknown.png
08:51 <+bridge> [ddnet] <Ryozuki> hi there crisis my old friend
08:51 <+bridge> [ddnet] <Ryozuki> https://www.bloomberg.com/news/articles/2022-07-11/euro-plunges-to-fresh-two-decade-low-as-dollar-runs-rampant
08:52 <+bridge> [ddnet] <bluesky> @Ryozuki "0.7 is the Teeworlds client
08:52 <+bridge> [ddnet] <bluesky> 0.6 is the DDNet client" is that correct?
08:52 <+bridge> [ddnet] <Ryozuki> ddnet uses the 0.6 protocol yeah
08:55 <+bridge> [ddnet] <bluesky> protocol?
08:56 <+bridge> [ddnet] <Ryozuki> the way client and server comunicate
08:56 <+bridge> [ddnet] <Ryozuki> when tw updated to 0.7 they decided to break it so its not compatible
08:56 <+bridge> [ddnet] <ReiTW> sixup too
08:56 <+bridge> [ddnet] <Ryozuki> and ddnet stayed
08:56 <+bridge> [ddnet] <Ryozuki> at 0.6
08:56 <+bridge> [ddnet] <bluesky> oh ok
08:57 <+bridge> [ddnet] <ReiTW> ah client
08:57 <+bridge> [ddnet] <bluesky> is that like a general protocol or is it only in the scope of teeworlds/ddnet ?
08:57 <+bridge> [ddnet] <Ryozuki> tw
08:57 <+bridge> [ddnet] <ReiTW> @Zim tw, they released 0.7 with the main idea to fix some vulnerabilities about the netcode
08:57 <+bridge> [ddnet] <ReiTW> that's how they broke 0.6 compat
08:57 <+bridge> [ddnet] <bluesky> okay so if i got that right, the client versionnumber isnt the same as 0.6 or 0.7
08:58 <+bridge> [ddnet] <bluesky> two different things but still used together?
08:58 <+bridge> [ddnet] <bluesky> okay so if i got that right, the client versionnumber isnt the same as the 0.6 or 0.7 protocols
08:58 <+bridge> [ddnet] <ReiTW> wdym "still used together"
08:58 <+bridge> [ddnet] <bluesky> i mean like they both are version numbers but for 2 different things
08:59 <+bridge> [ddnet] <bluesky> 16.2.1 uses 0.6
08:59 <+bridge> [ddnet] <bluesky> ?
08:59 <+bridge> [ddnet] <ReiTW> DDNet in general uses 0.6, only server side supports both versions to allow 0.7 players to join DDNet servers
08:59 <+bridge> [ddnet] <ReiTW> Only teeworlds switched on 0.7, not DDNet
08:59 <+bridge> [ddnet] <bluesky> okay okay
09:00 <+bridge> [ddnet] <Ryozuki> https://twitter.com/ianlauerastro/status/1546625603641790465
09:00 <+bridge> [ddnet] <bluesky> because if someone uses tw, they will  probably use 0.7.5
09:01 <+bridge> [ddnet] <bluesky> okay now i got that whole seventosix thing too
09:01 <+bridge> [ddnet] <bluesky> thanks ^__^
09:01 <+bridge> [ddnet] <ReiTW> yes but they can still play on DDNet thanks to sixup, until DDNet decides to stop that compat
09:01 <+bridge> [ddnet] <bluesky> Awesome that this support is implemented, yet its still a pain to play ddrace with the tw launcher xddd
09:02 <+bridge> [ddnet] <bluesky> Awesome that this support is implemented, yet its still a pain to play ddrace with the tw client*xddd
09:02 <+bridge> [ddnet] <ReiTW> that's why, use ddnet
09:15 <+bridge> [ddnet] <ReiTW> @heinrich5991 https://docs.rs/libbpf-rs/latest/libbpf_rs/struct.Map.html#method.update
09:15 <+bridge> [ddnet] <ReiTW> 
09:15 <+bridge> [ddnet] <ReiTW> this is an example of function I have to use
09:16 <+bridge> [ddnet] <ReiTW> the value of a map can be for example in C:
09:16 <+bridge> [ddnet] <ReiTW> 
09:16 <+bridge> [ddnet] <ReiTW> ```c
09:16 <+bridge> [ddnet] <ReiTW> struct stats_p {
09:16 <+bridge> [ddnet] <ReiTW>     unsigned long pass;
09:16 <+bridge> [ddnet] <ReiTW>     unsigned long drop;
09:16 <+bridge> [ddnet] <ReiTW> };
09:16 <+bridge> [ddnet] <ReiTW> ```
09:16 <+bridge> [ddnet] <ReiTW> and I kinda need to know how to pass that in those functions
09:17 <+bridge> [ddnet] <ReiTW> ne is OS dependant right? if yours is big endian or little
09:23 <+bridge> [ddnet] <heinrich5991> it's CPU dependent
09:23 <+bridge> [ddnet] <heinrich5991> so then you can just cast your type to `&[u8]`
09:23 <+bridge> [ddnet] <heinrich5991> your C struct is also CPU dependent
09:25 <+bridge> [ddnet] <ReiTW> lol is thta even psosible?
09:25 <+bridge> [ddnet] <heinrich5991> only using unsafe, but that's the way to go here
09:26 <+bridge> [ddnet] <ReiTW> like 
09:26 <+bridge> [ddnet] <ReiTW> ```
09:26 <+bridge> [ddnet] <ReiTW> let stats = Stats::default();
09:26 <+bridge> [ddnet] <ReiTW> let stats_slice = stats as &[u8]; 
09:26 <+bridge> [ddnet] <ReiTW> ``` ?
09:26 <+bridge> [ddnet] <ReiTW> cuz for me casting is that
09:27 <+bridge> [ddnet] <ReiTW> nvm I won't even wait for ur answer i'll just test
09:29 <+bridge> [ddnet] <heinrich5991> no, not like that
09:31 <+bridge> [ddnet] <heinrich5991> ```rs
09:31 <+bridge> [ddnet] <heinrich5991> use std::slice;
09:31 <+bridge> [ddnet] <heinrich5991> use std::mem;
09:31 <+bridge> [ddnet] <heinrich5991> unsafe fn as_bytes<T>(t: &T) -> &[u8] {
09:31 <+bridge> [ddnet] <heinrich5991>     slice::from_raw_parts(t as *const T as *const u8, mem::size_of_val(&t))
09:31 <+bridge> [ddnet] <heinrich5991> }
09:31 <+bridge> [ddnet] <heinrich5991> ```
09:31 <+bridge> [ddnet] <heinrich5991> typed from memory, might have errors
09:34 <+bridge> [ddnet] <heinrich5991> @ReiTW does that make sense?
09:34 <+bridge> [ddnet] <ReiTW> trying to understand, this is black magic for now
09:34 <+bridge> [ddnet] <heinrich5991> https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html
09:35 <+bridge> [ddnet] <heinrich5991> maybe this documentation helps?
09:35 <+bridge> [ddnet] <ReiTW> ah well the 1st line is very clear yea
09:36 <+bridge> [ddnet] <heinrich5991> the function only has one line ðŸ˜…
09:36 <+bridge> [ddnet] <ReiTW> I meant that `Forms a slice from a pointer and a length.`
09:36 <+bridge> [ddnet] <Ryozuki> :justatest:
09:36 <+bridge> [ddnet] <heinrich5991> ah
09:38 <+bridge> [ddnet] <Ryozuki> size_of_val returns Returns the size of the pointed-to value in bytes.
09:38 <+bridge> [ddnet] <Ryozuki> but from_raw_parts says this
09:38 <+bridge> [ddnet] <Ryozuki> The len argument is the number of elements, not the number of bytes.
09:38 <+bridge> [ddnet] <ReiTW> yes that's what i'm looking at
09:38 <+bridge> [ddnet] <ReiTW> I was wondering why
09:38 <+bridge> [ddnet] <heinrich5991> but the elements are bytes ^^
09:39 <+bridge> [ddnet] <heinrich5991> so it's the number of elements = bytes, so in this particular case it's the number of bytes
09:39 <+bridge> [ddnet] <bluesky> ðŸ˜†
09:39 <+bridge> [ddnet] <Ryozuki> "data must point to len consecutive properly initialized values of type T."
09:39 <+bridge> [ddnet] <heinrich5991> (the `T` of `slice::from_raw_parts` is `u8`
09:39 <+bridge> [ddnet] <heinrich5991> (the `T` of `slice::from_raw_parts` is `u8`)
09:41 <+bridge> [ddnet] <heinrich5991> (you can see that by observing that we pass a `*const u8` and use the result as `&[u8]`)
09:41 <+bridge> [ddnet] <heinrich5991> @ReiTW ask more questions ðŸ˜›
09:41 <+bridge> [ddnet] <ReiTW> I will surely, just trying to use my brain
09:42 <+bridge> [ddnet] <Ryozuki> i mean, this is just casting like you would do in C but you gotta preserve the length info
09:42 <+bridge> [ddnet] <Ryozuki> since slices are a pointer and length
09:42 <+bridge> [ddnet] <Ryozuki> iirc
09:43 <+bridge> [ddnet] <heinrich5991> yes
09:43 <+bridge> [ddnet] <heinrich5991> but I'd argue "casting like in C" is appropriate here, because you talk to other programs running on your CPU(?)
09:46 <+bridge> [ddnet] <Ryozuki> just figured out why you used size_of_val
09:46 <+bridge> [ddnet] <Ryozuki> > This is usually the same as size_of::<T>(). However, when T has no statically-known size, e.g., a slice [T] or a trait object, then size_of_val can be used to get the dynamically-known size.
09:46 <+bridge> [ddnet] <Ryozuki> otherwise u would have needed T: Sized right?
09:48 <+bridge> [ddnet] <heinrich5991> `T: Sized` is implied, if you don't want that, you need `T: ?Sized`, I think
09:48 <+bridge> [ddnet] <heinrich5991> ah look
09:48 <+bridge> [ddnet] <heinrich5991> and I introduced a bug there
09:48 <+bridge> [ddnet] <heinrich5991> I'll use `mem::size_of` instead
09:48 <+bridge> [ddnet] <Ryozuki> whats the bug?
09:49 <+bridge> [ddnet] <heinrich5991> find it ðŸ˜›
09:49 <+bridge> [ddnet] <heinrich5991> ```rs
09:49 <+bridge> [ddnet] <heinrich5991> use std::mem;
09:49 <+bridge> [ddnet] <heinrich5991> use std::slice;
09:49 <+bridge> [ddnet] <heinrich5991> unsafe fn as_bytes<T>(t: &T) -> &[u8] {
09:49 <+bridge> [ddnet] <heinrich5991>     slice::from_raw_parts(t as *const T as *const u8, mem::size_of::<T>())
09:49 <+bridge> [ddnet] <heinrich5991> }
09:49 <+bridge> [ddnet] <heinrich5991> ```
09:49 <+bridge> [ddnet] <heinrich5991> this is the fixed version
09:49 <+bridge> [ddnet] <Ryozuki> does it have to do with mem::size_of_val(&t)
09:49 <+bridge> [ddnet] <Ryozuki> since t is already &T?
09:49 <+bridge> [ddnet] <Ryozuki> probs not
09:50 <+bridge> [ddnet] <heinrich5991> yes, that's the problem
09:50 <+bridge> [ddnet] <Ryozuki> ah ok
09:50 <+bridge> [ddnet] <Ryozuki> yay im not that bad xD
09:50 <+bridge> [ddnet] <heinrich5991> I took the size of `&T`, not `T`
09:51 <+bridge> [ddnet] <Ryozuki> do u know if miri catches that?
09:53 <+bridge> [ddnet] <Ryozuki> https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=cdf10024bd74fb56b889bedcd808b825
09:53 <+bridge> [ddnet] <Ryozuki> yeah it was a bug
09:54 <+bridge> [ddnet] <heinrich5991> you must use `#[repr(C)]` on structs you use this on
09:54 <+bridge> [ddnet] <Ryozuki> true
10:12 <+bridge> [ddnet] <ReiTW> @heinrich5991 how do you call it then,
10:12 <+bridge> [ddnet] <ReiTW> tried like 
10:12 <+bridge> [ddnet] <ReiTW> ```rust
10:12 <+bridge> [ddnet] <ReiTW> struct Stats {
10:12 <+bridge> [ddnet] <ReiTW>     pass: u64,
10:12 <+bridge> [ddnet] <ReiTW>     drop: u64,
10:12 <+bridge> [ddnet] <ReiTW> }
10:12 <+bridge> [ddnet] <ReiTW> 
10:12 <+bridge> [ddnet] <ReiTW> use std::slice;
10:12 <+bridge> [ddnet] <ReiTW> use std::mem;
10:12 <+bridge> [ddnet] <ReiTW> unsafe fn as_bytes<T>(t: &T) -> &[u8] {
10:12 <+bridge> [ddnet] <ReiTW>     slice::from_raw_parts(t as *const T as *const u8, mem::size_of::<T>())
10:12 <+bridge> [ddnet] <ReiTW> }
10:12 <+bridge> [ddnet] <ReiTW> 
10:12 <+bridge> [ddnet] <ReiTW> fn main() {
10:12 <+bridge> [ddnet] <ReiTW>     let stats = Stats { pass: 5, drop: 5 };
10:12 <+bridge> [ddnet] <ReiTW>     let stats_slice: &[u8] = unsafe {
10:12 <+bridge> [ddnet] <ReiTW>         as_bytes::<Stats>(&stats)
10:12 <+bridge> [ddnet] <ReiTW>     };
10:12 <+bridge> [ddnet] <ReiTW> 
10:12 <+bridge> [ddnet] <ReiTW>     for element in stats_slice.iter() {
10:12 <+bridge> [ddnet] <ReiTW>         println!("{element}");
10:13 <+bridge> [ddnet] <ReiTW>     }
10:13 <+bridge> [ddnet] <ReiTW> }
10:13 <+bridge> [ddnet] <ReiTW> ```
10:13 <+bridge> [ddnet] <ReiTW> but doesn't seem to print anything
10:13 <+bridge> [ddnet] <Ryozuki> https://www.reddit.com/r/rust/comments/vx4wwe/rust_compiler_got_15_faster_on_windows_thanks_to/
10:13 <+bridge> [ddnet] <heinrich5991> this prints
10:13 <+bridge> [ddnet] <heinrich5991> ```
10:13 <+bridge> [ddnet] <heinrich5991> 5
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 5
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:13 <+bridge> [ddnet] <heinrich5991> 0
10:14 <+bridge> [ddnet] <heinrich5991> 0
10:14 <+bridge> [ddnet] <heinrich5991> 0
10:14 <+bridge> [ddnet] <heinrich5991> ```
10:14 <+bridge> [ddnet] <heinrich5991> for me @ReiTW
10:14 <+bridge> [ddnet] <ReiTW> lol wut
10:14 <+bridge> [ddnet] <heinrich5991> how did you execute it?
10:14 <+bridge> [ddnet] <ReiTW> ok nvm it works, my console is just buggy, thanks windows terminal
10:14 <+bridge> [ddnet] <heinrich5991> (you should add `#[repr(C)]` to your `Stats` struct)
10:14 <+bridge> [ddnet] <heinrich5991> so that its layout is defined
10:14 <+bridge> [ddnet] <ReiTW> ok ok, well now i'll read everything again & try to understand each thing
10:15 <+bridge> [ddnet] <Ryozuki> as_bytes(&stats)
10:15 <+bridge> [ddnet] <Ryozuki> works too iirc
10:15 <+bridge> [ddnet] <heinrich5991> yes, it does
10:15 <+bridge> [ddnet] <Ryozuki> rust has strong type inference
10:15 <+bridge> [ddnet] <heinrich5991> that would also work in C++, even
10:16 <+bridge> [ddnet] <Ryozuki> ```rust
10:16 <+bridge> [ddnet] <Ryozuki>  let stats_slice: &[u8] = unsafe {
10:16 <+bridge> [ddnet] <Ryozuki>    as_bytes::<Stats>(&stats)
10:16 <+bridge> [ddnet] <Ryozuki>  };
10:16 <+bridge> [ddnet] <Ryozuki> 
10:16 <+bridge> [ddnet] <Ryozuki> let stats_slice = unsafe {
10:16 <+bridge> [ddnet] <Ryozuki>   as_bytes(&stats)
10:16 <+bridge> [ddnet] <Ryozuki> };
10:16 <+bridge> [ddnet] <Ryozuki> ```
10:16 <+bridge> [ddnet] <Ryozuki> u can also remove the type from stats_slice :p
10:17 <+bridge> [ddnet] <Ryozuki> @ReiTW r u on vscode with rust-analyzer?
10:17 <+bridge> [ddnet] <Ryozuki> btw, if you run cargo clippy, it sometimes gives nice suggestions
10:17 <+bridge> [ddnet] <Ryozuki> its like a cargo check with more checks
10:18 <+bridge> [ddnet] <heinrich5991> (these type annotations also don't hurt anyone, obviously)
10:18 <+bridge> [ddnet] <heinrich5991> or `let stats_slice = unsafe { as_bytes(&stats) };`
10:18 <+bridge> [ddnet] <Ryozuki> true
10:18 <+bridge> [ddnet] <heinrich5991> look ma, one line
10:18 <+bridge> [ddnet] <Ryozuki> xd
10:21 <+bridge> [ddnet] <Ryozuki> can u use drop inside the struct?
10:21 <+bridge> [ddnet] <ReiTW> rn using vim, but mainly cargo & rust-analyzer
10:21 <+bridge> [ddnet] <Ryozuki> thats actually a keyword
10:21 <+bridge> [ddnet] <Ryozuki> oh yeah
10:21 <+bridge> [ddnet] <ReiTW> but I feel like autocompletion sux
10:21 <+bridge> [ddnet] <Ryozuki> vim or neovim?
10:22 <+bridge> [ddnet] <ReiTW> vim with no modules
10:22 <+bridge> [ddnet] <ReiTW> was just for a fast test
10:22 <+bridge> [ddnet] <Ryozuki> no modules?
10:22 <+bridge> [ddnet] <Ryozuki> does vim has lsp support
10:22 <+bridge> [ddnet] <ReiTW> yea standard vim with nothing configure
10:22 <+bridge> [ddnet] <ReiTW> yea standard vim with nothing configured
10:22 <+bridge> [ddnet] <Ryozuki> how do u get autocompletion then
10:23 <+bridge> [ddnet] <ReiTW> I don't, I used vim just to test heinrich's code fast
10:23 <+bridge> [ddnet] <Ryozuki> ah ok
10:23 <+bridge> [ddnet] <ReiTW> but on vscode I feel like autocompletion is buggy or idk
10:23 <+bridge> [ddnet] <heinrich5991> don't tell ryozuki how I code ðŸ˜…
10:23 <+bridge> [ddnet] <ReiTW> wut? xD
10:24 <+bridge> [ddnet] <Ryozuki> how? xD
10:24 <+bridge> [ddnet] <Neben> without autocompletion?
10:24 <+bridge> [ddnet] <heinrich5991> standard vim with nothing configured ðŸ˜„
10:24 <+bridge> [ddnet] <ReiTW> lmao a legend
10:24 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
10:24 <+bridge> [ddnet] <Ryozuki> here is my probs not updated neovim config
10:24 <+bridge> [ddnet] <Ryozuki> https://gist.github.com/edg-l/624737e31d6e85b2385689298fcccebe
10:24 <+bridge> [ddnet] <ReiTW> :giga_chad:
10:24 <+bridge> [ddnet] <Ryozuki> it works rly well for me
10:24 <+bridge> [ddnet] <heinrich5991> for large unknown rust codebases, I usually use intellij with rust plugin
10:25 <+bridge> [ddnet] <Ryozuki> are u sure u use rust-analyzer and not RLS
10:25 <+bridge> [ddnet] <Ryozuki> you gotta wait till it indexes ur project btw
10:25 <+bridge> [ddnet] <ReiTW> well too but when it comes to autocompletion for modules idk, sometimes I really can't find functions with autocompletion, have to manually type them
10:26 <+bridge> [ddnet] <ReiTW> yes I use the right one, the other one is deprecated
10:27 <+bridge> [ddnet] <Ryozuki> hmm idk it kinda works for me
10:27 <+bridge> [ddnet] <Ryozuki> what it doesnt auto import are macros for me
11:27 <+bridge> [ddnet] <deen> i have moved closer to that too, since all plugins failed occasionally and figuring out why was too annoying.
11:52 <+bridge> [ddnet] <heinrich5991> I'm getting hit by https://github.com/rust-lang/rust/issues/39016 ðŸ˜¦
12:00 <+bridge> [ddnet] <Ryozuki> long time ago when advent of code was there i started learning nasm
12:00 <+bridge> [ddnet] <Ryozuki> but then forgot
12:00 <+bridge> [ddnet] <Ryozuki> so now ill take it again
12:00 <+bridge> [ddnet] <Ryozuki> i found this new resource tho https://cs.lmu.edu/~ray/notes/nasmtutorial/
12:00 <+bridge> [ddnet] <Ryozuki> looks p nice
12:20 <+bridge> [ddnet] <Dragere> wow windows defender really hates 16.2.2
13:09 <+bridge> [ddnet] <cauldron> nice i will try that out. i like software without configuring. dwm works for me without configuring as well. zsh with few. maybe bash with 0. its also because i set up my pc regularly and dont have a backup / dotfile backup system
13:21 <+bridge> [ddnet] <cauldron> im using vim with colemak so i use these keys for movement, no colemak plugin or nnoremap ðŸ˜…
13:21 <+bridge> [ddnet] <cauldron> https://cdn.discordapp.com/attachments/293493549758939136/996375868484091904/Colemak2.png
13:33 <+bridge> [ddnet] <heinrich5991> argh
13:33 <+bridge> [ddnet] <heinrich5991> don't do that I guess ðŸ˜„
14:57 <+bridge> [ddnet] <heinrich5991> look ma: green CI! https://github.com/ddnet/ddnet/pull/5599
15:30 <+bridge> [ddnet] <Chairn> lol, those commits message
15:43 <+bridge> [ddnet] <heinrich5991> can I somehow link libstdc++ statically into my static library? do you know, @Learath2?
15:45 <+bridge> [ddnet] <Learath2> No idea, sorry
15:48 <+bridge> [ddnet] <Ryozuki> >  The James Webb Telescopeâ€™s Profound Data Challenges
15:48 <+bridge> [ddnet] <Ryozuki> > 
15:49 <+bridge> [ddnet] <Ryozuki> > 3000x farther from Earth than Hubbleâ€”with a 25x greater download deluge
15:49 <+bridge> [ddnet] <Ryozuki> https://spectrum.ieee.org/james-webb-telescope-communications#toggle-gdpr
15:49 <+bridge> [ddnet] <Ryozuki> https://news.ycombinator.com/item?id=32067945
15:49 <+bridge> [ddnet] <Ryozuki> :PepeA:
16:01 <+bridge> [ddnet] <cauldron> its actually fine. my brain adapts faster to it, than me finding a sustainable config setup
17:11 <+bridge> [ddnet] <n000b> Kinda impressive lmao
17:11 <+bridge> [ddnet] <n000b> But #off-topic  too i guess:pepeH:
18:06 <+bridge> [ddnet] <Chairn> given the universe is 13.8 billions years old, that's impossible. Maybe you meant 16 billion light years away?
18:08 <+bridge> [ddnet] <Ryozuki> Ah well
18:08 <+bridge> [ddnet] <Ryozuki> Idk how old
18:08 <+bridge> [ddnet] <Ryozuki> But apparently rly old xd
18:08 <+bridge> [ddnet] <louis> 16 billion light years still impossible
18:09 <+bridge> [ddnet] <Chairn> it is possible
18:09 <+bridge> [ddnet] <louis> the age is debated between 13.2 and 13.8 i believe
18:09 <+bridge> [ddnet] <Ryozuki> 13.5
18:09 <+bridge> [ddnet] <Ryozuki> billion
18:09 <+bridge> [ddnet] <Ryozuki> Almost the beggining
18:09 <+bridge> [ddnet] <louis> how is 16bil possible if universe is less than 16 bil years old
18:09 <+bridge> [ddnet] <Ryozuki> Yes i said it wrongly
18:09 <+bridge> [ddnet] <Chairn> > The universe (Latin: universus) is all of space and time[a] and their contents,[10] including planets, stars, galaxies, and all other forms of matter and energy. The Big Bang theory is the prevailing cosmological description of the development of the universe. According to this theory, space and time emerged together 13.787Â±0.020 billion years ago
18:09 <+bridge> [ddnet] <Ryozuki> <a:aWorrySwingSadge:897479697645076480>
18:09 <+bridge> [ddnet] <louis> i meant to chairn
18:10 <+bridge> [ddnet] <Chairn> it expands faster than light speed
18:10 <+bridge> [ddnet] <Ryozuki> He meant distance
18:10 <+bridge> [ddnet] <Ryozuki> Not time
18:10 <+bridge> [ddnet] <Ryozuki> Light years away-
18:10 <+bridge> [ddnet] <Chairn> > and the universe has been expanding ever since. While the spatial size of the entire universe is unknown,[3] it is possible to measure the size of the observable universe, which is approximately 93 billion light-years in diameter at the present day.
18:10 <+bridge> [ddnet] <louis> is it alr expanding faster than light
18:10 <+bridge> [ddnet] <louis> i thought it didnt accelerate to that yet
18:10 <+bridge> [ddnet] <Ryozuki> The universe can expand faster than speed of light iirc
18:11 <+bridge> [ddnet] <Ryozuki> At some point some galaxies will be unreachable
18:11 <+bridge> [ddnet] <Chairn> it's not acceleration, more like space dilatation
18:11 <+bridge> [ddnet] <Chairn> which can be faster than light speed
18:11 <+bridge> [ddnet] <louis> ye the stretching or whatnot
18:11 <+bridge> [ddnet] <louis> but i mean that value itself accelerates
18:11 <+bridge> [ddnet] <louis> or increases sry
18:12 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=uD4izuDMUQA
18:12 <+bridge> [ddnet] <Ryozuki> watch this vid
18:12 <+bridge> [ddnet] <Ryozuki> its rly interesting
18:12 <+bridge> [ddnet] <louis> tldw
18:12 <+bridge> [ddnet] <louis> :troll:
18:12 <+bridge> [ddnet] <Ryozuki> U should
18:12 <+bridge> [ddnet] <Ryozuki> Its awesome
18:12 <+bridge> [ddnet] <louis> that ends with heat death right
18:12 <+bridge> [ddnet] <louis> i watched some of it
18:12 <+bridge> [ddnet] <Ryozuki> Nah
18:12 <+bridge> [ddnet] <louis> didnt have time to do whole tho
18:12 <+bridge> [ddnet] <louis> oh
18:12 <+bridge> [ddnet] <Ryozuki> This goes way farther
18:12 <+bridge> [ddnet] <Ryozuki> To the future
18:12 <+bridge> [ddnet] <louis> ok
18:12 <+bridge> [ddnet] <louis> will probably get theoretical then
18:13 <+bridge> [ddnet] <Ryozuki> Watch it
18:13 <+bridge> [ddnet] <louis> interesting
18:13 <+bridge> [ddnet] <Ryozuki> Also its movie like
18:13 <+bridge> [ddnet] <Ryozuki> Melodysheep is a top tier filmmakee
18:13 <+bridge> [ddnet] <Ryozuki> Melodysheep is a top tier filmmakeer
18:14 <+bridge> [ddnet] <louis> im on long bus ride so i will watch
18:16 <+bridge> [ddnet] <Ryozuki> Watch it with sound
18:16 <+bridge> [ddnet] <Ryozuki> Sound is a must
18:16 <+bridge> [ddnet] <Chairn> who watches video without sound ?
18:16 <+bridge> [ddnet] <Chairn> what kind of barbaric civilisation are you from ðŸ˜„ ?
18:19 <+bridge> [ddnet] <Ryozuki> I watch reddit vids without sound
18:19 <+bridge> [ddnet] <Ryozuki> Xd
18:21 <+bridge> [ddnet] <Chairn> but how do you understand what's going on? You read lips? How about off voice ?
18:23 <+bridge> [ddnet] <Chairn> ok, i understand why no sound is important on that video
18:23 <+bridge> [ddnet] <Ryozuki> Reddit is just memes with text
18:23 <+bridge> [ddnet] <Ryozuki> Idk
18:23 <+bridge> [ddnet] <Chairn> shitty voice (probably some scientist with out of context stuff), shitty epic music
18:23 <+bridge> [ddnet] <Ryozuki> ??
18:24 <+bridge> [ddnet] <Chairn> on your future timelapse
18:24 <+bridge> [ddnet] <Ryozuki> Ur opinion sucks xd
18:24 <+bridge> [ddnet] <Chairn> i bet it doesn't even present all the possibilities
18:29 <+bridge> [ddnet] <louis> the voice is fine imo but idk why the narrator keeps changing
18:30 <+bridge> [ddnet] <Ryozuki> He actually gets actual scientists and divulgators to talk
18:37 <+bridge> [ddnet] <Ryozuki> But its more like a visual movie
19:07 <+bridge> [ddnet] <Swarfey> is there any way to add arguments for f1 `exec` to be used in the script?
19:09 <+bridge> [ddnet] <Chairn> no, you can only exec filename
19:19 <+bridge> [ddnet] <Ravie> cool video, sad that we will never find out if many of our theories about the universe were true or not
19:28 <+bridge> [ddnet] <Tater> how much of that stuff is just made up? xd
19:29 <+bridge> [ddnet] <Tater> It's not possible to predict asteroid impacts far into the future
19:35 <+bridge> [ddnet] <Chairn> its possible to predict the weather for 2 weeks, but we can still predict global tendencies. Same here
19:35 <+bridge> [ddnet] <Chairn> its not possible to predict the weather for 2 weeks, but we can still predict global tendencies. Same here
19:49 <+bridge> [ddnet] <Ravie> those aren't predictions, just hypothesis
19:50 < Michle11> Hey guys
19:51 <+Michle11> Do you have girlfriends?
19:53 <+bridge> [ddnet] <Jupstar> ui many probs already in the age to have wifes^^
20:04 <+bridge> [ddnet] <Learath2> :ahendmymiserableexistence:
21:23 <+bridge> [ddnet] <Cellegen | RiH> @deen I think you forgot that I reported the shift + left click in map editor issue long ago
21:23 <+bridge> [ddnet] <Cellegen | RiH> I especially pinged you, so I can get a reaction out of you
21:23 <+bridge> [ddnet] <Cellegen | RiH> ðŸ˜„
23:16 <+bridge> [ddnet] <deen> sorry, didn't catch that
23:21 <+bridge> [ddnet] <Chairn> ```c++
23:21 <+bridge> [ddnet] <Chairn> try {
23:21 <+bridge> [ddnet] <Chairn>   ReadDiscord();
23:21 <+bridge> [ddnet] <Chairn> } catch(CPing& Ping) {
23:21 <+bridge> [ddnet] <Chairn>   HandlePing(Ping);
23:21 <+bridge> [ddnet] <Chairn> }
23:21 <+bridge> [ddnet] <Chairn> ```
23:21 <+bridge> [ddnet] <Chairn> ```c++
23:21 <+bridge> [ddnet] <Chairn> try {
23:21 <+bridge> [ddnet] <Chairn>   ReadDiscord(); // may throw Ping
23:21 <+bridge> [ddnet] <Chairn> } catch(CPing& Ping) {
23:21 <+bridge> [ddnet] <Chairn>   HandlePing(Ping);
23:21 <+bridge> [ddnet] <Chairn> }
23:21 <+bridge> [ddnet] <Chairn> ```
23:30 <+bridge> [ddnet] <Ryozuki> ew exceptions in c++
23:32 <+bridge> [ddnet] <Ryozuki> rust do it like rust
23:32 <+bridge> [ddnet] <Ryozuki> return a Result<T>
23:33 <+bridge> [ddnet] <Ryozuki> https://github.com/rustedpy/result
23:33 <+bridge> [ddnet] <Ryozuki> funny
23:35 <+bridge> [ddnet] <Ryozuki> just do it like rust
23:39 <+bridge> [ddnet] <Chairn> sorry, i don't speak Rust
23:50 <+bridge> [ddnet] <Voxel> ryo when will we get a ddnet rust client
