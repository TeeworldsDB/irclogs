00:44 <+bridge> [ddnet] <fokkonaut> @Jupstar ✪
00:44 <+bridge> [ddnet] <fokkonaut> ```
00:44 <+bridge> [ddnet] <fokkonaut> QuadroMask(long long mask) {
00:44 <+bridge> [ddnet] <fokkonaut>         memset(m_Mask, mask, sizeof(m_Mask));
00:44 <+bridge> [ddnet] <fokkonaut>     }```
00:44 <+bridge> [ddnet] <fokkonaut> i do have `int64_t m_Mask[2];` now, so what to pass here?
00:44 <+bridge> [ddnet] <fokkonaut> why does this take a long long mask, and not a QuadroMask
00:45 <+bridge> [ddnet] <Jupstar ✪> nothing, i just did that constructor to set all bits to 1, if required
00:45 <+bridge> [ddnet] <Jupstar ✪> u can overload the constructor
00:45 <+bridge> [ddnet] <Jupstar ✪> and have multiple
00:46 <+bridge> [ddnet] <fokkonaut> what do you mean
00:46 <+bridge> [ddnet] <Jupstar ✪> just change the source to your purpose
00:46 <+bridge> [ddnet] <fokkonaut> but i dont really know what all is needed
00:46 <+bridge> [ddnet] <Jupstar ✪> QuadroMask(const QuadroMask& OtherMask) { *this = OtherMask }
00:46 <+bridge> [ddnet] <Jupstar ✪> sry
00:46 <+bridge> [ddnet] <Jupstar ✪> memcopy
00:46 <+bridge> [ddnet] <Jupstar ✪> it
00:47 <+bridge> [ddnet] <Jupstar ✪> QuadroMask(const QuadroMask& OtherMask) { memcpy(this, &OtherMask, sizeof(OtherMask); }
00:47 <+bridge> [ddnet] <Jupstar ✪> i dunno what u need xD
00:47 <+bridge> [ddnet] <fokkonaut> i am not sure either, because i dont completely understand ur system
00:47 <+bridge> [ddnet] <fokkonaut> i need to adapt this to fit in the ddnet like teammasking
00:48 <+bridge> [ddnet] <Jupstar ✪> it just overloads common operators u use with bitflags
00:48 <+bridge> [ddnet] <Jupstar ✪> like if((Mask | OtherMask))  { //mask is set }
00:49 <+bridge> [ddnet] <Jupstar ✪> if you really want it as mighty as a datatype, you should use templates and/or overload the operators with specific datatypes
00:50 <+bridge> [ddnet] <Jupstar ✪> i cannot explain what operator overloading does in 2 setences xD
00:50 <+bridge> [ddnet] <fokkonaut> xD
00:50 <+bridge> [ddnet] <Jupstar ✪> just imagine it like that, you can build your datatype u want
00:50 <+bridge> [ddnet] <Jupstar ✪> e.g. a int is nothing else than a datatype that overloads the operators
00:51 <+bridge> [ddnet] <Jupstar ✪> int operator==(const int& otherint) { SOME ASSEMBLER }
00:51 <+bridge> [ddnet] <Jupstar ✪> u can imagine it like that
00:51 <+bridge> [ddnet] <Jupstar ✪> and you can do the same in c++
00:51 <+bridge> [ddnet] <Jupstar ✪> bool operator==(const int& otherint) { SOME ASSEMBLER }
00:52 <+bridge> [ddnet] <Jupstar ✪> for teeworlds you most probably just need & don't u?
00:53 <+bridge> [ddnet] <Jupstar ✪> if Flag & (1 << 63) is set, then id 63 exists
00:53 <+bridge> [ddnet] <fokkonaut> yea
00:53 <+bridge> [ddnet] <fokkonaut> i think
00:53 <+bridge> [ddnet] <Jupstar ✪> ok
00:54 <+bridge> [ddnet] <Jupstar ✪> `
00:54 <+bridge> [ddnet] <Jupstar ✪>     bool IsSet(size_t BitIndex) const {
00:54 <+bridge> [ddnet] <Jupstar ✪>         size_t IndexOfBit = BitIndex / (sizeof(int64_t) * 8);
00:54 <+bridge> [ddnet] <Jupstar ✪>         size_t BitInIndex = BitIndex % (sizeof(int64_t) * 8);
00:54 <+bridge> [ddnet] <Jupstar ✪>         return (operator[](IndexOfBit) & (((int64_t)1) << BitInIndex)) != 0;
00:54 <+bridge> [ddnet] <Jupstar ✪>     }`
00:54 <+bridge> [ddnet] <Jupstar ✪> so that function would replace what u want todo
00:55 <+bridge> [ddnet] <Jupstar ✪> instead of & u just call the function on the bitflag
00:55 <+bridge> [ddnet] <Jupstar ✪> if you prefer a & operator you need to overload & operator
00:55 <+bridge> [ddnet] <fokkonaut> ```
00:55 <+bridge> [ddnet] <fokkonaut> int64_t operator & (const Mask128& Mask)
00:55 <+bridge> [ddnet] <fokkonaut>     {
00:55 <+bridge> [ddnet] <fokkonaut>         return (m_Mask[0] & Mask[0]) | (m_Mask[1] & Mask[1]);
00:55 <+bridge> [ddnet] <fokkonaut>     }    ```
00:55 <+bridge> [ddnet] <Learath2> (you can avoid the expensive div and mod)
00:55 <+bridge> [ddnet] <fokkonaut> you mean this?
00:55 <+bridge> [ddnet] <Jupstar ✪> for that u need to create an own flag
00:56 <+bridge> [ddnet] <Jupstar ✪> also possible to use
00:56 <+bridge> [ddnet] <fokkonaut> uhm
00:56 <+bridge> [ddnet] <fokkonaut> i am lost i think
00:56 <+bridge> [ddnet] <fokkonaut> too high level for me
00:56 <+bridge> [ddnet] <Jupstar ✪> you need to understand what datatypes are about i think
00:56 <+bridge> [ddnet] <Learath2> yes, that is what happens if you don't plan things 😄
00:56 <+bridge> [ddnet] <Jupstar ✪> its just some bytes in memory
00:57 <+bridge> [ddnet] <Jupstar ✪> @Learath2 how can i avoid it btw 😄
00:57 <+bridge> [ddnet] <Jupstar ✪> bit shifting?
00:58 <+bridge> [ddnet] <Learath2> Well a branch is cheaper
00:59 <+bridge> [ddnet] <Jupstar ✪> puhh yeah probably xD
00:59 <+bridge> [ddnet] <fokkonaut> @Jupstar ✪ so how would this work with the larger mask? Mask |= 1LL << i;
00:59 <+bridge> [ddnet] <Jupstar ✪> i dunno what the compiler is able todo
00:59 <+bridge> [ddnet] <Jupstar ✪> to optimize*
00:59 <+bridge> [ddnet] <Learath2> I think a smart enough compiler would optimize that
01:02 <+bridge> [ddnet] <Jupstar ✪> @fokkonaut you can e.g. overload a global operator << and add a datatype that reresents another datatype for i
01:02 <+bridge> [ddnet] <Jupstar ✪> 
01:02 <+bridge> [ddnet] <Jupstar ✪> e.g.
01:02 <+bridge> [ddnet] <Jupstar ✪> struct SShiftOffset {
01:02 <+bridge> [ddnet] <Jupstar ✪> size_t i;
01:02 <+bridge> [ddnet] <Jupstar ✪> };
01:02 <+bridge> [ddnet] <Jupstar ✪> 
01:02 <+bridge> [ddnet] <Jupstar ✪> then 
01:02 <+bridge> [ddnet] <Jupstar ✪> QuadroMask& operator<<(const int& ValueToShift, const SShiftOffset& B) {
01:02 <+bridge> [ddnet] <Jupstar ✪>   //if you just accept 1 as valuetoshift anyway
01:02 <+bridge> [ddnet] <Jupstar ✪> QuadroMask m;
01:02 <+bridge> [ddnet] <Jupstar ✪> m.SetBit(B.i);
01:02 <+bridge> [ddnet] <Jupstar ✪> }
01:02 <+bridge> [ddnet] <Jupstar ✪> 
01:02 <+bridge> [ddnet] <Jupstar ✪> and call it by 1 << SShiftOffset(Offset)
01:02 <+bridge> [ddnet] <Jupstar ✪> something like that
01:02 <+bridge> [ddnet] <Jupstar ✪> or just create a mask and call SetBit
01:02 <+bridge> [ddnet] <Jupstar ✪> there are infinite ways todo it
01:02 <+bridge> [ddnet] <Learath2> yep optimizes to a branch
01:02 <+bridge> [ddnet] <Jupstar ✪> interesting 😄
01:03 <+bridge> [ddnet] <fokkonaut> @Jupstar ✪ uhm, yea so the masking needs to wait :( xd
01:03 <+bridge> [ddnet] <fokkonaut> im too dumb for this
01:03 <+bridge> [ddnet] <Jupstar ✪> yeah sry
01:03 <+bridge> [ddnet] <fokkonaut> np
01:03 <+bridge> [ddnet] <Jupstar ✪> make tutorials on assembler to understand that anything is just memory
01:04 <+bridge> [ddnet] <Jupstar ✪> its really noit easy to get away from the feeling from datatypes to hardware close things
01:04 <+bridge> [ddnet] <Learath2> oh even better no branch no nothing
01:05 <+bridge> [ddnet] <Jupstar ✪> have you tried to search for an bitfield implentation in c++?
01:05 <+bridge> [ddnet] <Learath2> `std::bitset`
01:05 <+bridge> [ddnet] <Jupstar ✪> maybe someone did it with good implementation already
01:05 <+bridge> [ddnet] <Jupstar ✪> ah nice
01:05 <+bridge> [ddnet] <Jupstar ✪> that makes it ez xD
01:06 <+bridge> [ddnet] <Learath2> Oh duh `sizeof(int64_t) * 8` is a power of 2
01:06 <+bridge> [ddnet] <Learath2> You can use a shift to do the division
01:06 <+bridge> [ddnet] <Jupstar ✪> yeah 😄
01:06 <+bridge> [ddnet] <Learath2> power of modern optimizing compilers
01:07 <+bridge> [ddnet] <Jupstar ✪> but yeah fokko, std::bitset is what u want
01:07 <+bridge> [ddnet] <Jupstar ✪> even in c++ std what do u want more
01:13 <+bridge> [ddnet] <Soreu> @Jupstar ✪ how the hell did you managed to do single-line-code syntax for multiline code using `
01:13 <+bridge> [ddnet] <Jupstar ✪> `
01:13 <+bridge> [ddnet] <Jupstar ✪> `
01:13 <+bridge> [ddnet] <Jupstar ✪> u mean this?
01:13 <+bridge> [ddnet] <Jupstar ✪> shift + enter
01:14 <+bridge> [ddnet] <Soreu> `
01:14 <+bridge> [ddnet] <Soreu> `
01:14 <+bridge> [ddnet] <Soreu> ...though
01:14 <+bridge> [ddnet] <fokkonaut> u need to do 3 times ` at end and beginning
01:14 <+bridge> [ddnet] <Soreu> @fokkonaut ye, normally, but he's cheating
01:14 <+bridge> [ddnet] <Soreu> seems Discord trolls itself with it, because it doesn't show that as a code while typing, but does convert after sending
01:15 <+bridge> [ddnet] <Jupstar ✪> i dunno the chat code styles for discord xD
01:15 <+bridge> [ddnet] <Jupstar ✪> easiest would be /code xD
01:15 <+bridge> [ddnet] <fokkonaut> (╯°□°）╯︵ ┻━┻
01:15 <+bridge> [ddnet] <fokkonaut> lol
01:16 <+bridge> [ddnet] <fokkonaut> ¯\_(ツ)_/¯
01:16 <+bridge> [ddnet] <fokkonaut> ||||
01:16 <+bridge> [ddnet] <fokkonaut> sorry
01:16 <+bridge> [ddnet] <Soreu> \` for single line -- `code`
01:16 <+bridge> [ddnet] <Soreu> \`\`\` for 
01:16 <+bridge> [ddnet] <Soreu> ```
01:16 <+bridge> [ddnet] <Soreu> multi
01:16 <+bridge> [ddnet] <Soreu> line
01:16 <+bridge> [ddnet] <Soreu> ```
01:16 <+bridge> [ddnet] <Jupstar ✪> ah
01:16 <+bridge> [ddnet] <Jupstar ✪> i am missing color
01:16 <+bridge> [ddnet] <Soreu> also, with the multiline you can set language syntax, for colors
01:16 <+bridge> [ddnet] <Jupstar ✪> even steam supports it better xD
01:16 <+bridge> [ddnet] <Jupstar ✪> steam chat
01:16 <+bridge> [ddnet] <fokkonaut> @Jupstar ✪ on pc there is color sometimes
01:17 <+bridge> [ddnet] <fokkonaut> only for some languages tho
01:17 <+bridge> [ddnet] <Soreu> ```css
01:17 <+bridge> [ddnet] <Soreu> body {
01:17 <+bridge> [ddnet] <Soreu>   background-color: #0080FF;
01:17 <+bridge> [ddnet] <Soreu> }
01:17 <+bridge> [ddnet] <Soreu> ```
01:17 <+bridge> [ddnet] <Jupstar ✪> ui
01:17 <+bridge> [ddnet] <fokkonaut> yea
01:17 <+bridge> [ddnet] <Jupstar ✪> nice
01:17 <+bridge> [ddnet] <fokkonaut> not for c++ tho
01:17 <+bridge> [ddnet] <Soreu> @Jupstar ✪
01:17 <+bridge> [ddnet] <Soreu> \`\`\`<language>
01:17 <+bridge> [ddnet] <Soreu> some code
01:17 <+bridge> [ddnet] <Soreu> \`\`\`
01:18 <+bridge> [ddnet] <Jupstar ✪> ```<c++>
01:18 <+bridge> [ddnet] <Jupstar ✪> int i(void);
01:18 <+bridge> [ddnet] <Jupstar ✪> ```
01:18 <+bridge> [ddnet] <Learath2> don't put it in <>
01:18 <+bridge> [ddnet] <Jupstar ✪> oh xd
01:18 <+bridge> [ddnet] <Jupstar ✪> ```c++
01:18 <+bridge> [ddnet] <Jupstar ✪> int i(void);
01:18 <+bridge> [ddnet] <Jupstar ✪> ```
01:19 <+bridge> [ddnet] <fokkonaut> ```c++
01:19 <+bridge> [ddnet] <fokkonaut> void test(int a, int b)
01:19 <+bridge> [ddnet] <fokkonaut> {
01:19 <+bridge> [ddnet] <fokkonaut>      return;
01:19 <+bridge> [ddnet] <fokkonaut> }
01:19 <+bridge> [ddnet] <fokkonaut> ```
01:19 <+bridge> [ddnet] <fokkonaut> ez
01:25 <+bridge> [ddnet] <Jupstar ✪> but typing ` on a german keyboard sucks anyway xD
01:25 <+bridge> [ddnet] <Jupstar ✪> ./code would be best xd
01:39 <+bridge> [ddnet] <Learath2> hm I couldn't find a variant of isset that's optimized well on all major compilers
01:42 <+bridge> [ddnet] <Learath2> `return __shiftright128(m_Data[0], m_Data[1], idx) & 1;` works great for msvc
01:45 <+bridge> [ddnet] <Learath2> (even better then gcc and clangs emulated 128 bit ints)
01:55 <+bridge> [ddnet] <Learath2> okay not perfect but `std::bitset<128>` is mediocre across all relevant compilers
02:03 <+bridge> [ddnet] <Learath2> weird that such a simple thing is optimized so inconsistently accross compilers
02:28 <+bridge> [ddnet] <fokkonaut> so when using bitset<128> it is basically the same as if __int128 was available?
02:29 <+bridge> [ddnet] <fokkonaut> I can just typedef the bitset<128> as int128_t and replace it all over the place?
02:51 <+bridge> [ddnet] <Jupstar ✪> bitset is an array of bools
02:52 <+bridge> [ddnet] <Jupstar ✪> and it has functions
02:52 <+bridge> [ddnet] <Jupstar ✪> its not the same
02:58 <+bridge> [ddnet] <fokkonaut> but it could do the same job?
03:24 <+bridge> [ddnet] <Jupstar ✪> bitwise some kind of yes
03:25 <+bridge> [ddnet] <Jupstar ✪> is it so horrible to replace it with std::bitset<128>? or just typedef it not int128_t so it doesnt collide with the gcc datatype
09:33 <+bridge> [ddnet] <Learath2> Dont bother with gcc and clangs int128 anyway
09:33 <+bridge> [ddnet] <Learath2> For this purpose their emulated 128bit integers optimize to shit
10:12 <+bridge> [ddnet] <deen> Was reading papers for work and stumbled over this:
10:12 <+bridge> [ddnet] <deen> > All our bug reports for MariaDB were verified quickly. However, only one of them was fixed, which is why we have stopped testing this DBMS. 
10:12 <+bridge> [ddnet] <deen> https://www.manuelrigger.at/dbms-bugs/ Oh well...
10:22 <+bridge> [ddnet] <Learath2> Huh
16:19 <+bridge> [ddnet] <Patiga> i set my map parse repository to public, if anyone wants to take a look: https://gitlab.com/Patiga/twmap
16:57 <@deen> Nice @Patiga
18:36 <+bridge> [ddnet] <Learath2> Does anyone remember how `CNetMsg_Sv_PlayerTime` is supposed to work?
18:39 <+bridge> [ddnet] <Learath2> It seems to modify the score, but isn't score part of `CNetObj_PlayerInfo`?
19:02 <+bridge> [ddnet] <redix> `CNetMsg_Sv_PlayerTime` is a relic from the first race client. I doubt any client still relies on it. The ddnet implementation even seems to be incompatible with itself. Server uses hundredths of a second while the client uses seconds.
19:49 <+bridge> [ddnet] <heinrich5991> we hit 10'000 commits! 🙂
20:04 <+bridge> [ddnet] <heinrich5991> @deen PRs got merged
22:03 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=Aymrnzianf0
22:03 <+bridge> [ddnet] <Ryozuki> 2 astronauts launching in 30 mins
22:03 <+bridge> [ddnet] <Ryozuki> :justatest:
22:03 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/715294222076346449/unknown.png
22:20 <+bridge> [ddnet] <Patiga> ^ cancelled
22:22 <+bridge> [ddnet] <Ryozuki> y
22:22 <+bridge> [ddnet] <Ryozuki> may 30
23:20 <+bridge> [ddnet] <Chairn> killing practice team leaves the team in practice
23:20 <+bridge> [ddnet] <Chairn> is it normal?
23:20 <+bridge> [ddnet] <Chairn> some people will get fucked because of that, they practice, restart the map with locked team
23:20 <+bridge> [ddnet] <Chairn> they end the map normal, and realize practice is still on
23:24 <+bridge> [ddnet] <heinrich5991> @deen `m_SetSavePos && !m_Super && !m_DeepFreeze`
23:24 <+bridge> [ddnet] <heinrich5991> I doubt this will work
23:30 <+bridge> [ddnet] <ExP> I wanted to say the same issue as @Chairn. There is no command to leave practice mod or no server command after crossing start (after killing) that you are still in practice mod to pay attention
23:37 <+bridge> [ddnet] <deen> @Chairn thanks, fixed in here: https://github.com/ddnet/ddnet/pull/2218
23:38 <+bridge> [ddnet] <deen> @heinrich5991 i noticed when testing locally 🙂
