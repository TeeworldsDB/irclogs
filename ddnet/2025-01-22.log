00:04 < bridge> <zhn> @heinrich5991 i don't think it deserves a pr so i'll just give it to you (connless 0.5)
00:04 < bridge> <zhn> ah its too big
00:04 < bridge> <zhn> seems pr needed :/
00:25 < bridge> <melo∆û> :owo:
00:31 < bridge> <zhn> it's not :(
07:37 < bridge> <TsPiggy> :justatest:
08:50 < bridge> <reitw> Sad, u can spam @mr_anderson for that :kek: , long live 0.5
11:08 < bridge> <thrava> The VOTE_DESC_LENGTH seems to be not work properly in client-side,  the client will only render texts ranged in origin length
11:11 < bridge> <ryozuki> idk if anybody does this, but instead of listening to music while i code/work i put stuff from here https://mynoise.net/
11:11 < bridge> <ryozuki> this website is gold
11:15 < bridge> <milkeeycat> I listen to Slipknot while I code/work üòè
11:16 < bridge> <melo∆û> https://open.spotify.com/playlist/4wsL22QFnlzeRZgXTsdl6x?si=1d2e889be686439c
11:16 < bridge> <melo∆û> 
11:16 < bridge> <melo∆û> the playlist i listen to while coding :owo:
11:17 < bridge> <melo∆û> eh seems like i can't remove spotify embedded's. gg
11:19 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1331568894946709535/image.png?ex=679217ab&is=6790c62b&hm=e000738f4ed9db312bdca2976571c8beb1bcc90c9f60f70131cba9cf520056d4&
11:19 < bridge> <ryozuki> llvm mimics rust Result
11:21 < bridge> <totar> Is it because of downstream rust devs?
11:21 < bridge> <ryozuki> no, because its a good pattern
11:21 < bridge> <ryozuki> they force you to check for nullptr for example
11:21 < bridge> <ryozuki> if u dont check, it throws a assert if asserts are on
11:22 < bridge> <totar> ah I guess that's not a crazy thing to copy yeah
11:22 < bridge> <ryozuki> so its not as enforced
11:22 < bridge> <ryozuki> but i found a bug in the C api
11:22 < bridge> <ryozuki> so ill do a pr
11:36 < bridge> <ryozuki> https://github.com/llvm/llvm-project/pull/123924
11:36 < bridge> <ryozuki> new llvm pr
12:08 < bridge> <kollpotato> are options in c++ also stolen from rust? :poggers2:
12:09 < bridge> <ryozuki> @kollpotato i guess
12:09 < bridge> <ryozuki> the thing is these constructs arent as powerful as rust
12:09 < bridge> <ryozuki> because c++ has no algebraic data types
12:11 < bridge> <kollpotato> after i started coding in rust i cant go back to any language that doesnt have adts
12:11 < bridge> <kollpotato> rust is addictive af
12:15 < bridge> <zhn> long live 0.5!
12:16 < bridge> <zhn> yup
12:16 < bridge> <ryozuki> @kollpotato ocaml has adts
12:16 < bridge> <ryozuki> but its more functional
12:16 < bridge> <ryozuki> but its awesom
12:16 < bridge> <ryozuki> but tooling sucks hard
12:16 < bridge> <ryozuki> its why i dont use it much
12:16 < bridge> <ryozuki> the original rust compiler was made in ocaml
12:16 < bridge> <ryozuki> rust is heavily inspired by it
12:16 < bridge> <kollpotato> yeah ive seen, but im not good at fp
12:16 < bridge> <zhn> but it's part of std lib already?
12:17 < bridge> <kollpotato> wait really
12:17 < bridge> <ryozuki> i think only optional is of std
12:17 < bridge> <kollpotato> i thought c++
12:17 < bridge> <ryozuki> Expected is a llvm thing
12:17 < bridge> <ryozuki> yes rly
12:17 < bridge> <ryozuki> ocaml is a nice lang to make compilers
12:17 < bridge> <ryozuki> rly nice pattern matching etc
12:17 < bridge> <ryozuki> it also has llvm bindings
12:17 < bridge> <zhn> https://en.cppreference.com/w/cpp/utility/expected
12:17 < bridge> <ryozuki> ohhh
12:17 < bridge> <kollpotato> whats the point of bootstrapping languages btw
12:18 < bridge> <ryozuki> nevetherless llvm uses their own
12:18 < bridge> <kollpotato> why didnt they keep the compiler in ocaml
12:18 < bridge> <zhn> hm i wonder if they have reasons to use non-std
12:18 < bridge> <zhn> or its just like legacy thing that will never be touched again
12:18 < bridge> <ryozuki> its always better to have it in the same lang, because dog fooding
12:18 < bridge> <ryozuki> and its a statement
12:19 < bridge> <ryozuki> u can make a thing as complex as a rust compiler in rust
12:19 < bridge> <ryozuki> https://en.wikipedia.org/wiki/Eating_your_own_dog_food
12:19 < bridge> <kollpotato> epic
12:19 < bridge> <kollpotato> i just googled that xD
13:20 < bridge> <forgottenabscat> Does anyone has the tutorial on how to use quads for renderding images in ddnet?
14:31 < bridge> <woidless3> And in theory, if the rules of the doseechpore server wizard are not ready, anyone can take someone else's map and run the server with it? (Typically a public server)
15:10 < bridge> <chillerdragon> @zwelf2: when check matrix
16:01 < bridge> <skibidisigma8261451> can any1 give me site where displayed all servers
16:01 < bridge> <skibidisigma8261451> from master server
16:01 < bridge> <skibidisigma8261451> i found it
16:01 < bridge> <Jupstar ‚ú™> i can give you _the_ site
17:43 < bridge> <kollpotato> after 2 weeks of coding in rust i have realised i have no idea idea how to not store everything on the heap
17:44 < bridge> <louis> borrow them or smth idk
17:44 < bridge> <kollpotato> great advice
17:45 < bridge> <kollpotato> i can just .clone() everything
17:51 < bridge> <Jupstar ‚ú™> watcha mean?
17:51 < bridge> <Jupstar ‚ú™> 
17:51 < bridge> <Jupstar ‚ú™> if u dont use Rc, Arc, Vec, Box or similar it's not heap allocated
17:53 < bridge> <kollpotato> i use Vec<u8> and String everywhere
17:53 < bridge> <Jupstar ‚ú™> If that is what your app needs, that sounds ok üòÑ
17:53 < bridge> <kollpotato> when i try to use slices i cant handle the pain of the lifetimes
17:53 < bridge> <kollpotato> perhaps
17:53 < bridge> <Jupstar ‚ú™> u rarely need to define the lifetimes explictly
17:55 < bridge> <zhn> you need code review i think
17:56 < bridge> <zhn> you are lack of some good advice from jupstar or lerato
17:56 < bridge> <learath2> you need to look into more advanced languages like C
17:56 < bridge> <zhn> c--
17:56 < bridge> <learath2> Here you go, great advice ^^
17:56 < bridge> <zhn> xd
17:57 < bridge> <kollpotato> C is simple af
17:57 < bridge> <kollpotato> u alloc u free
17:57 < bridge> <kollpotato> in Rust u have 20 different traits to do the same thing
17:58 < bridge> <learath2> You are dangerously close to spawning the Rust crew, choose your next sentence very carefully
17:58 < bridge> <Jupstar ‚ú™> i'd simply claim it's not true üòÇ
17:59 < bridge> <learath2> https://tenor.com/view/tr%C3%BAbo%C3%B0ar-morm%C3%B3nsb%C3%B3k-morm%C3%B3nar-gif-15692769780755147847
17:59 < bridge> <Jupstar ‚ú™> If you don't understand when to use Box over Rc or wise versa, then you simply didn't understand their use case üòÑ
17:59 < bridge> <kollpotato> but their task is the same
17:59 < bridge> <kollpotato> store on the heap
17:59 < bridge> <Jupstar ‚ú™> Mh
17:59 < bridge> <learath2> You may need to do some more Rusting üòÑ
18:00 < bridge> <kollpotato> i know the different between them
18:00 < bridge> <Jupstar ‚ú™> the concept isn't even from rust
18:00 < bridge> <kollpotato> i just say they both allocate on the heap
18:00 < bridge> <hectavoxel> theres a crew?? üíÄ
18:01 < bridge> <learath2> You can join by converting one other person to the church of Rust
18:01 < bridge> <Jupstar ‚ú™> Voxel is the rusty artist
18:01 < bridge> <Jupstar ‚ú™> :deen_star:
18:01 < bridge> <hectavoxel> i dont care who the irs sends, i am NOT programming in ru.st!
18:02 < bridge> <hectavoxel> yea my art is pretty rusty i can admit that
18:02 < bridge> <learath2> Well the biggest difference is ownership, which is not something many software engineers are used to thinking about outside the Rustosphere
18:03 < bridge> <learath2> Maybe more modern C++ programmers are more familiar with it with `unique_ptr` and `shared_ptr`
18:08 < bridge> <ryozuki> what u doing
18:09 < bridge> <ryozuki> rust type system is extensive because it wants to express all variables in the type system
18:09 < bridge> <ryozuki> which it also has ownership system but its manual
18:09 < bridge> <ryozuki> in llvm the c api tells u in docs "takes ownership"
18:10 < bridge> <ryozuki> rust doesnt live in the stone age and lets u handle it in the language itself
18:12 < bridge> <kollpotato> i am aware of that
18:12 < bridge> <kollpotato> i just said that c is simpler
18:12 < bridge> <ryozuki> there is a common pitfall tho, specially when dealing heavily with lifetimes, if you have a code that looks like this:
18:12 < bridge> <ryozuki> 
18:12 < bridge> <ryozuki> ```rust
18:12 < bridge> <ryozuki> fn hello<'a>(a: &'a MyTypeWithABorrowedField<'a>) {} 
18:12 < bridge> <ryozuki> ```
18:12 < bridge> <ryozuki> you are in trouble, because this doesnt make much sense, but u can type it, altho when u try to do something with it u will see compile errors
18:12 < bridge> <kollpotato> oh no thats my code
18:13 < bridge> <Jupstar ‚ú™> but u dont need to do that xd
18:13 < bridge> <ryozuki> i guess its more problem when u make it mut too xd
18:13 < bridge> <Jupstar ‚ú™> fn hello(a: &MyTypeWithABorrowedField<'_>) {}
18:13 < bridge> <Jupstar ‚ú™> this willworks too
18:13 < bridge> <Jupstar ‚ú™> this will work too
18:13 < bridge> <kollpotato> i forgor about that
18:13 < bridge> <Jupstar ‚ú™> xd
18:13 < bridge> <kollpotato> too much stuff to remember
18:14 < bridge> <ryozuki> i forgot the exact pattern but there was a forum rust describing the problem
18:14 < bridge> <Jupstar ‚ú™> clippy will help you do remove useless lifetimes
18:15 < bridge> <kollpotato> clippy doesnt like me
18:15 < bridge> <Jupstar ‚ú™> but you like it
18:15 < bridge> <Jupstar ‚ú™> :deen_star:
18:15 < bridge> <ryozuki> i think @milkeeycat had a repo with this pattern
18:15 < bridge> <ryozuki> it was something about a arena
18:17 < bridge> <ryozuki> c++ has more to remember
18:17 < bridge> <ryozuki> unless u do unsafe rust
18:17 < bridge> <ryozuki> holding unsafe rust to be safe is harder
18:22 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1331675381954252914/Screenshot_20250122_122223.jpg?ex=67927ad8&is=67912958&hm=a0520944307922cc510b46f21dc2d650c7e6b3fdcd0c708e4e54100e58605ebd&
18:22 < bridge> <kollpotato> xDDDDDDD
18:35 < bridge> <annyonghaseyoitstella> d
19:00 < bridge> <melo∆û> https://cdn.discordapp.com/attachments/293493549758939136/1331685021991305296/image0.gif?ex=679283d2&is=67913252&hm=067ab0146c0236abeac1aaaca58dc02f802d1b523571386c7d1f8ad9650a98d4&
19:06 < ws-client> <ChillerDragon> ger3 ok?
19:07 < bridge> <learath2> it's fine for me
19:12 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1331687911690600478/image.png?ex=67928683&is=67913503&hm=2be434bc679c5ccbe785df30af7168580d593440dd808c7c02c1433fbba36c2c&
19:12 < bridge> <kollpotato> but its impossible to quit teeworlds and ddnet
19:14 < bridge> <louis> is he done with vanilla teeworlds or done with the game in all?
19:15 < bridge> <louis> oh ig everything
19:17 < bridge> <oxyzo.> he will come back
19:17 < bridge> <oxyzo.> trust
19:18 < bridge> <ryozuki> what happened
19:19 < bridge> <hectavoxel> i'll give him a year
19:19 < bridge> <kollpotato> he made a pr just a month ago
19:20 < bridge> <kollpotato> now he quit
19:20 < bridge> <ryozuki> but why did he quit
19:20 < bridge> <kollpotato> was he supposed to?
19:21 < bridge> <kollpotato> ahh
19:21 < bridge> <kollpotato> didnt read the question right
19:21 < bridge> <kollpotato> maybe depression
19:21 < bridge> <kollpotato> teeworlds hurts people
19:21 < bridge> <kollpotato> :cammo:
19:23 < bridge> <kollpotato> @gerdoe how so fast
19:24 < bridge> <zhn> ddnet doesn't really appreciate any move into more mod-friendly codebase
19:24 < bridge> <kollpotato> ddnet-rs will solve this
19:24 < bridge> <hectavoxel> again
19:24 < bridge> <hectavoxel> this is why we need to push ddnet-rs
19:24 < bridge> <hectavoxel> its like the ultimate mod potential
19:25 < bridge> <kollpotato> seems like u secretly enjoy rust
19:26 < bridge> <hectavoxel> listen
19:26 < bridge> <hectavoxel> a person can like a rocket launching into space but hate figuring out how the science behind it is done
19:26 < bridge> <zhn> nah you hated the instrument with which this rocket was built up
19:27 < bridge> <zhn> we all rember this....
19:28 < bridge> <hectavoxel> no patrick, rockets are not instruments
19:29 < bridge> <zhn> ?
19:30 < bridge> <zhn> rust is the instrument and ddnet-rs is rocket
19:31 < bridge> <ryozuki> i cant believe voxel pushes for rust made software
19:32 < bridge> <ryozuki> looks like nowadays u need to be a nazi üíÄ
19:32 < bridge> <zhn> i cant believe voxel pushes for nerdy ass programming language made software
19:32 < bridge> <ryozuki> to send rockets to space
19:32 < bridge> <ryozuki> :kek:
19:32 < bridge> <zhn> :kek:
19:32 < bridge> <zhn> seems we will troll ya forever for this xdd
19:32 < bridge> <zhn> im sorry in advance
19:33 < bridge> <ryozuki> @gerdoe i cant help but read ur bio all days
19:33 < bridge> <8_9z> can anyone give me kog maps+aip gores dawnload please
19:33 < bridge> <ryozuki> wrong channel
19:33 < bridge> <8_9z> where
19:33 < bridge> <ryozuki> #questions
19:40 < bridge> <zhn> huh?
19:46 < bridge> <kollpotato> rust in god we trust
19:48 < bridge> <kollpotato> god in rust we trust
19:51 < bridge> <learath2> Unless you actually know why he left you are just speculating. Which is useless
20:00 < bridge> <Ewan> do u think this channel gets so many random questions because it‚Äôs the first channel from the top of the list that anyone can type in?
20:01 < bridge> <Ewan> i mean, half the time i see the dumb questions they‚Äôve been crossposted (spammed) to general and probably other channels
20:01 < bridge> <Ewan> but maybe moving this channel or category down would reduce that
20:02 < bridge> <learath2> It's also one of the most active channels, perhaps that also contributes
20:04 < bridge> <Jupstar ‚ú™> ¬ß1 You cannot quit teeworlds
20:04 < bridge> <Jupstar ‚ú™> ¬ß2 If you quit teeworlds $1 becomes active
20:04 < bridge> <oxyzo.> why does a dollar become active
20:05 < bridge> <Jupstar ‚ú™> lel
20:05 < bridge> <Jupstar ‚ú™> ¬ß1 You cannot quit teeworlds
20:05 < bridge> <Jupstar ‚ú™> ¬ß2 If you quit teeworlds ¬ß1 becomes active
20:18 < bridge> <ryozuki> @learath2 do we do this? https://cceckman.com/writing/branchless-utf8-encoding/
20:20 < bridge> <ryozuki> > So on x86_64 processors, we have to branch to say ‚Äúa 32-bit zero value has 32 leading zeros‚Äù. Put differently, the ‚Äúcount leading zeros‚Äù intrinsic isn‚Äôt necessarily a branchless instruction. This might look nicer on another architecture!
20:20 < bridge> <ryozuki> til
20:25 < bridge> <ryozuki> https://github.com/skeeto/branchless-utf8
20:45 < bridge> <learath2> Nope, I think we just adopted what teeworlds has which should be the naive implementation
20:47 < bridge> <ryozuki> ```c
20:47 < bridge> <ryozuki> static void *
20:47 < bridge> <ryozuki> utf8_decode(void *buf, uint32_t *c, int *e)
20:47 < bridge> <ryozuki> {
20:47 < bridge> <ryozuki>     static const char lengths[] = {
20:47 < bridge> <ryozuki>         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
20:47 < bridge> <ryozuki>         0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 4, 0
20:47 < bridge> <ryozuki>     };
20:47 < bridge> <ryozuki>     static const int masks[]  = {0x00, 0x7f, 0x1f, 0x0f, 0x07};
20:47 < bridge> <ryozuki>     static const uint32_t mins[] = {4194304, 0, 128, 2048, 65536};
20:47 < bridge> <ryozuki>     static const int shiftc[] = {0, 18, 12, 6, 0};
20:47 < bridge> <ryozuki>     static const int shifte[] = {0, 6, 4, 2, 0};
20:47 < bridge> <ryozuki> 
20:47 < bridge> <ryozuki>     unsigned char *s = buf;
20:47 < bridge> <ryozuki>     int len = lengths[s[0] >> 3];
20:47 < bridge> <ryozuki> 
20:47 < bridge> <ryozuki>     /* Compute the pointer to the next character early so that the next
20:47 < bridge> <ryozuki>      * iteration can start working on the next character. Neither Clang
20:47 < bridge> <ryozuki>      * nor GCC figure out this reordering on their own.
20:47 < bridge> <ryozuki>      */
20:47 < bridge> <ryozuki>     unsigned char *next = s + len + !len;
20:47 < bridge> <ryozuki> 
20:47 < bridge> <ryozuki>     /* Assume a four-byte character and load four bytes. Unused bits are
20:47 < bridge> <ryozuki>      * shifted out.
20:47 < bridge> <ryozuki>      */
20:47 < bridge> <ryozuki>     *c  = (uint32_t)(s[0] & masks[len]) << 18;
20:47 < bridge> <ryozuki>     *c |= (uint32_t)(s[1] & 0x3f) << 12;
20:47 < bridge> <ryozuki>     *c |= (uint32_t)(s[2] & 0x3f) <<  6;
20:47 < bridge> <ryozuki>     *c |= (uint32_t)(s[3] & 0x3f) <<  0;
20:47 < bridge> <ryozuki>     *c >>= shiftc[len];
20:47 < bridge> <ryozuki> 
20:47 < bridge> <ryozuki> xd
20:48 < bridge> <learath2> It would need to be benched tbh
20:48 < bridge> <ryozuki> im sure this wins but yeah
20:48 < bridge> <ryozuki> do we even use a lut
20:48 < bridge> <zhn> he literally said this couple of times
20:48 < bridge> <ryozuki> brb going into a 24 man savage raid
20:48 < bridge> <learath2> Yeah this looks pretty cheap, I can't imagine anything branched outdoing this
20:49 < bridge> <learath2> Unless he literally said "I'm leaving because of X", you are speculating
20:49 < bridge> <ryozuki> https://nullprogram.com/blog/2017/10/06/
20:49 < bridge> <ryozuki> https://github.com/skeeto/scratch/blob/master/misc/utf8_branchless.c
20:58 < bridge> <zhn> https://github.com/ddnet/ddnet/pull/9010#issuecomment-2397316203 i think his point is pretty solid and understandable
21:00 < bridge> <learath2> He does not say why he won't have time for it in the foreseen future. Maybe he started a new job, maybe he has a new hobby. There is no point speculating
21:01 < bridge> <learath2> He was not fond of the pace upstream was moving at, and he does not have time for teeworlds. Those two things don't need to be in a causal relationship, they are things that can happen at the same time
21:03 < bridge> <zhn> i don't see any reason to actually pull this up, you can ask him directly if you really want to know exact reasons of his leave, there's no point to start sophistic discussion
21:03 < bridge> <zhn> this comment makes it clear and if you want it to be more clear, again, ask him directly
21:03 < bridge> <learath2> You are the one that made a claim. I don't particularly care why he doesn't currently have time for teeworlds. He doesn't have time that's all that matters to me
21:03 < bridge> <learath2> You can go ask if you are curious
21:04 < bridge> <zhn> so you started this polemic just to argue?
21:05 < bridge> <learath2> I just wanted to point out to bystanders that what you said has no basis in any statement made by them
21:06 < bridge> <zhn> he's none of president to make official messages to the tee world but okey xd
21:07 < bridge> <learath2> As I said, I don't care. You are the one that just pulled that reason out of thin air to fit your obvious bias
21:07 < bridge> <zhn> i could see this kind of strict semantics applied only in jurisprudence
21:08 < bridge> <learath2> What I do know is we can't expect them to fix that issue, so someone else will have to do it
21:50 < bridge> <kollpotato> developer drama is getting as hot as the testing one
22:06 < bridge> <zhn> there's no drama, only two men disputing manly :gigachad:
22:16 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1331734184816807997/Gh38CkpW0AApOy1.png?ex=6792b19c&is=6791601c&hm=d33a2888e9ad4267aef8a77bd3f2ed9c3b366289bd2b72b0fccf7845df424a4d&
22:19 < bridge> <milkeeycat> @jxsl13 look what they did to him
22:19 < bridge> <jxsl13> they are the real haters
22:19 < bridge> <zhn> LOL
22:20 < bridge> <chillerdragon> He posted on ddnet github why he stops contributing and is not happy.
22:22 < bridge> <zhn> as lerato said he has to make it clear with statement like "i leave because X", any other phrasing doesn't make it clear and it is just assumptions and speculations
22:43 < bridge> <kebscs> "Considering #7777 I have no plan to put effort in fixing DDNet stuff" is pretty clear to me and i agree with him
22:43 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/7777
23:04 < bridge> <zhn> you are speculating :troll:
23:04 < bridge> <zhn> ok trollmode off
23:04 < bridge> <zhn> this one is said without any sarcasm tho
