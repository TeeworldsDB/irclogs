01:13 < bridge> [ddnet] <Astramast> @deen so what did u think about adding pvp tab with vanilla modes ctf tdm dm...
01:13 < bridge> [ddnet] <Astramast> Bcd new ddnet steam comers dont know that they exist
01:14 < bridge> [ddnet] <Astramast> @deen so what did u think about adding pvp tab with vanilla modes ctf tdm dm... And others
02:33 < bridge> [ddnet] <WAV> i know that they exist
03:24 < bridge> [ddnet] <Souly> pro
09:48 < bridge> [ddnet] <Astramast> no u dont
11:09 < bridge> [ddnet] <TsFreddie> ok, I know why my macos is compiling `external/pnglite/VERSION` now
11:10 < bridge> [ddnet] <TsFreddie> i'm using a case-insensitive apfs, macossdk tries to include <version> then it just found `external/pnglite/version`
11:20 < bridge> [ddnet] <TsFreddie> adding a `BEFORE` in `target_include_directories` when using bundled libs fixed it.
11:22 < bridge> [ddnet] <TsFreddie> not sure if it is right way tho
11:45 < bridge> [ddnet] <afterfx> Hey Devs, i bought a raspberry pi 3b yesterday and wanted to install a nas-sys and run tw beside. Do you think that the raspi 3b is good enough to run both task at the same time ?
11:47 < bridge> [ddnet] <afterfx> i wanna run surely the native ver of ddnet client
11:57 < bridge> [ddnet] <Jupstar âœª> just test it out, it should run, but maybe not good
13:03 < bridge> [ddnet] <deen> Don't like it much, I'm not a big fan of pvp mods and think they are not so fun long-term. Also a tab makes no sense, since pvp is not a project
13:03 < bridge> [ddnet] <deen> like DDNet or KoG
13:04 < bridge> [ddnet] <Jupstar âœª> add community, put noby fng and kog there
13:05 < bridge> [ddnet] <Jupstar âœª> but everything thats hosted by ddnet can stay in ddnet
13:18 < bridge> [ddnet] <TsFreddie> Internet tab is plenty enough tbh
13:20 < bridge> [ddnet] <Jupstar âœª> not untrue, official server are highlighted anyway ðŸ˜„
13:21 < bridge> [ddnet] <Jupstar âœª> with https master servers especially ðŸ˜„
13:22 < bridge> [ddnet] <TsFreddie> but I should change my repo name I guess
13:22 < bridge> [ddnet] <TsFreddie> https://cdn.discordapp.com/attachments/293493549758939136/844173106772049940/Screenshot_20210518-192133__01.jpg
13:22 < bridge> [ddnet] <TsFreddie> :kek:
13:29 < bridge> [ddnet] <Jupstar âœª> lets create PVPNet.tw
13:38 < bridge> [ddnet] <Nouaa> why this shit tell me player.h does not exist when he exist :c
13:38 < bridge> [ddnet] <Nouaa> https://cdn.discordapp.com/attachments/293493549758939136/844177144580931584/unknown.png
13:38 < bridge> [ddnet] <Nouaa> i try on local and that work, only in my vps
13:39 < bridge> [ddnet] <Nouaa> i tried on local and that work, i have this shit only in my vps
13:40 < bridge> [ddnet] <TsFreddie> player entity. interesting
13:40 < bridge> [ddnet] <Ryozuki> did u clone with submodules
13:41 < bridge> [ddnet] <Nouaa> yeah i tried to move it but that doesn't work
14:09 < bridge> [ddnet] <Learath2> Do random things until it works is my favourite approach to debugging aswell
14:23 < bridge> [ddnet] <Jupstar âœª> dont buy ur compiler on wish
14:28 < bridge> [ddnet] <deen> did you or why?
14:29 < bridge> [ddnet] <Jupstar âœª> no bcs he cant compile with his vps XD
14:30 < bridge> [ddnet] <Jupstar âœª> the joke behind it is, that things from wish are always low quality xD
15:53 < bridge> [ddnet] <TsFreddie> when i was moving in US, i hired some helpers, and one of them asked me if i can get them something on wish.
15:53 < bridge> [ddnet] <TsFreddie> didn't know what wish was at the time tho.
17:00 < bridge> [ddnet] <heinrich5991> @Nouaa is there a player.h in src/game/server/entities/?
17:01 < bridge> [ddnet] <heinrich5991> by default there's only one in src/game/server/
17:01 < bridge> [ddnet] <Nouaa> ye i know
17:02 < bridge> [ddnet] <Nouaa> I just did shit because I hadn't slept
17:35 < bridge> [ddnet] <Nouaa> someone can explain this shit? same code but on local and vps not the same result
17:35 < bridge> [ddnet] <Nouaa> https://cdn.discordapp.com/attachments/293493549758939136/844236663857348658/2021-05-18_17-33-21.mp4
17:35 < bridge> [ddnet] <Learath2> smells like undefined behaviour
17:35 < bridge> [ddnet] <Jupstar âœª> compiled with signed char?
17:35 < bridge> [ddnet] <Jupstar âœª> on arm char isnt signed
17:36 < bridge> [ddnet] <Jupstar âœª> -fsigned-char
17:37 < bridge> [ddnet] <deen> has anyone run ddnet server on arm yet?
17:37 < bridge> [ddnet] <deen> might find some bugs with it
17:38 < bridge> [ddnet] <Jupstar âœª> i ran it on android
17:38 < bridge> [ddnet] <Jupstar âœª> but worked fine and the toolchain also uses signed char there
17:38 < bridge> [ddnet] <Jupstar âœª> ah but only client
17:38 < bridge> [ddnet] <Jupstar âœª> thought he uses client anyway ðŸ˜„
17:43 < bridge> [ddnet] <Jupstar âœª> but we still have alignment issues anyway, but i think they are mostly deadly for floats, and they were only in vote options
17:43 < bridge> [ddnet] <Jupstar âœª> so might not be too critical
17:43 < bridge> [ddnet] <Jupstar âœª> atleast on arm32 its deadly
17:44 < bridge> [ddnet] <Learath2> do we really have alignment issues left? thought we cleaned up ubsan
17:44 < bridge> [ddnet] <Jupstar âœª> in server i think so
17:44 < bridge> [ddnet] <Jupstar âœª> client should be fine
17:44 < bridge> [ddnet] <Jupstar âœª> there is still issues with destructors tho
17:45 < bridge> [ddnet] <Jupstar âœª> soon in 20 years when tsfreddie rewrote all prediction code it might be solved xd
17:47 < bridge> [ddnet] <Jupstar âœª> `SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior ../src/game/server/gamecontext.cpp:2785:12 in 
17:47 < bridge> [ddnet] <Jupstar âœª> ../src/game/server/gamecontext.cpp:2785:12: runtime error: load of misaligned address 0x63100001488f for type 'CVoteOptionServer *', which requires 8 byte alignment
17:47 < bridge> [ddnet] <Jupstar âœª> 0x63100001488f: note: pointer points here`
17:47 < bridge> [ddnet] <Jupstar âœª> 
17:47 < bridge> [ddnet] <Jupstar âœª> @Learath2
17:52 < bridge> [ddnet] <Learath2> I bet that's the weird memheap implementation we use to keep these allocations in a block
17:52 < bridge> [ddnet] <Learath2> I'll add alignment support to it tonight
17:52 < bridge> [ddnet] <Learath2> Hopefully, idk, I woke up way too late today
17:52 < bridge> [ddnet] <heinrich5991> alternatively just align it to 8 bytes
17:52 < bridge> [ddnet] <heinrich5991> instead of passing alignment everywhere
17:52 < bridge> [ddnet] <heinrich5991> to pointer size
17:53 < bridge> [ddnet] <Learath2> Could do that too, but why waste space?
17:53 < bridge> [ddnet] <Learath2> I guess byte lifes don't matter to you young folk
17:55 < bridge> [ddnet] <heinrich5991> I feel like this is applying the optimization at the wrong place
17:55 < bridge> [ddnet] <Jupstar âœª> just remove these heaps xD
17:55 < bridge> [ddnet] <Jupstar âœª> just use normal allocations
17:55 < bridge> [ddnet] <Learath2> Tbf with modern arena allocators this would work fairly well
17:56 < bridge> [ddnet] <Learath2> Actually no, it might end up in different bins. So we should probably put it in a vector instead
17:56 < bridge> [ddnet] <Learath2> We iterate thru it a lot
17:57 < bridge> [ddnet] <Learath2> Point was that not every type requires max alignment
17:57 < bridge> [ddnet] <heinrich5991> yes. malloc also always returns maximum alignment
17:59 < bridge> [ddnet] <Learath2> Because malloc needs to stay generic and support decades of C  cruft.
17:59 < bridge> [ddnet] <Learath2> Modern allocators with an std::allocator interface correctly take and utilize alignment
17:59 < bridge> [ddnet] <Jupstar âœª> use whatever fits
18:00 < bridge> [ddnet] <Jupstar âœª> still better than own implementations that always make trouble xD
18:00 < bridge> [ddnet] <heinrich5991> @Learath2 I guess you could make it a template argument, then it's not harder to pass
18:00 < bridge> [ddnet] <heinrich5991> ah no, the usage doesn't line up with that
18:00 < bridge> [ddnet] <Learath2> That is what I was planning, but I didnt look at the code yet. Putting it in a vector might be much easier
18:01 < bridge> [ddnet] <heinrich5991> the usage is for structs that are larger than they actually are
18:01 < bridge> [ddnet] <heinrich5991> i.e. ones that have dynamic data at the end, usually strings
18:01 < bridge> [ddnet] <heinrich5991> I think consumers expect the pointers to remain stable
18:01 < bridge> [ddnet] <Learath2> We have flexible array members??
18:01 < bridge> [ddnet] <heinrich5991> yes
18:02 < bridge> [ddnet] <heinrich5991> https://github.com/ddnet/ddnet/blob/c6c0c1dc2d9b0c4c6264959b5af55da238b8727e/src/engine/shared/network_conn.cpp#L137
18:02 < bridge> [ddnet] <Learath2> I love how matricks coded these
18:03 < bridge> [ddnet] <Learath2> we've only messed his nice memory layout out since we all started messing around with it
18:03 < bridge> [ddnet] <Learath2> s\/out/up
18:04 < bridge> [ddnet] <Learath2> anyway, I'll do it however you prefer I do it, I honestly don't have the energy to argue anything
18:05 < bridge> [ddnet] <Learath2> If you prefer I get rid of the flexible array member and shove it in a vector I'll do that
18:05 < bridge> [ddnet] <Learath2> If you prefer I align everything to max alignment I'm also fine with that
18:05 < bridge> [ddnet] <heinrich5991> do it how you like it, I don't htink there's much new usage of these classes
18:56 < bridge> [ddnet] <Jupstar âœª> @heinrich5991 sadly on windows dbg_curl doesnt seem to show the verbosity it does on linux
18:56 < bridge> [ddnet] <Jupstar âœª> person checked dbg_curl was 1
23:14 < bridge> [ddnet] <Ryozuki> @Learath2 i found something interesitng
23:14 < bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/844322082880094228/pcZs7.png
23:14 < bridge> [ddnet] <Ryozuki> https://stackoverflow.com/questions/34548762/c-isnt-that-hard-void-f
23:15 < bridge> [ddnet] <Ryozuki> its actually a thing http://c-faq.com/decl/spiral.anderson.html
23:16 < bridge> [ddnet] <Comrade> this is not flexible array member
23:16 < bridge> [ddnet] <Comrade> ```cpp
23:16 < bridge> [ddnet] <Comrade> class CNetChunkResend
23:16 < bridge> [ddnet] <Comrade> {
23:16 < bridge> [ddnet] <Comrade> public:
23:16 < bridge> [ddnet] <Comrade>     int m_Flags;
23:16 < bridge> [ddnet] <Comrade>     int m_DataSize;
23:16 < bridge> [ddnet] <Comrade>     unsigned char *m_pData;
23:16 < bridge> [ddnet] <Comrade> 
23:16 < bridge> [ddnet] <Comrade>     int m_Sequence;
23:16 < bridge> [ddnet] <Comrade>     int64 m_LastSendTime;
23:16 < bridge> [ddnet] <Comrade>     int64 m_FirstSendTime;
23:16 < bridge> [ddnet] <Comrade> };
23:16 < bridge> [ddnet] <Comrade> ```
23:16 < bridge> [ddnet] <Comrade> this is flexible array member, but it's not supported in C++
23:16 < bridge> [ddnet] <Comrade> ```cpp
23:16 < bridge> [ddnet] <Comrade> class CNetChunkResend
23:16 < bridge> [ddnet] <Comrade> {
23:16 < bridge> [ddnet] <Comrade> public:
23:16 < bridge> [ddnet] <Comrade>     int m_Flags;
23:16 < bridge> [ddnet] <Comrade>     int m_DataSize;
23:16 < bridge> [ddnet] <Comrade> 
23:16 < bridge> [ddnet] <Comrade>     int m_Sequence;
23:17 < bridge> [ddnet] <Comrade>     int64 m_LastSendTime;
23:17 < bridge> [ddnet] <Comrade>     int64 m_FirstSendTime;
23:17 < bridge> [ddnet] <Comrade> 
23:17 < bridge> [ddnet] <Comrade>     unsigned char m_data[];
23:17 < bridge> [ddnet] <Comrade> };
23:17 < bridge> [ddnet] <Comrade> ```
23:17 < bridge> [ddnet] <Comrade> ðŸ™‚
23:19 < bridge> [ddnet] <Jupstar âœª> u can just malloc any type and run new over it tho
23:19 < bridge> [ddnet] <Jupstar âœª> so unsigned char* m_data;
23:19 < bridge> [ddnet] <Jupstar âœª> any size*
23:19 < bridge> [ddnet] <Jupstar âœª> and for simple structs ofc without constructing
23:20 < bridge> [ddnet] <Comrade> yes, but that fake flexible array member wastes 4/8 bytes on that unnecessary pointer
23:20 < bridge> [ddnet] <Jupstar âœª> well u can just use uint8_t
23:20 < bridge> [ddnet] <Jupstar âœª> i mean in the end its just binary work
23:21 < bridge> [ddnet] <Comrade> single byte pointer?
23:21 < bridge> [ddnet] <Jupstar âœª> you just want an address of the starting pointer
23:21 < bridge> [ddnet] <Jupstar âœª> rest doesnt really matter as you define how tall your struct is
23:22 < bridge> [ddnet] <Jupstar âœª> so &m_data
23:22 < bridge> [ddnet] <Comrade> what about
23:22 < bridge> [ddnet] <Comrade> ```cpp
23:22 < bridge> [ddnet] <Comrade> class CNetChunkResend
23:22 < bridge> [ddnet] <Comrade> {
23:22 < bridge> [ddnet] <Comrade> public:
23:22 < bridge> [ddnet] <Comrade>     int m_Flags;
23:22 < bridge> [ddnet] <Comrade>     int m_DataSize;
23:22 < bridge> [ddnet] <Comrade> 
23:22 < bridge> [ddnet] <Comrade>     int m_Sequence;
23:22 < bridge> [ddnet] <Comrade>     int64 m_LastSendTime;
23:22 < bridge> [ddnet] <Comrade>     int64 m_FirstSendTime;
23:22 < bridge> [ddnet] <Comrade> 
23:22 < bridge> [ddnet] <Comrade>     unsigned char m_data[1];
23:22 < bridge> [ddnet] <Comrade> };
23:22 < bridge> [ddnet] <Comrade> ```
23:22 < bridge> [ddnet] <Comrade> emulating flexible array member in C++
23:22 < bridge> [ddnet] <Jupstar âœª> yeah
23:22 < bridge> [ddnet] <Comrade> ah so you meant this
23:22 < bridge> [ddnet] <Jupstar âœª> pointers of arrays are still the beginning of pointers i c++
23:22 < bridge> [ddnet] <Jupstar âœª> so yeah
23:23 < bridge> [ddnet] <Jupstar âœª> doesnt really matter how it looks like, u just need the start address ðŸ˜„
23:23 < bridge> [ddnet] <Comrade> yes
23:23 < bridge> [ddnet] <Jupstar âœª> *beginning of array
