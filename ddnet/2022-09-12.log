00:00 <+bridge> [ddnet] <heinrich5991> if only one parser failed the input, the security vulnerability would likely not exist there
00:00 <+bridge> [ddnet] <Ryozuki> i see
00:00 <+bridge> [ddnet] <Ryozuki> but it was already at fault
00:00 <+bridge> [ddnet] <Ryozuki> the one who wrote that packet
00:00 <+bridge> [ddnet] <Ryozuki> i guess this is just to have a predictible outcome
00:01 <+bridge> [ddnet] <Ryozuki> i guess this is just to have a predictable outcome
00:01 <+bridge> [ddnet] <heinrich5991> yes, predictable is very good for security-related stuff
00:01 <+bridge> [ddnet] <heinrich5991> fail-fast for unexpected input is also good
00:01 <+bridge> [ddnet] <heinrich5991> e.g. there have been real-life HTTP request smuggling vulnerabilities due to this first-last thing
00:02 <+bridge> [ddnet] <heinrich5991> the Content-Length header dictates how many of the bytes following the headers are intended to be the body
00:02 <+bridge> [ddnet] <heinrich5991> you have a HTTP reverse-proxy in front of your application server
00:03 <+bridge> [ddnet] <heinrich5991> that maybe sets a "Original-IP-Address" header
00:03 <+bridge> [ddnet] <heinrich5991> the reverse-proxy interprets the first Content-Length header and the application server the last one
00:04 <+bridge> [ddnet] <Ryozuki> hm
00:04 <+bridge> [ddnet] <Ryozuki> i think content-length doesnt include headers right?
00:04 <+bridge> [ddnet] <heinrich5991> then you send a request like this:
00:04 <+bridge> [ddnet] <heinrich5991> ```
00:04 <+bridge> [ddnet] <heinrich5991> POST / HTTP/1.0
00:04 <+bridge> [ddnet] <heinrich5991> Content-Length: 128
00:04 <+bridge> [ddnet] <heinrich5991> Content-Length: 0
00:04 <+bridge> [ddnet] <heinrich5991> 
00:04 <+bridge> [ddnet] <heinrich5991> GET /secret/path/that/only/localhost/is/allowed/to/access
00:04 <+bridge> [ddnet] <heinrich5991> Original-IP-Address: 127.0.0.1
00:04 <+bridge> [ddnet] <heinrich5991> 
00:05 <+bridge> [ddnet] <heinrich5991> ```
00:05 <+bridge> [ddnet] <Ryozuki> but i get what u mean
00:05 <+bridge> [ddnet] <Ryozuki> ah
00:05 <+bridge> [ddnet] <Ryozuki> i see
00:06 <+bridge> [ddnet] <Ryozuki> http://pn./
00:06 <+bridge> [ddnet] <Ryozuki> look this website
00:06 <+bridge> [ddnet] <Ryozuki> xD
00:06 <+bridge> [ddnet] <Ryozuki> https://jameswillia.ms/posts/shortest-urls.html
00:06 <+bridge> [ddnet] <heinrich5991> http://pn/
00:06 <+bridge> [ddnet] <heinrich5991> https://en.wikipedia.org/wiki/.pn
00:07 <+bridge> [ddnet] <Ryozuki> it needs the dot
00:07 <+bridge> [ddnet] <heinrich5991> not for me
00:07 <+bridge> [ddnet] <Ryozuki> for me yes :o
00:07 <+bridge> [ddnet] <heinrich5991> you can also do https://www.google.com./ if you want ðŸ˜‰
00:07 <+bridge> [ddnet] <heinrich5991> the final dot only says that you want to have the global domain IIRC
00:07 <+bridge> [ddnet] <Ryozuki> doesnt: http://pn/
00:07 <+bridge> [ddnet] <Ryozuki> does: http://pn./
00:08 <+bridge> [ddnet] <Cellegen | RiH> :thonk: should I visit the website
00:08 <+bridge> [ddnet] <pilonpl> Probably depends on the web browser
00:08 <+bridge> [ddnet] <Ryozuki> https://www.icann.org/en/announcements/details/new-gtld-dotless-domain-names-prohibited-30-8-2013-en
00:08 <+bridge> [ddnet] <heinrich5991> yea, wanted to say that as well ^^
00:08 <+bridge> [ddnet] <heinrich5991> the link you posted
00:08 <+bridge> [ddnet] <pilonpl> No
00:09 <+bridge> [ddnet] <heinrich5991> it's harmless
00:09 <+bridge> [ddnet] <pilonpl> Random websites can't hurt you
00:09 <+bridge> [ddnet] <Cellegen | RiH> :thonk: so no?
00:09 <+bridge> [ddnet] <heinrich5991> they theoretically can, but this one doesn't
00:10 <+bridge> [ddnet] <pilonpl> Not worth it tho
00:10 <+bridge> [ddnet] <heinrich5991> @Cellegen | RiH saved you a click
00:10 <+bridge> [ddnet] <heinrich5991> https://cdn.discordapp.com/attachments/293493549758939136/1018644678213632040/unknown.png
00:10 <+bridge> [ddnet] <Cellegen | RiH> :feelsamazingman: who
00:10 <+bridge> [ddnet] <Cellegen | RiH> :feelsamazingman: whooo
00:11 <+bridge> [ddnet] <pilonpl> Very interesting, isn't it?
00:11 <+bridge> [ddnet] <Cellegen | RiH> meh, ddnet.tw still better :gigachad:
00:11 <+bridge> [ddnet] <Ryozuki> ddnet.org*
00:12 <+bridge> [ddnet] <heinrich5991> it seems we're still on ddnet.tw
00:12 <+bridge> [ddnet] <Ryozuki> ye xD
00:12 <+bridge> [ddnet] <Cellegen | RiH> good
00:12 <+bridge> [ddnet] <Ryozuki> wiki.ddnet.org
00:12 <+bridge> [ddnet] <Cellegen | RiH> keep it that way pls
00:12 <+bridge> [ddnet] <pilonpl> Org is only for non profits i think
00:12 <+bridge> [ddnet] <Ryozuki> nah
00:12 <+bridge> [ddnet] <Ryozuki> @pilonpl org is for open source projects
00:12 <+bridge> [ddnet] <Cellegen | RiH> don't change it nooo :nooooo:
00:12 <+bridge> [ddnet] <heinrich5991> https://en.wikipedia.org/wiki/.org
00:12 <+bridge> [ddnet] <Ryozuki> > . The domain was originally "intended as the miscellaneous TLD for organizations that didn't fit anywhere else."[1] It is commonly used by non-profit organizations, open-source projects, and communities, but is an open domain that can be used by anyone.
00:13 <+bridge> [ddnet] <heinrich5991> > The domain was originally "intended as the miscellaneous TLD for organizations that didn't fit anywhere else."[1] It is commonly used by non-profit organizations, open-source projects, and communities, but is an open domain that **can be used by anyone**.
00:13 <+bridge> [ddnet] <Ryozuki> thanks
00:13 <+bridge> [ddnet] <Ryozuki> :bluekitty:
00:13 <+bridge> [ddnet] <pilonpl> So it's for everyone
00:13 <+bridge> [ddnet] <heinrich5991> the argument against .tw is that we're dependent on taiwan being stable
00:13 <+bridge> [ddnet] <heinrich5991> .tw is for taiwan
00:13 <+bridge> [ddnet] <Cellegen | RiH> hm, teeworlds data will use .net domains in the future, we'll leave .tw for good
00:14 <+bridge> [ddnet] <pilonpl> Tw is for TeeWorlds obviously
00:14 <+bridge> [ddnet] <Cellegen | RiH> and as you mention it, this was the reason
00:14 <+bridge> [ddnet] <Cellegen | RiH> it's not always stable
00:15 <+bridge> [ddnet] <Cellegen | RiH> or should we just go to org domains too?
00:16 <+bridge> [ddnet] <heinrich5991> https://github.com/ddnet/ddnet/pull/5312
00:16 <+bridge> [ddnet] <Cellegen | RiH> I'll ask nexus about it, he's the one deciding on that
00:16 <+bridge> [ddnet] <heinrich5991> we're already in the process of moving ^^
00:16 <+bridge> [ddnet] <Ryozuki> yeah
00:16 <+bridge> [ddnet] <Ryozuki> its decided
00:17 <+bridge> [ddnet] <Ryozuki> <https://codedoc.ddnet.org/>
00:17 <+bridge> [ddnet] <Ryozuki> <https://wiki.ddnet.org/>
00:17 <+bridge> [ddnet] <Ryozuki> just missing the main one
00:17 <+bridge> [ddnet] <Cellegen | RiH> hm
00:18 <+bridge> [ddnet] <Cellegen | RiH> @NeXus whenever you read this ~
00:18 <+bridge> [ddnet] <Cellegen | RiH> @NeXus whenever you read this ^
00:19 <+bridge> [ddnet] <pilonpl> Why not use both
00:20 <+bridge> [ddnet] <Ryozuki> https://chadnauseam.com/coding/gamedev/automated-testing-in-bevy/
00:24 <+bridge> [ddnet] <deen> next ddnet release will be ddnet.org and then we will switch the website etc too
00:25 <+bridge> [ddnet] <Cellegen | RiH> :nooooo:
00:25 <+bridge> [ddnet] <Cellegen | RiH> bye bye ddnet.tw
00:25 <+bridge> [ddnet] <deen> it will just redirect to ddnet.org
00:25 <+bridge> [ddnet] <deen> so all old links keep working
00:27 <+bridge> [ddnet] <Cellegen | RiH> oh, then all good
00:27 <+bridge> [ddnet] <Cellegen | RiH> :feelsamazingman:
00:27 <+bridge> [ddnet] <Cellegen | RiH> :feelsamazingman:
07:37 <+bridge> [ddnet] <ReiTW> Was actually searching a good game engine Yesterday and found bevy
09:20 <+bridge> [ddnet] <Ryozuki> :BASED:
09:22 <+bridge> [ddnet] <ReiTW> there was another one, forgot the name
09:22 <+bridge> [ddnet] <ReiTW> I think it started by Fox.... smth
09:22 <+bridge> [ddnet] <ReiTW> it has an editor
09:25 <+bridge> [ddnet] <ReiTW> Fyrox
11:13 <+bridge> [ddnet] <Learath2> I can't seem to settle on how to make the new global bans thing. I want to make something generic enough that we stop having to bolt on different ways of interacting with the outside from the gameserver
11:13 <+bridge> [ddnet] <Ryozuki> Inter server comms
11:14 <+bridge> [ddnet] <Learath2> I was originally thinking a new protocol, but it made me feel like I was re-inventing the wheel
11:14 <+bridge> [ddnet] <Ryozuki> Imagine a server sharing the entire team state to another
11:14 <+bridge> [ddnet] <Ryozuki> And switching
11:14 <+bridge> [ddnet] <Ryozuki> When a ddos happens
11:14 <+bridge> [ddnet] <Learath2> I'm currently considering HTTP + SSE. With HTTP/2 persistent connections it wouldn't be too bad when I eventually want to hook the other direction up allowing servers to communicate with the hub
11:15 <+bridge> [ddnet] <Learath2> this makes another kind of DoS possible. You could hog the entire inter-server bus by just ddosing the servers as teams are switched one to the other
11:15 <+bridge> [ddnet] <Ryozuki> Why not ipv
11:15 <+bridge> [ddnet] <Ryozuki> Why not ipc
11:15 <+bridge> [ddnet] <Learath2> Sadly the state is large enough that this isn't feasible
11:15 <+bridge> [ddnet] <Ryozuki> Or grpc
11:16 <+bridge> [ddnet] <Learath2> I considered ipc too even directly shared memory, but with tiny amount of traffic on that bus I really didn't think it'd be worth it
11:17 <+bridge> [ddnet] <Ryozuki> Maybe just make the servers so a http request
11:17 <+bridge> [ddnet] <Ryozuki> On a json file
11:17 <+bridge> [ddnet] <Ryozuki> Every x mins
11:18 <+bridge> [ddnet] <Ryozuki> Most simple solution imho
11:18 <+bridge> [ddnet] <Learath2> On the leaf servers I'm thinking http over unix domain sockets, the spoke proxies and the hubs would communicate over http over tcp like normally
11:18 <+bridge> [ddnet] <Ryozuki> And then a post request to add a ban
11:19 <+bridge> [ddnet] <Learath2> Most simple but it's too slow, bans should go through immediately. And it also suffers from waste as the file is usually unchanged
11:19 <+bridge> [ddnet] <Learath2> I'm mostly unsure about the http part honestly
11:19 <+bridge> [ddnet] <Ryozuki> Http bloat
11:19 <+bridge> [ddnet] <Ryozuki> :BASED:
11:19 <+bridge> [ddnet] <Learath2> Should I bother with devising a proper protocol or is http good enough with the relatively small amount of traffic?
11:20 <+bridge> [ddnet] <Learath2> If it wasn't for http/2 persistent connections I think it'd be very wasteful given the server will want to communicate backwards too, but with persistent connections I think it's feasible enough
11:20 <+bridge> [ddnet] <Ryozuki> If you ask me whats most fun, a protocol, if you want to just get things done then http
11:20 <+bridge> [ddnet] <Ryozuki> I would go with fun
11:22 <+bridge> [ddnet] <Learath2> What is grpc btw?
11:22 <+bridge> [ddnet] <Learath2> I'm guessing it's rpc over some exotic protocol well suited for it?
11:22 <+bridge> [ddnet] <Ryozuki> gRPC is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment.
11:23 <+bridge> [ddnet] <Ryozuki> it uses http2
11:23 <+bridge> [ddnet] <Ryozuki> and doesnt work on browsers
11:23 <+bridge> [ddnet] <Ryozuki> its for apps
11:23 <+bridge> [ddnet] <Ryozuki> also uses protobuf
11:23 <+bridge> [ddnet] <Ryozuki> https://grpc.io/
11:23 <+bridge> [ddnet] <Learath2> ah they decided abusing http2 persistent connections were good enough for them
11:23 <+bridge> [ddnet] <Learath2> who am I to challange that ðŸ˜„
11:23 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1018814207359201340/unknown.png
11:24 <+bridge> [ddnet] <Ryozuki> yeah
11:24 <+bridge> [ddnet] <Learath2> Funnily enough this really looks like the final design I'm considering. So maybe I'm not that far off from a good solution
11:24 <+bridge> [ddnet] <Learath2> They just used protobuf instead of the json I'm thinking about
11:24 <+bridge> [ddnet] <Ryozuki> https://github.com/hyperium/tonic
11:24 <+bridge> [ddnet] <Ryozuki> for rust
11:25 <+bridge> [ddnet] <Ryozuki> protobuf is probs more perf
11:25 <+bridge> [ddnet] <Learath2> And I guess they do the streaming data better than the sse I'm thinking of
11:28 <+bridge> [ddnet] <Learath2> Seems they support json too. I might just use grpc instead of making it from scratch. Thanks, I was sure someone else solved this problem before
11:33 <+bridge> [ddnet] <Ryozuki> Would be cool to do this as a rust module @Learath2
11:33 <+bridge> [ddnet] <Ryozuki> :BASED:
11:33 <+bridge> [ddnet] <Ryozuki> And you have the lib i sent
11:33 <+bridge> [ddnet] <Ryozuki> Im sure in c++ u need to pull a big lib
11:33 <+bridge> [ddnet] <Ryozuki> :greenthing:
11:34 <+bridge> [ddnet] <Learath2> I think we need this quicker than @heinrich5991's rust stuff can be added to the client
11:35 <+bridge> [ddnet] <Learath2> I'm considering just using grpc-json though. With that I think I hope I can just use curl on gameservers
11:36 <+bridge> [ddnet] <Ryozuki> :Sadge:
11:39 <+bridge> [ddnet] <Learath2> I'm still in general pretty skeptical about generic async programming. It just feels so wrong to let some scheduler handle my threading ðŸ˜„
11:49 <+bridge> [ddnet] <Ryozuki> Just make ur async runtime 4head
11:57 <+bridge> [ddnet] <Learath2> The problem isnt that the runtimes arent good enough. The problem is that when it gets to the runtime a lot of information is already lost
11:58 <+bridge> [ddnet] <Learath2> Maybe a runtime with task tagging could be nice. E.g. tasks with same tags run on the same thread pinned on one core e.g.
12:53 <+bridge> [ddnet] <Ryozuki> Hmm
12:54 <+bridge> [ddnet] <Ryozuki> Why you want such fine grained control?
12:54 <+bridge> [ddnet] <Ryozuki> Maybe then dont use a async runtime
12:54 <+bridge> [ddnet] <Ryozuki> But an actor system
12:55 <+bridge> [ddnet] <Ryozuki> I think runtimes are p good at managing tasks
12:57 <+bridge> [ddnet] <Ryozuki> Well idk if an actor system can give more control
13:00 <+bridge> [ddnet] <Ryozuki> https://github.com/bastion-rs/bastion
13:02 <+bridge> [ddnet] <Learath2> Idk, sometimes you just know better than the runtime. The runtime can only know what is happening right now, you can also make predictions about the whole running duration of the program. Say you do a calculation that'll be necessary in a couple ms. If the result of that calculation and the task it's necessary for happens on different cores now you've lost locality which'll be slower
13:04 <+bridge> [ddnet] <Ryozuki> https://docs.rs/tokio/latest/tokio/task/fn.spawn_local.html
13:04 <+bridge> [ddnet] <Ryozuki> Maybe this helps?
13:11 <+bridge> [ddnet] <Ryozuki> I guess at some point runtimes have to so tradeoffs
13:11 <+bridge> [ddnet] <Ryozuki> The reality is that often you dont need such control imho
13:11 <+bridge> [ddnet] <Ryozuki> And i think tokio is rly perfomant rn
13:12 <+bridge> [ddnet] <Ryozuki> I guess at some point runtimes have to do tradeoffs
13:12 <+bridge> [ddnet] <Learath2> I guess the idea with runtimes is that you usually don't care for that much optimization
13:13 <+bridge> [ddnet] <Learath2> Which is true, unless you are doing some highly computational stuff you'll be bound by other things before you are bound by how efficiently you are using your cpu
13:13 <+bridge> [ddnet] <Ryozuki> I mean, im sure the tokio devs care
13:13 <+bridge> [ddnet] <Ryozuki> But i guess its more "general optimization" than a specific usecase one
13:13 <+bridge> [ddnet] <Learath2> Yeah, but they can only optimize for the generic case, it's hard to do general optimizations for a specific usecase
13:13 <+bridge> [ddnet] <Ryozuki> Yea
13:14 <+bridge> [ddnet] <Learath2> Especially when it can be insanely architecture dependent. Like the fact that on some architectures some cores have more FPUs and some cores share some amount of cache
13:14 <+bridge> [ddnet] <Ryozuki> If you use a modern linux, for example there is tokio-uring
13:16 <+bridge> [ddnet] <Ryozuki> ye
14:38 <+bridge> [ddnet] <Ryozuki> @Learath2 there is also this
14:38 <+bridge> [ddnet] <Ryozuki> https://docs.rs/tokio/latest/tokio/task/index.html#unconstrained
14:38 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1018863287464636437/unknown.png
16:03 <+bridge> [ddnet] <heinrich5991> @deen could you try https://github.com/ddnet/ddnet/pull/5599#issuecomment-1242691646 again? ðŸ™‚
16:18 <+bridge> [ddnet] <ReiTW> blurb
17:26 <+bridge> [ddnet] <deen> done
18:03 <+bridge> [ddnet] <Ryozuki> https://aeon.co/essays/ten-questions-about-the-hard-limits-of-human-intelligence
18:03 <+bridge> [ddnet] <Ryozuki> https://www.sdfo.org/gj/stories/flowersforalgernon.pdf
18:03 <+bridge> [ddnet] <Ryozuki> good reads
21:29 <+bridge> [ddnet] <ReiTW> @noby found smth better than your obfuscation
21:29 <+bridge> [ddnet] <ReiTW> https://cdn.discordapp.com/attachments/293493549758939136/1018966710818193468/unknown.png
21:30 <+bridge> [ddnet] <gerdoe> left-to-right arabic smh xd
21:31 <+bridge> [ddnet] <ReiTW> pmcrts
21:49 <+ChillerDragon> xd
22:30 <+bridge> [ddnet] <Cellegen | RiH> when arabic binary
22:32 <+bridge> [ddnet] <Arslan> I need help with this
22:32 <+bridge> [ddnet] <Arslan> https://cdn.discordapp.com/attachments/293493549758939136/1018982367710433360/WeChat_Image_20220912223019.jpg
22:34 <+bridge> [ddnet] <Chairn> read pinned message in #bugs
22:55 <+bridge> [ddnet] <sone> 3D Tee Clones still long way to go. I just thought it was cool (in active development with godot)
22:55 <+bridge> [ddnet] <sone> https://cdn.discordapp.com/attachments/293493549758939136/1018988220836483153/2022-09-12_23-47-53.m4v
22:59 <+bridge> [ddnet] <sone> 3D Tee Clones still long way to go. I just thought it was cool (in active development with godot)
22:59 <+bridge> [ddnet] <sone> https://cdn.discordapp.com/attachments/293493549758939136/1018989274500190288/new2discTeeClone.mp4
23:00 <+bridge> [ddnet] <sone> Easter Egg Guess the map ;D
23:01 <+bridge> [ddnet] <Cellegen | RiH> godot dev pog
23:01 <+bridge> [ddnet] <Cellegen | RiH> do you use premade assets (classes and such) to make the movement like this?
23:02 <+bridge> [ddnet] <sone> Nope xD
23:02 <+bridge> [ddnet] <Cellegen | RiH> all manual, damn
23:02 <+bridge> [ddnet] <Cellegen | RiH> anywhere to see the code if you allow?
23:03 <+bridge> [ddnet] <sone> sure lemme upload it to github in 10-15mins
23:13 <+bridge> [ddnet] <sone> here you go! https://github.com/osnesone/TeeClones
23:13 <+bridge> [ddnet] <Moyoi> I tried to do something similar, but it turned out that the control of the camera in 3d is too complicated to do basic movements like hammer hit or drag
23:13 <+bridge> [ddnet] <sone> I'll clean up the code tommor
23:17 <+bridge> [ddnet] <sone> Yes I remember you. It was pretty cool ngl but I am going in another direction. Not so much ddnet/ddrace style as fng/ctf style
