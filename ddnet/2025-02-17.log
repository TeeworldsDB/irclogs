00:23 < bridge> <davidlovesmath> oh yea and i like to make sure my games are safe and dont have any rce when posable
00:24 < bridge> <davidlovesmath> im mostly just a security minded gamer
00:24 < bridge> <davidlovesmath> who likes coding too
00:24 < bridge> <Ewan> then you should be looking for vulns in a windows build lol
00:24 < bridge> <Ewan> WSL is gonna yield terrible terrible FPS even if you compile it & manage to get smth on screen
00:24 < bridge> <Ewan> client side obv
00:24 < bridge> <davidlovesmath> yea true
00:25 < bridge> <davidlovesmath> isue is theres no instructsons to compile it on windows with anything that afl++ supports
00:27 < bridge> <davidlovesmath> eh its been over a hour and no new finds so i think im gonna stop it and look at the crashing inputs
00:27 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1340826842801770596/image.png?ex=67b3c5ce&is=67b2744e&hm=6549362de45eecb449a87f5adf788c9da7bdac8d0a0bcaec8b2fd85add87ce20&
00:28 < bridge> <learath2> The map format has looots of possible crashes. I don't think we found any dangerous ones. Hope you don't either. Still any crashes you find a fix is appreciated
00:44 < bridge> <hectavoxel> wait whats going on? is he trying to bruteforce ddnet into crashing for more bugfixes?
00:44 < bridge> <davidlovesmath> yea basicly
00:44 < bridge> <Ewan> it's fuzzing
00:44 < bridge> <Ewan> you should look it up
00:44 < bridge> <davidlovesmath> thats what fuzzing basicly is
00:44 < bridge> <Ewan> it's a field of testing
00:44 < bridge> <davidlovesmath> yea
00:44 < bridge> <hectavoxel> yea i know what fuzzing is
00:45 < bridge> <hectavoxel> i just opened chat and was wondering what it was for
00:45 < bridge> <davidlovesmath> mostly for fun but also for bug fixes
00:45 < bridge> <davidlovesmath> also burh why wont the minimisor work lol
00:45 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1340831490346455231/image.png?ex=67b3ca22&is=67b278a2&hm=487200473fd66e57a49e62313aefb725f652d5d61b846d772a4018096e6f3824&
00:47 < bridge> <kebscs> how does it work on a complicated app?
00:47 < bridge> <kebscs> tests every function?
00:48 < bridge> <davidlovesmath> im only testing the map loading funcson atm
01:40 < bridge> <davidlovesmath> too late. already found a heap buffer overflow
01:41 < bridge> <davidlovesmath> and a bunch of ones that result in ilegal instructsons though i have no clue why so no clue if they are dangerus
01:43 < bridge> <davidlovesmath> also the fact that its a heep buffer overflow not a stack one would make it harder to exsplote
01:46 < bridge> <davidlovesmath> though i did find a bunch of stack overflows due to recursion of "GetItem" calling "GetExternalItemType" calling "FindItemIndex" calling "GetItem" agien in a loop
01:51 < bridge> <davidlovesmath> im gonna investigate these bugs mabey make a poc for some of them and make a github isue
02:00 < bridge> <davidlovesmath> ok after checking all the crashes there are no stack buffer overflows (unless the ilegal instructsons are a result of one witch is quite likely id say but that seems to be in one of the librays so ASAN cant find the cause)
03:12 < bridge> <davidlovesmath> where do i put the maps my server should be able to load?
03:12 < bridge> <davidlovesmath> i want to test my maps but i need to conect to a server hosting them
03:17 < furo> @davidlovesmath Take a look at https://wiki.ddnet.org/wiki/LAN_Server So if you are on Linux, you would put them in `~/.local/share/ddnet/maps/`
03:17 < bridge> <davidlovesmath> thanks
03:21 < bridge> <davidlovesmath> huh im running the server on windows and theres no folder at "%appdata%\DDNet" and puting it in the maps folder of "%appdata%\Teeworlds" as well as in the auto folder inside that it doesnt let me load them with /map
03:21 < bridge> <davidlovesmath> in fact it doesnt let me load anything with /map
03:22 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1340870997154201721/image.png?ex=67b3eeed&is=67b29d6d&hm=ecb71059f211eb4ef27e5f0c05cf923052efd2b2573c08b4e40809ffb3e78056&
03:22 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1340870997477167134/image.png?ex=67b3eeed&is=67b29d6d&hm=e6a860ca42da86c3809b073b5c6b247e2b3a8e66b1a36e33d5dabb86f295dab6&
03:22 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1340871029450608660/image.png?ex=67b3eef5&is=67b29d75&hm=8c83fc5211d8eaffec6a513f0b849d6bcbf0895928eb841112cd615ba6d5eb8b&
03:30 < furo> Don't use `/map`. That command requires you to also have the map in your database. Use `change_map test` in rcon instead.
03:42 < bridge> <davidlovesmath> whats rcon?
03:44 < bridge> <davidlovesmath> ok looking into the illegal instructson it seems to just be a null pointer derefrence in msvcrt.dll at least on windows
03:44 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1340876613180723312/image.png?ex=67b3f428&is=67b2a2a8&hm=a8c59ad1a165b1b275cee3486dd9917894921d794fe0eacced246b78a1fe6cd4&
03:45 < furo> Rcon is the remote console. It allows you to configure and run commands on the server. It can be opened with F2 when connected to server. Login with the automatically generated password or set one yourself by using the guide I sent before.
03:46 < bridge> <davidlovesmath> ah thanks
03:47 < bridge> <davidlovesmath> bruh im out of disk space AGIEN???
03:47 < bridge> <davidlovesmath> i need to get a bigger hardrive
04:11 < bridge> <davidlovesmath> all in all it seems like none of the crashes are in and of themselfs exsplotable
04:11 < bridge> <davidlovesmath> theres no oob writes
07:08 < bridge> <meloƞ> https://cdn.discordapp.com/attachments/293493549758939136/1340927813917872170/Screenshot_20250217-070806.png?ex=67b423d8&is=67b2d258&hm=2856ba5af5bd8af0dbf8258c8b4e76cfc8f9833dce76431d45b83b819463d7d7&
07:08 < bridge> <meloƞ> Return of the king
07:15 < bridge> <pro_gaming1921> The Swedish king have returned
07:15 < bridge> <hectavoxel> no one quits ddnet forever
07:16 < bridge> <hectavoxel> once you touch it, it becomes a part of you
07:16 < bridge> <pro_gaming1921> https://cdn.discordapp.com/attachments/293493549758939136/1340929811450822666/image0.jpg?ex=67b425b4&is=67b2d434&hm=6db70623f3de0bb9ebd7c995184261460696de836cbfff0fcbeabbe4a94208eb&
07:16 < bridge> <pro_gaming1921> Agreed
07:41 < bridge> <hectavoxel> https://www.youtube.com/shorts/TYx5SgEGemc
07:42 < bridge> <hectavoxel> i wonder how possible this is for ddnet, or if it's any use
07:42 < bridge> <hectavoxel> im still wanting there to be color correction for maps
08:26 < bridge> <inv41idu53rn4m3> It's a neat approach, but in many cases needlessly expensive. You can do a lot of colour grading with a few simple math operations, as opposed to doing random access texture lookups (the image on the screen is a lot more random than smoothly increasing texture coordinates)
08:27 < bridge> <hectavoxel> yeah i guess so. 
08:27 < bridge> <hectavoxel> i need to make more concept art for update hypotheticals
08:27 < bridge> <hectavoxel> if i can't code it i can sure as hell make valid concepts for it
08:40 < bridge> <milkeeycat> @ryozuki this example panics :santatrollet: 
08:40 < bridge> <milkeeycat> ```
08:40 < bridge> <milkeeycat> mod foo {
08:40 < bridge> <milkeeycat>     pub fn main() -> i32 {
08:40 < bridge> <milkeeycat>         for (let mut n: i64 = 1; n <= undefined_var; n = n + 1) {
08:40 < bridge> <milkeeycat>             return 0;
08:40 < bridge> <milkeeycat>         }
08:40 < bridge> <milkeeycat>     }
08:40 < bridge> <milkeeycat> }
08:40 < bridge> <milkeeycat> ```
08:40 < bridge> <milkeeycat> @ryozuki this code example panics :santatrollet: 
08:40 < bridge> <milkeeycat> ```
08:40 < bridge> <milkeeycat> mod foo {
08:40 < bridge> <milkeeycat>     pub fn main() -> i32 {
08:40 < bridge> <milkeeycat>         for (let mut n: i64 = 1; n <= undefined_var; n = n + 1) {
08:41 < bridge> <milkeeycat>             return 0;
08:41 < bridge> <milkeeycat>         }
08:41 < bridge> <milkeeycat>     }
08:41 < bridge> <milkeeycat> }
08:41 < bridge> <milkeeycat> ```
08:41 < bridge> <ryozuki> xd
08:45 < bridge> <milkeeycat> Also i don't know if it's a feature or a bug:
08:45 < bridge> <milkeeycat> ```
08:45 < bridge> <milkeeycat> mod foo {
08:45 < bridge> <milkeeycat>     struct Owo {
08:45 < bridge> <milkeeycat>         field: i32
08:45 < bridge> <milkeeycat>     }
08:45 < bridge> <milkeeycat> 
08:45 < bridge> <milkeeycat>     pub fn main() -> i32 {
08:45 < bridge> <milkeeycat>         let owo: Owo = Owo {
08:45 < bridge> <milkeeycat>             field: 11,
08:45 < bridge> <milkeeycat>         };
08:45 < bridge> <milkeeycat>         let a: &Owo = &owo;
08:45 < bridge> <milkeeycat>         let b: &i32 = a as &i32;
08:45 < bridge> <milkeeycat> 
08:45 < bridge> <milkeeycat>         return *b;
08:45 < bridge> <milkeeycat>     }
08:45 < bridge> <milkeeycat> }
08:45 < bridge> <milkeeycat> ```
08:45 < bridge> <milkeeycat> I would call it a feature in my lang
08:45 < bridge> <ryozuki> kek
08:46 < bridge> <ryozuki> ye casts arent checked yet
08:46 < bridge> <milkeeycat> it's not possible to cast struct to integer, but it works with references
08:47 < bridge> <milkeeycat> 100% feature
08:50 < bridge> <teero777> hello mister compiler devs. Why does c++ force you to cast pointers? It's literally all the same type, a pointer
08:50 < bridge> <teero777> like wtf why do I need to cast stuff that's already the same thing
08:56 < bridge> <ryozuki> because when dereferencing it needs to know the target type
08:56 < bridge> <ryozuki> and align
08:56 < bridge> <ryozuki> etc
08:56 < bridge> <milkeeycat> you mean that you have to cast `uint8_t*` and `int32_t*` even though they are both of type pointer?
08:57 < bridge> <milkeeycat> i finally fixed my neovim after updating plugins 😬
09:02 < bridge> <Ewan> why would you not want this??
09:02 < bridge> <Ewan> I want to throw my Entire type system out the window as soon as I need to reference another object
09:03 < bridge> <Ewan> it is not the same type, a pointer is not a type
09:03 < bridge> <Ewan> a pointer is one of some mutations on a type
09:04 < bridge> <Ewan> though they are physically represented as memory addresses, thinking of pointers as “just numbers bro” is toxic thinking for API design
09:05 < bridge> <Ewan> and anything that requires you to actually keep track of objects over a span of places
09:06 < bridge> <Ewan> the reason void* is traditionally called *user data* when used by APIs for example is because this is a rare scenario where the type truly does not matter to the library and it can only be represented (with one overload) by a void* because it doesn’t know the type it will use
09:07 < bridge> <Ewan> you cannot use a template because that requires knowledge of the types at hand at compile time
10:00 < bridge> <ryozuki> fixed
10:01 < bridge> <teero777> Yea but imagine I'm doing `SomeClass *pIdk = pSomeParentClass`
10:06 < bridge> <teero777> Because it's annoying to cast to some long ass class name 3 times in the same line
10:06 < bridge> <teero777> In c it's not like this
10:13 < bridge> <ryozuki> @milkeeycat are u using rustowl
10:13 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1340974497523699732/image.png?ex=67b44f52&is=67b2fdd2&hm=e1a603714c4aa7991da03303a5d58ee4cca7d7ca43e4091c47e18baef4bafe30&
10:14 < bridge> <ryozuki> orange is a move
10:16 < bridge> <milkeeycat> I have borrow checker in my noodle
10:17 < bridge> <milkeeycat> and my liveness analysis algorithm is wrong, what a great day :feelsbadman:
10:38 < bridge> <avolicious> I saw rustowl just today in github trending 😄
10:38 < bridge> <avolicious> Already showed it to my colleagues
11:22 < bridge> <oxyzo.> :nouis:
11:38 < bridge> <ryozuki> fixed
11:38 < bridge> <ryozuki> also now i have intrinsics
11:38 < bridge> <ryozuki> ```rust
11:38 < bridge> <ryozuki>     #[intrinsic = "sizeof"]
11:38 < bridge> <ryozuki>     fn sizeof<T>() -> u64;
11:38 < bridge> <ryozuki> ```
11:38 < bridge> <ryozuki> ez
11:46 < bridge> <Assa> What is this code? Does this even work in C++? Shouldn't this be a dynamic cast?
11:48 < bridge> <milkeeycat> and i have mafs instructions 😏
11:59 < bridge> <teero777> the point is it doesn't
11:59 < bridge> <teero777> static and dynamic cast is literally useless its just for security afaik.
11:59 < bridge> <teero777> static, dynamic and reinterpret cast is literally useless its just for security afaik.
12:00 < bridge> <Assa> I have seen some very dirty helpers, like [auto_cast](https://stackoverflow.com/questions/4027604/c-c-automatically-cast-void-pointer-into-type-pointer-in-c-in-define-in-ca/4027734#4027734), if you're interested
12:00 < bridge> <Assa> I have seen some very dirty helpers, like [auto_cast](<https://stackoverflow.com/questions/4027604/c-c-automatically-cast-void-pointer-into-type-pointer-in-c-in-define-in-ca/4027734#4027734>), if you're interested
12:01 < bridge> <teero777> this is completely useless. why do pointers have a type?
12:01 < bridge> <Assa> just work on the void* if you don't want a type
12:02 < bridge> <Assa> here some memory chunk, now do operations on it
12:28 < bridge> <teero777> the pointer type shouldn't exist below the user level. Or is there any reason why
12:52 < bridge> <ryozuki> points dont have a type in llvm backend
12:52 < bridge> <ryozuki> they only need a type passed to GEP, the deref instruction
12:52 < bridge> <ryozuki> but type on pointers in c is more for type analisys
12:53 < bridge> <ryozuki> and to know what type to pass to gep
13:24 < bridge> <Assa> does anyone know where I can get the ["outdated" image](<https://github.com/ddnet/ddnet/blob/master/data/editor/front.png>) as standalone for the next tile?
13:25 < bridge> <Assa> @soulyvevo maybe?
13:29 < bridge> <Assa> hmm maybe I can image diff 3767eebead65d482a5666df145f368ef070ec2fd
13:59 < bridge> <learath2> What Ryozuki said, but also there is no guarantee that all types of pointers have the same representation. There have been architectures/implementations in the past where function pointers and object pointers are of different size. E.g. 8086 architecture comes to mind with it's segmented memory where you could have any combination of pointer sizes for object/function depending on the memory model you chose (at-least on MS-DOS)
14:01 < bridge> <learath2> What Ryozuki said, but also there is no guarantee that all types of pointers have the same representation. There have been architectures/implementations in the past where function pointers and object pointers are of different size. E.g. 8086 architecture comes to mind with its segmented memory where you could have any combination of pointer sizes for object/function depending on the memory model you chose (at-least on MS-DOS)
14:34 < bridge> <Assa> This is now the best I was able to come up with, still not perfect
14:34 < bridge> <Assa> https://cdn.discordapp.com/attachments/293493549758939136/1341040112636657775/outdated.png?ex=67b48c6e&is=67b33aee&hm=1759deecb1d48912f2ecd418f667941d8e1998ccd73972600e7ab083f403a63b&
15:01 < bridge> <Assa> I don't know
15:01 < bridge> <Assa> https://cdn.discordapp.com/attachments/293493549758939136/1341046895832731719/speedup.png?ex=67b492bf&is=67b3413f&hm=4a863f556d8532f876be1df623e6ffce837c4d53b45296a57e716a7293604865&
15:02 < bridge> <Assa> new speedup layer? The map testers said the old one was very annoying with the green shade, because it was hiding too much of the map behind it
15:03 < bridge> <Assa> other solution would be just removing the overlay from the editor, because speedtiles are marked by an arrow anyway
16:53 < bridge> <ifemboypig> [femboypig@archlinux ddnet-master]$ cmake -Bbuild \
16:53 < bridge> <ifemboypig>     -DUSE_SSP=OFF \
16:53 < bridge> <ifemboypig>     -DPREFER_BUNDLED_LIBS=ON \
16:53 < bridge> <ifemboypig>     -DCLIENT=OFF \
16:53 < bridge> <ifemboypig>     -DVIDEORECORDER=OFF \
16:53 < bridge> <ifemboypig>     -DWEBSOCKETS=OFF \
16:53 < bridge> <ifemboypig>     -DMYSQL=OFF \
16:53 < bridge> <ifemboypig>     -DAUTOUPDATE=OFF
16:53 < bridge> <ifemboypig> -- Could NOT find Crypto (missing: CRYPTO_LIBRARY CRYPTO_INCLUDEDIR) 
16:53 < bridge> <ifemboypig> -- Could NOT find Curl (missing: CURL_LIBRARY CURL_INCLUDEDIR) 
16:53 < bridge> <ifemboypig> -- Could NOT find Freetype (missing: FREETYPE_LIBRARY FREETYPE_INCLUDEDIR) 
16:53 < bridge> <ifemboypig> -- Could NOT find Ogg (missing: OGG_INCLUDEDIR) 
16:53 < bridge> <ifemboypig> -- Could NOT find Opus (missing: OPUS_INCLUDEDIR) 
16:53 < bridge> <ifemboypig> -- Could NOT find Opusfile (missing: OPUSFILE_LIBRARY OPUSFILE_INCLUDEDIR) 
16:53 < bridge> <ifemboypig> -- Could NOT find SDL2 (missing: SDL2_LIBRARY SDL2_INCLUDEDIR) 
16:53 < bridge> <ifemboypig> -- Could NOT find SQLite3 (missing: SQLite3_INCLUDEDIR SQLite3_LIBRARY) 
16:53 < bridge> <ifemboypig> CMake Error at cmake/FindSSP.cmake:15 (message):
16:53 < bridge> <ifemboypig>   could not find ssp paths
16:53 < bridge> <ifemboypig> Call Stack (most recent call first):
16:53 < bridge> <ifemboypig>   CMakeLists.txt:555 (find_package)
16:53 < bridge> <ifemboypig> 
16:53 < bridge> <ifemboypig> 
16:53 < bridge> <ifemboypig> -- Configuring incomplete, errors occurred!
16:53 < bridge> <ifemboypig> [femboypig@archlinux ddnet-master]$
16:53 < bridge> <ifemboypig> 
16:53 < bridge> <ifemboypig> what is it, help pls
16:54 < bridge> <meloƞ> In your project, open a terminal:
16:54 < bridge> <meloƞ> 
16:54 < bridge> <meloƞ> Git submodule update --init --recursive
16:54 < bridge> <meloƞ> And then try building again
16:54 < bridge> <ifemboypig> it is canceled due to the fact that my internet connection is 500-1000kb/s
16:55 < bridge> <meloƞ> The download the ddnet-libs folder manually and move it
16:55 < bridge> <ifemboypig> okey, I'll mention you if there are any problems, thank you.
17:02 < bridge> <teero777> @ifemboypig you can also install the dependencies systemwide if you want to. Did you read the readme?
17:02 < bridge> <teero777> `sudo pacman -S --needed base-devel cmake curl ffmpeg freetype2 git glew glslang gmock libnotify libpng opusfile python rust sdl2 spirv-tools sqlite vulkan-headers vulkan-icd-loader wavpack x264`
17:05 < bridge> <ifemboypig> i readed it
17:05 < bridge> <ifemboypig> I've done this before.
17:18 < bridge> <ryozuki> https://github.com/YS-L/flamelens
17:18 < bridge> <ifemboypig> hey, how to build ddnet for windows on linux?
17:19 < bridge> <ifemboypig> @teero777 @blaiszephyr helpmepls))
17:20 < bridge> <Jupstar ✪> "Cross-compiling on Linux to Windows x86/x86_64"
17:20 < bridge> <Jupstar ✪> Weird that you missed that after you read the readme
17:22 < bridge> <ifemboypig> Zz its default errors
17:22 < bridge> <ifemboypig> https://cdn.discordapp.com/attachments/293493549758939136/1341082415598403737/message.txt?ex=67b4b3d3&is=67b36253&hm=67577e02889385a42b79c43d11af1f8d99d206197b5f5ebb8952f8d0dfbdf504&
17:23 < bridge> <ifemboypig> I've seen it
17:26 < bridge> <Jupstar ✪> where did you get that line from?
17:26 < bridge> <Jupstar ✪> `BUILD_TESTING` is not an option afaik
17:27 < bridge> <Jupstar ✪> does fail too?
17:27 < bridge> <Jupstar ✪> 
17:27 < bridge> <Jupstar ✪> `cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/mingw64.toolchain`
17:27 < bridge> <ifemboypig> one second
17:28 < bridge> <ifemboypig> yes
17:28 < bridge> <ifemboypig> [femboypig@archlinux ddnet-master]$ cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/mingw64.toolchain
17:28 < bridge> <ifemboypig> -- Could NOT find Crypto (missing: CRYPTO_LIBRARY CRYPTO_INCLUDEDIR) 
17:28 < bridge> <ifemboypig> -- ******** DDNet ********
17:28 < bridge> <ifemboypig> -- Target OS: windows 
17:28 < bridge> <ifemboypig> -- Compiler: /usr/bin/x86_64-w64-mingw32-g++
17:28 < bridge> <ifemboypig> -- Rust version: rustc 1.84.1 (e71f9a9a9 2025-01-27) (Arch Linux rust 1:1.84.1-1)
17:28 < bridge> <ifemboypig> -- Build type: Release
17:28 < bridge> <ifemboypig> -- Dependencies:
17:28 < bridge> <ifemboypig> --  * Curl not found (using bundled version)
17:28 < bridge> <ifemboypig> --  * FFmpeg not found (using bundled version)
17:28 < bridge> <ifemboypig> --  * Freetype not found (using bundled version)
17:28 < bridge> <ifemboypig> --  * Git found
17:28 < bridge> <ifemboypig> --  * Glew not found (using bundled version)
17:28 < bridge> <ifemboypig> --  * GTest found
17:28 < bridge> <ifemboypig> --  * Ogg found
17:28 < bridge> <ifemboypig> --  * OpenSSL Crypto not found
17:28 < bridge> <ifemboypig> --  * Opus found
17:28 < bridge> <ifemboypig> --  * Opusfile not found (using bundled version)
17:28 < bridge> <ifemboypig> --  * PNG not found (using bundled version)
17:28 < bridge> <ifemboypig> --  * Python3 found
17:28 < bridge> <ifemboypig> --  * SDL2 not found (using bundled version)
17:28 < bridge> <ifemboypig> --  * SQLite3 not found (using bundled version)
17:29 < bridge> <ifemboypig> --  * Wavpack not found (using bundled version)
17:29 < bridge> <ifemboypig> --  * Zlib not found (using bundled version)
17:29 < bridge> <ifemboypig> --  * Vulkan not found (using bundled version)
17:29 < bridge> <ifemboypig> -- Configuring done (0.4s)
17:29 < bridge> <ifemboypig> CMake Error in CMakeLists.txt:
17:29 < bridge> <ifemboypig>   IMPORTED_IMPLIB not set for imported target "GTest::gtest" configuration
17:29 < bridge> <ifemboypig>   "Release".
17:29 < bridge> <ifemboypig> 
17:29 < bridge> <ifemboypig> 
17:29 < bridge> <Jupstar ✪> can you maybe remove `build` dir and try again just to be sure it's not smth else
17:29 < bridge> <ifemboypig> i tried to do this
17:29 < bridge> <ifemboypig> same.
17:29 < bridge> <Jupstar ✪> else this must be somehow related to the gtest version you use
17:29 < bridge> <Jupstar ✪> `-DDOWNLOAD_GTEST=ON` also won't work?
17:29 < bridge> <ifemboypig> +
17:30 < bridge> <Jupstar ✪> So previously u tried ON and OFF?
17:30 < bridge> <ifemboypig> no
17:30 < bridge> <ifemboypig> onemoment
17:31 < bridge> <ifemboypig> yo
17:31 < bridge> <ifemboypig> rm -rf build/ && cmake -Bbuild -DDOWNLOAD_GTEST=ON
17:31 < bridge> <ifemboypig> its work
17:31 < bridge> <ifemboypig> thanks
17:31 < bridge> <ifemboypig> thank you very much
17:32 < bridge> <ifemboypig> I thought -DOWNLOAD_GTEST=ON
17:33 < bridge> <Jupstar ✪> Well tbf, it should just work. So maybe gtest changed somehow and is incompatible now
17:33 < bridge> <Jupstar ✪> you can create an issue on github if you want, but maybe cross compile is too nieche rn
17:33 < bridge> <Jupstar ✪> you can create an issue on github if you want, but maybe cross compile is too niche rn
17:34 < bridge> <Jupstar ✪> well normally it's set to to ON for windows tho.. weird
17:40 < bridge> <soulyvevo> sry no idea
17:55 < bridge> <ifemboypig> it's compiled for linux
17:55 < bridge> <ifemboypig> Zz
17:55 < bridge> <ifemboypig> 💤
18:01 < bridge> <ifemboypig> huh, same
18:01 < bridge> <ifemboypig> https://cdn.discordapp.com/attachments/293493549758939136/1341092218433306636/message.txt?ex=67b4bcf5&is=67b36b75&hm=0438900e1a8a1b16c2a5b4e6e23783929de5dc4e1a7709377f770e3d10fcf1c5&
18:02 < bridge> <ifemboypig> I made a mistake compiling for Linux.
18:02 < bridge> <milkeeycat> ```rust
18:02 < bridge> <milkeeycat> mod vec {
18:02 < bridge> <milkeeycat>     extern fn malloc(size: u64) -> *mut u8;
18:02 < bridge> <milkeeycat>     extern fn realloc(ptr: *mut u8, size: u64) -> *mut u8;
18:02 < bridge> <milkeeycat> 
18:02 < bridge> <milkeeycat>     struct Vec<T> {
18:02 < bridge> <milkeeycat>         ptr: *mut T,
18:02 < bridge> <milkeeycat>         len: u64,
18:02 < bridge> <milkeeycat>         cap: u64,
18:02 < bridge> <milkeeycat>         // needed cuz missing sizeof instrinsic
18:02 < bridge> <milkeeycat>         type_size: u64,
18:02 < bridge> <milkeeycat>     }
18:02 < bridge> <milkeeycat> 
18:02 < bridge> <milkeeycat>     impl<T> Vec<T> {
18:02 < bridge> <milkeeycat>         pub fn new(&mut self, value: T) -> Vec<T> {
18:02 < bridge> <milkeeycat>             let vec: Vec<T> = Vec::<T> {
18:02 < bridge> <milkeeycat>                 ptr: malloc(type_size * 32) as *mut T,
18:02 < bridge> <milkeeycat>                 len: 0,
18:02 < bridge> <milkeeycat>                 cap: 32,
18:02 < bridge> <milkeeycat>                 type_size: type_size,
18:02 < bridge> <milkeeycat>             };
18:02 < bridge> <milkeeycat>             return vec;
18:02 < bridge> <milkeeycat>         }
18:02 < bridge> <milkeeycat>     }
18:02 < bridge> <milkeeycat> 
18:02 < bridge> <milkeeycat>     fn main() -> i32 {
18:02 < bridge> <milkeeycat>         let type_size: u64 = 4;
18:02 < bridge> <milkeeycat>         let mut vec: Vec<i32> = Vec::<i32>::new(type_size);
18:02 < bridge> <milkeeycat> 
18:02 < bridge> <milkeeycat>         return 0;
18:02 < bridge> <milkeeycat>     }
18:02 < bridge> <ryozuki> with a hashtag
18:03 < bridge> <ryozuki> see my latest pr
18:03 < bridge> <ryozuki> #
18:03 < bridge> <ryozuki> Vec::<i32>#new
18:03 < bridge> <ryozuki> also
18:03 < bridge> <ryozuki> if u use the last last pr
18:03 < bridge> <ryozuki> u can remove type_size
18:03 < bridge> <ryozuki> ```rust
18:03 < bridge> <ryozuki> mod vec {
18:03 < bridge> <ryozuki>     extern fn malloc(size: u64) -> *mut u8;
18:03 < bridge> <ryozuki>     extern fn realloc(ptr: *mut u8, size: u64) -> *mut u8;
18:03 < bridge> <ryozuki> 
18:03 < bridge> <ryozuki>     #[intrinsic = "sizeof"]
18:03 < bridge> <ryozuki>     fn sizeof<T>() -> u64;
18:03 < bridge> <ryozuki> 
18:03 < bridge> <ryozuki>     struct Vec<T> {
18:03 < bridge> <ryozuki>         ptr: *mut T,
18:03 < bridge> <ryozuki>         len: u64,
18:03 < bridge> <ryozuki>         cap: u64,
18:03 < bridge> <ryozuki>     }
18:03 < bridge> <ryozuki> 
18:03 < bridge> <ryozuki>     impl<T> Vec<T> {
18:03 < bridge> <ryozuki>         pub fn new(type_size: u64) -> Vec<T> {
18:03 < bridge> <ryozuki>             let vec: Vec<T> = Vec::<T> {
18:03 < bridge> <ryozuki>                 ptr: malloc(sizeof::<T>() * 32) as *mut T,
18:03 < bridge> <ryozuki>                 len: 0,
18:03 < bridge> <ryozuki>                 cap: 32,
18:03 < bridge> <ryozuki>             };
18:03 < bridge> <ryozuki>             return vec;
18:03 < bridge> <ryozuki>         }
18:04 < bridge> <ryozuki> 
18:04 < bridge> <ryozuki>         pub fn push(&mut self, value: T) {
18:04 < bridge> <ryozuki>             let type_size: u64 = sizeof::<T>();
18:04 < bridge> <ryozuki> 
18:04 < bridge> <ryozuki>             if self.len <= self.cap {
18:04 < bridge> <ryozuki>                 let new_cap: u64 = self.cap * 2;
18:04 < bridge> <ryozuki>                 self.ptr = realloc(self.ptr as *mut u8, type_size * new_cap) as *mut T;
18:04 < bridge> <ryozuki>                 self.cap = new_cap;
18:04 < bridge> <ryozuki> got intrinsics in
18:04 < bridge> <ryozuki> and assoc
18:05 < bridge> <ifemboypig> @jupeyy_keks
18:05 < bridge> <ryozuki> using :: there was ambigous
18:05 < bridge> <milkeeycat> That's cool, I didn't understand from where you got `type_size` in `new` fn
18:06 < bridge> <ifemboypig> rm -rf build/ && cmake -Bbuild \
18:06 < bridge> <ifemboypig>     -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/mingw64.toolchain \
18:06 < bridge> <ifemboypig>     -DDOWNLOAD_GTEST=OFF \
18:06 < bridge> <ifemboypig>     -DENABLE_TESTING=OFF \
18:06 < bridge> <ifemboypig>     -DCMAKE_DISABLE_FIND_PACKAGE_GTest=ON
18:06 < bridge> <ifemboypig> 
18:06 < bridge> <ifemboypig> it fixed it.
18:11 < bridge> <Jupstar ✪> yeah dunno, i have no experience with gtest, it'd create an issue on github
18:13 < bridge> <ryozuki> @milkeeycat i think next ill work on is probs enums
18:14 < bridge> <milkeeycat> and im going back to liveness analysis
18:14 < bridge> <ryozuki> i have to add a drop thing somewhen xd
18:14 < bridge> <milkeeycat> waiting for proc macros
18:15 < bridge> <ryozuki> there wont be
18:15 < bridge> <milkeeycat> any macros?
18:16 < bridge> <ryozuki> ```
18:16 < bridge> <ryozuki> 
18:16 < bridge> <ryozuki>     Enum, structs instead of classes
18:16 < bridge> <ryozuki>     Ad-hoc polymorphism via traits
18:16 < bridge> <ryozuki>     Parametric polymorphism via generics
18:16 < bridge> <ryozuki>     Expressions and statements rather than only expressions as in many functional languages
18:16 < bridge> <ryozuki>     Built-in dependency manager
18:16 < bridge> <ryozuki>     Built-in linter and formatter
18:16 < bridge> <ryozuki>     Built-in testing tooling
18:16 < bridge> <ryozuki>     Good compilation error messages
18:16 < bridge> <ryozuki>     Inmutability by default, optional mutability
18:16 < bridge> <ryozuki> 
18:16 < bridge> <ryozuki>     Linear type system rather than affine type system
18:16 < bridge> <ryozuki>     No lifetimes
18:16 < bridge> <ryozuki>     Simpler borrow checker
18:16 < bridge> <ryozuki>     Concurrency model. We provide a default runtime with green threads. There is no support for low-level primitives like atomics, mutex and OS threads.
18:16 < bridge> <ryozuki>     There is no Sync and Send traits. This implies that mutability can only happen inside the same process.
18:16 < bridge> <ryozuki>     No relationsihp between modules and files
18:16 < bridge> <ryozuki>     No circular dependencies in modules
18:16 < bridge> <ryozuki>     No macros
18:17 < bridge> <ryozuki>     At the beginning we won't support local type inference at function level. We might add it in the future.
18:17 < bridge> <ryozuki>     Financials decimal type and bigint type as part of the standard library
18:17 < bridge> <ryozuki>     Safe FFI
18:17 < bridge> <ryozuki>     Perfect replayability to be able to easily reproduce Heisenbugs
18:17 < bridge> <ryozuki>     We want to try to have bit-for-bit deterministic/reproducible builds from the beginning. This will be difficult to have but we will do our best.
18:17 < bridge> <ryozuki> 
18:17 < bridge> <ryozuki> ```
18:17 < bridge> <ryozuki> 
18:17 < bridge> <ryozuki> this is the goal list
18:17 < bridge> <ryozuki> > Linear type system rather than affine type system
18:17 < bridge> <ryozuki> is big
18:17 < bridge> <milkeeycat> ad-hoc polymorphism is function overloading?
18:18 < bridge> <ryozuki> via traits
18:18 < bridge> <ryozuki> its like rust iirc
18:18 < bridge> <ryozuki> > 
18:18 < bridge> <ryozuki> > 
18:18 < bridge> <ryozuki> > Implementing a trait involves providing an implementation of a behavior, which is type-specific and separate from other implementations ("ad hoc"), and which may be invoked with the same spelling at the call-site as other implementations ("polymorphic")
18:19 < bridge> <ryozuki> ```rust
18:19 < bridge> <ryozuki> trait Foo { fn foo(); }
18:19 < bridge> <ryozuki> impl Foo for X { ... }
18:19 < bridge> <ryozuki> impl Foo for Y { ... }
18:19 < bridge> <ryozuki> ```
18:19 < bridge> <ryozuki> https://stackoverflow.com/questions/63221632/is-this-understanding-correct-trait-and-function-overloading-both-achieved-ad-h
18:20 < bridge> <ryozuki> the only other lang with a borrow checker and a linear type system i know is  https://austral-lang.org/spec/spec.html
18:20 < bridge> <milkeeycat> every time i see word `polymorphic` i think it's some rocket science
18:20 < bridge> <ryozuki> rust type system is affine
18:20 < bridge> <ryozuki> xd
21:12 < bridge> <hectavoxel> finally made a place to properly discuss the UI for automapper inside of ddnet
21:12 < bridge> <hectavoxel> since people are interested
21:12 < bridge> <hectavoxel> https://github.com/VoxelDoesCode/ddnet/discussions/2
21:22 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1341142811923452025/Gj-yfkdWoAE4kkO.png?ex=67b4ec13&is=67b39a93&hm=3be288f3a4e09a99f59c065d8500df00517227a75f228f77e2e10d8b1da395cb&
21:22 < bridge> <fokkonaut> If people dont care enough, it might go unnoticed. Maybe open an issue in DDNet, or a link to it
21:24 < bridge> <hectavoxel> dont you think the issues tab is cluttered enough?
21:25 < bridge> <hectavoxel> rusl
21:25 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1341143450103582780/haskell.png?ex=67b4ecab&is=67b39b2b&hm=22f592e0c4c9be6bf1335af3210fb773f2c953fe9582d631ff382fcde16959ba&
21:25 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1341143500174921749/Golang.png?ex=67b4ecb7&is=67b39b37&hm=a7fe7f3eac24078c74dd269ecd51d7fb76b1c0be22d203978e32f08802dbef08&
21:25 < bridge> <ryozuki> https://github.com/SAWARATSUKI/KawaiiLogos
21:25 < bridge> <Assa> Very readable README
21:26 < bridge> <Assa> > 404 NotFound や 403 Forbidden,503 Service Unavailable などのレスポンスコードは
21:26 < bridge> <Assa> Stuff I understand 🥳
21:27 < bridge> <Assa> Took me a while to find the language options on top
21:30 < bridge> <ryozuki> https://vtuberlogos.alfon.dev/
21:30 < bridge> <ryozuki> wow
21:31 < bridge> <Assa> https://github.com/SAWARATSUKI/KawaiiLogos/blob/main/ResponseCode/418%20I'm%20a%20teapot.png
21:31 < bridge> <Assa> I am a Teepot, uses a mug
21:34 < bridge> <milkeeycat> @learath2 Just look at this beautiful assembly generated roughly for such C code:
21:34 < bridge> <milkeeycat> ```C
21:34 < bridge> <milkeeycat> int64_t main() {
21:34 < bridge> <milkeeycat>     int64_t a = 1 + 2;
21:34 < bridge> <milkeeycat>     int64_t b = 3 + 4;
21:34 < bridge> <milkeeycat>     return b - a;
21:34 < bridge> <milkeeycat> }
21:34 < bridge> <milkeeycat> ```
21:34 < bridge> <milkeeycat> ```x86asm
21:34 < bridge> <milkeeycat> .section .text
21:34 < bridge> <milkeeycat> .global main
21:34 < bridge> <milkeeycat> main:
21:34 < bridge> <milkeeycat> .L0:
21:34 < bridge> <milkeeycat>         mov r15, 1
21:34 < bridge> <milkeeycat>         add r15, 2
21:34 < bridge> <milkeeycat>         mov r14, 3
21:35 < bridge> <milkeeycat>         add r14, 4
21:35 < bridge> <milkeeycat>         mov rax, r14
21:35 < bridge> <milkeeycat>         sub rax, r15
21:35 < bridge> <milkeeycat>         ret
21:35 < bridge> <milkeeycat> ```
21:35 < bridge> <learath2> Wow, that actually looks pretty good
21:36 < bridge> <meloƞ> :pog:
21:37 < bridge> <milkeeycat> graph coloring looks so much better than my previous way of allocating registers xd
21:53 < bridge> <ryozuki> niceu
21:57 < bridge> <ryozuki> c moment
21:58 < bridge> <davidlovesmath> get ready for a few more
22:07 < bridge> <robyt3> Please don't open more issues about the map format unless you can create these maps with the DDNet client alone. As I said, I'm already working on adding checks and one issue "add all the checks" is enough as a reminder. Specific issue are only useful once we actually have a good coverage or if the bad map was created without using external tools. Otherwise more than 99.99% of possible map files currently crash. Last time I fuzzed I stopped after ar
22:08 < bridge> <davidlovesmath> ok  sorry
22:09 < bridge> <davidlovesmath> 😦
22:11 < bridge> <robyt3> no problem, thanks for your interest 🙂
22:12 < bridge> <davidlovesmath> so to be clear if i find something that is acsualy exsplotable you still dont want me to report it?
22:12 < bridge> <davidlovesmath> i havent yet but if i do
22:13 < bridge> <robyt3> if you find a write access with the map format then do report it
22:13 < bridge> <robyt3> AFAIK there shouldn't be any out of bounds writes
22:13 < bridge> <robyt3> But OOB reads are everywhere
22:14 < bridge> <davidlovesmath> indded
22:14 < bridge> <davidlovesmath> and a stack overflow
22:14 < bridge> <davidlovesmath> cant froget that
22:14 < bridge> <robyt3> Are there currently?
22:14 < bridge> <davidlovesmath> yes
22:16 < bridge> <robyt3> Stack overflows would also be bad, do you have a map file and confirmed that it's a stack overflow?
22:16 < bridge> <davidlovesmath> yes one sec let me find the one agien
22:19 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1341156973919469668/id000057sig11src000144time52016738execs1973046ophavocrep2?ex=67b4f944&is=67b3a7c4&hm=f6baff52b532142b6a194ea00cbe0f864405612ee30486fad963da19e5865a0e&
22:19 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1341157017305481296/image.png?ex=67b4f94e&is=67b3a7ce&hm=2d3bccc37b59a2bd05061ad4ac10f65e02d1a2eaa1a2a5b66f9928d1ad1d5d79&
22:19 < bridge> <davidlovesmath> https://cdn.discordapp.com/attachments/293493549758939136/1341157099748720702/image.png?ex=67b4f962&is=67b3a7e2&hm=a046d1e6405dbe21a03aa535fcee2184761c9afc4ed2518e52d1793ffe43bfd1&
22:19 < bridge> <davidlovesmath> recurson baby
22:19 < bridge> <davidlovesmath> @robyt3
22:20 < bridge> <robyt3> oh, guess I didn't find that in Teeworlds because it doesn't have UUID-based map items
22:21 < bridge> <davidlovesmath> im gonna be honist i fail to see how its exsplotable
22:21 < bridge> <davidlovesmath> with all the return adresses overiting the stack instead of our data
22:21 < bridge> <davidlovesmath> well in additson to our data
22:21 < bridge> <robyt3> ah, so it's a map with an loop in the data
22:22 < bridge> <davidlovesmath> from what i can tell yes
22:22 < bridge> <davidlovesmath> thats my best guss anyways
22:22 < bridge> <davidlovesmath> as all outer crashes involving that funcson (so most of them) happen after only 1 call
22:23 < bridge> <davidlovesmath> so can you exsplane how this would be more exsplotable?
22:25 < bridge> <robyt3> I'm not sure if it potentially is, haven't looked deeply into it. Should generally be hard to exploit due to randomized address space I think
22:25 < bridge> <davidlovesmath> yea but some of the dependencys dont have alsr
22:25 < bridge> <davidlovesmath> namely libwinpthread-1.dll and zlib1.dll
22:26 < bridge> <davidlovesmath> and yes thouse are both loaded in normal gameplay
22:27 < bridge> <davidlovesmath> so if you can get full contual over the stack pointer and bellow it then it shouldnt be too hard to make a rop chain right?
22:27 < bridge> <davidlovesmath> the verson on steam at least doesnt have stack canarys
22:29 < bridge> <davidlovesmath> would it not?
22:31 < bridge> <robyt3> I'm not an expert on this, but all stack overflows should be fixed
22:32 < bridge> <davidlovesmath> the main chalange as far as i can tell is getting the funcsons to acsualy return
22:47 < bridge> <davidlovesmath> so do you want me to report it or no @robyt3
23:01 < bridge> <robyt3> yeah, I guess you can create an issue for it
23:02 < bridge> <davidlovesmath> ok
23:05 < bridge> <hola_44375> hello
23:07 < bridge> <-StormAx> wait \
23:07 < bridge> <-StormAx> WRONG BRANCH
23:07 < bridge> <-StormAx> wait
23:13 < bridge> <davidlovesmath> done
23:32 < bridge> <davidlovesmath> want me to make reports of any networking bugs i find or no to that too
23:56 < bridge> <robyt3> yes, but if you find a way to crash the server or something like that then reporting it privately in admin-mail would be better (#✉-create-a-ticket)
23:56 < bridge> <davidlovesmath> ok
