00:16 <+bridge> [ddnet] <Nouaa> why you (admins dev) removed the blue color of BW mod? I remember that before BW have blue like DDrace mod
00:26 <+bridge> [ddnet] <Learath2> blue? you sure you werent searching for BW?
00:26 <+bridge> [ddnet] <Learath2> I don't think gamemodes have color
01:00 <+bridge> [ddnet] <fokkonaut> @Learath2 ? :D
01:01 <+bridge> [ddnet] <Learath2> uh, I've had a little too much to drink to check on this but remind me tomorrow and I promise I'll make time for it
01:01 <+bridge> [ddnet] <fokkonaut> sure :D
01:02 <+bridge> [ddnet] <fokkonaut> have a good time tho
01:02 <+bridge> [ddnet] <fokkonaut> 🥳
01:15 <+bridge> [ddnet] <Nouaa> yes im sure :WeirdChamp:
01:15 <+bridge> [ddnet] <Nouaa> https://cdn.discordapp.com/attachments/293493549758939136/826595573725134878/unknown.png
01:16 <+bridge> [ddnet] <Nouaa> with this version BW mod is blue in the list, why not readd it
01:16 <+bridge> [ddnet] <fokkonaut> ye got removed due to incompability
01:16 <+bridge> [ddnet] <Nouaa> ha
01:16 <+bridge> [ddnet] <fokkonaut> bw got changed and has their own entities
01:17 <+bridge> [ddnet] <fokkonaut> thats why it got removed again
01:17 <+bridge> [ddnet] <Nouaa> put in green, maybe that work <a:pogfish:782976886292611086>
01:17 <+bridge> [ddnet] <Learath2> Uhm, do we color ddnet servers blue really?
01:17 <+bridge> [ddnet] <fokkonaut> yea, ddnet servers are blue and other modes have their own color, but everything uncommon is white
01:17 <+bridge> [ddnet] <fokkonaut> and i think thats okay, i think BW can stay like that
01:18 <+bridge> [ddnet] <Nouaa> the appearance does not change anything
01:18 <+bridge> [ddnet] <fokkonaut> then it can stay white
01:19 <+bridge> [ddnet] <fokkonaut> imagine using someone else's mod, renaming it to BW and then complaining that its white
01:19 <+bridge> [ddnet] <fokkonaut> (definitely not referring to you using F-DDrace as BW)
01:19 <+bridge> [ddnet] <Nouaa> :monkaS:
01:19 <+bridge> [ddnet] <Learath2> this is one part of the code I have never seen, so weird
01:20 <+bridge> [ddnet] <fokkonaut> same xD
01:20 <+bridge> [ddnet] <Nouaa> I already told you that I had changed it
01:20 <+bridge> [ddnet] <Learath2> all that time spent rewriting the serverbrowser code to get it to work with http and I didn't see us coloring gamemodes once
01:20 <+bridge> [ddnet] <Nouaa> but if you want trash talk me in dm about suicide or other shit like that..
01:20 <+bridge> [ddnet] <fokkonaut> didnt see that the last day i checked
01:21 <+bridge> [ddnet] <Nouaa> he is down
01:21 <+bridge> [ddnet] <fokkonaut> better like that
01:21 <+bridge> [ddnet] <fokkonaut> xD
01:21 <+bridge> [ddnet] <Nouaa> funny
01:21 <+bridge> [ddnet] <fokkonaut> ikr
01:22 <+bridge> [ddnet] <fokkonaut> https://github.com/ddnet/ddnet/blob/master/src/game/client/components/menus_browser.cpp#L429-L454
01:22 <+bridge> [ddnet] <Nouaa> my god
01:22 <+bridge> [ddnet] <Nouaa> k wait
01:22 <+bridge> [ddnet] <fokkonaut> not yours
01:22 <+bridge> [ddnet] <Nouaa> ha
01:22 <+bridge> [ddnet] <Nouaa> sry
01:23 <+bridge> [ddnet] <fokkonaut> np i think he forgives you
01:29 <+bridge> [ddnet] <Souly> :troll:
10:27 <+bridge> [freenode] <kamillentee[m]> What is the reason why one cannot bug through killls sideways?
10:27 <+bridge> [freenode] <kamillentee[m]> Except for ninja
10:42 <+bridge> [ddnet] <Jupstar ✪> you need to be as fast as around 50 tiles per second
10:45 <+bridge> [ddnet] <Jupstar ✪> with killtiles even more, bcs bigger hitbox
10:52 <+bridge> [freenode] <kamillentee[m]> Sideways speed is limited I remember. If you are too fast you slow down again. So you cannot exceed the speed that is needed to bug through kills
10:53 <+bridge> [ddnet] <Jupstar ✪> i think the clamp is around 180 tiles per second
10:53 <+bridge> [ddnet] <Jupstar ✪> have u tried to just give you that acceleration? 😄
10:55 <+bridge> [freenode] <kamillentee[m]> That speed is fast enough to get through 52,5% of all kills when falling down but sideways it always killed me
10:56 <+bridge> [ddnet] <Jupstar ✪> ok
10:58 <+bridge> [ddnet] <Learath2> I thought we settled that it depends on where the movement starts whether you skip thru a skippable tile or not
11:00 <+bridge> [ddnet] <Jupstar ✪> that also
11:00 <+bridge> [ddnet] <Jupstar ✪> anyway, the ground movement glitch with speedups is probs the same
11:00 <+bridge> [ddnet] <Jupstar ✪> it starts to glitch when you are too fast
11:01 <+bridge> [ddnet] <Jupstar ✪> e.g. it does only `m_Vel.x = m_Vel.x * RampValue;`
11:01 <+bridge> [ddnet] <Jupstar ✪> for the x value
11:01 <+bridge> [ddnet] <Jupstar ✪> i guess thats the problem
11:10 <+bridge> [ddnet] <Learath2> you mean the player not moving when going too fast?
11:10 <+bridge> [ddnet] <Jupstar ✪> yeah 😄
11:10 <+bridge> [ddnet] <Learath2> that's a result of the chosen ramp curve approaching 0 as v_x -> infinity
11:11 <+bridge> [ddnet] <Jupstar ✪> yeah and that happens before you get the speed to skip
11:12 <+bridge> [ddnet] <Learath2> hm, we should check sometime the actual amount of speed required and the speed cap
11:12 <+bridge> [ddnet] <Learath2> you just need to be moving faster than 1 tile per tick
11:12 <+bridge> [ddnet] <Jupstar ✪> with 50 tiles p second you can skip 1 tile, and kill tiles are more than 1 tile, but less then 2
11:12 <+bridge> [ddnet] <Jupstar ✪> with 50 tiles p second you can skip 1 tile, and kill tiles are more than 1 tile, but less than 2
11:13 <+bridge> [ddnet] <Learath2> mh I think kill tiles are less than a tile
11:13 <+bridge> [ddnet] <Jupstar ✪> freeze is exactly 1 tile
11:13 <+bridge> [ddnet] <Jupstar ✪> and kill tiles are bigger
11:13 <+bridge> [ddnet] <Learath2> I guess we have different definitions of "tile"
11:13 <+bridge> [ddnet] <Jupstar ✪> i mean the mid of the tee
11:13 <+bridge> [ddnet] <Jupstar ✪> if the mid moved 1 tile
11:14 <+bridge> [ddnet] <Jupstar ✪> and thats exactly happening in freeze
11:14 <+bridge> [ddnet] <Learath2> Yeah I see what you mean
11:33 <+bridge> [ddnet] <fokkonaut> When velramp*speed hits 75 and you keep adding velocity to it (e.g. by continuing to use jetpack on the x axis) that value will go down slowly again until reaching 0
11:33 <+bridge> [ddnet] <fokkonaut> kill tiles have extra range to avoid skipping them
11:34 <+bridge> [ddnet] <fokkonaut> only for characters*
11:34 <+bridge> [ddnet] <Learath2> Iirc the extra range was just a compatibility thing
11:34 <+bridge> [ddnet] <Jupstar ✪> the problem is, it depends on how you look at it:
11:34 <+bridge> [ddnet] <Jupstar ✪> e.g. do you say the tee has extra hitbox when hitting a kill tile, then the kill tile is just 1 tile as freeze
11:35 <+bridge> [ddnet] <Jupstar ✪> or do you say, i just choose the mid, and assume its always the visual distance
11:35 <+bridge> [ddnet] <fokkonaut> ye the tee has a larger hitbox for killtiles
11:35 <+bridge> [ddnet] <fokkonaut> Thats probably the best way to say it
11:35 <+bridge> [ddnet] <fokkonaut> And matches the code
12:59 <+bridge> [ddnet] <alien1344> So the reason kill tiles are so damn hard to edge is because they're designed to prevent skipping 😄 ... I did wonder if it was just because edging a kill tile should be somehow seen as harder or if there was another reason!
13:00 <+bridge> [ddnet] <Jupstar ✪> i think it was just random coding
13:00 <+bridge> [ddnet] <Jupstar ✪> like most of teeworlds xD
13:00 <+bridge> [ddnet] <Jupstar ✪> since kill tiles also exists in vanilla
13:00 <+bridge> [ddnet] <alien1344> Lol, its very interesting, i hope it doesn't change because i think kill tiles should be harder to edge... more to lose 🙂
13:01 <+bridge> [ddnet] <Jupstar ✪> i doubt old tiles ever get changed, its more likely someone adds a new kill tile, if ever needed :D, but i guess that also wont be the case so fast 😄
13:02 <+bridge> [ddnet] <alien1344> Yeah I don't see a need for it... A kill tile that has the same hitbox as the freeze tile, but then could be exploited if used incorrectly
13:02 <+bridge> [ddnet] <alien1344> Unless thats the purpose of it loool
13:02 <+bridge> [ddnet] <alien1344> The end of the map is just a line of kill tiles and a jetpack gun 😄
13:03 <+bridge> [ddnet] <alien1344> I suppose that transcends beyond Insane 5 stars, lol
13:14 <+bridge> [ddnet] <Learath2> If I recall correctly vanilla had fat kill tiles, then they changed collision on them. DDRace wanted to keep them fat
13:33 <+bridge> [ddnet] <Jupstar ✪> oh really? i used the kill tile collision code for fng and it looks to be the same as ddnet kill tiles
13:33 <+bridge> [ddnet] <Jupstar ✪> but didnt check 0.7 if they changed it there
13:41 <+bridge> [ddnet] <Jupstar ✪> can a discord admin mention https://wiki.ddnet.tw/wiki/FAQ in #questions , even if its uncomplete and probably nobody reads the channel description anyway xD
13:45 <+bridge> [ddnet] <Learath2> Added
14:19 <+bridge> [ddnet] <Ryozuki> @Learath2 are u  Learath2 on the wiki?
14:25 <+bridge> [ddnet] <Learath2> yes
14:25 <+bridge> [ddnet] <Jupstar ✪> he is Learath3, Learath2 was already in use
17:33 <+bridge> [ddnet] <ReiTW> https://cdn.discordapp.com/attachments/293493549758939136/826841654413623346/projectile.cpp
17:33 <+bridge> [ddnet] <ReiTW> lel discord is cool now
17:45 <+bridge> [ddnet] <louis> woah
17:49 <+bridge> [ddnet] <louis> https://cdn.discordapp.com/attachments/293493549758939136/826845780152811560/cpptest.cpp
18:46 <+ChillerDragon> oh yikes what happend to envelopes? Is there documentation on that?
20:27 <+bridge> [ddnet] <Patiga> ChillerDragon ah forgot to ping if you havent seen yet i rlsed a new twmap version 1 week ago or so, not backwards compatible tho
20:29 <+bridge> [ddnet] <Patiga> now the parser will now note the version (0.6-ddnet/0.7-teeworlds) that the map was in, so that it can save the map in the original version again
20:40 <+ChillerDragon> awesome thanks for the note @Patiga i should probably email sub ur repo and cool that u keep pushing updates
20:40 <+ChillerDragon> so when i try to move my quads it does some enevelops magic :/ i dont want to downgrade my client pls send brain on how to use the map editor
20:48 <+bridge> [ddnet] <Patiga> ah, oopsie
20:48 <+bridge> [ddnet] <Patiga> @Ryozuki i rlsed a new version of twmap btw ^^
20:48 <+bridge> [ddnet] <Ryozuki> nice
20:49 <+bridge> [ddnet] <Patiga> now it has some documentation
20:49 <+bridge> [ddnet] <Patiga> https://docs.rs/twmap/0.2.1/twmap/index.html
20:57 <+bridge> [ddnet] <Ryozuki> @Patiga clippy still returns a shitload of warnings :pepe_straight:
20:58 <+bridge> [ddnet] <Ryozuki> `.map_err(|err| InfoError::LicenseLength(err))?;`
20:58 <+bridge> [ddnet] <Ryozuki> cannbe `.map_err(InfoError::LicenseLength)?;`
20:58 <+bridge> [ddnet] <Ryozuki> and if u have to map so many errors u can always use thiserror
20:58 <+bridge> [ddnet] <Patiga> wdym?
20:58 <+bridge> [ddnet] <Ryozuki> anyway cargo clippy will help u make better code
20:59 <+bridge> [ddnet] <Patiga> thats nice, didnt know that
20:59 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
20:59 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/826893472735952987/unknown.png
20:59 <+bridge> [ddnet] <Ryozuki> @Patiga just do "cargo clean && cargo clippy"
20:59 <+bridge> [ddnet] <Ryozuki> and u will see all the suggestions
21:00 <+bridge> [ddnet] <Patiga> i think it didn't like some formatting decision which i liked
21:00 <+bridge> [ddnet] <Ryozuki> afaik clippy doesnt format anything and i rarely see it say something about formatting
21:01 <+bridge> [ddnet] <Ryozuki> btrw u can selectively disable warnings
21:01 <+bridge> [ddnet] <Patiga> i also still think that `Vec<_>` makes sense in that context, i don't wan't someone to get weird ideas in that process
21:01 <+bridge> [ddnet] <Ryozuki> u rly should use &[T]
21:01 <+bridge> [ddnet] <Patiga> why is that?
21:01 <+bridge> [ddnet] <Ryozuki> its the common practice
21:01 <+bridge> [ddnet] <Ryozuki> the vec also involves 1 more reference
21:01 <+bridge> [ddnet] <Ryozuki> as it says
21:02 <+bridge> [ddnet] <Ryozuki> > Requiring the argument to be of the specific size makes the function less useful for no benefit; slices in the form of &[T] or &str usually suffice and can be obtained from other types, too.
21:02 <+bridge> [ddnet] <Learath2> but that assumes you want the function to be more useful
21:02 <+bridge> [ddnet] <Patiga> i suppose common practice is a valid argument, the speed is rly insignificant, even if it has to follow one more pointer
21:02 <+bridge> [ddnet] <Ryozuki> it has no drawbacks
21:03 <+bridge> [ddnet] <Learath2> it makes the interface more ambiguous no?
21:03 <+bridge> [ddnet] <Ryozuki> no
21:03 <+bridge> [ddnet] <Patiga> > i don't wan't someone to get weird ideas in that process
21:03 <+bridge> [ddnet] <Ryozuki> nobody gets weird ideas
21:03 <+bridge> [ddnet] <Patiga> yea, that was my point
21:03 <+bridge> [ddnet] <Learath2> This way it'd only work with Vec based slices, what if you only want it to work as such?
21:03 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/826894605529645097/unknown.png
21:04 <+bridge> [ddnet] <Ryozuki> the vec derefs to &[T]
21:04 <+bridge> [ddnet] <Patiga> you are kinda avoiding our point here
21:04 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/826894796885983282/unknown.png
21:04 <+bridge> [ddnet] <Ryozuki> it is really not more ambiguous
21:05 <+bridge> [ddnet] <Learath2> Atleast in most other languages there is usually some benefit to having more specific interfaces
21:05 <+bridge> [ddnet] <Learath2> anyway, idk enough about this kind of rust technicalities so I'm not so sure
21:06 <+bridge> [ddnet] <Ryozuki> u are forcing the use of a owned value for no reason
21:06 <+bridge> [ddnet] <Ryozuki> imagine i have the items on a stack, they would be &[T]
21:06 <+bridge> [ddnet] <Ryozuki> now u are forcing me to put them on the heap
21:07 <+bridge> [ddnet] <Ryozuki> just because u think of "dont want weird ideas" and there is simply no weird ideas possible here
21:07 <+bridge> [ddnet] <Learath2> really? I thought it would just point to the stack?
21:07 <+bridge> [ddnet] <Ryozuki> why are u limiting others creativity
21:07 <+bridge> [ddnet] <Ryozuki> vec is owned
21:07 <+bridge> [ddnet] <Ryozuki> it will always be on the heap
21:07 <+bridge> [ddnet] <Learath2> ahh, I see what you mean I guess
21:07 <+bridge> [ddnet] <Ryozuki> The top part is the Vec struct, it contains a pointer to the head of the allocation in the heap, length and capacity.
21:08 <+bridge> [ddnet] <Patiga> ambiguous means that it gives more options
21:08 <+bridge> [ddnet] <Ryozuki> and there is nothing but
21:08 <+bridge> [ddnet] <Ryozuki> but it has no meaning here
21:08 <+bridge> [ddnet] <Ryozuki> constricting to a vec is not beneficial
21:08 <+bridge> [ddnet] <Ryozuki> in any way
21:09 <+bridge> [ddnet] <Patiga> nah, my point is that i do want to limit creativity, i don't want anyone to pass just a slice there, it should be owned. Such stuff should be done in the map editing phase, not the map saving phase
21:09 <+bridge> [ddnet] <Ryozuki> that way of thinking "weird ideas" may be good in python were u can pass whathever shit u want
21:09 <+bridge> [ddnet] <Learath2> Well that idk, but there are times you want to limit creativity, e.g. critical code where an untested code path getting called could have badbad results
21:09 <+bridge> [ddnet] <Ryozuki> but i think in rust u shouldnt be that worried
21:10 <+bridge> [ddnet] <Ryozuki> &[T] is totally safe
21:10 <+bridge> [ddnet] <Ryozuki> and rust makes sure that in any way u get this slice
21:10 <+bridge> [ddnet] <Ryozuki> u wont be able to modify it when its inside the function
21:10 <+bridge> [ddnet] <Patiga> I'm curious about your response on this statement @Ryozuki
21:11 <+bridge> [ddnet] <Ryozuki> my statement is that it is stupid
21:11 <+bridge> [ddnet] <Ryozuki> idk what to say here
21:12 <+bridge> [ddnet] <Ryozuki> but well u do u
21:14 <+bridge> [ddnet] <Patiga> That's not a good response. my statement was that this code restricts something that i don't want someone to do there. if someone would do stuff like that there, then they are doing smth wrong.
21:14 <+bridge> [ddnet] <Ryozuki> what you dont want someone to do??
21:15 <+bridge> [ddnet] <Ryozuki> not use their own container type??? well they can u just add the hassle of going from my type to a vector
21:15 <+bridge> [ddnet] <Ryozuki> it literally does nothing
21:15 <+bridge> [ddnet] <Ryozuki> its a bad practice
21:15 <+bridge> [ddnet] <Learath2> why are you like this man, your argument can stand on it's own, no need to call the other one stupid 😛
21:15 <+bridge> [ddnet] <Ryozuki> @Learath2 i feel no matter what i say nothing will changeh ere
21:15 <+bridge> [ddnet] <Ryozuki> brb
21:16 <+bridge> [ddnet] <Learath2> @Patiga well would the function be useful for doing something else?
21:17 <+bridge> [ddnet] <Patiga> stuff such as partially saving a map would be possible, note however that it is not in the public interface
21:20 <+bridge> [ddnet] <Patiga> why i don't want that to be possible is because such changes should be done before invoking the `save` method in the current design of the interface
21:22 <+bridge> [ddnet] <Ryozuki> im back
21:23 <+bridge> [ddnet] <Ryozuki> you are adding overhead for no reason thats all i have to say
21:23 <+bridge> [ddnet] <Ryozuki> have a good night
21:24 <+bridge> [ddnet] <Patiga> the overhead is = 0 since it does much more complex stuff like zlib compression/decompression
21:24 <+bridge> [ddnet] <Ryozuki> overhead to the programmer
21:26 <+bridge> [ddnet] <gerdoe> wish it didn't break anything i had done :justatest:
21:27 <+bridge> [ddnet] <Patiga> well it does break your code, but it hopefully makes the interface more comfortable
21:28 <+bridge> [ddnet] <Patiga> you dont need to pass the version everywhere
21:28 <+bridge> [ddnet] <Patiga> does it also break something else?
21:31 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/826901494905307158/unknown.png
21:31 <+bridge> [ddnet] <Ryozuki> https://rust-lang.github.io/api-guidelines/flexibility.html
21:35 <+bridge> [ddnet] <Patiga> let's not get back to the same arguments over and over again. more links don't convince more, if the counter argument works against the intent of the original one
21:35 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/826902659184590858/unknown.png
21:35 <+bridge> [ddnet] <Ryozuki> https://deterministic.space/elegant-apis-in-rust.html#use-conversion-traits
21:36 <+bridge> [ddnet] <Ryozuki> ur counter argument doesnt work
21:36 <+bridge> [ddnet] <Ryozuki> since its meaningless
21:36 <+bridge> [ddnet] <Ryozuki> you are not forcing anything here, you are just adding annoyiances
21:37 <+bridge> [ddnet] <Patiga> 1.
21:37 <+bridge> [ddnet] <Patiga> 2. this right now is not contributing anything to the conversation
21:37 <+bridge> [ddnet] <gerdoe> 0.2.1 is last one?
21:37 <+bridge> [ddnet] <Patiga> yea
21:37 <+bridge> [ddnet] <Ryozuki> yeah i can see this is meaningless
21:37 <+bridge> [ddnet] <Ryozuki> its a bit sad
21:37 <+bridge> [ddnet] <Patiga> rude
21:38 <+bridge> [ddnet] <gerdoe> looks like i used 0.2.1 for it
21:38 <+bridge> [ddnet] <gerdoe> so no breaks xd
21:38 <+bridge> [ddnet] <Ryozuki> i dont know where i am being rude
21:38 <+bridge> [ddnet] <Patiga> ah, you are right, i misread this one
21:38 <+bridge> [ddnet] <Patiga> sorry
21:39 <+bridge> [ddnet] <Patiga> nice ^^
21:46 <+bridge> [ddnet] <gerdoe> yeah, thanks for contributing
22:24 <+bridge> [ddnet] <Patiga> @Ryozuki fixed your issue: https://gitlab.com/Patiga/twmap/-/commit/4f5f03cc27f47e1a1ed43a2b0e718e092d3069e3
22:24 <+bridge> [ddnet] <Patiga> will do more clippy fixes later
22:26 <+bridge> [ddnet] <Patiga> will go to sleep for today though
22:26 <+bridge> [ddnet] <gerdoe> gn
22:26 <+bridge> [ddnet] <Patiga> gn :)
22:30 <+bridge> [ddnet] <Ryozuki> what made u change ur mind?
22:31 <+bridge> [ddnet] <Learath2> maybe he got scared of you 😛
22:31 <+bridge> [ddnet] <gerdoe> boo, ryozoozki is coming
22:34 <+bridge> [ddnet] <Ryozuki> @Patiga i can see you also use dynamic dispatch here (<https://gitlab.com/Patiga/twmap/-/blob/4f5f03cc27f47e1a1ed43a2b0e718e092d3069e3/src/datafile_save.rs#L98>) generally rust favors static dispatch
22:34 <+bridge> [ddnet] <Ryozuki> > This has a great upside: static dispatch allows function calls to be inlined because the callee is known at compile time, and inlining is the key to good optimization. Static dispatch is fast, but it comes at a tradeoff: ‘code bloat’, due to many copies of the same function existing in the binary, one for each type.
22:34 <+bridge> [ddnet] <Ryozuki> https://doc.rust-lang.org/1.8.0/book/trait-objects.html
22:34 <+bridge> [ddnet] <Ryozuki> this is how i did it in one of my libraries: <https://github.com/edg-l/sitewriter/blob/master/src/lib.rs#L127>
22:49 <+bridge> [ddnet] <Ryozuki> but well this doesnt matter much
22:50 <+bridge> [ddnet] <Ryozuki> :pepeH:
22:50 <+bridge> [ddnet] <Ryozuki> @Learath2 i found something interesting reading reddit
22:50 <+bridge> [ddnet] <Ryozuki> dynamic dispatch in rust is better than in c++
22:51 <+bridge> [ddnet] <Ryozuki> since in c++ it does sequential dereferencing and rust does parallel
22:51 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/826921743326904320/unknown.png
22:51 <+bridge> [ddnet] <Ryozuki> https://www.reddit.com/r/rust/comments/5y0mlq/exploring_dynamic_dispatch_in_rust/
22:52 <+bridge> [ddnet] <Ryozuki> > People often miss this incredibly important nuance. The reason why it matters so much is that CPUs tend to be pretty good at predicting a pointer dereference (and thus prefetching the data before it's needed) when they see it coming up, but they can't predict a two-layer deref nowhere near as well. So the way Rust does it is great for perf.
22:52 <+bridge> [ddnet] <Ryozuki> <a:aPES2_Insane:531555386453655582>
22:54 <+bridge> [ddnet] <Learath2> I'm not very familiar with dynamic dispatch at all, I don't use it often
22:54 <+bridge> [ddnet] <gerdoe> ryo is rust wizard
22:55 <+bridge> [ddnet] <Ryozuki> i think its the equivalent of c++ vtable stuff
22:55 <+bridge> [ddnet] <Ryozuki> > “A virtual method table (VMT),…, is a mechanism used in a programming language to support dynamic dispatch.”
22:55 <+bridge> [ddnet] <Ryozuki> xd
22:55 <+bridge> [ddnet] <Learath2> Yeah I know but I don't use it much, not enough to know different mechanisms of dynamic dispatch
22:56 <+bridge> [ddnet] <Ryozuki> :pepe_straight:
22:56 <+bridge> [ddnet] <Ryozuki> @Learath2 i read somewhere that the linux kernel implements their own vtable stuff xd https://lwn.net/Articles/444910/
22:56 <+bridge> [ddnet] <Ryozuki> in C
22:56 <+bridge> [ddnet] <Ryozuki> :PepeA:
22:57 <+bridge> [ddnet] <Ryozuki> im not there yet, there is stuff that i even have trouble understanding
22:57 <+bridge> [ddnet] <gerdoe> heinrich isn't as active as he was before :feelsbadman:
22:58 <+bridge> [ddnet] <gerdoe> on discord i mean
22:58 <+bridge> [ddnet] <Ryozuki> he must be busy
22:58 <+bridge> [ddnet] <Ryozuki> ah man
22:58 <+bridge> [ddnet] <Ryozuki> there was a rly good blog post
22:58 <+bridge> [ddnet] <Ryozuki> cant find it rn
22:58 <+bridge> [ddnet] <Learath2> yeah, I've done similar things too for a entity system prototype
23:00 <+bridge> [ddnet] <Ryozuki> @gerdoe https://rustyyato.github.io/type/system,type/families/2021/02/15/Type-Families-1.html
23:00 <+bridge> [ddnet] <Ryozuki> advanced stuff
23:00 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
23:01 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/826924115855147069/unknown.png
23:01 <+bridge> [ddnet] <Ryozuki> <https://www.reddit.com/r/rust/comments/ll9un4/generalizing_over_generics_in_rust_part_1_aka/>
23:01 <+bridge> [ddnet] <Ryozuki> xd
23:01 <+bridge> [ddnet] <gerdoe> dunctional programming in rust spectrum
23:01 <+bridge> [ddnet] <gerdoe> functional programming in rust spectrum
23:03 <+bridge> [ddnet] <Learath2> generic programming is quite tough to get right, I've seen so many bugs with mis-specialized templates in C++
23:04 <+ChillerDragon> aaaaarrg shit i still havent found out how to exit the envelops edit mode
23:04 <+ChillerDragon> it randomy activates
23:04 <+ChillerDragon> somebody has to know how this works
23:04 <+Ryozuki> ChillerDragon hi u are alive
23:04 <+Ryozuki> ChillerDragon btw i prefer actually irc over matrix
23:05 <+ChillerDragon> i prefer matrix but im used to irc
23:05 <+ChillerDragon> and not all irc channels i have i could get on my matrix
23:05 <+Ryozuki> why u prefer it
23:05 <+ChillerDragon> its not terminal
23:05 <+ChillerDragon> i mean i like terminal and all
23:05 <+Ryozuki> terminal best
23:05 <+ChillerDragon> but pictures and stuff
23:05 <+ChillerDragon> clicking with mouse
23:05 <+ChillerDragon> can be cool
23:05 <+Ryozuki> u can click with mouse in weechat
23:06 <+ChillerDragon> not on chats
23:06 <+Ryozuki> btw modern terminals can display images
23:06 <+ChillerDragon> yea
23:06 <+ChillerDragon> but u know
23:06 <+bridge> [ddnet] <gerdoe> ASCII images
23:06 <+ChillerDragon> i think element is pleasing to use
23:06 <+ChillerDragon> also device share and mobile stuff
23:06 <+ChillerDragon> i am looking forward to use element as my main chat tool
23:06 <+ChillerDragon> currently its not :/
23:07 <+ChillerDragon> so but arg
23:07 <+ChillerDragon> i looked through prs
23:07 <+ChillerDragon> i didnt map in a while
23:07 <+ChillerDragon> but thats a big change 
23:07 <+ChillerDragon> somebody has to know this big ass new feature
23:07 <+ChillerDragon> who r u?
23:07 <+ChillerDragon> where r u?
23:08 <+ChillerDragon> how can i move my quads
23:11 <+Ryozuki> ChillerDragon <https://cdn.noby.world/1617225051.png> kek
23:11 <+bridge> [freenode] <chillerdragon[m]> I FOUND IT
23:11 <+bridge> [freenode] <chillerdragon[m]> its ctrl+i
23:11 <+bridge> [freenode] <chillerdragon[m]> aka info mode
23:11 <+bridge> [freenode] <chillerdragon[m]> for how long has this stuff been there
23:11 <+bridge> [freenode] <chillerdragon[m]> dont tell me its vanilal xd
23:12 <+bridge> [freenode] <chillerdragon[m]> nice pictures u view in ur terminal
23:13 <+Ryozuki> xd
23:14 <+Ryozuki> ChillerDragon i found it due to this https://github.com/ranger/ranger
23:15 <+Ryozuki> https://cdn.noby.world/1617225336.png not bad actually
23:25 <+ChillerDragon> @Patiga btw due to this editor feature i messed up envelopes and thanks to ur tool i got get a git diff and properly revert all enevlope changes :)
23:25 <+ChillerDragon> "got get" can someone please kill me xd
23:26 <+ChillerDragon> t
23:45 <+ChillerDragon> yo Ryozuki how do i build a static rust release again? one that is ready to ship?
23:45 <+ChillerDragon> I tried ``cargo build --target x86_64-unknown-linux-musl --release``
23:53 <+Ryozuki> ChillerDragon that compiles against the musl libc
23:53 <+Ryozuki> which is good if u are compiling from a rly new linux
23:53 <+ChillerDragon> i cant get it to compile tho i miss some musl tool
23:53 <+Ryozuki> where do u plan to use ur program
23:53 <+ChillerDragon>   error occurred: Failed to find tool. Is `musl-gcc` installed?
23:54 <+ChillerDragon> on the github ci
23:54 <+Ryozuki> bruh
23:54 <+ChillerDragon> ?
23:54 <+Ryozuki> https://github.com/actions-rs
23:54 <+Ryozuki> https://github.com/actions-rs/cargo
23:54 <+Ryozuki> check this
23:54 <+ChillerDragon> so i should build from src?
23:54 <+Ryozuki> this installs everything you need
23:54 <+ChillerDragon> id prefer a binary release
23:54 <+Ryozuki> can you build it from water?
23:55 <+Ryozuki> idk what u mean here
23:55 <+ChillerDragon> the ci is slow enough already
23:55 <+ChillerDragon> i just want to create a release of twmap
23:55 <+ChillerDragon> that i can wget in my ci
23:55 <+Ryozuki> dude then do it urself
23:55 <+ChillerDragon> or everywhere actually
23:55 <+Ryozuki> compile it urself nobo
23:55 <+ChillerDragon> yes
23:55 <+ChillerDragon> thats what i ask how do i compile it? :D
23:55 <+Ryozuki> if tw map has some tools
23:55 <+Ryozuki> u can d o cargo install twmap
23:55 <+Ryozuki> iirc
23:56 <+ChillerDragon> well i mean ``cargo build --release`` builds a rls binary just fine
23:56 <+Ryozuki> omg
23:56 <+ChillerDragon> but its not really portable
23:56 <+Ryozuki> but if u wantto install it
23:56 <+Ryozuki> use
23:56 <+Ryozuki> "cargo install twmap"
23:56 <+ChillerDragon> whats the differenece?
23:56 <+ChillerDragon> install sounds like adding it to PATH 
23:56 <+Ryozuki> it builds it in release mode and adds it to ur path
23:56 <+ChillerDragon> ah ye
23:57 <+ChillerDragon> the thing is that release mode is still dynamically linked and might fail on other systems than mine
23:57 <+Ryozuki> no it is not
23:57 <+Ryozuki> rust is statically linked
23:57 <+ChillerDragon> ah ok cool
23:57 <+Ryozuki> but
23:57 <+ChillerDragon> then i rememberd it wrong
23:57 <+Ryozuki> it may fail
23:57 <+Ryozuki> if the libc is older
23:57 <+Ryozuki> than the one u compiled with
23:57 <+ChillerDragon> hrm
23:58 <+Ryozuki> are u planning on distributing it?
23:58 <+ChillerDragon> @Patiga when do a proper official binary rls
23:58 <+Ryozuki> u shouldnt care about this
23:58 <+ChillerDragon> Ryozuki: i just slap it on my vps and use it for ci now
23:58 <+ChillerDragon> if it werks it werks i guess
23:58 <+ChillerDragon> lemme give it a try
23:58 <+Ryozuki> compile it from ur vps
23:58 <+ChillerDragon> the vps doesnt run it
23:59 <+ChillerDragon> its github actions
23:59 <+ChillerDragon> oh but u mean cuz my vps has old libc?
23:59 <+Ryozuki> omg
23:59 <+Ryozuki> compile it where u want to use it
23:59 <+Ryozuki> its the easiest way
23:59 <+ChillerDragon> hmm i see
