00:22 < ws-client> <ChillerDragon> @ryozuki yes mestalin had another name: xush
00:25 < bridge> <jxsl13> meskalin?
00:25 < bridge> <jxsl13> üëÄ
00:26 < bridge> <jxsl13> botox?
00:26 < ws-client> <ChillerDragon> https://zillyhuhn.com/cs/.1743031577.png
00:26 < bridge> <Solly (bun bun)> wait what???
00:26 < bridge> <Solly (bun bun)> why is freezehammer being removed
00:26 < ws-client> <ChillerDragon> ddnet is no fun zone
00:27 < bridge> <Solly (bun bun)> b-but
00:27 < ws-client> <ChillerDragon> admins abused it to cheat shorter freeze times
00:27 < bridge> <Solly (bun bun)> what?
00:27 < ws-client> <ChillerDragon> jk
00:27 < bridge> <Solly (bun bun)> lets remove invinsible
00:27 < bridge> <Solly (bun bun)> aswell then ):
00:27 < ws-client> <ChillerDragon> we never had that
00:27 < bridge> <jxsl13> let's remove admins
00:27 < bridge> <jxsl13> üëÄ
00:27 < bridge> <Solly (bun bun)> f3
00:28 < ws-client> <ChillerDragon> yes admins are the worst
00:28 < bridge> <jxsl13> got 'em
00:29 < bridge> <Solly (bun bun)> @chillerdragon btw uhmm
00:29 < bridge> <Solly (bun bun)> with ddnet-insta you cant control much about ammo even with grenade
00:29 < bridge> <Solly (bun bun)> i cant figure out how to make greande regen instantly or have infinate ammo
00:29 < bridge> <Solly (bun bun)> and all the other weapons dont get any args
00:29 < bridge> <Solly (bun bun)> also shouldnt they be tunes
00:29 < bridge> <jxsl13> now ban them, admins! attack!
00:29 < bridge> <jxsl13> :kek:
00:30 < bridge> <jxsl13> gn8
02:31 < bridge> <kebscs> in demos, is g_Config.m_ClDummy always 0?
11:21 < bridge> <ryozuki> @learath2 any clue why my macos build fails to compile
11:21 < bridge> <ryozuki> on stuff like the std
11:21 < bridge> <ryozuki> /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.2.sdk/usr/include/c++/v1/cmath:597:15
11:24 < bridge> <ryozuki> ```
11:24 < bridge> <ryozuki> /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.2.sdk/usr/include/c++/v1/cwctype:59:5: error: <cwctype> tried including <wctype.h> but didn't find libc++'s <wctype.h> header.           This usually means that your header search paths are not configured properly.           The header search paths should contain the C++ Standard Library headers before           any C Standard Library, and you are probably 
11:24 < bridge> <ryozuki>    59 | #   error <cwctype> tried including <wctype.h> but didn't find libc++'s <wctype.h> header. \
11:24 < bridge> <ryozuki>       |     ^
11:24 < bridge> <ryozuki> ```
11:24 < bridge> <ryozuki> i hate macos
11:28 < bridge> <ryozuki> wtf
11:28 < bridge> <ryozuki> `sudo xcode-select -s /Library/Developer/CommandLineTools`
11:28 < bridge> <ryozuki> fixed it
11:37 < bridge> <ryozuki> @jupeyy_keks i got this idk why
11:37 < bridge> <ryozuki> 
11:37 < bridge> <ryozuki> ```
11:37 < bridge> <ryozuki> 2025-03-27 11:36:31 I vulkan: no compatible driver found. Vulkan 1.1 is required.
11:37 < bridge> <ryozuki> 2025-03-27 11:36:31 I vulkan: vulkan warning: Creating instance failed.
11:37 < bridge> <ryozuki> 2025-03-27 11:36:31 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:37 < bridge> <ryozuki> 2025-03-27 11:36:31 I gfx: Created OpenGL 3.0 context.
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: unable to create graphic context: Failed creating OpenGL context at version requested
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: Created OpenGL 2.1 context.
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I opengl: Vendor string: Apple
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I opengl: Version string: 2.1 Metal - 89.3
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: GPU vendor: Apple
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: GPU renderer: Apple M3 Pro
11:37 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: GPU version: 2.1 Metal - 89.3
11:38 < bridge> <ryozuki> ```
11:38 < bridge> <ryozuki> i got the red popup saying failed
11:38 < bridge> <ryozuki> @jupeyy_keks i got this idk why
11:38 < bridge> <ryozuki> 
11:38 < bridge> <ryozuki> ```
11:38 < bridge> <ryozuki> 2025-03-27 11:37:54 I gfx: Created Vulkan 1.1 context.
11:38 < bridge> <ryozuki> 2025-03-27 11:36:31 I vulkan: no compatible driver found. Vulkan 1.1 is required.
11:38 < bridge> <ryozuki> 2025-03-27 11:36:31 I vulkan: vulkan warning: Creating instance failed.
11:38 < bridge> <ryozuki> 2025-03-27 11:36:31 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:38 < bridge> <ryozuki> 2025-03-27 11:36:31 I gfx: Created OpenGL 3.0 context.
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: unable to create graphic context: Failed creating OpenGL context at version requested
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: Created OpenGL 2.1 context.
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I opengl: Vendor string: Apple
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I opengl: Version string: 2.1 Metal - 89.3
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: GPU vendor: Apple
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: GPU renderer: Apple M3 Pro
11:38 < bridge> <ryozuki> 2025-03-27 11:36:32 I gfx: GPU version: 2.1 Metal - 89.3
11:38 < bridge> <ryozuki> ```
11:39 < bridge> <ryozuki> i got the red popup saying failed
11:39 < bridge> <Jupstar ‚ú™> MoltenVK installed?
11:39 < bridge> <ryozuki> let me see
11:39 < bridge> <Jupstar ‚ú™> When we met, it stilled worked, you even showed me the bug XD
11:39 < bridge> <ryozuki> Warning: molten-vk 1.2.11 is already installed and up-to-date.
11:39 < bridge> <ryozuki> To reinstall 1.2.11, run:
11:39 < bridge> <ryozuki>   brew reinstall molten-vk
11:39 < bridge> <ryozuki> yeah xd, im using last commit now
11:39 < bridge> <ryozuki> u told me to test hidpi
11:39 < bridge> <Jupstar ‚ú™> yeah, shouldn't have messed with your moltenvk setup.. weird üòÑ
11:39 < bridge> <ryozuki> cmake -DVULKAN=ON -G Ninja ..
11:39 < bridge> <Jupstar ‚ú™> looks correct to me
11:40 < bridge> <ryozuki> reinstalling molten
11:40 < bridge> <ryozuki> --  * Vulkan found
11:40 < bridge> <ryozuki> -- Building vulkan shaders
11:40 < bridge> <ryozuki> /Users/edgarluque/Documents/misc/ddnet/data/shader/vulkan/quad.vert
11:40 < bridge> <ryozuki> -- Finished building vulkan shaders
11:41 < bridge> <ryozuki> it also can build the shaders
11:41 < bridge> <ryozuki> -- Building vulkan shaders
11:41 < bridge> <ryozuki> /Users/edgar/Documents/misc/ddnet/data/shader/vulkan/quad.vert
11:41 < bridge> <ryozuki> -- Finished building vulkan shaders
11:41 < bridge> <ryozuki> @jupeyy_keks one weird thing
11:41 < bridge> <ryozuki> after the build
11:41 < bridge> <ryozuki> ld: warning: ignoring duplicate libraries: '-lvulkan'
11:41 < bridge> <Jupstar ‚ú™> üòÆ
11:41 < bridge> <ryozuki> [324/324] Linking CXX executable DDNet
11:41 < bridge> <ryozuki> ld: warning: ignoring duplicate libraries: '-lvulkan'
11:42 < bridge> <Jupstar ‚ú™> Can you lookup where brew installs the package files to?
11:42 < bridge> <Jupstar ‚ú™> It should have installed a json file somewhere
11:42 < bridge> <ryozuki> ‚ùØ ls /opt/homebrew/opt/molten-vk
11:42 < bridge> <ryozuki> Frameworks        LICENSE            bin            include            libexec
11:42 < bridge> <ryozuki> INSTALL_RECEIPT.json    README.md        etc            lib            sbom.spdx.json
11:43 < bridge> <Jupstar ‚ú™> the etc
11:43 < bridge> <Jupstar ‚ú™> might be interesting
11:43 < bridge> <ryozuki> ‚ùØ ls /opt/homebrew/opt/molten-vk/etc/vulkan
11:43 < bridge> <ryozuki> icd.d
11:43 < bridge> <Jupstar ‚ú™> yes
11:43 < bridge> <ryozuki> ‚ùØ ls /opt/homebrew/opt/molten-vk/etc/vulkan/icd.d
11:43 < bridge> <ryozuki> MoltenVK_icd.json
11:43 < bridge> <Jupstar ‚ú™> inside icd it should be
11:43 < bridge> <Jupstar ‚ú™> try to start ddnet with
11:43 < bridge> <Jupstar ‚ú™> 
11:43 < bridge> <Jupstar ‚ú™> ```
11:43 < bridge> <Jupstar ‚ú™> VK_ICD_FILENAMES=/opt/homebrew/opt/molten-vk/etc/vulkan/icd.d/MoltenVK_icd.json ./DDNet
11:43 < bridge> <Jupstar ‚ú™> ```
11:43 < bridge> <ryozuki> ‚ùØ cat /opt/homebrew/opt/molten-vk/etc/vulkan/icd.d/MoltenVK_icd.json
11:43 < bridge> <ryozuki> {
11:43 < bridge> <ryozuki>     "file_format_version" : "1.0.0",
11:43 < bridge> <ryozuki>     "ICD": {
11:43 < bridge> <ryozuki>         "library_path": "../../../lib/libMoltenVK.dylib",
11:43 < bridge> <ryozuki>         "api_version" : "1.2.0",
11:44 < bridge> <ryozuki>         "is_portability_driver" : true
11:44 < bridge> <ryozuki>     }
11:44 < bridge> <ryozuki> }
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: Created Vulkan 1.1 context.
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I vulkan: no compatible driver found. Vulkan 1.1 is required.
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I vulkan: vulkan warning: Creating instance failed.
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: Created OpenGL 3.0 context.
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: unable to create graphic context: Failed creating OpenGL context at version requested
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: Created OpenGL 2.1 context.
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I opengl: Vendor string: Apple
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I opengl: Version string: 2.1 Metal - 89.3
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: GPU vendor: Apple
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: GPU renderer: Apple M3 Pro
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: GPU version: 2.1 Metal - 89.3
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I sound: sound init successful using audio driver 'coreaudio'
11:44 < bridge> <ryozuki> 2025-03-27 11:44:13 I textrender: Freetype version 2.13.3 (compiled = 2.13.3)
11:45 < bridge> <ryozuki> 2025-03-27 11:44:13 I joystick: 0 joystick(s) found
11:45 < bridge> <ryozuki> 2025-03-27 11:44:13 E serverbrowser: invalid address (ServerIndex=0, TypeIndex=6, AddressIndex=6)
11:45 < bridge> <ryozuki> 2025-03-27 11:44:13 E serverbrowser: invalid address (ServerIndex=0, TypeIndex=8, AddressIndex=8)
11:45 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: unable to get display mode: displayIndex must be in the range 0 - 0
11:45 < bridge> <ryozuki> 2025-03-27 11:44:13 I gfx: unable to get display mode: displayIndex must be in the range 0 - 0
11:45 < bridge> <ryozuki> 2025-03-27 11:44:14 I http: task done: https://master1.ddnet.org/ddnet/15/servers.json
11:45 < bridge> <ryozuki> 2025-03-27 11:44:14 I client: version 19.2 on macos arm64
11:45 < bridge> <ryozuki> 2025-03-27 11:44:14 I client: git revision hash: 44f7db9c9872eed7
11:45 < bridge> <ryozuki> 2025-03-27 11:44:14 W client: Warning: Could not initialize Vulkan:  Creating instance failed. Could not initialize the given graphics backend, reverting to the default backend now.
11:45 < bridge> <ryozuki> nope
11:45 < bridge> <Jupstar ‚ú™> ok weird
11:45 < bridge> <Jupstar ‚ú™> dunno what's broken :/
11:45 < bridge> <ryozuki> idk :d
11:45 < bridge> <ryozuki> mac sux
11:45 < bridge> <Jupstar ‚ú™> But thanks for testing xd
11:45 < bridge> <ryozuki> :13 I sdl: SDL version 2.30.5 (compiled = 2.0.20)
11:45 < bridge> <ryozuki> could this have. smth?
11:45 < bridge> <Jupstar ‚ú™> i mean you could try to copy `libMoltenVK.dylib` to `libvulkan.dylib` directly next to the binary or smth
11:46 < bridge> <Jupstar ‚ú™> üòÆ i dunno, we use the SDL vulkan loader but with a custom path i think
11:46 < bridge> <Jupstar ‚ú™> do you have:
11:46 < bridge> <Jupstar ‚ú™> brew install vulkan-loader
11:46 < bridge> <Jupstar ‚ú™> installed?
11:46 < bridge> <ryozuki> ==> Downloading https://formulae.brew.sh/api/cask.jws.json
11:46 < bridge> <ryozuki> Warning: vulkan-loader 1.4.311 is already installed and up-to-date.
11:46 < bridge> <ryozuki> To reinstall 1.4.311, run:
11:46 < bridge> <ryozuki>   brew reinstall vulkan-loader
11:48 < bridge> <Jupstar ‚ú™> This is what deen did for ddnet-rs
11:48 < bridge> <Jupstar ‚ú™> That's also why I want a static build of moltenvk.
11:48 < bridge> <Jupstar ‚ú™> 
11:48 < bridge> <Jupstar ‚ú™> Because it sucks to deal with such issues xD
11:51 < bridge> <Jupstar ‚ú™> @ryozuki But if you have time, just download and exec this:
11:51 < bridge> <Jupstar ‚ú™> <https://github.com/ddnet/ddnet-rs/actions/runs/13873879772>
11:51 < bridge> <Jupstar ‚ú™> 
11:51 < bridge> <Jupstar ‚ú™> or if you prefer to build from src <https://github.com/ddnet/ddnet-rs/pull/63>
11:51 < bridge> <Jupstar ‚ú™> 
11:51 < bridge> <Jupstar ‚ú™> i'd be interested in that too.
12:07 < bridge> <Jupstar ‚ú™> Why can `m_pSkinInfo` be nullptr anyway, seems like we'd rather want a differenciaction between `FallbackToDefault` and `FullyLoaded`
12:21 < bridge> <ryozuki> @learath2 is it had to make a c compiler?
12:21 < bridge> <ryozuki> since im into compilers maybe ill do it
12:21 < bridge> <ryozuki> i think a C compiler without preprocessor is somewhat a doable project in short time
12:22 < bridge> <ryozuki> ok the include is preprocessor
12:22 < bridge> <ryozuki> hmm idk what would be the hard part
12:22 < bridge> <ryozuki> maybe im confusing with c++ since there is no templates it should be easy to do?
12:23 < bridge> <learath2> Mh, not particularly (barring optimizations). C is fairly simple to parse/lex and also translates fairly naturally to assemblies
12:23 < bridge> <ryozuki> maybe the hardest part would be making it compliant fully or smth
12:23 < bridge> <learath2> As with all compilers hard part is imo optimizations
12:23 < bridge> <ryozuki> and the static analysis for -W flags
12:23 < bridge> <ryozuki> yeah but llvm does it for me kek
12:23 < bridge> <ryozuki> someday ill make my own backend
12:24 < bridge> <ryozuki> but that requires lot of time
12:24 < bridge> <ryozuki> just for 1 arch
12:24 < bridge> <learath2> Yeah you could make mistakes here with this, lots of tiny details with C
12:24 < bridge> <ryozuki> i guess its also a good way to learn more about c
12:25 < bridge> <learath2> This is also not that easy indeed, but iirc not required
12:25 < bridge> <ryozuki> https://github.com/mortdeus/legacy-cc/tree/master/last1120c
12:25 < bridge> <ryozuki> first compiler C code
12:25 < bridge> <ryozuki> from 1972
12:26 < bridge> <ryozuki> ```c
12:26 < bridge> <ryozuki> main(argc, argv)
12:26 < bridge> <ryozuki> int argv[]; {
12:26 < bridge> <ryozuki>     extern init, flush;
12:26 < bridge> <ryozuki>     extern extdef, eof, open, creat;
12:26 < bridge> <ryozuki>     extern fout, fin, error, exit, nerror, tmpfil;
12:26 < bridge> <ryozuki> ```
12:26 < bridge> <ryozuki> weird syntax
12:27 < bridge> <learath2> Oh yeah, early C looks weeeird
12:28 < bridge> <ryozuki> u know the requirement to declare variables at start of function
12:28 < bridge> <ryozuki> aligns a lot with how assembly works
12:28 < bridge> <ryozuki> its like u dont have to do a prepass on the function to allocate stack space for variables
12:28 < bridge> <ryozuki> u can do it in a single pass
12:28 < bridge> <ryozuki> since u know vars are declared first
12:28 < bridge> <learath2> I would guess that's probbaly why it was a requirement
12:28 < bridge> <ryozuki> also llvm has a pass to put all allocas at start
12:29 < bridge> <learath2> C was really designed in a way that makes the compilers job easy
12:29 < bridge> <ryozuki> well it not like itsh ard to find variables used
12:29 < bridge> <ryozuki> u just need a extra pass
12:29 < bridge> <ryozuki> single pas. compilers are cool tho
12:29 < bridge> <ryozuki> like turbopascal
12:30 < bridge> <learath2> Declaration syntax following use is also very handy, you can use the same machinery to determine types and evaluate expressions
12:30 < bridge> <ryozuki> can u give a example of what u mean?
12:31 < bridge> <learath2> Well with the computers of the day I'd guess the extra pass is far slower than what we now experience
12:31 < bridge> <ryozuki> probs
12:32 < bridge> <ryozuki> the preprocessor is a pass too, but it makes it so the compile phase doesnt need to do a extra pass to resolve imports
12:32 < bridge> <ryozuki> also forward declarations are made to avoid the extra pass too
12:33 < bridge> <learath2> For a C declaration, you can take the stuff after the type and it's exactly the same syntax as how you'd use that variable in code. That means evaluating a declaration requires no special parsing, you just skip the type and evaluate the expression
12:33 < bridge> <ryozuki> its probs also cheaper to use the preprocessor for resolving imports since u dont need to traverse the ast its just text replacement
12:33 < bridge> <ryozuki> i would say C was made to be easily compiled indeed
12:34 < bridge> <ryozuki> ah ic
12:35 < bridge> <ryozuki> altho idk if the C grammar is context free
12:35 < bridge> <ryozuki> probs not
12:35 < bridge> <ryozuki> if its llk i think its linear parse time guaranteed
12:35 < bridge> <learath2> I can't really know what they were thinking at the time, but that'd be my guess too
12:35 < bridge> <ryozuki> or lalr
12:36 < bridge> <learath2> Eeeeeh, I can only think of typedefs not being context free
12:37 < bridge> <learath2> So I guess yeah you are right
12:39 < bridge> <milkeeycat> `x * y;` this is also not very context free
12:40 < bridge> <learath2> Hm, it should be. That's always an arithmetic expression
12:40 < bridge> <milkeeycat> char *foo;
12:41 < bridge> <ryozuki> i think a contex free grammar can have x * y and char * foo if they are separated by the =
12:41 < bridge> <learath2> I see what you mean but that's not enough to make it not context free. It's always either a declaration or an arithmetic expression, but you'll know that as soon as you parse x. UNLESS typedefs are allowed
12:41 < bridge> <ryozuki> lhs and rhs
12:44 < bridge> <learath2> I can't really think of anything but typedefs introducing syntax rules at compile time. But I'm also very sleepy soo I might be missing something
12:46 < bridge> <learath2> (The preprocessor on the other hand is obviously not context free at all)
14:20 < bridge> <ryozuki> @milkeeycat daily lang dev update: got generic parameter type inference, no more ::<> on fn calls
14:20 < bridge> <ryozuki> ```rust
14:20 < bridge> <ryozuki> mod test {
14:20 < bridge> <ryozuki> 
14:20 < bridge> <ryozuki> 
14:20 < bridge> <ryozuki>     fn hello<T>(x: u64) -> T {
14:20 < bridge> <ryozuki>         return x as T;
14:20 < bridge> <ryozuki>     }
14:20 < bridge> <ryozuki> 
14:20 < bridge> <ryozuki>     fn main() -> u32 {
14:20 < bridge> <ryozuki>         let ex: u64 = 2;
14:20 < bridge> <ryozuki>         let result: u32 = hello(ex);
14:20 < bridge> <ryozuki> 
14:20 < bridge> <ryozuki>         return result;
14:20 < bridge> <ryozuki>     }
14:20 < bridge> <ryozuki> }
14:20 < bridge> <ryozuki> ```
14:20 < bridge> <milkeeycat> new color scheme in discord is so meh
14:20 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1354807374069764108/image.png?ex=67e6a231&is=67e550b1&hm=e24ff63dcbb4357ea2806abdd1a1ad6f73241ef953560fa30ec342add752feeb&
14:21 < bridge> <milkeeycat> epyc
14:21 < bridge> <ryozuki> well this example is wrong cuz i dont have inference for return type generics
14:21 < bridge> <ryozuki> its this
14:21 < bridge> <ryozuki> ```rust
14:21 < bridge> <ryozuki> mod test {
14:21 < bridge> <ryozuki>     fn hello<T>(x: T) -> u32 {
14:21 < bridge> <ryozuki>         return x as u32;
14:21 < bridge> <ryozuki>     }
14:21 < bridge> <ryozuki> 
14:21 < bridge> <ryozuki>     fn main() -> u32 {
14:21 < bridge> <ryozuki> 
14:21 < bridge> <ryozuki>         let ex: u64 = 2;
14:21 < bridge> <ryozuki>         let result: u32 = hello(ex);
14:21 < bridge> <ryozuki> 
14:21 < bridge> <ryozuki>         return result;
14:21 < bridge> <ryozuki>     }
14:21 < bridge> <ryozuki> }
14:21 < bridge> <ryozuki> ```
14:21 < bridge> <ryozuki> xd
14:21 < bridge> <ryozuki> infering the return type is a bit more complex :d
14:21 < bridge> <milkeeycat> is it possible to pass user defined types yet?
14:22 < bridge> <milkeeycat> iirc I wanted to do something like `func::<MyStruct>()` and it didn't work
14:22 < bridge> <ryozuki> ii got a nice error for the previous example tho
14:22 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1354807909149704424/imagen.png?ex=67e6a2b0&is=67e55130&hm=e77d75bb49699852cee189cb1b153588d2a4f01d5fb8a818c15d56fedc39f2ce&
14:23 < bridge> <ryozuki> hm odd
14:23 < bridge> <ryozuki> odd mine looks ok
14:23 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1354808026594541668/imagen.png?ex=67e6a2cc&is=67e5514c&hm=1f934d2b5f5c64028558eec7ef2f73598e74f3b13e02d78b17d9b185ddc2da0e&
14:23 < bridge> <ryozuki> use this theme
14:23 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1354808114310025266/imagen.png?ex=67e6a2e1&is=67e55161&hm=25a1453f5d0e07419a995b361d6ef961b5484718d67d22a0ebbe38e40bdb6733&
14:24 < bridge> <ryozuki> send example code xd
14:24 < bridge> <milkeeycat> i prefer 2nd one üò¨
14:25 < bridge> <milkeeycat> ah, the type was in a module
14:25 < bridge> <ryozuki> ```rust
14:25 < bridge> <ryozuki> mod test {
14:25 < bridge> <ryozuki> 
14:25 < bridge> <ryozuki>     struct Test {
14:25 < bridge> <ryozuki>         a: u32
14:25 < bridge> <ryozuki>     }
14:25 < bridge> <ryozuki> 
14:25 < bridge> <ryozuki>     fn hello<T>(x: T) -> u32 {
14:25 < bridge> <ryozuki>         return x.a;
14:25 < bridge> <ryozuki>     }
14:25 < bridge> <ryozuki> 
14:25 < bridge> <ryozuki>     fn main() -> u32 {
14:25 < bridge> <ryozuki>         let ex: Test = Test {
14:25 < bridge> <ryozuki>             a: 2
14:26 < bridge> <ryozuki>         };
14:26 < bridge> <ryozuki>         // let result: u32 = hello::<Test>(ex);
14:26 < bridge> <ryozuki>         let result: u32 = hello(ex);
14:26 < bridge> <ryozuki> 
14:26 < bridge> <ryozuki>         return result;
14:26 < bridge> <ryozuki>     }
14:26 < bridge> <ryozuki> }
14:26 < bridge> <ryozuki> ```
14:26 < bridge> <ryozuki> works for me
14:26 < bridge> <ryozuki> ic, submodule or like at same level?
14:26 < bridge> <milkeeycat> change 
14:26 < bridge> <milkeeycat> ```rust
14:26 < bridge> <milkeeycat> struct Test {
14:26 < bridge> <milkeeycat>         a: u32
14:26 < bridge> <milkeeycat> }
14:26 < bridge> <milkeeycat> ```
14:26 < bridge> <milkeeycat> to
14:26 < bridge> <milkeeycat> ```rust
14:26 < bridge> <milkeeycat> mod test {
14:26 < bridge> <milkeeycat>   struct Test {
14:26 < bridge> <milkeeycat>           a: u32
14:26 < bridge> <milkeeycat>   }
14:26 < bridge> <milkeeycat> }
14:26 < bridge> <milkeeycat> ```
14:28 < bridge> <ryozuki> ```rust
14:28 < bridge> <ryozuki> mod test {
14:28 < bridge> <ryozuki>     import a.{Test};
14:28 < bridge> <ryozuki> 
14:28 < bridge> <ryozuki>     mod a {
14:28 < bridge> <ryozuki>         struct Test {
14:28 < bridge> <ryozuki>             a: u32
14:28 < bridge> <ryozuki>         }
14:28 < bridge> <ryozuki>     }
14:28 < bridge> <ryozuki> 
14:28 < bridge> <ryozuki> 
14:28 < bridge> <ryozuki>     fn hello<T>(x: T) -> u32 {
14:28 < bridge> <ryozuki>         return x.a;
14:28 < bridge> <ryozuki>     }
14:28 < bridge> <ryozuki> 
14:28 < bridge> <ryozuki>     fn main() -> u32 {
14:28 < bridge> <ryozuki>         let ex: Test = a::Test {
14:28 < bridge> <ryozuki>             a: 2
14:28 < bridge> <ryozuki>         };
14:28 < bridge> <ryozuki>         // let result: u32 = hello::<Test>(ex);
14:28 < bridge> <ryozuki>         let result: u32 = hello(ex);
14:28 < bridge> <ryozuki> 
14:28 < bridge> <ryozuki>         return result;
14:29 < bridge> <ryozuki>     }
14:29 < bridge> <ryozuki> }
14:29 < bridge> <ryozuki> ```
14:29 < bridge> <ryozuki> this works
14:29 < bridge> <ryozuki> but i found the issue
14:29 < bridge> <ryozuki> i think using a type with path on the lhs of a let doesnt resolve the type if u use a full path
14:29 < bridge> <ryozuki> a::Test before the = doesnt work
14:29 < bridge> <milkeeycat> can you do `let result: u32 = hello::<a::Test>(ex);`?
14:43 < bridge> <milkeeycat> rust pros i have a question, is it possible to make rust show error if `n` is used after dropping `ctx` üò¨ ?
14:43 < bridge> <milkeeycat> ```rust
14:43 < bridge> <milkeeycat> use bumpalo::Bump;
14:43 < bridge> <milkeeycat> 
14:43 < bridge> <milkeeycat> struct Context<'a> {
14:43 < bridge> <milkeeycat>     allocator: &'a Bump,
14:43 < bridge> <milkeeycat> }
14:43 < bridge> <milkeeycat> 
14:43 < bridge> <milkeeycat> impl<'a> Context<'a> {
14:43 < bridge> <milkeeycat>     pub fn new() -> Context<'a> {
14:43 < bridge> <milkeeycat>         Self {
14:43 < bridge> <milkeeycat>             allocator: Box::leak(Box::new(Bump::new())),
14:43 < bridge> <milkeeycat>         }
14:43 < bridge> <milkeeycat>     }
14:43 < bridge> <milkeeycat> 
14:43 < bridge> <milkeeycat>     pub fn alloc_i32(&mut self) -> &'a i32 {
14:43 < bridge> <milkeeycat>         self.allocator.alloc(0)
14:43 < bridge> <milkeeycat>     }
14:43 < bridge> <milkeeycat> }
14:43 < bridge> <milkeeycat> 
14:43 < bridge> <milkeeycat> impl<'a> Drop for Context<'a> {
14:43 < bridge> <milkeeycat>     fn drop(&mut self) {
14:44 < bridge> <milkeeycat>         unsafe {
14:44 < bridge> <milkeeycat>             drop(Box::from_raw(self.allocator as *const _ as *mut Bump));
14:44 < bridge> <milkeeycat>         }
14:44 < bridge> <milkeeycat>     }
14:44 < bridge> <milkeeycat> }
14:44 < bridge> <milkeeycat> 
14:44 < bridge> <milkeeycat> fn main() {
14:44 < bridge> <milkeeycat>     let mut ctx = Context::new();
14:44 < bridge> <milkeeycat>     let n = ctx.alloc_i32();
15:03 < bridge> <ryozuki> ```rust
15:03 < bridge> <ryozuki> mod test {
15:03 < bridge> <ryozuki> 
15:03 < bridge> <ryozuki>     mod a {
15:03 < bridge> <ryozuki>         struct Test {
15:03 < bridge> <ryozuki>             a: u32
15:03 < bridge> <ryozuki>         }
15:03 < bridge> <ryozuki>     }
15:03 < bridge> <ryozuki> 
15:03 < bridge> <ryozuki>     fn hello<T>(x: T) -> u32 {
15:03 < bridge> <ryozuki>         return x.a;
15:03 < bridge> <ryozuki>     }
15:03 < bridge> <ryozuki> 
15:04 < bridge> <ryozuki>     fn main() -> u32 {
15:04 < bridge> <ryozuki>         let ex: a::Test = a::Test {
15:04 < bridge> <ryozuki>             a: 2
15:04 < bridge> <ryozuki>         };
15:04 < bridge> <ryozuki>         // let result: u32 = hello::<Test>(ex);
15:04 < bridge> <ryozuki>         let result: u32 = hello::<a::Test>(ex);
15:04 < bridge> <ryozuki> 
15:04 < bridge> <ryozuki>         return result;
15:04 < bridge> <ryozuki>     }
15:04 < bridge> <ryozuki> }
15:04 < bridge> <ryozuki> 
15:04 < bridge> <ryozuki> ```
15:04 < bridge> <ryozuki> @milkeeycat fixed it now works
15:04 < bridge> <ryozuki> yes, use phantomdata with a lifetime from ctx
15:04 < bridge> <ryozuki> if n doesnt need inherently a lifetime
15:04 < bridge> <ryozuki> u can tie it to a lifetime via phantomdata
15:04 < bridge> <ryozuki> https://doc.rust-lang.org/std/marker/struct.PhantomData.html
15:04 < bridge> <ryozuki> this is called variance / covariance
15:04 < bridge> <milkeeycat> i tried but it didn't work
15:04 < bridge> <milkeeycat> maybe it was a skill issue
15:04 < bridge> <ryozuki> show what u trie
15:05 < bridge> <ryozuki> tried
15:07 < bridge> <milkeeycat> ```rust
15:07 < bridge> <milkeeycat> struct Context<'a> {
15:07 < bridge> <milkeeycat>     allocator: &'a Bump,
15:07 < bridge> <milkeeycat>     marker: PhantomData<&'a ()>,
15:07 < bridge> <milkeeycat> }
15:07 < bridge> <milkeeycat> 
15:07 < bridge> <milkeeycat> impl<'a> Context<'a> {
15:07 < bridge> <milkeeycat>     pub fn new() -> Self {
15:07 < bridge> <milkeeycat>         Self {
15:07 < bridge> <milkeeycat>             allocator: Box::leak(Box::new(Bump::new())),
15:07 < bridge> <milkeeycat>             marker: PhantomData,
15:07 < bridge> <milkeeycat>         }
15:07 < bridge> <milkeeycat>     }
15:07 < bridge> <milkeeycat> }
15:07 < bridge> <milkeeycat> ```
15:08 < bridge> <ryozuki> wait
15:08 < bridge> <ryozuki> u want n right
15:08 < bridge> <ryozuki> n needs the lifetime
15:08 < bridge> <ryozuki> but u know that alloc returns a mut ref?
15:08 < bridge> <ryozuki> ur converting the mut ref to a ref
15:08 < bridge> <ryozuki> & i32 i mean
15:08 < bridge> <milkeeycat> ye, it's fine for me
15:09 < bridge> <ryozuki> why are u dropping the allocator like that
15:09 < bridge> <ryozuki> bump already has proper drop
15:09 < bridge> <ryozuki> oh cuz u want to have it as a ref
15:09 < bridge> <ryozuki> why?
15:10 < bridge> <patiga> `pub fn alloc_i32(&mut self) -> &'a i32 {`
15:10 < bridge> <patiga> if you change `&mut self` to `&'a mut self` you ge the lifetime error
15:10 < bridge> <milkeeycat> i can make everything work if i pass `&'a Bump` in `new` fn, but I don't want to pass it xd
15:11 < bridge> <ryozuki> ```rust
15:11 < bridge> <ryozuki> use bumpalo::Bump;
15:11 < bridge> <ryozuki> 
15:11 < bridge> <ryozuki> struct Context {
15:11 < bridge> <ryozuki>     allocator: Bump,
15:11 < bridge> <ryozuki> }
15:11 < bridge> <ryozuki> 
15:11 < bridge> <ryozuki> impl Context {
15:11 < bridge> <ryozuki>     pub fn new() -> Context {
15:11 < bridge> <ryozuki>         Self {
15:11 < bridge> <ryozuki>             allocator: Bump::new(),
15:11 < bridge> <ryozuki>         }
15:11 < bridge> <ryozuki>     }
15:11 < bridge> <ryozuki> 
15:11 < bridge> <ryozuki>     pub fn alloc_i32(&mut self) -> &mut i32 {
15:11 < bridge> <ryozuki>         self.allocator.alloc(0)
15:11 < bridge> <ryozuki>     }
15:11 < bridge> <ryozuki> }
15:11 < bridge> <ryozuki> 
15:11 < bridge> <ryozuki> fn main() {
15:11 < bridge> <ryozuki>     let mut ctx = Context::new();
15:11 < bridge> <ryozuki>     let n = ctx.alloc_i32();
15:11 < bridge> <ryozuki>     drop(ctx);
15:11 < bridge> <ryozuki>     dbg!(n);
15:11 < bridge> <ryozuki> }
15:11 < bridge> <ryozuki> ```
15:11 < bridge> <ryozuki> this doesnt let u use n
15:11 < bridge> <ryozuki> https://play.rust-lang.org/?version=stable&mode=debug&edition=2024&gist=07be6a866f9d927bc557864921189aee
15:12 < bridge> <ryozuki> btw playground has top 100 crates
15:12 < bridge> <ryozuki> which includes bumpalo
15:12 < bridge> <patiga> (also how I tested it ^^)
15:12 < bridge> <patiga> https://play.rust-lang.org/?version=stable&mode=debug&edition=2024&gist=ffc59edb65e2490fcc1eb0a8702e60a0
15:12 < bridge> <patiga> this is my version with just the added `'a` to bind the returned reference to the lifetime of the `Context`
15:13 < bridge> <ryozuki> i think rn the non mut &i32 works because u leak the allocator and context just borrows it, since it doesnt own it when it drops it doesnt matter so u can use n
15:15 < bridge> <ryozuki> i just dont get why u have bump as a ref
15:15 < bridge> <ryozuki> xd
15:15 < bridge> <ryozuki> is it intended
15:15 < bridge> <milkeeycat> yes
15:19 < bridge> <Jupstar ‚ú™> Is it intended and useful?
15:19 < bridge> <milkeeycat> it doesn't do what i want, so it's not every useful
15:19 < bridge> <milkeeycat> well, it kinda does, but it also allows use after drop üò¨
15:23 < bridge> <patiga> isn't that what you want @milkeeycat 
15:23 < bridge> <patiga> this throws a lifetime error if you use it after the context is dropped
15:24 < bridge> <milkeeycat> this allows only 1 call to `alloc_i32` :kek:
15:24 < bridge> <ryozuki> well if u want shared mutability
15:24 < bridge> <ryozuki> u need interior mut
15:24 < bridge> <ryozuki> rc refcell
15:25 < bridge> <ryozuki> first it doesnt make sense to return &i32 instead of &mut i32
15:25 < bridge> <ryozuki> because u are allocating and u will never modify it?
15:25 < bridge> <ryozuki> xd
15:26 < bridge> <ryozuki> @milkeeycat are u trying to implement interning?
15:27 < bridge> <milkeeycat> it will be allocating types, but changed it to i32 for everyone to understand
15:29 < bridge> <ryozuki> im telling u
15:29 < bridge> <ryozuki> use the arena xd
15:30 < bridge> <ryozuki> u probs want to intern the types u create, thats why u doing this right
15:30 < bridge> <ryozuki> i do this with a arena and i precreate the builtin types and store their ids
15:30 < bridge> <ryozuki> and for user types i just have symbol tables
15:30 < bridge> <ryozuki> to the type id
15:32 < bridge> <milkeeycat> i can't use this crate https://docs.rs/typed-generational-arena/latest/typed_generational_arena/
15:34 < bridge> <milkeeycat> or wait, I actually can :thonk:
15:36 < bridge> <milkeeycat> i though i needed access to `StandardSlab<Ty>` to be able to compare types :bluestripe:
15:36 < bridge> <ryozuki> u can
15:36 < bridge> <ryozuki> wdym
15:36 < bridge> <ryozuki> StandardSlab is a type def to arena without removal btw
15:37 < bridge> <ryozuki> its tru the StandardSlabIndex<T> doesnt implement hash idk why, my hack is to use .to_idx() to get the id as usize
15:37 < bridge> <ryozuki> and in hashmaps i store that
15:38 < bridge> <ryozuki> pub adt_to_type_idx: HashMap<AdtIndex, TypeIndex>,
15:38 < bridge> <ryozuki> wait it works
15:38 < bridge> <ryozuki> xd
15:38 < bridge> <milkeeycat> i didn't think that i can simply compare the indices
15:38 < bridge> <ryozuki> i think in some place i needed to use usize
15:38 < bridge> <ryozuki> but yeah
15:39 < bridge> <ryozuki> @milkeeycat its ok if u use slab type of arena, which doesnt allow removal, so u will always only have 1 generation
15:39 < bridge> <ryozuki> so u can simply compare the idx
15:39 < bridge> <ryozuki> because the generation is always same
15:39 < bridge> <milkeeycat> yup
15:40 < bridge> <kebscs> i think i got a fix for vanilla demo tunes üëç
15:40 < bridge> <kebscs> is g_Config.m_ClDummy in demos always 0?
15:42 < bridge> <ryozuki> @milkeeycat okay its weird because i can use the indexes in hashmaps
15:42 < bridge> <ryozuki> i remember i had some problem but i changed it now and works
15:42 < bridge> <ryozuki> xd
15:42 < bridge> <ryozuki> maybe some outdated dep?
15:43 < bridge> <ryozuki> @milkeeycat okay i probs wasnt using slab or idk
15:43 < bridge> <ryozuki> ```rust
15:43 < bridge> <ryozuki> impl<T, I: Eq, G: Eq> Eq for Index<T, I, G> {}
15:43 < bridge> <ryozuki> 
15:43 < bridge> <ryozuki> impl<T, I: PartialEq, G: PartialEq> PartialEq for Index<T, I, G> {
15:43 < bridge> <ryozuki>     fn eq(&self, other: &Self) -> bool {
15:44 < bridge> <ryozuki>         self.index == other.index && self.generation == other.generation
15:44 < bridge> <ryozuki>     }
15:44 < bridge> <ryozuki> }
15:44 < bridge> <ryozuki> 
15:44 < bridge> <ryozuki> impl<T, I: Hash, G: Hash> Hash for Index<T, I, G> {
15:44 < bridge> <ryozuki>     fn hash<H: core:#Ô∏è‚É£:Hasher>(&self, state: &mut H) {
15:44 < bridge> <ryozuki>         self.index.hash(state);
15:44 < bridge> <ryozuki>         self.generation.hash(state);
15:44 < bridge> <ryozuki>     }
15:44 < bridge> <ryozuki> }
15:44 < bridge> <ryozuki> ```
15:44 < bridge> <ryozuki> they have this
15:44 < bridge> <ryozuki> so it impls hash if i and g is hash
15:44 < bridge> <ryozuki> slabs use this for G
15:44 < bridge> <ryozuki> ```rust
15:44 < bridge> <ryozuki> #[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd, Hash)]
15:44 < bridge> <ryozuki> #[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
15:44 < bridge> <ryozuki> pub struct DisableRemoval;
15:44 < bridge> <ryozuki> ```
15:44 < bridge> <ryozuki> so it implements hash and eq
15:45 < bridge> <ryozuki> ```
15:45 < bridge> <ryozuki> #[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
15:45 < bridge> <ryozuki> #[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
15:45 < bridge> <ryozuki> pub struct NonzeroGeneration<T: NonZeroAble> {
15:45 < bridge> <ryozuki>     gen: T::NonZero,
15:45 < bridge> <ryozuki> }
15:45 < bridge> <ryozuki> ```
15:45 < bridge> <ryozuki> standard arena uses this
15:45 < bridge> <ryozuki> which doesnt have hash
15:45 < bridge> <ryozuki> maybe they forgot
15:45 < bridge> <ryozuki> ```rust
15:45 < bridge> <ryozuki> #[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
15:45 < bridge> <ryozuki> #[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
15:45 < bridge> <ryozuki> pub struct NonzeroGeneration<T: NonZeroAble> {
15:45 < bridge> <ryozuki>     gen: T::NonZero,
15:45 < bridge> <ryozuki> }
15:45 < bridge> <ryozuki> ```
15:45 < bridge> <ryozuki> i would open a issue
15:45 < bridge> <ryozuki> but they use gitlab
15:45 < bridge> <ryozuki> i dont remember my account
16:45 < bridge> <melo∆û> Become a maintainer they said
16:45 < bridge> <melo∆û> https://cdn.discordapp.com/attachments/293493549758939136/1354843677620703332/Screenshot_20250327-164446.png?ex=67e6c400&is=67e57280&hm=e67784bb304a606f2d8aca0bfa7e33e5f72ee39e7524f9eb2f5de646693be214&
16:45 < bridge> <melo∆û> It'll be fun they said
16:46 < ws-client> <ChillerDragon> yes it very fun @melo∆û please become ddnet maintainer
16:46 < bridge> <melo∆û> Hah nah, I'm not proficient enough in c++ yet to tell other people that their code sux
16:47 < bridge> <TsFrediman> :GreemDev: imagine being a maintainer for anything
16:47 < ws-client> <ChillerDragon> then just review the prs where you feel confident ez @melo∆û 
16:47 < bridge> <melo∆û> I do that already
16:47 < bridge> <melo∆û> Same with issues
16:47 < ws-client> <ChillerDragon> but you dont merge
16:47 < bridge> <TsFrediman> review me daddy
16:48 < bridge> <melo∆û> I don't want merge rights, I don't share the same vision for ddnet as other maintainers
16:48 < bridge> <melo∆û> And it would be a mess
16:49 < bridge> <melo∆û> I would drop every version older than a year, update everything and use c++21, rust nightly and clang21
16:49 < bridge> <melo∆û> And then rewrite it In rust
16:49 < bridge> <melo∆û> :cat_cracked_hehe:
16:49 < ws-client> <ChillerDragon> seems aligned to me
16:49 < bridge> <TsFrediman> frfr
16:50 < bridge> <ryozuki> thats the requisite to be in the discord club right
16:50 < bridge> <melo∆û> :monkalaugh:
16:50 < bridge> <ryozuki> well i would also drop any other version than latest
16:50 < bridge> <ryozuki> move to c++23 if not remove c++ entirely
16:51 < bridge> <ryozuki> but i know how to separate dreams from reality somewhat
16:51 < bridge> <ryozuki> xd
16:51 < bridge> <melo∆û> issues and PRS being blocked/closed because otherwise Ubuntu 12.04 wouldn't work anymore
16:51 < bridge> <melo∆û> 
16:51 < bridge> <melo∆û> (This is not an actual scenario, it's an over the top example)
16:51 < bridge> <melo∆û> :kekw:
16:51 < bridge> <ryozuki> @blaiszephyr why does meskalin hate me btw
16:51 < bridge> <melo∆û> I wonder what would happen if you'd just merge everything and resolve conflicts
16:51 < bridge> <ryozuki> isnt he a botter
16:51 < bridge> <ryozuki> i hate botters
16:52 < bridge> <ryozuki> is he siO?
16:52 < bridge> <melo∆û> Maybe he was caught in the ATH banwave a few years ago :Pepega:
16:52 < bridge> <ryozuki> siO hates me for using GPL
16:52 < bridge> <ryozuki> he said im retarded
16:52 < bridge> <melo∆û> ü§∑
16:52 < bridge> <melo∆û> For using gpl? XD
16:52 < bridge> <ryozuki> yeah xd
16:52 < bridge> <ryozuki> siO was a big botter too
16:52 < bridge> <ryozuki> and the first to be banned from all ddnet servers ingame
16:52 < bridge> <ryozuki> he had another name i forgor
16:53 < bridge> <ryozuki> 2016-01-05 ¬ª DDNet 9.1 has been released
16:53 < bridge> <ryozuki> 2016-01-03 ¬ª DDRace Wiki by Ryozuki
16:53 < bridge> <ryozuki> 9.1
16:53 < bridge> <ryozuki> omg time flies
16:53 < bridge> <melo∆û> Roco?
16:54 < bridge> <ryozuki> no lol
16:54 < bridge> <ryozuki> roco is a new player kek
16:54 < bridge> <melo∆û> ah true Roco was the other dude
16:54 < bridge> <melo∆û> From kog who was also caught cheating in a video iirc
16:54 < bridge> <melo∆û> A decade ago tho
16:55 < bridge> <ryozuki> https://forum.ddnet.org/search.php?keywords=siO&sid=80d7aaa83d148c2eb5d958f9aba58b2d
16:55 < bridge> <ryozuki> Shorefire
16:55 < bridge> <ryozuki> was his name
16:55 < bridge> <ryozuki> https://www.youtube.com/watch?v=y8ELC2u_bls
16:59 < bridge> <melo∆û> Ah good old tree client
18:35 < bridge> <seagate_1> https://discord.gg/HkmPqFPW
18:37 < bridge> <Solly (bun bun)> @discortmoderator
18:37 < bridge> <Solly (bun bun)> @Discord Mod
18:37 < bridge> <Solly (bun bun)> ty :)
20:04 < bridge> <chairn> https://arstechnica.com/ai/2025/03/devs-say-ai-crawlers-dominate-traffic-forcing-blocks-on-entire-countries/
20:04 < bridge> <chairn> fuck  ai ?
20:09 < bridge> <inv41idu53rn4m3> no no, it's the idiots who think grabbing a few more projects worth of code is going to make their thing in any significant way better than the others
20:10 < bridge> <inv41idu53rn4m3> they're the ones to be mad at, not the cool new technology that still needs to be researched more
20:10 < bridge> <cellegenrih> fuck Idiots using AI
20:12 < bridge> <inv41idu53rn4m3> You could drop the last two words and you'd still be pretty much on point :D
20:12 < bridge> <inv41idu53rn4m3> but yeah giving idiots access to computers was a mistake
20:12 < bridge> <cellegenrih> I've heard more and more about this "vibe coding" thing and it truly disgusts me
20:13 < bridge> <cellegenrih> AI is meant as a tool helping you to program, not replace your coding session with it
20:14 < bridge> <Assa> at work we are shadow banning bots which we are detecting, that ignore the robots.txt
20:14 < bridge> <Assa> this way we also banned the one or other user thinking he could automate some api things xD
20:50 < bridge> <Assa> do we have a simple basic white circle particle/texture somewhere or can we draw circle quads natively?
20:52 < bridge> <Assa> at least I found a texture for this, but abusing it for different things might not be ... wise xD
21:00 < bridge> <robyt3> We have `IGraphics::DrawCircle` but it's not very efficient, so a texture would probably better for ingame rendering
21:56 < bridge> <ljpb> how to change f-ddrace entities to ddnet entities from server-side
21:56 < bridge> <Assa> What does `Graphics()->QuadsSetRotation();` take, a radiant, a degree angle, a floating point value betwen 0 and 1?
22:02 < bridge> <robyt3> I assume radians because there are several calls involving `pi`
22:03 < bridge> <Assa> but 45¬∞ should be pi/4.0f, and it's not 45¬∞ ü§î
22:05 < bridge> <Assa> ah now it works, thank you
22:32 < bridge> <Assa> I have an issue, that the size of one texture in an image container affects the size of another, has somebody ever experienced something similar?
22:32 < bridge> <Assa> https://cdn.discordapp.com/attachments/293493549758939136/1354931230386291008/screenshot_2025-03-27_22-22-19.png?ex=67e7158a&is=67e5c40a&hm=9e6a2f6eab1f3ba524697873395ff6cff3b84a476455d673d464427dcc4bfca8&
22:35 < bridge> <Jupstar ‚ú™> what is an image container
22:35 < bridge> <Assa> `m_PulleyHeadOffset = RenderTools()->QuadContainerAddSprite(m_ItemsQuadContainerIndex, 24.f * ScalePulley);`
22:35 < bridge> <Assa> Quad-Container? ü§î
22:36 < bridge> <Jupstar ‚ú™> I dunno, I don't even understand what you mean with affects the size
22:36 < bridge> <Assa> the freeze laser on top is too small
22:37 < bridge> <Jupstar ‚ú™> the blocky one?
22:37 < bridge> <Jupstar ‚ú™> ah
22:37 < bridge> <Jupstar ‚ú™> the purple end
22:37 < bridge> <Jupstar ‚ú™> What's the value of ScalePulley here
22:40 < bridge> <Assa> I found it out, I accidently changed a wrong line when scaling the pulley ... man I feel stupid
23:17 < bridge> <Assa> soo ... I continued to make grabbers a bit nicer as well :owo:
23:17 < bridge> <Assa> https://cdn.discordapp.com/attachments/293493549758939136/1354942528234848406/grabber_test_2025-03-27_23-15-15.mp4?ex=67e72010&is=67e5ce90&hm=5a0404ac715c9f6f2c01fb83cb1b6202b23605b99ad82b75745f2d8f772d98a7&
23:18 < bridge> <Assa> summon @hectavoxel
23:20 < bridge> <Assa> Strength is indicated by rotation speed and wallthrough by rotation (clockwise/anticlockwise)
23:22 < bridge> <louis> cool, but i feel like people wont be able to tell the strength based off on rotation when the pullers aren't neatly lined up like this
23:25 < bridge> <Assa> so would you increase the effect? ^^
23:25 < bridge> <Assa> or do you think people wouldn't be able to tell this in general?
23:31 < bridge> <Assa> good call, I made the speed difference much higher
23:35 < bridge> <Assa> - I could also change the color depending on speed
23:35 < bridge> <Assa> - Change/fixiate the line thickness depending on speed
23:38 < bridge> <Assa> - I could also change the color depending on strength
23:38 < bridge> <Assa> - Change/fixiate the line thickness depending on strength
23:41 < bridge> <kebscs> smth else than always 4 dots maybe?
23:42 < bridge> <Assa> also possible, idea was to indicate a pulley (Flaschenzug in german)
23:42 < bridge> <Assa> Downside of this would be adding 3 sprites instead of one
23:52 < bridge> <kebscs> i thout like 1 dot for each strenght
23:52 < bridge> <kebscs> so 1 dot = weak 3 dots = strong
23:52 < bridge> <kebscs> or smth else than dots, idk what represents strength
23:55 < bridge> <cellegenrih> 4 really small particles rotating around perhaps?
23:56 < bridge> <Assa> Then you'd see the laser end, which is always tried to be hidden
23:56 < bridge> <Assa> but maybe outside of it, I like the idea
