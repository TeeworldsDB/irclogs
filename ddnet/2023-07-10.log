00:11 < bridge_> <Ewan> if i had a nickel
01:59 < bridge_> <majefamous> Congratulations to everyone who benefited from my company yesterday. I still want more people to benefit. Ask me how And I will show on how you can earn $3500 in 24hours ...
01:59 < bridge_> <majefamous> ..join the telegram link below and Dm the Admin for more info 
01:59 < bridge_> <majefamous> 👇👇👇👇👇👇👇👇
01:59 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
01:59 < bridge_> <majefamous> 
01:59 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
01:59 < bridge_> <majefamous> Congratulations to everyone who benefited from my company yesterday. I still want more people to benefit. Ask me how And I will show on how you can earn $3500 in 24hours ...
01:59 < bridge_> <majefamous> ..join the telegram link below and Dm the Admin for more info 
01:59 < bridge_> <majefamous> 👇👇👇👇👇👇👇👇
01:59 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
01:59 < bridge_> <majefamous> 
01:59 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
02:29 < bridge_> <bencie.> w rizz
07:48 < bridge_> <ryozuki> nobody has nickels now
08:15 < bridge_> <ryozuki> https://github.com/ddnet/ddnet/issues/3411#issuecomment-1628300620
08:15 < bridge_> <ryozuki> new comment i made
08:58 < bridge_> <Jupstar ✪> Everyone own idea 😬😬
08:58 < bridge_> <Ewan> need a vote
08:58 < bridge_> <Jupstar ✪> As If ppl understand the pros and cons xd
08:59 < bridge_> <ryozuki> 😬
09:03 < bridge_> <Jupstar ✪> I think my approach is a superset of centralized accounts for ddnets only.. so we could start with that 😬
09:04 < bridge_> <ryozuki> 😬😬
09:04 < bridge_> <Jupstar ✪> 😬😬😬😬😬
09:04 < bridge_> <Jupstar ✪> Just wait for ddnet in rust and sell it as ddnet 2.0
09:05 < bridge_> <ryozuki> i wouldnt mind doing the backend
09:05 < bridge_> <ryozuki> the auth sc
09:05 < bridge_> <ryozuki> sv
09:05 < bridge_> <ryozuki> we all know its gonna be in rust anyway
09:06 < bridge_> <ryozuki> :gigachad:
09:06 < bridge_> <Jupstar ✪> I just dislike that a mod has to download a list of known users and their keys xd
09:06 < bridge_> <ryozuki> hmm
09:06 < bridge_> <ryozuki> it would be cool with gog
09:07 < bridge_> <ryozuki> gpg
09:07 < bridge_> <ryozuki> just let ddnet sign ur key
09:07 < bridge_> <ryozuki> then u dont need verify
09:07 < bridge_> <ryozuki> download
09:07 < bridge_> <ryozuki> *
09:07 < bridge_> <Jupstar ✪> KISS
09:07 < bridge_> <ryozuki> oh well u need to get the account info still
09:08 < bridge_> <ryozuki> lets use zero knowledge proofs
09:08 < bridge_> <ryozuki> u dont even need to send keys
09:09 < bridge_> <ryozuki> :gigachad:
09:09 < bridge_> <ryozuki> https://en.m.wikipedia.org/wiki/Zero-knowledge_password_proof
09:10 < bridge_> <ryozuki> > A common use of a zero-knowledge password proof is in authentication systems where one party wants to prove its identity to a second party using a password but doesn't want the second party or anybody else to learn anything about the password. For example, apps can validate a password without processing it and a payment app can check the balance of an account without touching or learning anything about the amount.[1]
09:11 < bridge_> <Jupstar ✪> So basically like a public key
09:11 < bridge_> <heinrich5991> with pubkeys you don't need passwords 😉
09:11 < bridge_> <heinrich5991> but yes, this is the next best thing if one wanted to have passwords
09:12 < bridge_> <ryozuki> rsa auth is kind of zk i think xd
09:13 < bridge_> <heinrich5991> not sure
09:14 < bridge_> <heinrich5991> the "zero knowledge" in "zero-knowledge proofs" is quite strong
09:14 < bridge_> <ryozuki> https://en.m.wikipedia.org/wiki/Pairing-based_cryptography
09:14 < bridge_> <ryozuki> its listed under zk
09:14 < bridge_> <ryozuki> hmm
09:15 < bridge_> <ryozuki> > Zero knowledge typesEdit
09:15 < bridge_> <ryozuki> 
09:15 < bridge_> <ryozuki>     Proof of knowledge: the knowledge is hidden in the exponent like in the example shown above.
09:15 < bridge_> <ryozuki>     Pairing based cryptography: given f(x) and f(y), without knowing x and y, it is possible to compute f(x×y).
09:15 < bridge_> <ryozuki>     Witness indistinguishable proof: verifiers cannot know which witness is used for producing the proof.
09:15 < bridge_> <ryozuki>     Multi-party computation: while each party can keep their respective secret, they together produce a result.
09:15 < bridge_> <ryozuki>     Ring signature: outsiders have no idea which key is used for signing.
09:15 < bridge_> <ryozuki> mobile sucks
09:17 < bridge_> <heinrich5991> where can I find the quote?
09:18 < bridge_> <ryozuki> https://en.m.wikipedia.org/wiki/Zero-knowledge_proof
09:19 < bridge_> <ryozuki> under the types section
09:21 < bridge_> <heinrich5991> I don't understand the article well enough to conclude that RSA falls under it or not
09:21 < bridge_> <heinrich5991> however, I note that RSA is not mentioned in "Pairing-based cryptography"
09:31 < bridge_> <ryozuki> true xd
10:17 < bridge_> <ryozuki> lmao
10:17 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1127876327333167154/IMG_20230710_101521.jpg
10:17 < bridge_> <ryozuki> found this walking
10:18 < bridge_> <ryozuki> imagine going out of ur house tho
10:18 < bridge_> <ryozuki> :justatest:
10:30 < ws-client> <Jupstar> in crypto we rust
11:05 < bridge_> <learath2> This is why only 2 people use gpg. It's very meh design for normal people
11:07 < bridge_> <learath2> I wouldn't consider RSA 0 knowledge but it is effectively 0 knowledge until someone finds a way to factor large primes
11:59 < bridge_> <reitw> imagine learning ur private key
12:00 < bridge_> <reitw> :giga_chad:
12:03 < bridge_> <Jupstar ✪> Let's just delay the account stuff until quantum computers are good enough that we can say. It's not secure sty
12:03 < bridge_> <Jupstar ✪> Sry
12:03 < bridge_> <learath2> Or you can just memorize all your friends pubkeys and we only display pubkeys. "Oh there you are a173b5f82gf72e41ebc7aff"
12:05 < ChillerDragon> @ryozuki rust update! https://www.youtube.com/watch?v=JFY0ZF2XL8w
12:05 < bridge_> <ryozuki> troll
12:05 < ChillerDragon> :p
13:03 < bridge_> <ryozuki> im making a blog post
13:03 < bridge_> <ryozuki> on implementing a hash map
13:13 < bridge_> <chairn> put a hash table as table of content
13:17 < bridge_> <ryozuki> xd
13:23 < bridge_> <heinrich5991> do share 🙂
13:31 < ws-client> <Jupstar> what would you do if a std macro behaves different from it's description from the docs?
13:33 < ws-client> <Jupstar> @ryozuki if the docs are a subset of what the implementation is actually doing, would u consider it safe to rely on the superset xD
13:34 < bridge_> <ryozuki> idk xd
13:34 < bridge_> <ryozuki> what docs
13:34 < bridge_> <ryozuki> what macro
13:34 < bridge_> <ryozuki> ill do when its done ye
13:34 < ws-client> <Jupstar> https://doc.rust-lang.org/std/macro.env.html
13:34 < ws-client> <Jupstar> env!
13:34 < bridge_> <heinrich5991> report a bug, likely
13:34 < ws-client> <Jupstar> says its "yielding an expression of type &'static str"
13:34 < bridge_> <heinrich5991> what's the behavior differential
13:34 < bridge_> <ryozuki> whats not doing?
13:34 < ws-client> <Jupstar> but in fact it yields a string literal
13:34 < ws-client> <Jupstar> and i need a string literal in this case xd
13:34 < bridge_> <heinrich5991> a string literal is an expression of type `&'static str`
13:35 < bridge_> <ryozuki> xd
13:35 < bridge_> <ryozuki> yeah
13:35 < ws-client> <Jupstar> no
13:35 < bridge_> <heinrich5991> not the other way aroudn though
13:35 < ws-client> <Jupstar> well ok
13:35 < bridge_> <ryozuki> &'static str is a string literal lol
13:35 < bridge_> <heinrich5991> no
13:35 < bridge_> <heinrich5991> you can also reach it differently
13:35 < bridge_> <heinrich5991> String::leak, e.g.
13:35 < bridge_> <heinrich5991> `String::leak`, e.g.
13:35 < bridge_> <ryozuki> im confused
13:36 < bridge_> <ryozuki> whats the exact type u need
13:36 < bridge_> <heinrich5991> a string literal
13:36 < ws-client> <Jupstar> a string li
13:36 < bridge_> <heinrich5991> for a macro, likely
13:36 < ws-client> <Jupstar> basically "hi"
13:36 < bridge_> <ryozuki> ah
13:36 < ws-client> <Jupstar> yes
13:36 < ws-client> <Jupstar> for another macro
13:36 < bridge_> <heinrich5991> Jupstar: create a PR to add "string literal" to the doc of `env!`
13:36 < bridge_> <heinrich5991> profit
13:36 < bridge_> <ryozuki> well the docs are correct
13:37 < ws-client> <Jupstar> they are not incorrect xD
13:37 < bridge_> <heinrich5991> Jupstar just wants more guarantees
13:37 < bridge_> <heinrich5991> than they give
13:37 < bridge_> <ryozuki> ahh
13:37 < bridge_> <ryozuki> i get  it now
13:37 < bridge_> <ryozuki> well its better its actually a  string literal
13:37 < bridge_> <heinrich5991> yes
13:37 < bridge_> <ryozuki> and i think the guarantee is there
13:37 < bridge_> <ryozuki> because changing would be a breaking change
13:37 < ws-client> <Jupstar> well rust has no spec yet right?
13:38 < bridge_> <heinrich5991> hmm. to be on the safe side, you should probably add it to the docs
13:38 < bridge_> <ryozuki> but it has a backwards compat promise
13:38 < bridge_> <heinrich5991> theoretical breaking changes that affect no one are sometimes done
13:38 < bridge_> <heinrich5991> I guess this one is widely used already, though, so you should be fine
13:38 < bridge_> <ryozuki> If a crate compiled at some point, then Rust's stability guarantees say that it'll still compile afterwards.
13:39 < bridge_> <ryozuki> the editions fix that
13:39 < bridge_> <ryozuki> "breaking" changes are done on editions
13:39 < bridge_> <heinrich5991> I'm sure that this has been broken several times already
13:39 < bridge_> <ryozuki> but they are mild
13:39 < bridge_> <ryozuki> so old crates use old editions
13:39 < bridge_> <ryozuki> they still compile
13:39 < bridge_> <ryozuki> with newer
13:39 < bridge_> <heinrich5991> note also the future-incompatibility warnings
13:39 < bridge_> <heinrich5991> that you get these days
13:39 < bridge_> <ryozuki> i dont think they will downgrade  env
13:39 < bridge_> <ryozuki> to a non literal
13:39 < bridge_> <ryozuki> anyway
13:39 < bridge_> <heinrich5991> me too
13:40 < bridge_> <heinrich5991> just saying that the guarantees aren't as absolute as you make them to be
13:40 < bridge_> <ryozuki> ok
13:44 < ws-client> <Jupstar> is just the questions are environment variables always string literals?
13:44 < ws-client> <Jupstar> "value of the named environment variable at compile time"
13:44 < ws-client> <Jupstar> then i dont need to pr
13:44 < ws-client> <Jupstar> xd
13:47 < bridge_> <heinrich5991> not really
13:48 < ws-client> <Jupstar> what else can they be then? just wondering
13:48 < ws-client> <Jupstar> bcs i bet the maintainers will argue like that
13:53 < bridge_> <heinrich5991> it could be an expression of that type
13:54 < bridge_> <heinrich5991> e.g. `{"abc"}`
13:54 < bridge_> <heinrich5991> or `{static VALUE: &str = "abc"; VALUE}`
13:54 < bridge_> <heinrich5991> the rust maintainers are generally not opposed to improving documentation
13:54 < bridge_> <heinrich5991> they might be opposed to adding more guarantees, but I don't think they will be in this case
13:56 < bridge_> <heinrich5991> e.g. stuff like this:
13:56 < bridge_> <heinrich5991> ```
13:56 < bridge_> <heinrich5991> warning: the following packages contain code that will be rejected by a future version of Rust: buf_redux v0.8.4, multipart v0.18.0
13:56 < bridge_> <heinrich5991> ```
13:56 < bridge_> <heinrich5991> @ryozuki ^
13:56 < ws-client> <Jupstar> i have never seen a environment variable holding an expression as value. But is the question is rust itself defines a value of a environment variable a string literal
13:57 < bridge_> <heinrich5991> I think we're talking past each other
13:57 < bridge_> <heinrich5991> I mean the macro could expand to something like this when the environment variable is just `abc`
13:57 < bridge_> <heinrich5991> I mean the macro could expand to something like this when the environment variable has `abc` as its value
13:58 < ws-client> <Jupstar> Oh, i simply meant bcs the doc says "This macro will expand to the value of the named environment variable at compile time". So i wondered if this is guarantee enough, as in "A value of a named env var is ALWAYS a string literal"
13:59 < bridge_> <heinrich5991> `{"abc"}` also suffices that guarantee
13:59 < bridge_> <heinrich5991> (if the environment variable's value is `abc`)
14:00 < bridge_> <heinrich5991> anyway
14:00 < ws-client> <Jupstar> but is that THE value of the env var xD
14:00 < bridge_> <heinrich5991> sure
14:00 < bridge_> <heinrich5991> anyway, I think you can get away with relying on it without a PR, too
14:01 < ws-client> <Jupstar> i'll test once gcc has rust backend 😂 
14:13 < ws-client> <Jupstar> i wonder if i could write a game in vulkan inside a proc macro or if there is any limitation
14:21 < bridge_> <heinrich5991> a proc macro is a full-blown rust program
14:21 < bridge_> <ryozuki> derive macros are where rust macros shine
14:22 < bridge_> <ryozuki> macro_rules only generates code
14:22 < bridge_> <ryozuki> derive macro transforms code
14:22 < bridge_> <ryozuki> proc macro is a derive macro
14:22 < bridge_> <heinrich5991> a derive macro is a proc macro
14:22 < bridge_> <heinrich5991> not the other way around, I think
14:22 < bridge_> <ryozuki> true xd
14:24 < ws-client> <Jupstar> funny. imagine u compile ddnet and while compiling u can play ddnet
14:24 < ws-client> <Jupstar> xd
14:39 < bridge_> <ryozuki> https://edgarluque.com/blog/rust-hashmap/
14:39 < bridge_> <ryozuki> xd
14:39 < bridge_> <ryozuki> sometimes i cringe myself reading myself
14:45 < bridge_> <ryozuki> @heinrich5991 remember the issue we talked in the past
14:45 < bridge_> <ryozuki> about quadratic probing
14:45 < bridge_> <ryozuki> there are certain quadratic polynomials that do a full cycle
14:45 < bridge_> <ryozuki> or so i read
14:46 < bridge_> <ryozuki> `h(k) + (i + i^2) / 2`
14:46 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1127944007150993409/image.png
14:46 < bridge_> <ryozuki> picture for math
14:47 < bridge_> <ryozuki> ah well
14:47 < bridge_> <ryozuki> idk
14:47 < bridge_> <ryozuki> xDD
14:48 < bridge_> <ryozuki> but apparently the quadratic function is arbitrarely chosen
14:48 < bridge_> <ryozuki> i wonder if there is a ist of good ones
14:48 < bridge_> <ryozuki> list
14:55 < bridge_> <ryozuki> i wanna post this on the rust reddit
14:56 < bridge_> <ryozuki> but im afraid of having done smth wrong
14:56 < bridge_> <ryozuki> im no expert xd
14:56 < bridge_> <ryozuki> dont wanna be shamed
14:56 < bridge_> <ryozuki> :justatest:
14:56 < bridge_> <heinrich5991> it's fine. they won't shame you. not sure whether they'll give you attention though, which can be even worse
14:57 < bridge_> <Jupstar ✪> Use fake account
14:57 < bridge_> <Jupstar ✪> Fake blog
14:57 < bridge_> <ryozuki> i had good experiences in the past
14:57 < bridge_> <ryozuki> all the posts i put reached frontpage
14:57 < bridge_> <ryozuki> xd
14:57 < bridge_> <ryozuki> ill just do it
14:58 < bridge_> <chairn> you forgot `#![deny(unsafe)]` though
14:58 < bridge_> <ryozuki> meh its ok
14:58 < bridge_> <ryozuki> there is no unsafe
14:58 < bridge_> <ryozuki> xd
14:58 < bridge_> <ryozuki> https://www.reddit.com/r/rust/comments/14vtc8f/implementing_a_simple_hashmap_in_rust/
14:58 < bridge_> <ryozuki> :justatest:
14:59 < bridge_> <ryozuki> ```
14:59 < bridge_> <ryozuki> linear probing 10           time:   [255.08 ns 256.75 ns 258.66 ns]
14:59 < bridge_> <ryozuki> quadratic probing 10        time:   [252.66 ns 252.96 ns 253.25 ns]
14:59 < bridge_> <ryozuki> 
14:59 < bridge_> <ryozuki> linear probing 100          time:   [3.7110 µs 3.7169 µs 3.7236 µs]
14:59 < bridge_> <ryozuki> quadratic probing 100       time:   [3.6763 µs 3.6783 µs 3.6803 µs]
14:59 < bridge_> <ryozuki> 
14:59 < bridge_> <ryozuki> linear probing 1000         time:   [32.555 µs 32.703 µs 32.906 µs]
14:59 < bridge_> <ryozuki> quadratic probing 1000      time:   [32.002 µs 32.046 µs 32.126 µs]
15:00 < bridge_> <ryozuki> 
15:00 < bridge_> <ryozuki> linear probing 10000        time:   [464.28 µs 464.39 µs 464.53 µs]
15:00 < bridge_> <ryozuki> quadratic probing 10000     time:   [453.38 µs 454.40 µs 455.71 µs]
15:00 < bridge_> <ryozuki> 
15:00 < bridge_> <ryozuki> linear probing 100000       time:   [6.4169 ms 6.4213 ms 6.4267 ms]
15:00 < bridge_> <ryozuki> quadratic probing 100000    time:   [6.3506 ms 6.3548 ms 6.3601 ms]
15:00 < bridge_> <ryozuki> ```
15:00 < bridge_> <ryozuki> these are my bench
15:00 < bridge_> <Jupstar ✪> pub type Hashmap<k,v>=std::collections::hashmap<k,v>
15:00 < bridge_> <ryozuki> but idk maybe simd or smth makes quadratic faster
15:00 < bridge_> <Jupstar ✪> No troll no life
15:00 < bridge_> <ryozuki> xd
15:00 < bridge_> <chairn> did you compile with -march=native -mavx2 ?
15:01 < bridge_> <learath2> @ryozuki `(from what i have seen)` capitalize the I
15:01 < bridge_> <ryozuki> i hate that
15:01 < bridge_> <ryozuki> from english
15:02 < bridge_> <ryozuki> fixed
15:02 < bridge_> <_voxeldoesart> no one cares about lowercase i lol
15:02 < bridge_> <learath2> I thought quadratic probing was mostly used to avoid "clumping"
15:03 < bridge_> <_voxeldoesart> i sure dont care
15:05 < bridge_> <ryozuki> > Quadratic probing can be a more efficient algorithm in an open addressing table, since it better avoids the clustering problem that can occur with linear probing, although it is not immune. It also provides good memory caching because it preserves some locality of reference; however, linear probing has greater locality and, thus, better cache performance
15:06 < bridge_> <ryozuki> seems true
15:06 < bridge_> <patiga> in case you care about another typo: Wehther -> Whether
15:07 < bridge_> <ryozuki> i do care
15:07 < bridge_> <learath2> As a closed addressing enjoyer I don't have such problems :gigachad:
15:07 < bridge_> <ryozuki> linked list enjoyer :justatest:
15:07 < bridge_> <patiga> nice blog btw :)
15:07 < bridge_> <learath2> I'm being ostracized for enjoying the classics
15:08 < bridge_> <ryozuki> ty!
15:09 < bridge_> <learath2> > `residuez` requires Signal Processing Toolbox.
15:09 < bridge_> <learath2> :pepeW:
15:09 < bridge_> <learath2> I have so many toolboxes
15:11 < bridge_> <ryozuki> whats that
15:11 < bridge_> <heinrich5991> matlab stuff?
15:11 < bridge_> <learath2> Yes, matlab
15:12 < bridge_> <heinrich5991> say no more
15:12 < bridge_> <heinrich5991> :p
15:12 < bridge_> <learath2> My computer feels dirty now
15:15 < bridge_> <ryozuki> now that i reread
15:15 < bridge_> <ryozuki> i could refactor most code into find_slot_idx so the non mut and mut functions are small
15:15 < bridge_> <ryozuki> and also the quadratic thing
15:16 < bridge_> <ryozuki> maybe another day im feeling lazy now xD
15:25 < bridge_> <learath2> Thanks proprietary shitware, very cool
15:25 < bridge_> <learath2> https://cdn.discordapp.com/attachments/293493549758939136/1127953799672242289/prop.png
15:26 < bridge_> <_voxeldoesart> >something unexpected
15:27 < bridge_> <_voxeldoesart> they are incompitent
15:27 < bridge_> <learath2> and there are no logs
15:28 < bridge_> <learath2> I tried again and it just worked, thanks proprietary shitware
15:51 < bridge_> <learath2> I hate references like this, the book is 900 pages, where am I supposed to look?
15:51 < bridge_> <learath2> https://cdn.discordapp.com/attachments/293493549758939136/1127960220124057651/image.png
15:52 < bridge_> <ryozuki> its cuz they dont use latex
15:52 < bridge_> <ryozuki> is the thing u making not deterministic?
15:52 < bridge_> <ryozuki> random? xd
15:54 < bridge_> <learath2> I was trying to install a matlab addon, so no it's not supposed to be non-deterministic 😄
15:59 < bridge_> <ryozuki> @deen u work in databases with dataflow stuff?
16:00 < bridge_> <ryozuki> maybe u interested  in this
16:00 < bridge_> <ryozuki> https://github.com/hydro-project/hydroflow
16:36 < bridge_> <deen> Yeah, sounds cool and pretty similar to the timely+differential dataflow we use
16:36 < bridge_> <heinrich5991> https://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%E2%A0%80
16:36 < bridge_> <heinrich5991> https://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/
16:37 < bridge_> <louis.place> has anyone here used racket
16:38 < bridge_> <ryozuki> no but i hear it often
16:38 < bridge_> <ryozuki> functional
16:44 < bridge_> <louis.place> i have to use it for a placement and its giving me brain damage :feelsbadman:
16:46 < bridge_> <ryozuki> nice
16:46 < bridge_> <ryozuki> learn it a lot
16:46 < bridge_> <ryozuki> i need more excuses to learn more langs
16:47 < bridge_> <ryozuki> xd
16:47 < bridge_> <ryozuki> otherwise im lazy and dont
16:50 < bridge_> <louis.place> learn a lang in non-english syntax
16:57 < bridge_> <learath2> :hypervomit:
16:58 < bridge_> <learath2> I helped friends of mine study for a racket exam, honestly by far the worst way to teach programming, if you are going to be forcing students to start with a functional language atleast make it something relevant like Haskell
16:58 < bridge_> <learath2> What is the point of teaching a dead lisp?
16:59 < bridge_> <learath2> Well not dead, but it's only used by weird professors and their weird professor friends to do weird professor things
17:00 < bridge_> <louis.place> yeah the professor of the class is one of the dudes who was involved with some aspect of development
17:00 < bridge_> <learath2> Not surprised at all
17:01 < bridge_> <louis.place> it seemed like the lang was supposed to somewhat simulate how computer hardware works or smth
17:01 < bridge_> <louis.place> but the syntax makes me want to kms
17:01 < bridge_> <learath2> If your language has less than 100 users you shouldn't be allowed to teach it as a beginner course
17:01 < bridge_> <learath2> That's what Lisplikes do to you
17:03 < bridge_> <learath2> I mean, it's not even close to how the underlying hardware runs your code. Functional programming languages are how computer science professors wish programming looked like so they can use their fancy math tools instead of learning ours.
17:04 < bridge_> <ryozuki> but isnt lisp the best   lang
17:04 < bridge_> <learath2> (It does work to some degree, look at haskell, you can even mathematically prove stuff about haskell programs)
17:04 < bridge_> <ryozuki> fans of lisps are die hard
17:04 < bridge_> <ryozuki> harder than rust
17:05 < bridge_> <ryozuki> the cto of my company loves lisp
17:05 < bridge_> <ryozuki> but i dont think he uses it on projects xd
17:05 < bridge_> <learath2> `(+ 1 2 3 4)` my favourite way to write 1 + 2 + 3 + 4, very intuitive
17:05 < bridge_> <ryozuki> @deen would like to interject?
17:05 < bridge_> <ryozuki> i think deen likes lisp
17:05 < bridge_> <louis.place> they have me making lists using nested constructors :greenthing:
17:05 < bridge_> <deen> I have never used a lisp 😄
17:05 < bridge_> <ryozuki> xD
17:06 < bridge_> <learath2> @deen is a haskell enjoyer iirc
17:06 < bridge_> <louis.place> (cons "A" (cons "B" (cons "C" '())))
17:06 < bridge_> <ryozuki> @louis.place try leanring erlang  lololo
17:06 < bridge_> <ryozuki> it also got ugly af syntax
17:07 < bridge_> <ryozuki> well not as ugly as that
17:07 < bridge_> <louis.place> it probably doesnt end up with )))})) at the end of a line lol
17:07 < bridge_> <ryozuki> ```erlang
17:07 < bridge_> <ryozuki> -module(series).
17:07 < bridge_> <ryozuki> -export([fib/1]).
17:07 < bridge_> <ryozuki> 
17:07 < bridge_> <ryozuki> fib(0) -> 0;
17:07 < bridge_> <ryozuki> fib(N) when N < 0 -> err_neg_val;
17:07 < bridge_> <ryozuki> fib(N) when N < 3 -> 1;
17:07 < bridge_> <ryozuki> fib(N) -> fib_int(N, 0, 1).
17:07 < bridge_> <ryozuki> 
17:07 < bridge_> <ryozuki> fib_int(1, _, B) -> B;
17:07 < bridge_> <ryozuki> fib_int(N, A, B) -> fib_int(N-1, B, A+B).
17:07 < bridge_> <ryozuki> ```
17:08 < bridge_> <louis.place> lol wot
17:08 < bridge_> <chairn> when N < 3?
17:08 < bridge_> <chairn> more like when N < 2
17:08 < bridge_> <chairn> oh it's fibonacci, not factorial 😄
17:08 < bridge_> <louis.place> no i think its saying 0,1,1
17:08 < bridge_> <louis.place> lol
17:09 < bridge_> <learath2> People who enjoy Lisp also enjoy stuff like lambda calculus
17:09 < bridge_> <ryozuki> ```erlang
17:09 < bridge_> <ryozuki> -define(IP_VERSION, 4).
17:09 < bridge_> <ryozuki> -define(IP_MIN_HDR_LEN, 5).
17:09 < bridge_> <ryozuki> 
17:09 < bridge_> <ryozuki> DgramSize = byte_size(Dgram),
17:09 < bridge_> <ryozuki> case Dgram of 
17:09 < bridge_> <ryozuki>     <<?IP_VERSION:4, HLen:4, SrvcType:8, TotLen:16, 
17:09 < bridge_> <ryozuki>       ID:16, Flgs:3, FragOff:13,
17:09 < bridge_> <ryozuki>       TTL:8, Proto:8, HdrChkSum:16,
17:09 < bridge_> <ryozuki>       SrcIP:32,
17:09 < bridge_> <ryozuki>       DestIP:32, RestDgram/binary>> when HLen>=5, 4*HLen=<DgramSize ->
17:09 < bridge_> <ryozuki>         OptsLen = 4*(HLen - ?IP_MIN_HDR_LEN),
17:09 < bridge_> <ryozuki>         <<Opts:OptsLen/binary,Data/binary>> = RestDgram,
17:09 < bridge_> <ryozuki>     ...
17:10 < bridge_> <ryozuki> end.
17:10 < bridge_> <ryozuki> ```
17:10 < bridge_> <ryozuki> erlang has a neat feature tho
17:10 < bridge_> <ryozuki> bit manipulation
17:10 < bridge_> <ryozuki> https://www.erlang.org/doc/programming_examples/bit_syntax.html
17:11 < bridge_> <ryozuki> lambda calculus is the most simple turing complete language
17:11 < bridge_> <ryozuki> based
17:11 < bridge_> <learath2> unbased, it gives me a headache
17:19 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1127982370495139840/image.png
17:19 < bridge_> <ryozuki> someone downvotes me
17:19 < bridge_> <ryozuki> <a:KEKWWA:1016495927923572847>
17:19 < bridge_> <ryozuki> someone downvoted me
17:26 < bridge_> <chairn> 9th post in r/rust frontpage
17:30 < bridge_> <ryozuki> xd
17:39 < bridge_> <louis.place> reddit famous :poggers:
17:39 < bridge_> <louis.place> https://media.discordapp.net/attachments/919318424163856415/1050553033823625257/SHTO.gif
17:45 < bridge_> <cyberFighter> i do
17:57 < bridge_> <ryozuki> omg
17:57 < bridge_> <ryozuki> robyt god
18:05 < bridge_> <matodor> :greenthing:
18:05 < bridge_> <matodor> https://cdn.discordapp.com/attachments/293493549758939136/1127994120988790897/image.png
18:06 < bridge_> <matodor> after unsuccessful update
18:23 < bridge_> <chairn> redownload client from https://ddnet.org/downloads/
18:42 < bridge_> <Iza> I recommend to have it on steam and keep it updated that way
18:42 < bridge_> <Iza> To ensure for no problems
18:48 < bridge_> <chillerdragon> Posting links without context is a mutable offense. When a discord mod sees this he will censor you!
18:48 < bridge_> <chillerdragon> (@heinrich5991)
18:49 < bridge_> <chillerdragon> cool blog tho I rate 7/10
18:55 < bridge_> <ryozuki> what about mine chillerdragon
19:08 < bridge_> <ryozuki> <a:sadSnail:785072987815804929>
20:34 < bridge_> <matodor> I know the solution to the problem, but I think for beginners it can cause problems
20:35 < bridge_> <matodor> why interrupted update breaks the client
20:40 < bridge_> <ryozuki> another interesting data structure to code? if its not trees better
20:40 < bridge_> <ryozuki> maybe a rope
20:40 < bridge_> <ryozuki> fck a rope is a tree
20:40 < bridge_> <ryozuki> everything is a tree
20:41 < bridge_> <Ewan> 😃
20:41 < bridge_> <Ewan> i am a tree
20:41 < bridge_> <ryozuki> looks interedting nonetheless
20:42 < bridge_> <Ewan> where u see this structure
20:42 < bridge_> <ryozuki> if nothing else comes up next is ropes
20:42 < bridge_> <ryozuki> @mpft any editor thats somewhat good
20:42 < bridge_> <ryozuki> ropes are good to handle text
20:42 < bridge_> <ryozuki> https://en.m.wikipedia.org/wiki/Rope_(data_structure)
20:42 < bridge_> <Ewan> oh yea
20:43 < bridge_> <Ewan> I just didn’t know which one you were talking about
20:43 < bridge_> <Ewan> for a moment
20:43 < bridge_> <ryozuki> whats the other one
20:43 < bridge_> <ryozuki> ?
20:43 < bridge_> <Ewan> I didn’t know which data structure you were talking about
20:44 < bridge_> <Ewan> there was no other one
20:44 < bridge_> <Ewan> sry
20:44 < bridge_> <Ewan> I just got out of dentist
20:44 < bridge_> <ryozuki> :justatest:
20:47 < bridge_> <chillerdragon> Didn’t click sry couldn’t care less about rust hashmaps.OwO
20:47 < bridge_> <chillerdragon> (@ryozuki)
20:48 < bridge_> <ryozuki> xd
22:20 < bridge_> <walter> Hello, I worked on a client side little addition to nameplates : a rank indicator that shows if a player has ever crossed the finish line of the current map (see in picture). Is this kind of feature worth to submit on ddnet Github ?
22:20 < bridge_> <walter> https://cdn.discordapp.com/attachments/293493549758939136/1128058102651031642/Rank_Indicator.jpg
22:44 < bridge_> <totar> +1 good feature 👍
22:45 < bridge_> <totar> I would say yes
22:55 < bridge_> <ryozuki> i personally dont find it useful
