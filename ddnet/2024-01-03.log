02:11 < bridge> <-StormAx> any devs, i know furo gonna blame me, but how can i stop looping this mf?
02:11 < bridge> <-StormAx> https://cdn.discordapp.com/attachments/293493549758939136/1191911600546906312/image.png?ex=65a7292e&is=6594b42e&hm=abe60aa8892a3560a4ba77913913002a5c2b85a81fdaec45c9d23751dcb3d135&
02:11 < bridge> <-StormAx> ```cpp
02:11 < bridge> <-StormAx> 
02:11 < bridge> <-StormAx>     bool IsParsed = false;
02:11 < bridge> <-StormAx>     const char *pname = Client()->PlayerName();
02:11 < bridge> <-StormAx>     if(!IsParsed)
02:11 < bridge> <-StormAx>     {
02:11 < bridge> <-StormAx> 
02:11 < bridge> <-StormAx>         m_pClient->m_Stats.FetchPlayer(&s_StatsPlayer, pname);
02:11 < bridge> <-StormAx> 
02:11 < bridge> <-StormAx> 
02:11 < bridge> <-StormAx> 
02:11 < bridge> <-StormAx>     if(!s_StatsPlayer.m_pGetStatsDDStats)
02:11 < bridge> <-StormAx>         return;
02:11 < bridge> <-StormAx> 
02:11 < bridge> <-StormAx>     if(s_StatsPlayer.m_pGetStatsDDStats->State() == s_StatsPlayer.m_pGetStatsDDStats->STATE_PENDING)
02:11 < bridge> <-StormAx>         return;
02:11 < bridge> <-StormAx> 
02:11 < bridge> <-StormAx>     if(!s_StatsPlayer.StatsParsed && s_StatsPlayer.m_pGetStatsDDStats->State() == s_StatsPlayer.m_pGetStatsDDStats->STATE_DONE)
02:11 < bridge> <-StormAx>         return m_pClient->m_Stats.ParseJSON(&s_StatsPlayer); IsParsed = true;
02:12 < bridge> <-StormAx>     }
02:12 < bridge> <-StormAx> ```
02:32 < bridge> <Ewan> you’re returning before you set IsParsed to true
02:43 < bridge> <blaiszephyr> the `return m_pClient->m_Stats.ParseJSON(&s_StatsPlayer);` does what it should, return!, playing `isParsed = true` after that has no effect
02:43 < bridge> <blaiszephyr> the `return m_pClient->m_Stats.ParseJSON(&s_StatsPlayer);` does what it should, return!, placing `isParsed = true` after that has no effect
02:44 < bridge> <blaiszephyr> the `return m_pClient->m_Stats.ParseJSON(&s_StatsPlayer);` does what it should, return!, placing `isParsed = true` after that has no effect (yes Ewan you just said that but i know Stormi, he needs full explanations!) ❤️
02:47 < bridge> <blaiszephyr> the `return m_pClient->m_Stats.ParseJSON(&s_StatsPlayer);` does what it should, return!, placing `isParsed = true` after that has no effect
03:13 < bridge> <chairn> this is not python, use {} for multi line statements after if
03:13 < bridge> <chairn> btw, i don't see any loop in there
04:42 < bridge> <teero777> pls use auto format
05:22 < bridge> <fudgy_> how long until a ddnet server fix until its live in the servers?
05:28 < bridge> <fudgy_> cause I still cant see finish messages
05:45 < bridge> <fudgy_> how long until a ddnet server fix is live in the servers?
07:41 < bridge> <chillerdragon> There is no fixed protocol. Its whenever deen restarts the servers. You can speed it up by pinging deen to do so. Which finish messages do you mean by the way? For 0.7 (they for sure should be rolled out) or the new ones for 0.6 ddnet protocol?
07:53 < ChillerDragon> hmm fudgy so even the ddnet version works for me on ger and usa servers already so it should have worked for you too ._.
07:53 < ChillerDragon> https://zillyhuhn.com/cs/.1704264765.png
07:53 < ChillerDragon> my hax client just doesnt support the texture yet
07:56 < bridge> <mamad_melanin> is this efficient ?  located in ddrace.cpp
07:56 < bridge> <mamad_melanin> ```cpp
07:56 < bridge> <mamad_melanin>         int m_TileIndex = GameServer()->Collision()->GetTileIndex(MapIndex);
07:56 < bridge> <mamad_melanin>     int m_TileFIndex = GameServer()->Collision()->GetFTileIndex(MapIndex);
07:56 < bridge> <mamad_melanin> 
07:56 < bridge> <mamad_melanin>     //Sensitivity
07:56 < bridge> <mamad_melanin>     int S1 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x + pChr->GetProximityRadius() / 3.f, pChr->GetPos().y - pChr->GetProximityRadius() / 3.f));
07:56 < bridge> <mamad_melanin>     int S2 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x + pChr->GetProximityRadius() / 3.f, pChr->GetPos().y + pChr->GetProximityRadius() / 3.f));
07:56 < bridge> <mamad_melanin>     int S3 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x - pChr->GetProximityRadius() / 3.f, pChr->GetPos().y - pChr->GetProximityRadius() / 3.f));
07:56 < bridge> <mamad_melanin>     int S4 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x - pChr->GetProximityRadius() / 3.f, pChr->GetPos().y + pChr->GetProximityRadius() / 3.f));
07:56 < bridge> <mamad_melanin>     int Tile1 = GameServer()->Collision()->GetTileIndex(S1);
07:56 < bridge> <mamad_melanin>     int Tile2 = GameServer()->Collision()->GetTileIndex(S2);
07:56 < bridge> <mamad_melanin>     int Tile3 = GameServer()->Collision()->GetTileIndex(S3);
07:56 < bridge> <mamad_melanin>     int Tile4 = GameServer()->Collision()->GetTileIndex(S4);
07:56 < bridge> <mamad_melanin>     int FTile1 = GameServer()->Collision()->GetFTileIndex(S1);
07:56 < bridge> <mamad_melanin>     int FTile2 = GameServer()->Collision()->GetFTileIndex(S2);
07:56 < bridge> <mamad_melanin>     int FTile3 = GameServer()->Collision()->GetFTileIndex(S3);
07:56 < bridge> <mamad_melanin>     int FTile4 = GameServer()->Collision()->GetFTileIndex(S4);
07:56 < bridge> <mamad_melanin> ```
07:56 < bridge> <mamad_melanin> is this efficient ?  located in ddrace.cpp
07:56 < bridge> <mamad_melanin> ```cpp
07:56 < bridge> <mamad_melanin>     int m_TileIndex = GameServer()->Collision()->GetTileIndex(MapIndex);
07:56 < bridge> <mamad_melanin>     int m_TileFIndex = GameServer()->Collision()->GetFTileIndex(MapIndex);
07:57 < bridge> <mamad_melanin> 
07:57 < bridge> <mamad_melanin>     //Sensitivity
07:57 < bridge> <mamad_melanin>     int S1 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x + pChr->GetProximityRadius() / 3.f, pChr->GetPos().y - pChr->GetProximityRadius() / 3.f));
07:57 < bridge> <mamad_melanin>     int S2 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x + pChr->GetProximityRadius() / 3.f, pChr->GetPos().y + pChr->GetProximityRadius() / 3.f));
07:57 < bridge> <mamad_melanin>     int S3 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x - pChr->GetProximityRadius() / 3.f, pChr->GetPos().y - pChr->GetProximityRadius() / 3.f));
07:57 < bridge> <mamad_melanin>     int S4 = GameServer()->Collision()->GetPureMapIndex(vec2(pChr->GetPos().x - pChr->GetProximityRadius() / 3.f, pChr->GetPos().y + pChr->GetProximityRadius() / 3.f));
07:57 < bridge> <mamad_melanin>     int Tile1 = GameServer()->Collision()->GetTileIndex(S1);
07:57 < bridge> <mamad_melanin>     int Tile2 = GameServer()->Collision()->GetTileIndex(S2);
07:57 < bridge> <mamad_melanin>     int Tile3 = GameServer()->Collision()->GetTileIndex(S3);
07:57 < bridge> <mamad_melanin>     int Tile4 = GameServer()->Collision()->GetTileIndex(S4);
07:57 < bridge> <mamad_melanin>     int FTile1 = GameServer()->Collision()->GetFTileIndex(S1);
07:57 < bridge> <mamad_melanin>     int FTile2 = GameServer()->Collision()->GetFTileIndex(S2);
07:57 < bridge> <mamad_melanin>     int FTile3 = GameServer()->Collision()->GetFTileIndex(S3);
07:57 < bridge> <mamad_melanin>     int FTile4 = GameServer()->Collision()->GetFTileIndex(S4);
07:57 < bridge> <mamad_melanin> ```
07:57 < bridge> <mamad_melanin> every time a player get contact with a tile it makes so many ints
07:58 < ws-client> <ChillerDragon> making ints is cheap
07:58 < ws-client> <ChillerDragon> its more the method call where the int value comes from but i think those are also only index lookups
07:58 < bridge> <mamad_melanin> isn't it more efficient to make all of the ints in character.h and valuate them here ?
07:59 < ChillerDragon> they are on the stack either way
07:59 < ChillerDragon> its not allocating any memory
07:59 < ChillerDragon> on the heap
07:59 < bridge> <mamad_melanin> hum
08:00 < ChillerDragon> So the GetPureMapIndex is basically taking a pos and then doing some simple math like multiply by width and height and offset etc. Thats a fast operation without any iteration.
08:00 < ChillerDragon> Then GetTileIndex() is just a array index ``return m_pTiles[Index].m_Index;``
08:04 < bridge> <learath2> Where the ints are stored has very little to do with the cost of that operation. "Creating an int" has no inherent runtime cost unless it's getting allocated dynamically
08:04 < bridge> <mamad_melanin> i see
08:12 < bridge> <mamad_melanin> what git commands you guys use in your every day ?
08:16 < bridge> <mamad_melanin> what git commands you guys use in your every day of development ?
08:23 < ChillerDragon> @mods bro, checkout this user: piDOR on ddnet copy love box
08:23 < ChillerDragon> rus blocker #1
08:23 < chillerbot> https://github.com/ddnet/ddnet/issues/1
08:24 < ChillerDragon> nvm he left
08:24 < ChillerDragon> omg chilerbot u stoopid
08:25 < ChillerDragon> @mamad_melanin ``git add .`` ``git commit`` ``git push`` ``git commit --amend`` ``git push -f`` and a few more that i frequently use but those are my daily musts xd
08:27 < ChillerDragon> oh and omg ``git status``
08:27 < ChillerDragon> and ``git diff`` and ``git diff --cached`` ``git log`` i use those bithses daily for sure
08:28 < bridge> <learath2> `fetch`, `push`, `rebase`, `reset`, `status`, `stash`
08:28 < bridge> <learath2> Also `diff` sometimes, and very rarely `cherry-pick`
08:28 < ChillerDragon> oh true ``git pull``
08:28 < ChillerDragon> also a classic
08:29 < bridge> <reitw> git help
08:29 < ChillerDragon> xd
08:29 < bridge> <reitw> :KEKSad:
08:29 < ChillerDragon> i also reset, stash, cherry-pick, rebase, checkout quite often but its not guranteed to happen every day
08:29 < ChillerDragon> ``git add . && git reset --hard`` is bae
08:31 < bridge> <mamad_melanin> thank you ❤️
08:33 < ChillerDragon> ayo lerato lately i have been using cherry-pick to replace stash
08:33 < ChillerDragon> my stash stacks became so bloated idk wat is wat xd
08:34 < ChillerDragon> so i commited on branches instead and then applied only the changes without the commit with ``git cherry-pick -n commithash``
08:36 < ChillerDragon> https://zillyhuhn.com/cs/.1704267381.png
08:36 < ChillerDragon> but im clearly git nob
08:36 < ChillerDragon> i need to create 24 backup branches to feel safe xd
08:43 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1192010376167051304/GC2Qu8jWcAAi4YW.png?ex=65a7852c&is=6595102c&hm=2cc1b4bce70c71575ca9e4f34d02715a36d582008e3e0897540031c9370130c7&
09:41 < bridge> <ar1gin> damn, looks like i really am a nerd
09:41 < bridge> <Ewan> aueigorifugu good morning 🌞 clan
09:49 < bridge> <Anime.pdf> no u
10:08 < bridge> <milkeeycat> What's html doing there :justatest:
10:10 < ChillerDragon> HtMl iS nOt a ProGAMING lanGuage
10:11 < bridge> <milkeeycat> `git reset --hard HEAD`
10:11 < ChillerDragon> heinrich will totally respond with "--hard is dangerous" when he reads the backlog in 6 hours axaxaxax
10:11 < bridge> <milkeeycat> I always use hard 😏
10:12 < ChillerDragon> i like it hard too
10:12 < ChillerDragon> 😏
10:12 < ChillerDragon> hard and with force
10:12 < bridge> <milkeeycat> Oh, and also `git push origin master --force`
10:12 < ChillerDragon> yes
10:12 < bridge> <milkeeycat> hell yeah
10:12 < ChillerDragon> classic
10:13 < ChillerDragon> we are vibin
10:13 < ChillerDragon> also call it master instead of main because edgy
10:13 < bridge> <milkeeycat> Some of my repos have master
10:13 < bridge> <milkeeycat> Some main
10:13 < ChillerDragon> i set my github default to master xd
10:13 < ChillerDragon> and git too
10:14 < ChillerDragon> masterrace
10:14 < ChillerDragon> ok enough irc stalling
10:14 < bridge> <milkeeycat> Did u try something with passwords?
10:14 < ChillerDragon> no time for such trols
10:14 < ChillerDragon> i just starred
10:14 < ChillerDragon> i will watch the repo too
10:14 < ChillerDragon> in case u accidentally push secrets i want an email
10:15 < ChillerDragon> also have auto mirroring active
10:15 < ChillerDragon> in case you need an backup ;)
10:15 < bridge> <milkeeycat> milkeeycat@gmail.com, here u go
10:15 < ChillerDragon> leak
10:15 < ChillerDragon> enjoy spam from irc log scrapers
10:15 < ChillerDragon> axaxaxax
10:15 < ChillerDragon> ok fr now i close irc ffs
10:49 < bridge> <Jupstar ✪> Hi
10:49 < bridge> <Jupstar ✪> I also use git hard reset. Easiest, and yet I never fckd it up xd
10:51 < bridge> <Jupstar ✪> Chiller leak
10:51 < bridge> <Jupstar ✪> git stash list
11:01 < bridge> <blaiszephyr> git commit -m "FUCK"
11:02 < bridge> <blaiszephyr> `git commit -m "FUCK"`
11:23 < ChillerDragon> https://zillyhuhn.com/cs/.1704277415.png
11:23 < ChillerDragon> idk wat any of those are
11:24 < ChillerDragon> @blaiszephyr beauty of bash is that everything is a string so you can just do ``git commit -m FUCK``
11:28 < ChillerDragon> omagawd snap deltas so complicated
11:32 < bridge> <chillerdragon> At least i think i understood the purpose of a alt snap now. There is the raw snap the client stores for future deltas. And then there is the alt snap which the client might modify due to invalid items.
11:40 < bridge> <Jupstar ✪> Ah, that's the alt for xd
11:49 < bridge> <chillerdragon> I think
11:50 < bridge> <Jupstar ✪> Zwelf probably knows everything about them ^^
11:50 < bridge> <Jupstar ✪> He mentioned the first part once
11:53 < bridge> <Jupstar ✪> BTW does the first part even 100% work? 
11:53 < bridge> <Jupstar ✪> I guess one constraint for it to work is that there is a single ordered data stream for snapshots and acks
11:53 < bridge> <Jupstar ✪> Right?
11:53 < bridge> <Jupstar ✪> Else the server and client cannot really proof in finite time if they actually received a snapshot for Delta
11:55 < bridge> <Jupstar ✪> Tw network code is a mystery to me.. I don't understand why it works xd
11:55 < bridge> <Jupstar ✪> But I sometimes think if it's broken. Which is only noticeable when u have huge lags
11:55 < bridge> <Jupstar ✪> But I sometimes wonder if it's broken. Which is only noticeable when u have huge lags
12:01 < bridge> <Jupstar ✪> @zwelf2 light us up:
12:01 < bridge> <Jupstar ✪> 
12:01 < bridge> <Jupstar ✪> Assuming there is only one "raw"-snapshot that is used for delta comparision.
12:01 < bridge> <Jupstar ✪> 
12:01 < bridge> <Jupstar ✪> How can the client and server be sure they talk about the same raw snapshot?
12:01 < bridge> <Jupstar ✪> 
12:01 < bridge> <Jupstar ✪> - if raw-snap is #1 and snap #2 comes in, and the client tells the server it uses snap #2 now, if that packet is lost, server still assumes it must be #1. even if the snap-ack is resent. during that time how does the client proceed?
12:01 < bridge> <Jupstar ✪> 
12:01 < bridge> <Jupstar ✪> it can't wait for the server to also ack the snap-ack. then we have a infinite cycle.
12:01 < bridge> <Jupstar ✪> there are so many questions in my head. if tw network code is so failsafe & well written gg
12:05 < bridge> <Jupstar ✪> i also wonder how much traffic is saved by the delta comparision.
12:05 < bridge> <Jupstar ✪> based on that i'd decide if it's even worth it.
12:05 < bridge> <Jupstar ✪> Also i wonder if e.g. other delta algos would suite tw better
12:05 < bridge> <Jupstar ✪> so many questions
12:06 < bridge> <Jupstar ✪> @zwelf2 light us up:
12:06 < bridge> <Jupstar ✪> 
12:06 < bridge> <Jupstar ✪> Assuming there is only one "raw"-snapshot that is used for delta comparision.
12:06 < bridge> <Jupstar ✪> 
12:06 < bridge> <Jupstar ✪> How can the client and server be sure they talk about the same raw snapshot?
12:06 < bridge> <Jupstar ✪> 
12:06 < bridge> <Jupstar ✪> - if raw-snap is #1 and snap #2 comes in, and the client tells the server it uses snap #2 now, if that packet is lost, server still assumes it must be #1. even if the snap-ack is resent. during that time how does the client proceed?
12:06 < bridge> <Jupstar ✪> 
12:06 < bridge> <Jupstar ✪> it can't wait for the server to also ack the snap-ack. then we have a infinite cycle.=> it must use multiple raw snaps to be correct (?)
12:06 < bridge> <Jupstar ✪> chillerdragon: when implement "edit" for irc
12:24 < bridge> <Jupstar ✪> @ryozuki please add proper static asserts to rust 🥹
12:26 < bridge> <Jupstar ✪> Macros have no kind of type information and checking e.g. a const of a trait can't be done at compile time directly. Currently the only way I know is to let usize overflow in a const expression xD
12:52 < bridge> <ryozuki> xd
13:00 < bridge> <heinrich5991> `std::unique_ptr<int> test = std::make_unique(10);`. deleting is handled automatically
13:03 < bridge> <heinrich5991> there are multiple raw snaps stored on the client
13:04 < bridge> <ZombieToad> @[matrix]: @heinrich5991 @murpi @deen @snailx3 @learath2 @robyt3 @pipou_tw  Hello i would like to report the moderator ReD he has banned me ip (213.31.170.238) for until january 10th for ban evasion when im wasnt banned and i was 1 hour into a race with my fat friend Deamons
13:04 < bridge> <heinrich5991> don't mass-ping
13:04 < bridge> <heinrich5991> thanks
13:04 < bridge> <ZombieToad> what why are you deleting my support messages
13:05 < bridge> <ZombieToad> stop
13:05 < bridge> <heinrich5991> the range "last snapshot that was used as a delta" to "newest snapshot that I received" is stored by the client
13:05 < bridge> <heinrich5991> "newest snapshot that I received" is sent to the server
13:05 < bridge> <ZombieToad> im trying to report abusing staff who has banned me
13:05 < bridge> <heinrich5991> kinda the wrong channel
13:06 < bridge> <heinrich5991> but you also mass-pinged
13:06 < bridge> <ZombieToad> what channel do i speak to admins on
13:06 < bridge> <ZombieToad> developer has all the admins
13:06 < bridge> <heinrich5991> send me an email: heinrich5991@gmail.com
13:07 < bridge> <milkeeycat> Thanks for your ticket, we will fix this awful injustice
13:07 < bridge> <ZombieToad> i dont know how to send email
13:07 < bridge> <ZombieToad> i use this chat
13:07 < bridge> <heinrich5991> you could also use discord, but you might be banned here
13:07 < bridge> <heinrich5991> not sure
13:08 < bridge> <ZombieToad> yes the discord owner "jao" does not like me
13:08 < bridge> <milkeeycat> banned for complaining? :justatest:
13:08 < bridge> <ZombieToad> he ban me forever for no reaosn
13:08 < bridge> <heinrich5991> send me an email. thanks
13:08 < bridge> <ZombieToad> but my current problem is ReD has banned me for evasion until 10th january when i was 1 hour into map and i wasnt evading
13:09 < bridge> <ZombieToad> he has banned my ip 213.31.170.238
13:09 < bridge> <ZombieToad> kindly unban me and remove ReDs account
13:10 < bridge> <Jupstar ✪> OK then it makes sense
13:11 < bridge> <heinrich5991> (look for `PurgeUntil` in src/engine/client/client.cpp)
13:12 < bridge> <Jupstar ✪> And can u also rate the effective traffic saving?
13:14 < bridge> <heinrich5991> the traffic savings by using deltas instead of sending the whole snap?
13:15 < bridge> <Jupstar ✪> Yes
13:16 < bridge> <Jupstar ✪> It kinda must depent on the ping and other factors
13:17 < bridge> <heinrich5991> it means we can just dump rarely changing data into the snap
13:17 < bridge> <heinrich5991> e.g. all the player data and metadata about the game
13:17 < bridge> <heinrich5991> and it only consumes traffic at the start of the session and then only when it changes
13:18 < bridge> <heinrich5991> vs sending game/player data every tick
13:18 < bridge> <Jupstar ✪> Yes but how effective is it actually
13:19 < bridge> <Jupstar ✪> Player data could be moved out, so id not count that
13:19 < bridge> <heinrich5991> player data could be moved out, but then you're implementing your own diffing algorithm for player data
13:19 < bridge> <heinrich5991> which the snap already is
13:20 < bridge> <Jupstar ✪> OK but I'm interested how effective it is for the more often changing stuff
13:21 < bridge> <heinrich5991> I don't know. I'd need to modify the libtw2 code a little to sample it, I guess
13:22 < bridge> <Jupstar ✪> I was always surprised that standing still on man server still creates significant enough traffic
13:22 < bridge> <Jupstar ✪> Lan
13:34 < bridge> <murpi> Windows not saving the command history between sessions is absolutely infuriating infuriating
13:34 < bridge> <murpi> Windows not saving the command history between sessions is absolutely infuriating
13:36 < bridge> <murpi> Windows's cmd line tool not saving the command history between sessions is absolutely infuriating
13:48 < bridge> <ryozuki> https://www.vim.org/vim-9.1-released.php
13:48 < bridge> <ryozuki> > This release is dedicated to Bram Moolenaar, Vims lead developer for more than 30 years, who passed away half a year ago. The Vim project wouldn't exist without his work!.
14:06 < bridge> <ryozuki> https://github.com/kyren/piccolo
14:08 < bridge> <Jupstar ✪> Do u remember her? I told you about here before xdd
14:08 < bridge> <Jupstar ✪> She also maintainer of the hashlink create I use
14:09 < bridge> <ryozuki> ah xd
14:10 < bridge> <ryozuki> https://github.com/kyren/turbulence
14:10 < bridge> <Jupstar ✪> Lead Dev of starbound or smth
14:11 < bridge> <ryozuki> epyc
14:12 < bridge> <heinrich5991> https://github.com/kyren/webrtc-unreliable
14:12 < bridge> <heinrich5991> sounds interesting for ddnet
14:18 < bridge> <Jupstar ✪> Go implement
14:19 < bridge> <heinrich5991> easier to implement after https://github.com/ddnet/ddnet/pull/6961
14:20 < bridge> <heinrich5991> because transports become abstracted with it
14:20 < bridge> <heinrich5991> my next plan after quic would be steam networking, so we could try getting ddos-proof servers with steam
14:25 < bridge> <Jupstar ✪> Sounds interesting
14:25 < bridge> <Jupstar ✪> You should join team zwelf & patiga
14:56 < bridge> <stnwtr> Yeah got it, thanks :)
14:56 < bridge> <stnwtr> Also read that smart pointers inside std containers (like vectors) are not good practice - and that's what I need :/
14:56 < bridge> <stnwtr> But works fine deleting in the base class!
14:56 < bridge> <stnwtr> 
14:56 < bridge> <stnwtr> However, just wanted to ask another question:
14:56 < bridge> <stnwtr> ```cpp
14:56 < bridge> <stnwtr> struct Base {
14:56 < bridge> <stnwtr>     virtual int number() = 0;
14:56 < bridge> <stnwtr>     virtual ~Base() = default;
14:56 < bridge> <stnwtr> };
14:56 < bridge> <stnwtr> 
14:56 < bridge> <stnwtr> struct Derived : public Base {
14:56 < bridge> <stnwtr>     int number() override {
14:56 < bridge> <stnwtr>         return 10;
14:56 < bridge> <stnwtr>     }
14:56 < bridge> <stnwtr> };
14:56 < bridge> <stnwtr> 
14:56 < bridge> <stnwtr> int main() {
14:56 < bridge> <stnwtr>     vector<Base *> x;
14:56 < bridge> <stnwtr>     x.emplace_back(new Derived);
14:56 < bridge> <stnwtr> 
14:56 < bridge> <stnwtr>     cout << x.size() << " -> " << x[0] << "(" << x[0]->number() << ")" << endl;
14:56 < bridge> <stnwtr> 
14:56 < bridge> <stnwtr>     for (const auto &item: x) {
14:56 < bridge> <stnwtr>         delete item;
14:56 < bridge> <stnwtr>     }
14:56 < bridge> <stnwtr> }
14:56 < bridge> <stnwtr> ```
14:57 < bridge> <stnwtr> 
14:57 < bridge> <stnwtr> There are more structs like `Derived` which inherit `Base`. What would be the best way to clone `vector<Base *> x`? I need the `Base *` values inside also to be deep copied. Played around with copy/constructors but that didn't work out since the generic is a pointer I think.
14:57 < bridge> <stnwtr> Do I need to implement a `virtual clone()` method manually in the base class and overwrite it in the subs, then call them in a loop to fill a new vector?
14:57 < bridge> <heinrich5991> where did you read that smart pointers inside std containers aren't good practice?
14:57 < bridge> <ryozuki> maybe its more that u should simply give ownership to the vec?
14:57 < bridge> <ryozuki> but idk
14:57 < bridge> <stnwtr> I read they could leak when `emplace_back` fails for example
14:58 < bridge> <heinrich5991> in that case, your example would also leak, I think
14:58 < bridge> <stnwtr> https://stackoverflow.com/questions/3283778/why-can-i-not-push-back-a-unique-ptr-into-a-vector
14:58 < bridge> <stnwtr> Comments in accepted answer
14:58 < bridge> <heinrich5991> the comments in the accepted answer tell you to use `std::unique_ptr` over raw pointers, I think
14:59 < bridge> <heinrich5991> because raw pointers might leak
14:59 < bridge> <stnwtr> wait I had another source
15:00 < bridge> <heinrich5991> bonus question: no, C++ will stay relevant for ddnet. barely anything is rust yet
15:01 < bridge> <heinrich5991> yes, `virtual std::unique_ptr<Base> clone() const` is the only way I can think of
15:01 < bridge> <heinrich5991> I want to know why you need polymorphism though @stnwtr
15:01 < bridge> <learath2> Hm, I can’t imagine unique_ptrs leaking on throw. If emplace fails it probably just results in the old unique_ptr keeping the ownership and if that happens to be a temporary it would then get destroyed properly
15:02 < bridge> <stnwtr> I am searching for the other posts I read ... maybe I misunderstood because coming from Java, C++ is super hard haha
15:02 < bridge> <ryozuki> dont try to do java in c++
15:02 < bridge> <stnwtr> i am trying
15:03 < bridge> <stnwtr> well, I had 2 years rust in between ... and I am "unlearning" the java way
15:03 < bridge> <ryozuki> a common problem is not adapting to the language idioms and trying to force one from another lang
15:03 < bridge> <ryozuki> its a common problem in rust learners too :d
15:04 < bridge> <learath2> It’s a massive problem in Rust
15:04 < bridge> <stnwtr> Because my teacher wants me to do so
15:04 < bridge> <stnwtr> Having a base class building and some subclasses like "SolarPowerPlant", "GiantHouse" and so on
15:04 < bridge> <stnwtr> which consists of Materials (baseclass) like Wood, Metal, ...
15:04 < bridge> <stnwtr> 
15:04 < bridge> <stnwtr> And I need vectors (or arrays) of the base*
15:04 < bridge> <ryozuki> but well c++ kinda has classes like java
15:04 < bridge> <ryozuki> but with pointers xD
15:05 < bridge> <learath2> Because Rust is just absurd compared to other languages. No other language really has such strictly enforced ownership hierarchies and lifetime restrictions
15:05 < bridge> <ryozuki> ah typical teacher teacing OOP
15:05 < bridge> <ryozuki> blegh
15:05 < bridge> <ryozuki> why ppl teach OOP and not useful stuff
15:06 < bridge> <stnwtr> How would you do this without oop?
15:06 < bridge> <stnwtr> Enums would be nice imo, but well, school
15:06 < bridge> <ryozuki> @stnwtr btw did ur teacher ever say the phrase "composition over inheritance"?
15:06 < bridge> <stnwtr> Not yet
15:06 < bridge> <stnwtr> And no
15:06 < bridge> <ryozuki> ask him
15:06 < bridge> <ryozuki> about it
15:07 < bridge> <stnwtr> Almost forgot to thank you :)
15:07 < bridge> <learath2> Well, oop is useful when you have shared behaviour. What sort of behaviour would a `Wood` class even have?
15:07 < bridge> <stnwtr> I should use `unique_ptr` everywhere I can?
15:07 < bridge> <ryozuki> > To favor composition over inheritance is a design principle that gives the design higher flexibility. It is more natural to build business-domain classes out of various components than trying to find commonality between them and creating a family tree. For example, an accelerator pedal and a steering wheel share very few common traits, yet both are vital components in a car. What they can do and how they can be used to benefit the car are easily 
15:07 < bridge> <ryozuki> > 
15:08 < bridge> <ryozuki> > Initial design is simplified by identifying system object behaviors in separate interfaces instead of creating a hierarchical relationship to distribute behaviors among business-domain classes via inheritance. This approach more easily accommodates future requirements changes that would otherwise require a complete restructuring of business-domain classes in the inheritance model. Additionally, it avoids problems often associated with relatively 
15:08 < bridge> <stnwtr> Nothing, thats so stupid. Just a single variable, the price.
15:08 < bridge> <stnwtr> In part 1 of the exercise we used an enum tho.
15:08 < bridge> <stnwtr> Now we need a class and are not even allowed to use a static variable for the price
15:08 < bridge> <stnwtr> School is trolling us, right?
15:08 < bridge> <learath2> Smart pointers are indeed the way in modern C++. You want to think in terms of ownerships
15:09 < bridge> <milkeeycat> gimme that sweet static void abstract MainBuilderProducer
15:09 < bridge> <milkeeycat> gimme that sweet static void abstract MainBuilderProducerFactory
15:09 < bridge> <ryozuki> in java its where u can manage to put 100 prefixes before the function name
15:09 < bridge> <stnwtr> So I should avoid raw pointers as good as possible
15:09 < bridge> <ryozuki> public final static const void urmom
15:10 < bridge> <ryozuki> (sry i forgot a lot of java kek)
15:10 < bridge> <stnwtr> good!
15:10 < bridge> <ryozuki> u know
15:10 < bridge> <ryozuki> the next java is called dart
15:10 < bridge> <ryozuki> im using it for flutter apps
15:10 < bridge> <learath2> But then `Wood` being the baseclass of `WoodHouse` wouldn’t really make much sense, why would you ever want `WoodHouse` to inherit the price of wood? So that’s kinda why this is not the greatest use of OOP
15:10 < bridge> <ryozuki> https://dart.dev/
15:10 < bridge> <milkeeycat> i though its c# :justatest:
15:10 < bridge> <stnwtr> Its not, sorry
15:11 < bridge> <ryozuki> no
15:11 < bridge> <ryozuki> dart is like go for making apps
15:11 < bridge> <ryozuki> stupidly simple and focused on being good at making apps
15:11 < bridge> <stnwtr> Baseclasses are `Material` (for Wood, Metal, Plastic, ...) and `Building` for a few more where Building has a `vector<Material *>`
15:11 < bridge> <heinrich5991> yes
15:11 < bridge> <stnwtr> Baseclasses are `Material` (for Wood, Metal, Plastic, ...) and `Building` for a few more (like SolarPowerPlant) where Building has a `vector<Material *>`
15:11 < bridge> <ryozuki> only if u need a pointer
15:11 < bridge> <ryozuki> shouldnt u favor references
15:12 < bridge> <heinrich5991> if you need ownership
15:12 < bridge> <heinrich5991> yes
15:12 < bridge> <ryozuki> i would even favor std::option<withref>>
15:12 < bridge> <ryozuki> but thats me being rusty
15:12 < bridge> <heinrich5991> the OOP examples by your teacher seem sketchy. just follow the class and forget the OOP practices later
15:12 < bridge> <ryozuki> altho idk if option is zero cost
15:12 < bridge> <stnwtr> I used option, expected and tuple for a few reasonable things, my teacher called it overengineered :(
15:12 < bridge> <learath2> I see, well that sounds saner, anyway it’s just a conceptual exercise
15:13 < bridge> <heinrich5991> it's not zero-cost
15:13 < bridge> <learath2> Tell him you find his solution underengineered
15:13 < bridge> <ryozuki> not even for a reference?
15:13 < bridge> <ryozuki> rip c++
15:13 < bridge> <stnwtr> is `unique_ptr` zero-cost or are there some bytes overhead?
15:13 < bridge> <stnwtr> for shared_ptr there is a counter
15:13 < bridge> <stnwtr> but unique_ptr?
15:13 < bridge> <heinrich5991> it's zero-cost in terms of space
15:14 < bridge> <learath2> Alllmost zero runtime cost too
15:14 < bridge> <heinrich5991> ye
15:14 < bridge> <stnwtr> and a huge +++ in terms of memory management
15:14 < bridge> <ryozuki> https://www.gamingonlinux.com/2024/01/linux-hits-nearly-4-desktop-user-share-on-statcounter/
15:14 < bridge> <ryozuki> YEAR OF LINUX DESKTOP!!!
15:15 < bridge> <learath2> unless you are coding for a very very very weak mcu the runtime cost won’t ever be something you think about
15:15 < bridge> <stnwtr> tldr;
15:15 < bridge> <stnwtr> a lot of things i am learning in software engineering classes are outdated and bad practice?
15:15 < bridge> <stnwtr> probably
15:16 < bridge> <heinrich5991> unclear. software engineering is probably never outdated. coding classes more so
15:16 < bridge> <heinrich5991> unclear. software engineering is probably never outdated. classes where you learn to code more so
15:16 < bridge> <learath2> I found courses range from wildly outdated to slightly outdated and the practices range from very bad to meh
15:17 < bridge> <stnwtr> We'll do server side web services using Java Server Pages next term ....
15:17 < bridge> <learath2> Oh yeah, the actual meta software engineering part is never really out of date
15:17 < bridge> <learath2> Now that’s one course I’d just delete from my brain after passing
15:18 < bridge> <stnwtr> done already
15:18 < bridge> <ryozuki> r u doing uni?
15:18 < bridge> <stnwtr> sadly, yes
15:18 < bridge> <learath2> Unless you aspire to work at airline IT. They love their java legacy stuff
15:18 < bridge> <stnwtr> prof about 600 years old
15:18 < bridge> <milkeeycat> in my uni mfs teach nothing :justatest:
15:18 < bridge> <milkeeycat> in my uni mfs teach us nothing :justatest:
15:18 < bridge> <ryozuki> i did no uni :justatest:
15:19 < bridge> <stnwtr> good!
15:19 < bridge> <milkeeycat> if i wasnt in uni id probably go on the war :justatest:
15:19 < bridge> <learath2> The most out of date course I had was computer architecture, but I do kinda understand that one. I doubt you can teach anything about any modern architecture to any bachelor student
15:20 < bridge> <stnwtr> I liked architecture a lot. Learning about MOSFET, MUX, Latches, Boolean Algebra and all that stuff. That was fun
15:20 < bridge> <milkeeycat> is it just me or it looks like cum(new wallpapers btw) :greenthing:
15:20 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1192110162622812250/image.png?ex=65a7e21b&is=65956d1b&hm=794bd2331701ca05b67de25c47f188371351043c49df615acd01b8e88ec3ddd4&
15:20 < bridge> <ryozuki> btw von neumann is a genius among geniuses
15:20 < bridge> <ryozuki> the guy did everything
15:20 < bridge> <stnwtr> And the RISC-V, but term ended too soon
15:20 < bridge> <learath2> I’m a sucker for old computer architecture. Back then everything made so much sense
15:20 < bridge> <ryozuki> > ohn von Neumann (/vɒn ˈnɔɪmən/ von NOY-mən; Hungarian: Neumann János Lajos [ˈnɒjmɒn ˈjaːnoʃ ˈlɒjoʃ]; December 28, 1903 – February 8, 1957) was a Hungarian-American mathematician, physicist, computer scientist, engineer and polymath. He had perhaps the widest coverage of any mathematician of his time,[9] integrating pure and applied sciences and making major contributions to many fields, including mathematics, physics, economics,
15:21 < bridge> <ryozuki> > John von Neumann (/vɒn ˈnɔɪmən/ von NOY-mən; Hungarian: Neumann János Lajos [ˈnɒjmɒn ˈjaːnoʃ ˈlɒjoʃ]; December 28, 1903 – February 8, 1957) was a Hungarian-American mathematician, physicist, computer scientist, engineer and polymath. He had perhaps the widest coverage of any mathematician of his time,[9] integrating pure and applied sciences and making major contributions to many fields, including mathematics, physics, economics
15:21 < bridge> <learath2> Pipelines were nice and short, caches MSI
15:21 < bridge> <stnwtr> 3rd term out of 7 now and I want to give up because its either boring or too much
15:22 < bridge> <ryozuki> @stnwtr i recommend this book, its post uni stuff tho https://en.algorithmica.org/hpc/
15:22 < bridge> <ryozuki> but its rly rly interesting
15:22 < bridge> <learath2> Yeah, truly a genius
15:24 < bridge> <stnwtr> Also got a few recommendations for books about building compilers? Need some for a presentation / paper I need to write
15:24 < bridge> <learath2> Is it 4 terms a year?
15:24 < bridge> <stnwtr> thanks
15:24 < bridge> <stnwtr> 3 1/2 years
15:24 < bridge> <stnwtr> 1 year = 2 terms
15:24 < bridge> <learath2> The classic recommendation for compiler theory is the dragon book
15:24 < bridge> <ryozuki> the book if for making truly perfomant code tho
15:24 < bridge> <stnwtr> Yep, already got the dragon book
15:24 < bridge> <learath2> But I don’t think it’s very beginner friendly
15:24 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1192111340593086514/dennard.png?ex=65a7e333&is=65956e33&hm=f2f262d9b4dd46c7175dfaac9248f810ce5390c5726705255eeb852c4835f6c3&
15:25 < bridge> <stnwtr> I am not *that much* a beginner in compilers I think. Did the craftinginterpreters thing and some stuff. And I only need to write about 15 pages, that's done fast I hope
15:26 < bridge> <Jupstar ✪> Nice
15:26 < bridge> <learath2> Ah, I was just about to recommend crafting interpreters
15:26 < bridge> <ryozuki> https://os.phil-opp.com/
15:27 < bridge> <ryozuki> https://llvm.org/docs/tutorial/ :troller:
15:28 < bridge> <stnwtr> troller? D:
15:28 < bridge> <stnwtr> You don't recommend the llvm tutorial?
15:28 < bridge> <ryozuki> oh i do
15:28 < bridge> <ryozuki> but its not simple xd
15:28 < bridge> <stnwtr> probably too high for me then
15:29 < bridge> <learath2> A friend of mine recommended me “Appel. Modern Compiler implementation in C” but I never got around to reading it so not sure if good
15:29 < bridge> <learath2> Might be worth looking into
15:29 < bridge> <ryozuki> oh i didnt read this
15:29 < bridge> <ryozuki> well i currently work making compilers :d
15:29 < bridge> <stnwtr> Hope libgen has this books :hAA:
15:29 < bridge> <ryozuki> but did u do a compiler or a interpreter
15:29 < bridge> <learath2> It should, it’s a classic recommendation
15:30 < bridge> <stnwtr> It was an interpreter for the so called "lox" language
15:30 < bridge> <stnwtr> Lexing, Parsing and stuff is similar in building compilers/interpreters i think
15:31 < bridge> <ryozuki> that part is similar in both yeah
15:31 < bridge> <ryozuki> learn llvm
15:31 < bridge> <ryozuki> then learn MLIR
15:31 < bridge> <snailx3> :BASED:
15:32 < bridge> <ryozuki> :BASEDDEPT:
15:32 < bridge> <snailx3> ☕
15:32 < bridge> <ryozuki> @stnwtr did u do type analysis
15:32 < bridge> <ryozuki> or is it dynamic
15:32 < bridge> <stnwtr> mlir? something like llvm-ir?
15:32 < bridge> <ryozuki> mlir is a new thing
15:33 < bridge> <ryozuki> above llvm ir
15:33 < bridge> <stnwtr> sounds nice
15:33 < bridge> <ryozuki> my blog https://edgarluque.com/blog/mlir-with-rust/
15:33 < bridge> <stnwtr> ah nice, thanks
15:33 < bridge> <stnwtr> dynamic as far as i remember? hmmm
15:33 < bridge> <ryozuki> im not rly good blogger but hope its ok :d
15:33 < bridge> <stnwtr> its fine :D
15:37 < bridge> <stnwtr> And the reason I got into computer science is teeworlds. I started playing 7 or 8 years ago and since then always wanted to create a custom gamemode xD
15:37 < bridge> <stnwtr> Now I am starting learning c++, woah xD
15:37 < bridge> <stnwtr> Progress :stonks:
15:38 < bridge> <ryozuki> kinda same
15:38 < bridge> <ryozuki> but i started c++ in 2015 xd
15:39 < bridge> <stnwtr> I never did
15:39 < bridge> <learath2> Metoo
15:39 < bridge> <stnwtr> Well, just some hello world, but stopped right there xD
15:41 < bridge> <stnwtr> Now uni forces me to do
15:46 < bridge> <cyberfighter> your name is edgar?
15:46 < bridge> <ryozuki> yes
15:46 < bridge> <ryozuki> its nothing new here btw
15:46 < bridge> <ryozuki> xd
15:47 < bridge> <etto7695> Katerina and Natasha missing you❤️
15:47 < bridge> <etto7695> https://discord.gg/katyalove
15:47 < bridge> <etto7695> @everyone
15:57 < bridge> <chairn> well, you probably learned newton dynamics in high school, yet it's outdated for more than 100 yers
15:58 < bridge> <chairn> similarly, you learn 70's electronic stuff to better understand nowadays electronics and computer architecture
15:58 < bridge> <chairn> you can't completely understand these if you don't study what has been made before and why it has been made this way
15:59 < bridge> <ryozuki> also geometry
15:59 < bridge> <ryozuki> non euclidean rules the world
15:59 < bridge> <ryozuki> but u dont learn that
15:59 < bridge> <devinci24> I find this comparison really poor. Physics haven't changed in the last millions of years, computers have evolved a lot in these last few ones.
15:59 < bridge> <devinci24> I kinda get your point but meh
16:00 < bridge> <ryozuki> logic hasnt changed as far as i know
16:00 < bridge> <chairn> you need it because implementation choice were made back then and still hold today although technical constraint has been lifted
16:00 < bridge> <ryozuki> @learath2
16:00 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1192120428639043714/GC3iR5wW4AA2Wh8.png?ex=65a7ebaa&is=659576aa&hm=4c6fe2917638dd88e8e57372c0983a045ef7b1612eb43d28562d90f383bbd77b&
16:01 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1192120449287594104/GC3iSImX0AAgK3-.png?ex=65a7ebaf&is=659576af&hm=6a22af59f56dd993884537c2c1ae4795c4854d9200ea2654c1aafa0c822ff727&
16:01 < bridge> <ryozuki> XD
16:01 < bridge> <ryozuki> its public domain now
16:01 < bridge> <chairn> <https://www.reddit.com/r/ProgrammerHumor/comments/18xhjmq/whoisgonnatellhim/>
16:09 < bridge> <Jupstar ✪> How it should be😏 😏 😏
16:26 < bridge> <teero777> yo
16:26 < bridge> <teero777> i copied the code from the hook coll width to make some gameplay visualisations
16:26 < bridge> <teero777> for whatever reason when making very smol lines they dissapear.
16:26 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1192126773681467453/image.png?ex=65a7f193&is=65957c93&hm=7b8cc6f97dc816289121347619cff887c7b0a3676ed129d019685fe50dcd0df5&
16:49 < bridge> <ryozuki> increedibly stupid
17:30 < bridge> <ar1gin> https://cdn.discordapp.com/attachments/293493549758939136/1192142983995326494/RDT_20240103_2306536694716059660985511.png?ex=65a800ac&is=65958bac&hm=50b4b7e86b1bff6126c9fa0d5fd13cbfe023001f4ec8c75274f48996c1df765d&
17:38 < bridge> <milkeeycat> use rust :santatrollet:
17:41 < bridge> <Jupstar ✪> Rust++ or what
17:55 < bridge> <ar1gin> he clearly did not understand the meme
18:05 < bridge> <milkeeycat> i did but u better use rust still
18:23 < bridge> <milkeeycat> someone actually clonned my repo with passwords :justatest:
18:23 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1192156187437826118/image.png?ex=65a80cf8&is=659597f8&hm=bc8f03b567aee9edf10aac5786e8fed9826687d8bda22043a9cb376a84da72f7&
18:24 < bridge> <Jupstar ✪> so why did you clone them?
18:24 < bridge> <milkeeycat> i didnt
18:24 < bridge> <milkeeycat> 4 unique cloners  :justatest:
18:25 < bridge> <Jupstar ✪> what even is a git clone?
18:25 < bridge> <Jupstar ✪> 
18:25 < bridge> <Jupstar ✪> does downloading as zip also count as clone?
18:25 < bridge> <Jupstar ✪> do you have money on your bank? 😏
18:25 < bridge> <Jupstar ✪> asking for a friend
18:25 < bridge> <milkeeycat> no
18:26 < bridge> <milkeeycat> im poor as fuck
18:26 < bridge> <milkeeycat> i saved a bit to host ddts who
18:26 < bridge> <milkeeycat> if i ever finish it 😏
18:26 < bridge> <Jupstar ✪> ez
18:26 < bridge> <Jupstar ✪> ddnet tournament with 2000€ price pool
18:27 < bridge> <milkeeycat> downloading as .zip doesnt seem to count as clone
18:27 < bridge> <milkeeycat> only `git clone` counts
18:28 < bridge> <Jupstar ✪> maybe it takes a while before popping up in stats
18:28 < bridge> <Jupstar ✪> or some bots downloaded it xd
18:29 < bridge> <milkeeycat> 15 unique clones for websites. am so popular 😏
18:29 < bridge> <milkeeycat> not even me, the website!
18:29 < bridge> <Jupstar ✪> where did u find these stats even?
18:30 < bridge> <Jupstar ✪> https://github.com/ddnet/ddnet/graphs/traffic
18:30 < bridge> <Jupstar ✪> ah here
18:30 < bridge> <milkeeycat> insights tab in github repo
18:32 < bridge> <milkeeycat> cant see that :feelsbadman:
18:32 < bridge> <Jupstar ✪> lol
18:32 < bridge> <Jupstar ✪> contribute to ddnet and get member
18:32 < bridge> <Jupstar ✪> 😏
18:33 < bridge> <milkeeycat> is there any task for dum dum?
18:33 < bridge> <milkeeycat> is there any task for dum dums?
18:33 < bridge> <Jupstar ✪> i dunno
18:33 < bridge> <milkeeycat> i can change commetns :justatest:
18:33 < bridge> <milkeeycat> i can change comments :justatest:
18:33 < bridge> <Jupstar ✪> i am working on safe rc<refcell>> still
18:33 < bridge> <Jupstar ✪> but i have trouble, bcs without static_assert & typeof in rust it's hard
18:33 < bridge> <Jupstar ✪> to do what i need
18:34 < bridge> <chillerdragon> i opened an easy issue on ddnet-web
18:34 < bridge> <Jupstar ✪> @milkeeycat u web dev right?
18:34 < bridge> <milkeeycat> i wont get a role if i contribute to website, will i?
18:34 < bridge> <Jupstar ✪> wanna continue my react ddnet version? 😏
18:35 < bridge> <milkeeycat> im react hater but sure :justatest:
18:35 < bridge> <Jupstar ✪> https://github.com/Jupeyy/ddnet-web/tree/testing_nextjs
18:35 < bridge> <Jupstar ✪> good luck
18:35 < bridge> <Jupstar ✪> the "nextjs" dir is it
18:37 < bridge> <ryozuki> i got a google play dev acc
18:37 < bridge> <ryozuki> now i can do apps to make money :justatest:
18:37 < bridge> <ryozuki> my company name is RustWorks
18:37 < bridge> <ryozuki> im original
18:37 < bridge> <ryozuki> its not a legal name tho xd
18:38 < bridge> <Jupstar ✪> why is it not legal? xd
18:38 < bridge> <ryozuki> cuz its not a real company
18:38 < bridge> <ryozuki> they just ask a business mame
18:38 < bridge> <ryozuki> name
18:39 < bridge> <Jupstar ✪> but you just made it
18:39 < bridge> <Jupstar ✪> so it's real
18:39 < bridge> <ryozuki> on google play yesxd
18:40 < bridge> <Jupstar ✪> so when can i join
18:40 < bridge> <heinrich5991> did you submit any app already?
18:40 < bridge> <Jupstar ✪> and create awesome apps with u
18:40 < bridge> <ryozuki> not yet
18:40 < bridge> <ryozuki> it only cost me 20€ and my personal info kek
18:43 < bridge> <milkeeycat> chillerdragon: did u mean this https://github.com/ddnet/ddnet-web/issues/278
18:47 < bridge> <chairn> https://discord.com/channels/252358080522747904/293493549758939136/1192120621539283064
18:58 < bridge> <fudgy_> I tried usa1 and ger2 and I still get the dropped weird message 'invalid' (0), failed on '(type out of range)' message on my 0.7 client when a 0.6 client finishes
18:59 < bridge> <heinrich5991> you can check /info to see which version the server runs
19:03 < bridge> <fudgy_> commit 083c8c77bfe7de6e, which is 7 days ago
19:04 < bridge> <fudgy_> in both servers
19:06 < bridge> <heinrich5991> so it doesn't have your commit from https://github.com/ddnet/ddnet/pull/7741 yes
19:06 < bridge> <heinrich5991> so it doesn't have your commit from https://github.com/ddnet/ddnet/pull/7741 yet
19:14 < bridge> <milkeeycat> xd
19:14 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1192169033282359367/image.png?ex=65a818ee&is=6595a3ee&hm=7fa42c1de2ec594e64c2032df0e884f2a92fd984c346f9b6576fe4a3d6507d72&
19:15 < bridge> <fudgy_> yup, Im waiting xd
19:16 < bridge> <Jupstar ✪> well u cant take that serious xd
19:16 < bridge> <milkeeycat> npm packages update every 5 seconds so yeah :justatest:
19:17 < bridge> <milkeeycat> https://dayssincelastjavascriptframework.com/
19:17 < bridge> <Jupstar ✪> tell me when u started it, if u like it 😏
19:18 < bridge> <Jupstar ✪> ravie hated it, but i think was quite ok
19:18 < bridge> <milkeeycat> its so pretty :owo:
19:18 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1192170060123484261/image.png?ex=65a819e3&is=6595a4e3&hm=3e56dd171074e3578b51b298edefc72925ea13e2b67dada1c2578964fea20094&
19:18 < bridge> <Jupstar ✪> ez
19:21 < bridge> <heinrich5991> these vulnerabilities are often in not even used code paths
19:31 < bridge> <chairn> but they can help when multiple vulnerabilities are combined which is almost always the case
19:33 < bridge> <heinrich5991> if they're not in used code paths, how are they useful?
19:34 < bridge> <chairn> you can force jumps to unused code with other vulnerabilities such as return oriented programming
19:34 < bridge> <heinrich5991> can you give an example of chained vulnerabilities in JS that use (otherwise) dead code
19:34 < bridge> <heinrich5991> that's not the case for JS AFAIK
19:35 < bridge> <chairn> if there's a buffer overflow somewhere that is exploitable, you can make the program jump to another vulnerability
19:36 < bridge> <heinrich5991> also not applicable to JS?
19:36 < bridge> <milkeeycat> whats the url to use skins.tw skins? Xd
19:36 < bridge> <ryozuki> are js programs memory safe?
19:36 < bridge> <chairn> well, i don't know for JS, but in c/c++, it's certainly the case
19:37 < bridge> <ryozuki> i think u cant get a segfault in js
19:37 < bridge> <chillerdragon> Yes that should be fun
19:37 < bridge> <milkeeycat> surely 😬
19:37 < bridge> <heinrich5991> this is about JS
19:37 < bridge> <ryozuki> unless u find a vuln in the runtime
19:37 < bridge> <chillerdragon> Top Gs use scrumplex proxy
19:37 < bridge> <chairn> well, i already had a segfault in python, so i wouldn't bet on that 😄
19:38 < bridge> <heinrich5991> unlike cpython, JS is designed to be a safe environment
19:38 < bridge> <heinrich5991> cpython extensions are routinely implemented in C/C++, and python even has ffi which can obviously crash
19:39 < bridge> <milkeeycat> ok how to set that thing xd
19:39 < bridge> <chillerdragon> I forgot ping scrumpley
19:39 < bridge> <milkeeycat> @scrumplex hallo
19:44 < ws-client> <chillerplex> hi i am totally the real scrumplex
19:44 < ws-client> <chillerplex> https://skins.scrumplex.net/
19:44 < ws-client> <chillerplex> this is a legit url
19:45 < ws-client> <chillerplex> click it
19:45 < ChillerDragon> its a proxy which combines all dl skin vendors into one
19:45 < ChillerDragon> for maximal skin madness
19:46 < ChillerDragon> code is here https://codeberg.org/Scrumplex/skinprox
19:47 < bridge> <heinrich5991> @scrumplex why rewritten from go to rust?
19:47 < bridge> <ryozuki> based
19:48 < bridge> <ryozuki> @heinrich5991 https://assets.ddstats.org/
19:48 < bridge> <ryozuki> do u think this would work
19:48 < bridge> <ryozuki> with ddnet
19:48 < bridge> <heinrich5991> what would work? I don't understand
19:48 < bridge> <heinrich5991> a directory listing?
19:48 < bridge> <ryozuki> as the url to get skins on ddnet client
19:48 < bridge> <heinrich5991> yea, should work, I think
19:48 < ChillerDragon> wowo so even github?
19:49 < bridge> <ryozuki> ah it needs to be this one right https://assets.ddstats.org/skins/
19:49 < bridge> <heinrich5991> yes
19:49 < bridge> <ryozuki> chiller this is my skin asset server
19:49 < bridge> <milkeeycat> what the hell is codeberg
19:49 < bridge> <heinrich5991> it's like github
19:49 < bridge> <milkeeycat> why not github? xd
19:49 < bridge> <ryozuki> it steals from skins.tw closed source database
19:49 < ChillerDragon> https://raw.githubusercontent.com/TeeworldsDB/skins/master/06/
19:50 < ChillerDragon> so this works too for dl url? o.O
19:50 < bridge> <ryozuki> it says invalid request
19:50 < ChillerDragon> ye bcs no skin
19:50 < ChillerDragon> https://raw.githubusercontent.com/TeeworldsDB/skins/master/06/0001-default.png
19:50 < ChillerDragon> it just appends the skin name at the end i assume?
19:50 < ChillerDragon> if yes @Scrumplex go add to proxy
19:51 < ChillerDragon> @ryozuki stealer
19:51 < ChillerDragon> @milkeeycat github is owned by microsoft and closed source
19:51 < bridge> <ryozuki> i steal in name of free software foundation
19:51 < bridge> <milkeeycat> what about gitlab
19:51 < bridge> <scrumplex> Because packaging Rust projects in Nix is a lot nicer ^^
19:51 < bridge> <milkeeycat> ?
19:51 < ChillerDragon> @milkeeycat gitlab is dutch 
19:51 < bridge> <scrumplex> yup
19:51 < bridge> <heinrich5991> interesting ^^
19:52 < bridge> <heinrich5991> quite a heavy hammer for making it nicer to package though ^^
19:52 < bridge> <milkeeycat> chillerdragon: understadable
19:52 < ChillerDragon> xd
19:52 < bridge> <scrumplex> It was also an opportunity to improve my Rust skills and get more familiar with the ecosystem
19:52 < bridge> <ryozuki> Scrumplex can u add my url
19:52 < bridge> <ryozuki> to ur repo?
19:52 < bridge> <ryozuki> https://assets.ddstats.org/skins/
19:52 < bridge> <scrumplex> sure
19:52 < ChillerDragon> henlo scrumpleggs
19:53 < bridge> <scrumplex> hello im scrumpled eggs
19:53 < ChillerDragon> scrambled eggs
19:53 < bridge> <ryozuki> i like scrambled eggs
19:53 < ChillerDragon> yes very nice food
19:53 < bridge> <scrumplex> Is this order okay?
19:53 < bridge> <scrumplex> ```
19:53 < ChillerDragon> jospti the vegan misses out
19:53 < bridge> <scrumplex>       "https://scrumplex.rocks/skin/"
19:53 < bridge> <scrumplex>       "https://skins.ddnet.org/skin/community/"
19:53 < bridge> <scrumplex>       "https://skins.tee.world/"
19:53 < bridge> <scrumplex>       "https://assets.ddstats.org/skins/"
19:53 < bridge> <scrumplex>       "https://api.skins.tw/api/resolve/skins/"
19:53 < bridge> <scrumplex> ```
19:53 < bridge> <scrumplex> It will pick the first skin it finds in that order
19:53 < ChillerDragon> u forgot mine :c
19:53 < ChillerDragon> https://raw.githubusercontent.com/TeeworldsDB/skins/master/06/
19:53 < bridge> <scrumplex> sure sure
19:53 < bridge> <ryozuki> good put the skins.tw closed source last
19:54 < ChillerDragon> put mine last
19:54 < ChillerDragon> its ass collections
19:54 < bridge> <scrumplex> skins.tw is super slow and has many intermittent timeouts ^^
19:54 < ChillerDragon> mine is github
19:54 < bridge> <ryozuki> typical closed source
19:54 < ChillerDragon> its 500 half of the time
19:54 < bridge> <Jupstar ✪> i dont like eggs anyway
19:54 < ChillerDragon> jopsti cope
19:54 < bridge> <milkeeycat> they were going to be open source
19:54 < bridge> <scrumplex> you should use GitHub pages tbh
19:54 < bridge> <milkeeycat> once their dev goes back
19:54 < bridge> <ryozuki> my only grip is they dont have a dir listing like https://assets.ddstats.org/skins/
19:54 < bridge> <ryozuki> or ddnet
19:54 < bridge> <ryozuki> they put it behind a weird ass query thing
19:55 < bridge> <ryozuki> so u cant get all
19:55 < bridge> <scrumplex> ```
19:55 < bridge> <scrumplex>       "https://scrumplex.rocks/skin/"
19:55 < bridge> <scrumplex>       "https://skins.ddnet.org/skin/community/"
19:55 < bridge> <scrumplex>       "https://skins.tee.world/"
19:55 < bridge> <scrumplex>       "https://assets.ddstats.org/skins/"
19:55 < bridge> <scrumplex>       "https://api.skins.tw/api/resolve/skins/"
19:55 < bridge> <scrumplex>       "https://raw.githubusercontent.com/TeeworldsDB/skins/master/06/"
19:55 < bridge> <scrumplex> ```
19:55 < bridge> <scrumplex> 
19:55 < bridge> <scrumplex> so this?
19:55 < ChillerDragon> lgtm
19:55 < ChillerDragon> if it gets a 200 it stops there?
19:55 < ChillerDragon> do you cache?
19:55 < bridge> <scrumplex> yes and yes
19:56 < ChillerDragon> sounds pog
19:56 < ChillerDragon> cool project
19:56 < bridge> <scrumplex> I also only do HEAD requests btw
19:56 < ChillerDragon> tru web user
19:56 < bridge> <scrumplex> And redirect clients
19:56 < ChillerDragon> idk what that is but seend it before
19:56 < ChillerDragon> seen*
19:56 < bridge> <scrumplex> And redirect clients to the final skin
19:57 < bridge> <scrumplex> https://codeberg.org/Scrumplex/infrastructure/commit/9daacf0cd3b4d96704b0bf486b7f1085512e93d3
19:57 < bridge> <scrumplex> there you go
19:57 < bridge> <scrumplex> should be live in a moment
19:57 < bridge> <heinrich5991> https://skins.tw/_next/data/3nnNl9-8mmKbpfLpiKHmd/skins.json
19:57 < bridge> <heinrich5991> this looks like what you're looking for
19:58 < bridge> <ryozuki> lol
19:58 < bridge> <ryozuki> quite obscure
20:04 < bridge> <ryozuki> @scrumplex do u recommend codeberg
20:04 < bridge> <ryozuki> does it have good ecosystem
20:04 < bridge> <scrumplex> I was looking for skins in the ddstats DB that aren't in any other DB yet. https://skins.scrumplex.net/skin/火娃.png this one redirects to ddstats ^^
20:04 < bridge> <ryozuki> epic
20:04 < bridge> <scrumplex> I was looking for skins in the ddstats DB that aren't in any other DB yet. <https://skins.scrumplex.net/skin/火娃.png> this one redirects to ddstats ^^
20:04 < bridge> <ryozuki> ddstats is mine btw
20:05 < bridge> <scrumplex> I like it very much. The CI is good enough, it has everything you need (container registry, pages, LFS)
20:05 < bridge> <ryozuki> yeah
20:05 < bridge> <ryozuki> ppl only use github because discoverabilityy
20:06 < bridge> <heinrich5991> and because it was the best option at some point in time
20:08 < bridge> <ryozuki> @scrumplex does it have a mirroring feature like gitea?
20:08 < bridge> <scrumplex> Only push mirror
20:08 < bridge> <ryozuki> does it beat the speed of my cgit? https://git.edgarluque.com/
20:08 < bridge> <ryozuki> :troller:
20:08 < bridge> <scrumplex> Though you can ask them with a support ticket to get pull mirroring
20:08 < bridge> <scrumplex> They don't want to provide pull mirroring to everyone, as people set and forget about them and use codeberg's resources for no reason
20:09 < bridge> <ryozuki> ic
20:09 < bridge> <ryozuki> i have a automatic gh mirror on the url i sent
20:09 < bridge> <ryozuki> using cgit
20:09 < bridge> <scrumplex> It's a non profit registered in Berlin so it's not like they have immense amount of cash on hand
20:19 < bridge> <ryozuki> @scrumplex im sure ur in this space
20:19 < bridge> <ryozuki> did u use https://joinfirefish.org/
20:19 < bridge> <ryozuki> saw it on top repos in codeberg
20:20 < bridge> <ryozuki> such a fancy website
20:20 < bridge> <scrumplex> nope. No idea what this is :O
20:20 < bridge> <scrumplex> very fancy! xD
20:20 < bridge> <scrumplex> I dont really use any social media
20:20 < bridge> <ryozuki> its a foss activitypub microbblogging
20:20 < bridge> <ryozuki> microblogging = twitter-like
20:21 < bridge> <scrumplex> The only microblogging i do is for https://floss.social/@PrismLauncher
20:21 < bridge> <ryozuki> pog u famous
20:21 < bridge> <ryozuki> can u mention ddnet
20:22 < bridge> <ryozuki> and we mention prismlauncher in our non existent social media
20:22 < bridge> <ryozuki> 🤝
20:22 < bridge> <scrumplex> lol
20:22 < bridge> <ryozuki> xD
20:22 < bridge> <scrumplex> I should add tees to Prism Launcher
20:22 < bridge> <ryozuki> do it
20:22 < bridge> <ryozuki> best easter egg
20:22 < bridge> <scrumplex> https://scrumplex.rocks/img/1704309765_ieng3O.png
20:22 < bridge> <scrumplex> we already have "teawie"
20:22 < bridge> <scrumplex> so tee isn't too far off
20:23 < bridge> <ryozuki> too small im blind
20:23 < bridge> <ryozuki> looks anime
20:23 < bridge> <scrumplex> https://scrumplex.rocks/img/1704309803_ku2ouJ.png
20:23 < bridge> <cyberfighter> you shood ad skib toilet
20:23 < bridge> <scrumplex> https://scrumplex.rocks/img/1704309818_Ahwei0.png
20:23 < bridge> <scrumplex> https://scrumplex.rocks/img/1704309823_aePh5u.png
20:24 < bridge> <Jupstar ✪> mention that prism is Ryozuki, llvm & rust contributor, approved
20:24 < bridge> <ryozuki> xd
20:24 < bridge> <scrumplex> It is sadly not recognized by Arch Linux so it's no use 😔
20:24 < bridge> <ryozuki> @scrumplex btw
20:24 < bridge> <scrumplex> wait lemme find the irc logs
20:24 < bridge> <ryozuki> is prism easily packagable
20:24 < bridge> <scrumplex> yup
20:24 < bridge> <ryozuki> i can maintain the guru package
20:24 < bridge> <ryozuki> i do it for ddnet already
20:24 < bridge> <ryozuki> gentoo guru
20:25 < bridge> <scrumplex> there is a gentoo overlay iirc
20:25 < bridge> <ryozuki> https://packages.gentoo.org/packages/games-action/prismlauncher
20:25 < bridge> <ryozuki> nevermind
20:25 < bridge> <scrumplex> nvm
20:25 < bridge> <scrumplex> yup
20:25 < bridge> <ryozuki> u got a oficial one!
20:25 < bridge> <ryozuki> is it bothersome?
20:25 < bridge> <ryozuki> well guru is seamless and i can update it in a day
20:25 < bridge> <scrumplex> It's even maintained by one of the former project maintainers! ^^
20:26 < bridge> <ryozuki> https://gitweb.gentoo.org/repo/proj/guru.git/tree/games-action/ddnet
20:26 < bridge> <scrumplex> dunno. I'd assume that it isn't too annoying
20:26 < bridge> <scrumplex> we don't release very often so it doesn't matter really if it takes a day or two to get it updated
20:27 < bridge> <scrumplex> at the end of the day there is only so much you can do with a legacy Qt codebase :(
20:27 < bridge> <ryozuki> https://wiki.gentoo.org/wiki/Project:Proxy_Maintainers/User_Guide
20:27 < bridge> <ryozuki> ah i can become a proxy maintainer
20:27 < bridge> <ryozuki> hmm
20:27 < bridge> <ryozuki> but guru works fine xd
20:27 < bridge> <ryozuki> im proud of my insta releases :d
20:28 < bridge> <scrumplex> I forgot where I put my IRC logs from `archlinux-aur`
20:30 < bridge> <scrumplex> So context: I was asking if a Arch packager/dev wanted to adopt Prism Launcher into official repos, because it has been in the top 15 on the AUR for over a year at that point (note that most packages in the top 15 are AUR helpers, proprietary or -bin packages)
20:30 < bridge> <scrumplex> 
20:30 < bridge> <scrumplex> A major ArchWiki contributor chimed in and was opposed because of the supposed toxicity around Minecraft projects.
20:30 < bridge> <scrumplex> 
20:30 < bridge> <scrumplex> Later on that same individual dropped this epic message:
20:30 < bridge> <scrumplex> 
20:30 < bridge> <scrumplex> ```
20:30 < bridge> <scrumplex> [19:01:40] <polarian> Also maybe I am sinnical, but when a developer asks for their software to be adopted... it feels like you are trying to get your software out there... being adopted into the official repos gives you a lot of recognition... and I can say with experience I will install from official repositories over the AUR... 
20:30 < bridge> <scrumplex> ```
20:31 < bridge> <ryozuki> > A major ArchWiki contributor chimed in and was opposed because of the supposed toxicity around Minecraft projects.
20:31 < bridge> <ryozuki> so what
20:31 < bridge> <ryozuki> thats such a bad reason XD
20:31 < bridge> <ryozuki> im sure they host suckless software
20:31 < bridge> <ryozuki> where the authors are nazis
20:31 < bridge> <scrumplex> Yeah I just thought it was funny that they labeled the Minecraft community as toxic and then later proceed to be elitist about Arch
20:32 < bridge> <ryozuki> i think he is projecting his own reasons xD
20:32 < bridge> <scrumplex> I mean at the end of the day, that person isn't an Arch dev/maintainer
20:32 < bridge> <ryozuki> a.k.a he thinks this because its what he would do
20:33 < bridge> <scrumplex> so it's just an opinion not the project's final decision
20:33 < bridge> <ryozuki> ic
20:33 < bridge> <waxuel> hello who can help me to open a server I have a virtual server
20:33 < bridge> <ryozuki> when rewrite prism in rust?
20:33 < bridge> <ryozuki> https://wiki.ddnet.org/wiki/LAN_Server
20:33 < bridge> <ryozuki> dont dm me btw, im just sending this link on a public channel
20:33 < bridge> <scrumplex> But no one else joined in on the conversation apart from some other users. Even though some arch maintainers/devs were talking about other stuff
20:34 < bridge> <waxuel> vds bro
20:34 < bridge> <scrumplex> And from that day on, I stopped caring about Arch Linux altogether
20:34 < bridge> <ryozuki> idc about arch too
20:34 < bridge> <ryozuki> im too based for that
20:34 < bridge> <ryozuki> i use gentoo :ez:
20:34 < bridge> <scrumplex> One day the copium will run out and we will all be running NixOS 😎
20:34 < bridge> <ryozuki> but gentoo ppl can be special too XD i read in some place they said that static libraries are a bug
20:35 < bridge> <learath2> I'm so happy that you are a gentoo person now
20:35 < bridge> <scrumplex> probably snorted too much of that GNU
20:35 < bridge> <ryozuki> i religiously run emerge everyday morning
20:35 < bridge> <learath2> You can be our marketing department. Gentoo people have been suffering from bad PR forever. Your skills from Rust can carry on
20:35 < bridge> <ryozuki> xD
20:36 < bridge> <ryozuki> i tried nixos
20:36 < bridge> <ryozuki> but its too bothersome
20:37 < bridge> <ryozuki> maybe there is tooling to automate some stuff but idk
20:37 < bridge> <ryozuki> im in gentoo for now
20:37 < bridge> <ryozuki> oh yeah running native march on nixos was weird
20:37 < bridge> <scrumplex> NixOS is really great if you have a lot of machines
20:37 < bridge> <ryozuki> reproducible yes
20:37 < bridge> <ryozuki> i find it nice for servers
20:37 < bridge> <ryozuki> but i only have  1 server
20:37 < bridge> <ryozuki> xd
20:38 < bridge> <scrumplex> I can share my configurations between my desktop, laptop, work laptop, Raspberry Pi, home server, VPS and even my phone (Termux with Nix)
20:38 < bridge> <scrumplex> Though rn my server and personal stuff is separated
20:38 < bridge> <scrumplex> they do share a tiny bit though
20:39 < bridge> <scrumplex> I think Gentoo having binaries now is great though!
20:39 < bridge> <scrumplex> It was one of the major advantages of Nix (the package manager), because you could still modify packages very easily while still getting most things from the binary cache
20:40 < bridge> <ryozuki> binaries are not common
20:40 < bridge> <ryozuki> just for big like chrome
20:40 < bridge> <scrumplex> https://www.gentoo.org/news/2023/12/29/Gentoo-binary.html 👀
20:40 < bridge> <ryozuki> but u can make ur local binkpkg server
20:40 < bridge> <ryozuki> oh
20:40 < bridge> <ryozuki> didnt know
20:40 < bridge> <scrumplex> just a few days ago ^^
20:41 < bridge> <ryozuki> nice
20:41 < bridge> <heinrich5991> I don't like that nix doesn't specify expected output hashes (interesting for actually reproducible builds)
20:41 < bridge> <ryozuki> but i use gentoo for that native march
20:42 < bridge> <ryozuki> my only complain about gentoo is portage is in python and takes a bit to resolve deps
20:42 < bridge> <ryozuki> im sure it can be heavily optimized
20:42 < bridge> <ryozuki> maybe with rust
20:43 < bridge> <heinrich5991> go lead the effort 😮
20:43 < bridge> <heinrich5991> would be cool ^^
20:43 < bridge> <ryozuki> i thought about it
20:43 < bridge> <ryozuki> need to look how complex portage is xd
20:43 < bridge> <scrumplex> So normal Nix derivations (or packages) use their inputs to calculate the final output hash. So the actual content doesn't really matter. The only difference are "fixed-output derivations" that are usually things that download something from the internet
20:43 < bridge> <heinrich5991> it does matter, because it can't take into account all environmental differences
20:43 < bridge> <heinrich5991> by specifying the output hash, you notice when something breaks
20:44 < bridge> <heinrich5991> e.g. IIRC it doesn't take into account the kernel that is being run
20:44 < bridge> <scrumplex> Yes. Nix has a handy `--rebuild` flag which will just rebuild an already existing derivation and compare both
20:44 < bridge> <scrumplex> Yes. But if that produces different outputs, it can be considered a bug
20:44 < bridge> <scrumplex> NixOS provides this service to test reproducibility: https://reproducible.nixos.org/
20:45 < bridge> <scrumplex> And the only important packages left are pipewire related one
20:45 < bridge> <scrumplex> NixOS provides this service to test reproducibility: https://reproducible.nixos.org/s
20:45 < bridge> <scrumplex> And the only important packages left are pipewire related ones
20:45 < bridge> <scrumplex> NixOS provides this service to test reproducibility: https://reproducible.nixos.org
20:45 < bridge> <ryozuki> i use pipewire
20:45 < bridge> <ryozuki> i recommend `export SDL_AUDIODRIVER=pipewire`
20:45 < bridge> <ryozuki> to force sdl to use pipewire
20:45 < bridge> <ryozuki> instead of pulseaudi which gets translated to pipewire
20:45 < bridge> <scrumplex> like here is a diff between two "identical" (in the sense that they use the same inputs) builds:
20:45 < bridge> <scrumplex> 
20:45 < bridge> <scrumplex> https://reproducible.nixos.org/nixos-iso-gnome-runtime/diff/1f94ef23aa9064bad6ef9a768dc4ade7615e03b16310ebaae6465643f3aae86b-5cea5bc75b287db1b30f4232aae2920949ccec4ec459113f3f2a342a62680bc1.html
20:45 < bridge> <heinrich5991> would be nice if that was encoded in the package
20:46 < bridge> <scrumplex> Fair. But that would basically make everything unreproducible
20:46 < bridge> <scrumplex> because not everyone is gonna run the same kernel
20:46 < bridge> <scrumplex> you have to draw a line somewhere
20:46 < bridge> <heinrich5991> no, the output hash, I mean
20:46 < bridge> <scrumplex> because not everyone has the same CPU either. What if one CPU has a bug that doesn't exist on another
20:47 < bridge> <scrumplex> yeah, but even if it was encoded it wouldn't actually do anything as it is right now
20:47 < bridge> <heinrich5991> it'd help notice problems more prominently
20:47 < bridge> <scrumplex> Yeah but so does rebuilding the package and using the builtin check
20:47 < bridge> <scrumplex> 99% of reproducibility mismatches are timestamps and other trivial things like that
20:48 < bridge> <scrumplex> Because the Nix sandbox tries to ensure that the build environment itself is reproducible
20:48 < bridge> <heinrich5991> only use percentages if you know the stats
20:48 < bridge> <scrumplex> (like disallowing network access)
20:48 < bridge> <scrumplex> ~~99% of~~ most reproducibility mismatches are timestamps and other trivial things like that
20:49 < bridge> <heinrich5991> yes, to a point. they usually fail to mention where the boundary lies
20:49 < bridge> <heinrich5991> i.e. pointing out that kernel (and as you mentioned cpu) differences are unaccounted for
20:49 < bridge> <scrumplex> fair
20:50 < bridge> <scrumplex> But honestly I don't think it's a big problem in practice
20:50 < bridge> <scrumplex> Linux prominently doesn't break userspace and unless your compiler is using really new kernel features, it shouldn't really matter
20:51 < bridge> <heinrich5991> yea, sounds like a sensible place for the boundary
20:51 < bridge> <scrumplex> Things like your compiler or rather your entire toolchain are much more important
20:51 < bridge> <scrumplex> Sadly full perfect reproducibility would mean that we can't reuse anything between machines because every system would be different
20:51 < bridge> <scrumplex> Sadly full perfect reproducibility would mean that we can't reuse anything between machines because every physical system would be different
20:52 < bridge> <heinrich5991> debian etc. are leading the effort for full reproducibility
20:52 < bridge> <heinrich5991> https://reproducible-builds.org/
20:52 < bridge> <scrumplex> does debian encode output hashes in packages? :O
20:52 < bridge> <scrumplex> or rather, does it keep track of them?
20:52 < bridge> <scrumplex> or rather, does it keep track of them for repro?
20:54 < bridge> <heinrich5991> debian checks that their packages are reproducible and treats non-reproducibility as a bug: https://tests.reproducible-builds.org/debian/reproducible.html
20:54 < bridge> <heinrich5991> the initiative fixed a lot of projects
20:55 < bridge> <scrumplex> I mean NixOS has that too: https://reproducible.nixos.org/
20:55 < bridge> <scrumplex> 
20:55 < bridge> <scrumplex> The packages that are left here are usually just not trivial to make reproducible
20:57 < bridge> <heinrich5991> does it have stats somewhere?
20:57 < bridge> <scrumplex> not sure
20:57 < bridge> <scrumplex> we definitely have some issues here; https://github.com/NixOS/nixpkgs/issues?q=is%3Aopen+is%3Aissue+label%3A%226.topic%3A+reproducible+builds%22
20:57 < bridge> <scrumplex> we definitely have some issues here: https://github.com/NixOS/nixpkgs/issues?q=is%3Aopen+is%3Aissue+label%3A%226.topic%3A+reproducible+builds%22
21:03 < bridge> <heinrich5991> @scrumplex ah look, nix is actually moving into this direction? https://nixos.wiki/wiki/Ca-derivations
21:08 < bridge> <scrumplex> Yeah but I didn't feel like there was much push on this so far
21:21 < bridge> <waxuel> I have a virtual server how do I set up a server
21:22 < bridge> <mazty> download ddnet with the server
21:23 < bridge> <mazty> and in the autoexec.cfg in the sv_register 0 change to 1
21:24 < bridge> <waxuel> oky go
21:24 < bridge> <waxuel> https://cdn.discordapp.com/attachments/293493549758939136/1192201884379926548/image.png?ex=65a83787&is=6595c287&hm=07efdf89689d2c59079fe6614e2cc3a2e528a1aada4ba85410d936d7bad26c97&
21:26 < bridge> <waxuel> says I need to open firewall
21:53 < ChillerDragon> @ryozuki wtf suckless is nazi?!
21:54 < bridge> <ryozuki> >      
21:54 < bridge> <ryozuki> > dijit on Jan 12, 2021 | root | parent | next [–]
21:54 < bridge> <ryozuki> > 
21:54 < bridge> <ryozuki> > I actually like suckless software and I'm a little (lot) annoyed by the overwhelming "sides" of politics, especially the left because a lot of US tech comes from a left wing belief and sometimes people online beat me over the head with it and make me annoyed.
21:54 < bridge> <ryozuki> > 
21:54 < bridge> <ryozuki> > But, to be clear, there are three things here:
21:54 < bridge> <ryozuki> > 
21:54 < bridge> <ryozuki> > 1) They're doing a Tiki Torch walk, during a time when it was heavily politicised.
21:54 < bridge> <ryozuki> > 
21:54 < bridge> <ryozuki> > 2) They're adapting Nazi slogans as hostnames
21:54 < bridge> <ryozuki> > 
21:54 < bridge> <ryozuki> > 3) They're denigrating "Cultural Marxism".
21:54 < bridge> <ryozuki> > 
21:54 < bridge> <ryozuki> > Any one of these alone I would probably defend, but 3 is a pattern and not a good one.
21:54 < bridge> <ryozuki> https://news.ycombinator.com/item?id=25754374
21:57 < ChillerDragon> yikes
22:19 < bridge> <ryozuki> @heinrich5991 https://blog.redteam-pentesting.de/2024/bitwarden-heist/
22:33 < bridge> <ryozuki> when make a Cow in cpp
22:33 < bridge> <Jupstar ✪> what cow
22:33 < bridge> <ryozuki> copy on write
22:33 < bridge> <ryozuki> smart ptr
22:33 < bridge> <Jupstar ✪> for what?
22:33 < bridge> <ryozuki> https://doc.rust-lang.org/std/borrow/enum.Cow.html
22:34 < bridge> <ryozuki> idk
22:34 < bridge> <Jupstar ✪> i know but do you find that useful?
22:34 < bridge> <ryozuki> but i use cow a lot in rust
22:34 < bridge> <Jupstar ✪> oh
22:34 < bridge> <ryozuki> it allows mixing string literals with Strings
22:34 < bridge> <milkeeycat> which does mooo
22:34 < bridge> <milkeeycat> which does moo
22:35 < bridge> <ryozuki> https://tenor.com/view/cowanimated-cow-cows-gif-13671727856550360343
22:44 < bridge> <learath2> If you say "cultural marxism" I just don't want to hear anything else you say
22:44 < bridge> <learath2> Modern "cultural bolshevism" andys can go fuck themselves
22:44 < bridge> <ryozuki> idk what any of that means xd
22:44 < bridge> <ryozuki> i just copy pasted
23:54 < bridge> <stnwtr> ouch
