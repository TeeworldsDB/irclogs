07:40 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> github search keyword highlight is drunk. I thought this was something that needed a fix.
07:40 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> https://cdn.discordapp.com/attachments/293493549758939136/852784390908018758/unknown.png
08:28 < bridge> [ddnet] <chillerdragon> @deen\:  @Jupstar âœª  can I get at least 24h to have a look at the data svg prs? \:)
08:58 < bridge> [ddnet] <Ryozuki> https://rocket.rs/v0.5-rc/news/2021-06-09-version-0.5-rc.1/
08:58 < bridge> [ddnet] <Ryozuki> :poggers:
09:10 < bridge> [ddnet] <chillerdragon> yo @TsFreddie any plans on porting your text refactor to ddnet? \:)
09:11 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> it's too much work :justatest:
09:11 < bridge> [ddnet] <chillerdragon> yea i can imagine
09:12 < bridge> [ddnet] <chillerdragon> but two different text renders are splitting the code bases even more \:/
09:12 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> :feelsbadman:
09:12 < bridge> [ddnet] <chillerdragon> can it be done step by step? without doing all the work at once?
09:13 < bridge> [ddnet] <chillerdragon> is there a way i could support you without knowing what this all textrender stuff is \:D
09:13 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> maybe. the TextEx can be replaced without touching all other parts.
09:13 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> i think
09:14 < bridge> [ddnet] <chillerdragon> you removed textex right?
09:14 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> i rewrote a new layout code, it behave differently so i just dropped the textex name with something
09:14 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> else
09:17 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> if should be possible to port `TextDefered` and `MakeWord` as a replacement for `TextEx`.
09:17 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> it should be*
09:17 < bridge> [ddnet] <chillerdragon> sounds like a start \:)
09:18 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> but the behavior of text need to be reexamined case by case for every TextEx call
09:18 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> which is most of the work for vanilla. is just to redo all text.
09:22 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> we can also nuke all gpu optimization for text in ddnet, get the entire thing over here. then redo the gpu optimization ðŸ˜… . but i'm not sure if that's easier.
09:22 < bridge> [ddnet] <chillerdragon> or we port gpu optimizations to vanilla and then take all back?
09:23 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> you can't
09:24 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> at least you can't do it without extending teeworlds's graphic code.
09:26 < bridge> [ddnet] <chillerdragon> yea no omg i do not feel comfortable replacing TextEx
09:28 < bridge> [ddnet] <TsFreddie (CHN Community Repost)> ye...
11:37 < bridge> [ddnet] <Anime.pdf> Chillerdragon webhook
11:37 < bridge> [ddnet] <Anime.pdf> :feelsgoodman:
13:03 < bridge> [ddnet] <deiform> Smart people in here right?
13:03 < bridge> [ddnet] <deiform> I've got a few questions if anyone is willing to answer them
13:07 < bridge> [ddnet] <murpi> don't ask to ask, just ask ^^
13:12 < bridge> [ddnet] <deiform> Its not involved with teeworlds thats why @murpi
13:39 < ChillerDragon> #offtopic then
14:35 < bridge> [ddnet] <Jupstar âœª> You can look at them the whole day xd
16:21 < bridge> [ddnet] <Learath2> @heinrich5991 https://paste.pr0.tips/Fe am I doing something wrong?
16:21 < bridge> [ddnet] <Learath2> How is this compiling so awfully?
16:22 < bridge> [ddnet] <Learath2> I'm doing like some TRIVIAL string manipulation
16:22 < bridge> [ddnet] <heinrich5991> what are you trying? separating "words" by whitespace?
16:23 < bridge> [ddnet] <Learath2> yeah, just return one word
16:23 < bridge> [ddnet] <Learath2> (I need to do some bookkeeping for further lexing, so I can't just `.split_whitespace()`
16:23 < bridge> [ddnet] <Learath2> s\/$/)/
16:27 < bridge> [ddnet] <Ryozuki> Split once?
16:28 < bridge> [ddnet] <heinrich5991> @Learath2 no, I don't immediately see why this is slow
16:28 < bridge> [ddnet] <Learath2> @Ryozuki need to keep track of indices
16:28 < bridge> [ddnet] <Ryozuki> https://doc.rust-lang.org/std/primitive.str.html#method.split_once
16:29 < bridge> [ddnet] <Ryozuki> Ah
16:29 < bridge> [ddnet] <Learath2> Well it's probably not slow in any amount you'd care about anyway, the assembly looks concerning to me
16:29 < bridge> [ddnet] <heinrich5991> the only thing I notice specifically is that you're splitting on all unicode whitespace
16:29 < bridge> [ddnet] <heinrich5991> ah, then this info might be relevant ^
16:29 < bridge> [ddnet] <Ryozuki> On rust all strings are valid unicode
16:30 < bridge> [ddnet] <Ryozuki> I think indexing is harder somethimg about glyphs idk
16:30 < bridge> [ddnet] <heinrich5991> utf8*
16:30 < bridge> [ddnet] <heinrich5991> no
16:30 < bridge> [ddnet] <heinrich5991> it's still indexing by byte offsets
16:31 < bridge> [ddnet] <Learath2> indexing by graphemes would be harder, rust just uses fixed size (4 bytes iirc) per char
16:31 < bridge> [ddnet] <heinrich5991> no, &str uses UTF8 as representation
16:32 < bridge> [ddnet] <heinrich5991> the indices are byte indices into this byte array
16:32 < bridge> [ddnet] <Ryozuki> @Learath2 do you always look at the assembly output of everything you do?
16:32 < bridge> [ddnet] <Ryozuki> Should i do that too?
16:33 < bridge> [ddnet] <Learath2> Just while i'm learning a language so I can know it's characteristics
16:33 < bridge> [ddnet] <heinrich5991> @Learath2 I'm somehow missing a "get index from slice and element"
16:33 < bridge> [ddnet] <Learath2> e.g. what to avoid in critical paths, like virtual calls in languages with bad devirtualization in their compilers
16:33 < bridge> [ddnet] <heinrich5991> but you can probably hack it yourself
16:34 < bridge> [ddnet] <Ryozuki> I would only look at it if i was doing something where i know i can help the compiler vectorize it
16:34 < bridge> [ddnet] <Ryozuki> But otherwise never
16:34 < bridge> [ddnet] <Ryozuki> :pepeH:
16:35 < bridge> [ddnet] <Ryozuki> @Learath2 some advice i seen, always try to use iterator functions instead of traditional for loops
16:35 < bridge> [ddnet] <Ryozuki> Ppl say they optimize better
16:35 < bridge> [ddnet] <Ryozuki> In eust
16:35 < bridge> [ddnet] <Ryozuki> Rust
16:38 < bridge> [ddnet] <Ryozuki> Btw im using rust at work (yes i got a job yay, altho its part time) doing web dev
16:38 < bridge> [ddnet] <Ryozuki> :greenthing: :monkalaugh:
16:40 < bridge> [ddnet] <Learath2> Hm, my unsafe version is about 100 instructions shorter
16:40 < bridge> [ddnet] <Ryozuki> Indexing with unchecked?
16:40 < bridge> [ddnet] <heinrich5991> which unsafe version?
16:40 < bridge> [ddnet] <Learath2> Just checking that index is within range and unwrapping unchecked
16:41 < bridge> [ddnet] <Learath2> https://godbolt.org/z/38sP94rjP
16:42 < bridge> [ddnet] <Ryozuki> Oh shit, that web is not the best on mobile
16:42 < bridge> [ddnet] <Learath2> Yeah awful on phone ðŸ˜„
16:43 < bridge> [ddnet] <Learath2> Actually doesn't even need to be unsafe now that I think of it, I can just match the None case and ignore it
16:44 < bridge> [ddnet] <Learath2> (though it is wasteful, `end < len` implies it's not `None`
16:49 < bridge> [ddnet] <Learath2> Yeah this version is good
16:50 < bridge> [ddnet] <Ryozuki> I think none and some are zero cost or smth
16:51 < bridge> [ddnet] <Learath2> I wanted to use iterators but `Chars` contains a reference to the string it's iterating, so I can't keep it in the same struct as the string. (no self referential structs in rust)
16:51 < bridge> [ddnet] <Learath2> I initially wanted to keep an iterator instead of an index in my struct
16:55 < bridge> [ddnet] <Ryozuki> Hmm
16:55 < bridge> [ddnet] <Ryozuki> I dont know exactly what u want to do
16:55 < bridge> [ddnet] <Learath2> Well as the name says, it's just a lexer ðŸ˜›
16:55 < bridge> [ddnet] <Learath2> Like the one we have in `CConsole`
16:57 < bridge> [ddnet] <Ryozuki> Are you doing it as an exercise to learn ?
16:57 < bridge> [ddnet] <Ryozuki> If not https://github.com/maciejhirsz/logos
16:57 < bridge> [ddnet] <Learath2> Well it's a trivial lexer, I honestly would rather not bring in more dependencies
16:58 < bridge> [ddnet] <Learath2> The entire thing is a learning exercise anyway, so it's fine
16:58 < bridge> [ddnet] <Learath2> I'll probably never be okay with linking to a billion external dependencies :/
16:59 < bridge> [ddnet] <Ryozuki> In rust its common
17:00 < bridge> [ddnet] <Learath2> In all languages it's common
17:00 < bridge> [ddnet] <Ryozuki> In c++ its a pain
17:00 < bridge> [ddnet] <Learath2> I've never been very happy with it, I'm a very big NIH sufferer
17:00 < bridge> [ddnet] <Ryozuki> So i underdtsnd where u come from
17:00 < bridge> [ddnet] <Learath2> I like to make things myself
17:06 < bridge> [ddnet] <Learath2> I just got an even better idea ðŸ˜›
17:16 < bridge> [ddnet] <Ryozuki> :poggers:
17:40 < bridge> [ddnet] <chillerdragon> BTW i vaguely remember some demand for spectating specific switch numbers i quickly cracked that feature together for my client its not crystal clean but it does the job. In case someone is interested in that or wants me to pr against upstream https://github.com/chillerbot/chillerbot-ux/commit/d9d895ff84045a9ae4dbb47053053e82ed8d271d
17:47 < bridge> [ddnet] <chillerdragon> BTW i vaguely remember some demand for spectating specific switch numbers i quickly cracked that feature together for my client its not crystal clean but it does the job. In case someone is interested in that or wants me to pr against upstream https://github.com/chillerbot/chillerbot-ux/commit/f73296964679e2e9a519b23b3b4eaa7d30900a08
19:18 < bridge> [ddnet] <Learath2> Who even thought banning self-referential structs was an acceptable solution?
20:57 < bridge> [ddnet] <Comrade> linked lists don't exist in Rust?
21:03 < bridge> [ddnet] <Learath2> Not the kind of self referential struct I was talking about but those are also not trivial
21:04 < bridge> [ddnet] <Learath2> Rust doesn't allow references inside structs to reference other fields of the struct
22:05 < bridge> [ddnet] <kcp> I think it is a very good solution
22:08 < bridge> [ddnet] <Nouaa> that possible to kill people only on 1 side on a tile?
22:08 < bridge> [ddnet] <Nouaa> ```cpp
22:08 < bridge> [ddnet] <Nouaa> if (m_TileIndex == TILE_UP || m_TileFIndex == TILE_UP)
22:08 < bridge> [ddnet] <Nouaa>     {
22:08 < bridge> [ddnet] <Nouaa>         if ((int)GameServer()->Collision()->GetPos(MapIndexT).y > 0)
22:08 < bridge> [ddnet] <Nouaa>         {
22:08 < bridge> [ddnet] <Nouaa>             Die(m_pPlayer->GetCID(), WEAPON_WORLD);
22:08 < bridge> [ddnet] <Nouaa>         }
22:08 < bridge> [ddnet] <Nouaa>     }
22:08 < bridge> [ddnet] <Nouaa> ```
22:08 < bridge> [ddnet] <Nouaa> for exemple if i want to kill when when the player arrives from the bottom up that dont kill him but if he player arrives from top to bottom that kill him
22:09 < bridge> [ddnet] <Nouaa> i mean idk if i can add an option only for 1 side of the y axe
22:09 < bridge> [ddnet] <Nouaa> i mean idk if i can add an option only for 1 side of the y axis
22:10 < bridge> [ddnet] <Nouaa> idk to explain maybe
22:17 < bridge> [ddnet] <Nouaa> that possible to kill people only if he come to 1 side of a tile?
22:17 < bridge> [ddnet] <Nouaa> ```cpp
22:17 < bridge> [ddnet] <Nouaa> if (m_TileIndex == TILE_UP || m_TileFIndex == TILE_UP)
22:17 < bridge> [ddnet] <Nouaa>     {
22:17 < bridge> [ddnet] <Nouaa>         if ((int)GameServer()->Collision()->GetPos(MapIndexT).y > 0)
22:17 < bridge> [ddnet] <Nouaa>         {
22:18 < bridge> [ddnet] <Nouaa>             Die(m_pPlayer->GetCID(), WEAPON_WORLD);
22:18 < bridge> [ddnet] <Nouaa>         }
22:18 < bridge> [ddnet] <Nouaa>     }
22:18 < bridge> [ddnet] <Nouaa> ```
22:18 < bridge> [ddnet] <Nouaa> for exemple if i want to kill when when the player arrives from the bottom up that dont kill him but if he player arrives from top to bottom that kill him
22:18 < bridge> [ddnet] <Nouaa> that possible to kill people only when he come from 1 specific side on a tile?
22:18 < bridge> [ddnet] <Nouaa> ```cpp
22:18 < bridge> [ddnet] <Nouaa> if (m_TileIndex == TILE_UP || m_TileFIndex == TILE_UP)
22:18 < bridge> [ddnet] <Nouaa>     {
22:18 < bridge> [ddnet] <Nouaa>         if ((int)GameServer()->Collision()->GetPos(MapIndexT).y > 0)
22:18 < bridge> [ddnet] <Nouaa>         {
22:18 < bridge> [ddnet] <Nouaa>             Die(m_pPlayer->GetCID(), WEAPON_WORLD);
22:18 < bridge> [ddnet] <Nouaa>         }
22:18 < bridge> [ddnet] <Nouaa>     }
22:18 < bridge> [ddnet] <Nouaa> ```
22:18 < bridge> [ddnet] <Nouaa> for exemple if i want to kill when when the player arrives from the bottom up that dont kill him but if he player arrives from top to bottom that kill him
22:19 < bridge> [ddnet] <Nouaa> that possible to kill people only when he come from 1 specific side on a tile?
22:19 < bridge> [ddnet] <Nouaa> ```cpp
22:19 < bridge> [ddnet] <Nouaa> if (m_TileIndex == TILE_UP || m_TileFIndex == TILE_UP)
22:19 < bridge> [ddnet] <Nouaa>     {
22:19 < bridge> [ddnet] <Nouaa>         if ((int)GameServer()->Collision()->GetPos(MapIndexT).y > 0)
22:19 < bridge> [ddnet] <Nouaa>         {
22:19 < bridge> [ddnet] <Nouaa>             Die(m_pPlayer->GetCID(), WEAPON_WORLD);
22:19 < bridge> [ddnet] <Nouaa>         }
22:19 < bridge> [ddnet] <Nouaa>     }
22:19 < bridge> [ddnet] <Nouaa> ```
22:21 < bridge> [ddnet] <Nouaa> ok that good i did it
22:21 < bridge> [ddnet] <Nouaa> i just forgot 1 thing
22:39 < bridge> [ddnet] <heinrich5991> @Learath2 it's hard to guarantee safety in presence of these
22:40 < bridge> [ddnet] <heinrich5991> you have to guarantee that the other field isn't modified, and in some cases that the whole struct isn't moved
22:52 < bridge> [ddnet] <heinrich5991> @Nouaa you can check where they were last tick
23:27 < bridge> [ddnet] <Learath2> they should be fine as long as the struct is pinned
23:29 < bridge> [ddnet] <heinrich5991> and the struct fields are frozen
23:32 < bridge> [ddnet] <Learath2> frozen? for what? as long as the struct doesn't move around self references can't go stale, no?
23:51 < bridge> [ddnet] <heinrich5991> if you point inside a vector, the vector mustn't reallocate, e.g.
23:52 < bridge> [ddnet] <heinrich5991> in rust, a constant reference guarantees that the underlying thing doesn't changeÂ¹
