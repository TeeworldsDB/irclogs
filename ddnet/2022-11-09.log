00:45 <+bridge> [ddnet] <ReiTW> it does crash when someone attempts to join the server.
00:45 <+bridge> [ddnet] <ReiTW> after the map download
03:41 <+bridge> [ddnet] <Voxel> https://githubcopilotlitigation.com/
03:41 <+bridge> [ddnet] <Voxel> xd
04:55 <+bridge> [ddnet] <YupHio> Run Linux DDNet-Server binary from website, join server, change map to the one I sent, server crashes. Nothing fishy in the terminal log except "Segmentation Fault"
04:55 <+bridge> [ddnet] <YupHio> 
04:55 <+bridge> [ddnet] <YupHio> That is a 100% way to reproduce the bug.
04:55 <+bridge> [ddnet] <YupHio> 
04:55 <+bridge> [ddnet] <YupHio> We also managed to crash the server randomly just by playing a bunch on other maps.
04:55 <+bridge> [ddnet] <YupHio> 
04:55 <+bridge> [ddnet] <YupHio> Building from the source fixes the issue, at least on anyone's machine except @deen :santatrollet:
04:57 <+bridge> [ddnet] <asmahaooo> Don't miss your chance to be rich
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> ‚úåÔ∏èüëçüôèDiscJockey is my name and I'm an admin with my own store link and group link https://t.me/+_kTifpKvc-kwNDJk
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> This is my group link, you can check and prove my legal work there.
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> üôèUPDATE My Services\: Sell PayPal account verified ‚Äì PayPal transfer \*Sell Bank Transfer ‚Äì Bank Login \*Sell Clone card - Secure shipping tunnel \*cc Fullz sell and random Information ‚Äì 99% valid cards \*Sell Dumps with pin track 1 and 2 101 201 \*Sell Western Union money transfer services \*Sell Gift Cards Itune ‚Äì Amazon ‚Äì Ebay Clone/Credit Cards \*Sell Booking airfare services ‚Äì worldwide \*Sell e-carding services \*SMTP
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> TRANSFER SERVICE
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> BTC/USDT/CASHAPP
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> TN PRAYER PAYMENT
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> PRAYER TO ARIZONA
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> What MASS UI DUA has
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> EDD RELOAD
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> ALL GOVERNMENT PRAYER PAYMENTS
04:57 <+bridge> [ddnet] <asmahaooo> 
04:57 <+bridge> [ddnet] <asmahaooo> METHOD IS AVAILABLE!!
04:57 <+bridge> [ddnet] <asmahaooo> 
04:58 <+bridge> [ddnet] <asmahaooo> FULLZ
04:58 <+bridge> [ddnet] <asmahaooo> 
04:58 <+bridge> [ddnet] <asmahaooo> PAYPAL
04:58 <+bridge> [ddnet] <asmahaooo> 
04:58 <+bridge> [ddnet] <asmahaooo> CASH APPLICATION
04:58 <+bridge> [ddnet] <asmahaooo> 
04:58 <+bridge> [ddnet] <asmahaooo> CASTINGS+PINS
05:22 <+bridge> [ddnet] <Izanagi> suggestion, add an icon at the edge of the hud that indicates if your team is locked or not
08:21 <+ChillerDragon> Yea that sounds nice
08:22 <+ChillerDragon> also lock icons can be really obvious to understand :)
08:30 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=Vhh_GeBPOhs
08:30 <+bridge> [ddnet] <Ryozuki> good morning
09:52 <+bridge> [ddnet] <deen> built in a debian 10 chroot
10:15 <+bridge> [ddnet] <deen> Thanks, I can repro the crash
10:18 <+bridge> [ddnet] <uwu> :feelsbadman:
10:18 <+bridge> [ddnet] <uwu> https://cdn.discordapp.com/attachments/293493549758939136/1039831433298063410/unknown.png
10:49 <+ChillerDragon> F
10:50 <+ChillerDragon> wait I can not reproduce how do I get git some? :(
10:51 <+ChillerDragon> Would be hilarious if it worked
11:27 <+bridge> [ddnet] <uwu> https://github.com/GROSSWEBER/git-some
11:27 <+bridge> [ddnet] <uwu> This one maybe
11:29 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> You about "ui_close_window_after_changing_setting"?
11:34 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> It would be really convenient if for example there was some kind of flag from server-side
11:41 <+bridge> [ddnet] <uwu> Issue transfered to <https://github.com/ddnet/ddnet/issues/813>, as @Ryozuki commented maybe finally implementing server custom menu will be solution, but not sure how that will work and probably a lot of new graphics will be needed, to fold/unfold and maybe even drag this menu
11:43 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> I already did that xd
11:44 <+bridge> [ddnet] <uwu> I remember, but that was on 0.7 and ddnet guys are kinda sceptical, i think :justatest:
11:46 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> I think you right
11:49 <+bridge> [ddnet] <Ryozuki> It doesnt need more graphics than what we have currently
11:50 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> 2021 06 xd
11:50 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> https://cdn.discordapp.com/attachments/293493549758939136/1039854361108561940/bandicam_2021-06-06_23-25-22-789-1.mp4
11:50 <+bridge> [ddnet] <Ryozuki> That looks good
11:50 <+bridge> [ddnet] <Ryozuki> I dislike the fade out tho
11:57 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> It requires no libraries, has window action flags, and registers an inverse function, interconnected by a tree
11:57 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> For example if you kill a menu, all submenus will be closed
11:59 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> It no libraries needed, has window action flags, and registers an inverse function, interconnected by a tree
11:59 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> For example if you kill a menu, all submenus will be closed
12:00 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> No libraries needed
12:00 <+bridge> [ddnet] <Ryozuki> Yeah sounds good
12:00 <+bridge> [ddnet] <ùô∫ùöûùöõùöòùöúùöíùöò> https://cdn.discordapp.com/attachments/293493549758939136/1039857028346163291/unknown-2.png
12:05 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1039858362235490344/output.png
12:28 <+bridge> [ddnet] <Learath2> It's a little sad that other mods are statistically insignificant
12:58 <+bridge> [ddnet] <ReiTW> :2982pepecry:
12:59 <+bridge> [ddnet] <Learath2> It'd be great for the health of the game if we had more mod players
13:00 <+bridge> [ddnet] <deen> It is really difficult to make a mod idea that stays interesting for players so they keep returning
13:06 <+bridge> [ddnet] <deen> So I made a nightly build with symbols and can't reproduce it anymore :/
13:06 <+bridge> [ddnet] <Ryozuki> Heisenbug pog
13:06 <+bridge> [ddnet] <deen> or it's fixed in nightly maybe
13:08 <+bridge> [ddnet] <deen> nope, just happens without symbols, but still fails on nightly without symbols
13:16 <+bridge> [ddnet] <deen> Asan is clean too
13:28 <+bridge> [ddnet] <uwu> Skill Issue
13:35 <+bridge> [ddnet] <ReiTW> @deen it crashes exactly when a client is connected
13:35 <+bridge> [ddnet] <ReiTW> You can start the server with that map exactly
13:35 <+bridge> [ddnet] <ReiTW> And it'll only crash once a player connects
13:41 <+bridge> [ddnet] <deen> Well, still doesn't help me with figuring out the reason
13:51 <+bridge> [ddnet] <Soh KEJ –ò–Ω—Ç–µ—Ä–ö–æ—Å–º–æ—Å –ö—É–∑–Ω–µ—Ü–æ–≤–∞ ‚ú™> @Moderator I'm playing steam, don't ban me
13:53 <+bridge> [ddnet] <Soh KEJ –ò–Ω—Ç–µ—Ä–ö–æ—Å–º–æ—Å –ö—É–∑–Ω–µ—Ü–æ–≤–∞ ‚ú™> @Moderator I'm playing steam, don't ban me
13:54 <+bridge> [ddnet] <uwu> i had 2 maps on my old pc
13:55 <+bridge> [ddnet] <uwu> one crashed server
13:55 <+bridge> [ddnet] <uwu> second every player that connected
13:55 <+bridge> [ddnet] <uwu> kekw
14:10 <+bridge> [ddnet] <nori> `Updating crates.io index` is this gonna happen every time when i clean build or it is downloaded somewhere in home directory? took like 2 mins
14:11 <+bridge> [ddnet] <deen> I'm not getting that when building from scratch
14:11 <+bridge> [ddnet] <deen> all I get is the expected components in Rust being rebuilt:
14:11 <+bridge> [ddnet] <deen> ```
14:11 <+bridge> [ddnet] <deen>    Compiling ddnet-engine-shared v0.0.1 (/Users/deen/git/ddnet/src/engine/shared)
14:11 <+bridge> [ddnet] <deen>    Compiling ddnet-test v0.0.1 (/Users/deen/git/ddnet/src/rust-bridge/test)
14:11 <+bridge> [ddnet] <deen>    Compiling ddnet-base v0.0.1 (/Users/deen/git/ddnet/src/base)
14:12 <+bridge> [ddnet] <deen>    Compiling ddnet-engine v0.0.1 (/Users/deen/git/ddnet/src/engine)
14:12 <+bridge> [ddnet] <deen>     Finished release [optimized] target(s) in 0.67s
14:12 <+bridge> [ddnet] <deen> ```
14:13 <+bridge> [ddnet] <nori> yeah ig it is on the home folder, i am not getting it anymore. i just installed rust first time so
14:16 <+bridge> [ddnet] <heinrich5991> those go into ~/.cargo
14:26 <+bridge> [ddnet] <Ryozuki> The first index update is quite big
14:30 <+bridge> [ddnet] <heinrich5991> I think they're working on sparse registries which would make the updates small
14:32 <+bridge> [ddnet] <heinrich5991> @Ryozuki do you know how I can execute rust-analyzer without setting it up in some IDE?
14:32 <+bridge> [ddnet] <chan_yeol> Consultations with all those who benefited from the platform that I shared yesterday. Believe it or leave it!
14:32 <+bridge> [ddnet] <chan_yeol> 
14:32 <+bridge> [ddnet] <chan_yeol>     Registration Fee\: $0.00
14:32 <+bridge> [ddnet] <chan_yeol> 
14:32 <+bridge> [ddnet] <chan_yeol>     Daily Win\: $2,000
14:32 <+bridge> [ddnet] <chan_yeol> 
14:32 <+bridge> [ddnet] <chan_yeol>     Weekly Earning\: $20,000
14:32 <+bridge> [ddnet] <chan_yeol> 
14:32 <+bridge> [ddnet] <chan_yeol>     Monthly profit\: $80,000.
14:32 <+bridge> [ddnet] <chan_yeol> 
14:32 <+bridge> [ddnet] <chan_yeol>     unrecycled money
14:32 <+bridge> [ddnet] <chan_yeol> 
14:32 <+bridge> [ddnet] <chan_yeol>     ask me how üëáüëá
14:32 <+bridge> [ddnet] <chan_yeol> 
14:32 <+bridge> [ddnet] <chan_yeol>     http://t.me/Stevecoldham001
14:32 <+bridge> [ddnet] <Ryozuki> I guess call the binary and give it the path to the dir with cargo toml
14:33 <+bridge> [ddnet] <Ryozuki> Note that rustup doesnt add it to path
14:33 <+bridge> [ddnet] <Ryozuki> There is a command to find where its located
14:33 <+bridge> [ddnet] <Ryozuki> I dont remember
14:34 <+bridge> [ddnet] <heinrich5991> found it
14:34 <+bridge> [ddnet] <heinrich5991> `~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rust-analyzer`
14:34 <+bridge> [ddnet] <Ryozuki> Does cargo rust-analyzer work?
14:39 <+bridge> [ddnet] <heinrich5991> no
14:39 <+bridge> [ddnet] <heinrich5991> I don't manage to reproduce the error without an IDE
14:39 <+bridge> [ddnet] <heinrich5991> I guess I have to set up one
14:42 <+bridge> [ddnet] <Ryozuki> I use neovim
14:43 <+bridge> [ddnet] <Ryozuki> @heinrich5991 the logs may not show to stdout
14:43 <+bridge> [ddnet] <Ryozuki> Maybe they are on a file
14:44 <+bridge> [ddnet] <Ryozuki> RA_LOG=info
14:45 <+bridge> [ddnet] <Ryozuki> If rust-analyzer outright crashes, try running rust-analyzer analysis-stats /path/to/project/directory/ on the command line. This command type checks the whole project in batch mode bypassing LSP machinery.
14:45 <+bridge> [ddnet] <Ryozuki> @heinrich5991
14:49 <+bridge> [ddnet] <heinrich5991> ah
14:49 <+bridge> [ddnet] <heinrich5991> it doesn't crash though, it completes
14:49 <+bridge> [ddnet] <heinrich5991> AFAICT
14:50 <+bridge> [ddnet] <Ryozuki> I think the program itself doesnt crash
14:50 <+bridge> [ddnet] <Ryozuki> It reports that it fails to check cuz the build script
14:50 <+bridge> [ddnet] <Ryozuki> Panics
14:54 <+bridge> [ddnet] <heinrich5991> "failed to run build scripts Check the server logs for additional information"
14:54 <+bridge> [ddnet] <heinrich5991> do you know where those are? @Ryozuki
14:56 <+bridge> [ddnet] <Ryozuki> Doesnt it say where?
14:57 <+bridge> [ddnet] <Ryozuki> I forgot rn
14:57 <+bridge> [ddnet] <Ryozuki> Not at a pc currently
15:05 <+bridge> [ddnet] <heinrich5991> I found it in the output console within vscode
15:10 <+bridge> [ddnet] <heinrich5991> @Ryozuki does this help with your problem? https://github.com/ddnet/ddnet/pull/6025
15:11 <+bridge> [ddnet] <Learath2> @heinrich5991 where did you find the env var? I did google around a bit for it but couldn't find it
15:12 <+bridge> [ddnet] <heinrich5991> I googled around and didn't find anything but some other weird hack
15:12 <+bridge> [ddnet] <heinrich5991> so I just took a look at the environment I get
15:12 <+bridge> [ddnet] <Learath2> Yeah I was thinking that too üòÑ
15:12 <+bridge> [ddnet] <heinrich5991> then checked the source code of rust-analyzer for that variable, to see if it's reliable
15:21 <+bridge> [ddnet] <Ryozuki> trying now
15:32 <+bridge> [ddnet] <deen> fixed: https://github.com/ddnet/ddnet/pull/6024
15:34 <+bridge> [ddnet] <Learath2> How does that even happen? Why is FindEntities even returning >0 here?
15:35 <+bridge> [ddnet] <Ryozuki> Works
15:38 <+bridge> [ddnet] <deen> Player just joined, but character isn't initialized properly yet?
15:40 <+bridge> [ddnet] <Learath2> Hm, no laptop with me so I can't check but Players don't really have a position, nor is CGameWorld even aware of them iirc
15:41 <+bridge> [ddnet] <Learath2> I mean if it fixes the issue it fixes the issue. Just wanted to make sure we aren't masking a deeper issue
15:42 <+bridge> [ddnet] <deen> Hm, it's really weird indeed
15:42 <+bridge> [ddnet] <deen> We dereference the character in FindEntities as well and there it doesn't fail
15:43 <+bridge> [ddnet] <deen> the only thing I can imagine is that the entity has ENTTYPE_CHARACTER type, but is still not a CCharacter
15:44 <+bridge> [ddnet] <Learath2> Do we dereference as a CCharacter there? Maybe some undefined behaviour?
15:44 <+bridge> [ddnet] <deen> there we use it as CEntity only
15:44 <+bridge> [ddnet] <Learath2> ubsan should catch that though, hm
15:59 <+bridge> [ddnet] <Ryozuki> UB <a:nekospin:1039804721378111548>
16:20 <+bridge> [ddnet] <Ryozuki> Learning cxx rust
16:20 <+bridge> [ddnet] <Ryozuki> Hope i can add some rust stuff
16:20 <+bridge> [ddnet] <Ryozuki> https://cxx.rs/tutorial.html
18:15 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1039951353558077532/RDT_20221109_1815136032607740328601072.jpg
18:16 <+bridge> [ddnet] <ReiTW> lmaooo
18:18 <+bridge> [ddnet] <heinrich5991> I realize it's only a joke. sleep() doesn't guarantee accurate sleep times, this function might easily return `num1 + num2 - 1`
18:19 <+bridge> [ddnet] <Voxel> `sleep(abs(num1)
18:19 <+bridge> [ddnet] <Voxel> sleep(abs(num2)`
18:22 <+bridge> [ddnet] <Jupstar ‚ú™> considering how slow python is i could imagine they have code paths like these
18:24 <+bridge> [ddnet] <Ryozuki> :justatest:
18:43 <+bridge> [ddnet] <Cellegen | RiH> num1 + num2 :justatest:
18:43 <+bridge> [ddnet] <Cellegen | RiH> omg so slow
19:20 <+bridge> [ddnet] <Ryozuki> gg
19:20 <+bridge> [ddnet] <Ryozuki> Got a new job
19:20 <+bridge> [ddnet] <Ryozuki> My pay augmented by 8k‚Ç¨
19:20 <+bridge> [ddnet] <Ryozuki> <a:nekospin:1039804721378111548>
19:21 <+bridge> [ddnet] <Ryozuki> After 4 interviews
19:23 <+bridge> [ddnet] <Ryozuki> Rust,erlang,elixir,julia
19:23 <+bridge> [ddnet] <Ryozuki> Some langs they use
19:24 <+bridge> [ddnet] <uwu> :monkaS:
19:24 <+bridge> [ddnet] <Ryozuki> (yearly)
19:24 <+bridge> [ddnet] <uwu> oh
19:24 <+bridge> [ddnet] <uwu> thats...
19:24 <+bridge> [ddnet] <uwu> nice
19:24 <+bridge> [ddnet] <uwu> \:)
19:24 <+bridge> [ddnet] <Ryozuki> I mean im above average on spain rn ngl
19:25 <+bridge> [ddnet] <heinrich5991> where are you working? what are you doing there? what do you make?
19:25 <+bridge> [ddnet] <heinrich5991> just trying to figure out whether it's something I'd also like to do
19:25 <+bridge> [ddnet] <uwu> in ukraine average salary is ~320$/mo :kek:
19:25 <+bridge> [ddnet] <Ryozuki> They focus a lot on distributed systems
19:26 <+bridge> [ddnet] <heinrich5991> you know erlang and elixir? üòÆ
19:26 <+bridge> [ddnet] <Ryozuki> And virtual machines like java
19:26 <+bridge> [ddnet] <Ryozuki> I dont
19:26 <+bridge> [ddnet] <heinrich5991> ah, I misread
19:26 <+bridge> [ddnet] <heinrich5991> cool
19:26 <+bridge> [ddnet] <Ryozuki> Its what they use
19:26 <+bridge> [ddnet] <Ryozuki> Anyway i can free myself from nodejs stuff now
19:26 <+bridge> [ddnet] <Ryozuki> Full rust
19:27 <+bridge> [ddnet] <heinrich5991> cool
19:27 <+bridge> [ddnet] <deen> per month or per year? üòÑ
19:27 <+bridge> [ddnet] <Ryozuki> Per year ye
19:27 <+bridge> [ddnet] <Ryozuki> If i got 8k per month i would be super upper class
19:27 <+bridge> [ddnet] <Ryozuki> :BASED:
19:28 <+bridge> [ddnet] <heinrich5991> and what are you doing there?
19:28 <+bridge> [ddnet] <Ryozuki> I dont wanna dox myself xd
19:29 <+bridge> [ddnet] <Ryozuki> Anyway happy day
19:29 <+bridge> [ddnet] <heinrich5991> okay üôÇ
19:29 <+bridge> [ddnet] <Ryozuki> You are studying still right?
19:30 <+bridge> [ddnet] <heinrich5991> yes
19:30 <+bridge> [ddnet] <Ryozuki> Im sure u will get a good job
19:30 <+bridge> [ddnet] <Ryozuki> Ur rly good
19:30 <+bridge> [ddnet] <heinrich5991> although I'll probably finish at some point ^^
19:30 <+bridge> [ddnet] <heinrich5991> thank you
19:30 <+bridge> [ddnet] <Ryozuki> One thing is its easy to get comfy on a boring job thats routine
19:31 <+bridge> [ddnet] <Ryozuki> But well im young so i wanted to change and risk a bit more
19:31 <+bridge> [ddnet] <Chairn> you never finish studying
19:31 <+bridge> [ddnet] <Ryozuki> yeah
19:31 <+bridge> [ddnet] <Chairn> every day you learn something new
19:31 <+bridge> [ddnet] <heinrich5991> maybe one will finish university though üòâ
19:31 <+bridge> [ddnet] <Ryozuki> I think this dev chat makes a bubble
19:32 <+bridge> [ddnet] <Ryozuki> The level here is above average by a lot
19:32 <+bridge> [ddnet] <deen> Rust bubble? üòÑ
19:32 <+bridge> [ddnet] <Ryozuki> Nah xd
19:32 <+bridge> [ddnet] <Ryozuki> Well too
19:32 <+bridge> [ddnet] <Ryozuki> All hail rust
19:32 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
19:32 <+bridge> [ddnet] <Ryozuki> So one might think they dont know much
19:33 <+bridge> [ddnet] <Ryozuki> Thanks for coming to my ted talk
19:33 <+bridge> [ddnet] <Ryozuki> Im still amazed that ddnet is what got me most into programming
19:33 <+bridge> [ddnet] <Ryozuki> And here i am, working on it now
19:33 <+bridge> [ddnet] <Ryozuki> <a:nekospin:1039804721378111548>
19:37 <+bridge> [ddnet] <deen> @Ryozuki local company in Barcelona? How are the notice periods in Spain usually? No one wanted to hire me when I had  6 months notice period üòÑ
19:37 <+bridge> [ddnet] <deen> and congrats
19:38 <+bridge> [ddnet] <heinrich5991> how long is your notice period now? @deen
19:38 <+bridge> [ddnet] <Ryozuki> 15 day period
19:40 <+bridge> [ddnet] <deen> 1 month, but it's a US company so kind of expected to be the legal minimum here
19:41 <+bridge> [ddnet] <Chairn> all chats are a bubble, a non representative group of any larger group
19:42 <+bridge> [ddnet] <Ryozuki> i guess xd
19:42 <+bridge> [ddnet] <Chairn> for instance, no chat has people with no internet access
19:49 <+bridge> [ddnet] <Ryozuki> 31% monthly net pay increase
19:49 <+bridge> [ddnet] <Ryozuki> Not bad
20:11 <+bridge> [ddnet] <Ryozuki> is noalias tag standard?
20:11 <+bridge> [ddnet] <Ryozuki> https://en.cppreference.com/w/c/language/restrict
20:11 <+bridge> [ddnet] <Ryozuki> restrict
20:11 <+bridge> [ddnet] <Ryozuki> its called
20:12 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1039980862743265310/image.png
20:12 <+bridge> [ddnet] <Ryozuki> this is what a &mut is in rust more or less iirc
20:13 <+bridge> [ddnet] <Ryozuki> this can enable some optimizatiosn
20:14 <+bridge> [ddnet] <Ryozuki> maybe we can use it
20:14 <+bridge> [ddnet] <Ryozuki> but its hard to use cuz UB
20:15 <+bridge> [ddnet] <Ryozuki> oh wait
20:15 <+bridge> [ddnet] <Ryozuki> is this a C only thing?
20:15 <+bridge> [ddnet] <Ryozuki> not C++? xd
20:15 <+bridge> [ddnet] <Chairn> it works in c++ with gcc and double underscore: `__restrict__`
20:16 <+bridge> [ddnet] <Ryozuki> so it might be non standard
20:16 <+bridge> [ddnet] <Ryozuki> in c++
20:16 <+bridge> [ddnet] <Ryozuki> > 
20:16 <+bridge> [ddnet] <Ryozuki> > restrict is a c99 keyword. Yes, Rpbert S. Barnes, I know that most compilers support __restrict__. You will note that anything with double underscores is, by definition, implementation specific and thus NOT C++, but a compiler specific version of it. ‚Äì 
20:17 <+bridge> [ddnet] <Ryozuki> > KitsuneYMG
20:17 <+bridge> [ddnet] <Ryozuki> > Jan 6, 2010 at 9:31
20:17 <+bridge> [ddnet] <Ryozuki> > 
20:17 <+bridge> [ddnet] <Ryozuki> > restrict is a c99 keyword. Yes, Rpbert S. Barnes, I know that most compilers support `__restrict__`. You will note that anything with double underscores is, by definition, implementation specific and thus NOT C++, but a compiler specific version of it. ‚Äì 
20:17 <+bridge> [ddnet] <Ryozuki> > KitsuneYMG
20:17 <+bridge> [ddnet] <Ryozuki> > Jan 6, 2010 at 9:31
20:20 <+bridge> [ddnet] <Learath2> Debugging with an optimized binary and LTO is such pain
20:27 <+bridge> [ddnet] <Jupstar ‚ú™> depends
20:27 <+bridge> [ddnet] <Jupstar ‚ú™> do we have another UB in our code?
20:30 <+bridge> [ddnet] <Ryozuki> the answer is probs yes
20:30 <+bridge> [ddnet] <Ryozuki> its c++
20:30 <+bridge> [ddnet] <Ryozuki> ub can exist and be mostly harmless iirc
20:31 <+bridge> [ddnet] <Ryozuki> enabling lto on a rust project made the runtime go from 70s to 58s
20:31 <+bridge> [ddnet] <Ryozuki> poggers
20:31 <+bridge> [ddnet] <Ryozuki> thinlto 60s
20:31 <+bridge> [ddnet] <Ryozuki> within noise probs
20:41 <+bridge> [ddnet] <Jupstar ‚ú™> i once had a compiler bug in gcc with lto
20:41 <+bridge> [ddnet] <Jupstar ‚ú™> so not impossible its a compiler bug, better always also test with clang
20:50 <+bridge> [ddnet] <heinrich5991> why does C++ not have that "restrict" feature?
20:50 <+bridge> [ddnet] <deen> Yeah, weird. I wanted to use that too
20:51 <+bridge> [ddnet] <deen> two alternatives:
20:51 <+bridge> [ddnet] <deen> 1. make FindEntities be a template method so no cast
20:51 <+bridge> [ddnet] <deen> 2. Always keep apPlayersInRange as CEntity**
20:51 <+bridge> [ddnet] <deen> The second one works
20:51 <+bridge> [ddnet] <deen> haven't tried first yet
20:53 <+bridge> [ddnet] <deen> zero-length arrays and unions seem like weird hacks to work around this, don't like them
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> ```
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> [build] mimalloc: warning: thread 0x7f725bc006c0: unable to allocate aligned OS memory directly, fall back to over-allocation (67108864 bytes, address: 0x7f7257000000, alignment: 67108864, commit: 0)
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> [build] mimalloc: warning: thread 0x7f725bc006c0: mi_usable_size: pointer might not point to a valid heap region: 0x7f7254020080
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> [build] (this may still be a valid very large allocation (over 64MiB))
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> 
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> ```
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> wtf is that xD
21:02 <+bridge> [ddnet] <Jupstar ‚ú™> is that a new rust feature xD
21:03 <+bridge> [ddnet] <heinrich5991> where do you get that from? üòÆ
21:03 <+bridge> [ddnet] <heinrich5991> is ddnet outputting that?
21:03 <+bridge> [ddnet] <Jupstar ‚ú™> i started vscode, pressed compile
21:03 <+bridge> [ddnet] <Jupstar ‚ú™> yeah
21:04 <+bridge> [ddnet] <heinrich5991> hm, that sounds like it might be vscode though
21:04 <+bridge> [ddnet] <heinrich5991> I think mimalloc is microsoft malloc
21:04 <+bridge> [ddnet] <heinrich5991> yea: https://github.com/microsoft/mimalloc
21:04 <+bridge> [ddnet] <Jupstar ‚ú™> ok but weird, bcs its inside the terminal and says [build]
21:06 <+bridge> [ddnet] <Jupstar ‚ú™> yep also happens in terminal
21:06 <+bridge> [ddnet] <heinrich5991> hm
21:07 <+bridge> [ddnet] <heinrich5991> it's during build or during run?
21:07 <+bridge> [ddnet] <Jupstar ‚ú™> build
21:07 <+bridge> [ddnet] <Jupstar ‚ú™> maybe clang broken
21:12 <+bridge> [ddnet] <Jupstar ‚ú™> 1 google entry for that warning 5 days ago
21:12 <+bridge> [ddnet] <Jupstar ‚ú™> ez
21:12 <+bridge> [ddnet] <Jupstar ‚ú™> seems to be related to mold
21:13 <+bridge> [ddnet] <Jupstar ‚ú™> and linux 6.1
21:13 <+bridge> [ddnet] <heinrich5991> üòÑ
21:13 <+bridge> [ddnet] <heinrich5991> link?
21:13 <+bridge> [ddnet] <Ryozuki> u should report it
21:14 <+bridge> [ddnet] <Jupstar ‚ú™> https://bytemeta.vip/repo/microsoft/mimalloc/issues/640
21:14 <+bridge> [ddnet] <Jupstar ‚ú™> well i needed to upgrade to linux 6.1 bcs my nvme doesnt work on linux 6.0 xD
21:14 <+bridge> [ddnet] <Jupstar ‚ú™> so quite possible i am just living on the edge too much
21:15 <+bridge> [ddnet] <heinrich5991> linux 6.1 is the one that contains rust, no?
21:15 <+bridge> [ddnet] <heinrich5991> or at least infrastructure to support modules in written in rust
21:15 <+bridge> [ddnet] <Jupstar ‚ú™> i think so yeah
21:16 <+bridge> [ddnet] <Ryozuki> i use 6.1
21:16 <+bridge> [ddnet] <Ryozuki> didnt find problems
21:17 <+bridge> [ddnet] <Ryozuki> but i use gcc
21:17 <+bridge> [ddnet] <Ryozuki> and not mold
21:17 <+bridge> [ddnet] <Ryozuki> wait
21:17 <+bridge> [ddnet] <Ryozuki> do i use 6.1
21:17 <+bridge> [ddnet] <Learath2> I have this feeling that the issue here is that the character is in static memory
21:17 <+bridge> [ddnet] <Ryozuki> maybe not
21:17 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1039997246160252928/image.png
21:17 <+bridge> [ddnet] <Ryozuki> i use 6.0.7 lol
21:17 <+bridge> [ddnet] <Ryozuki> i guess gentoo hasnt patched it yet
21:18 <+bridge> [ddnet] <Jupstar ‚ú™> debian fast af
21:19 <+bridge> [ddnet] <Ryozuki> well i wonder why gentoo doesnt have 6.1
21:19 <+bridge> [ddnet] <Learath2> Oh, so you figured it out? What is the real issue?
21:19 <+bridge> [ddnet] <Jupstar ‚ú™> probs bcs its only release candidate yet
21:19 <+bridge> [ddnet] <Learath2> I didn't spot a strict aliasing issue there
21:19 <+bridge> [ddnet] <Ryozuki> ah yeah
21:19 <+bridge> [ddnet] <Learath2> It's also probably because the patchset isn't tested yet
21:20 <+bridge> [ddnet] <Ryozuki> i need to get a guru account
21:20 <+bridge> [ddnet] <Learath2> Ah, nope, vanilla-sources doesn't have 6.1 yet either
21:20 <+bridge> [ddnet] <Ryozuki> https://wiki.gentoo.org/wiki/Project:GURU/Information_for_Contributors
21:21 <+bridge> [ddnet] <Jupstar ‚ú™> who the fuck takes const ref to an int xD
21:21 <+bridge> [ddnet] <Jupstar ‚ú™> const bool
21:21 <+bridge> [ddnet] <Learath2> It should work
21:21 <+bridge> [ddnet] <Jupstar ‚ú™> ref
21:21 <+bridge> [ddnet] <Jupstar ‚ú™> yes
21:29 <+bridge> [ddnet] <Jupstar ‚ú™> ryo already knew it 2 years ago
21:30 <+bridge> [ddnet] <Jupstar ‚ú™> heinrich already got his answer two years ago
21:30 <+bridge> [ddnet] <Jupstar ‚ú™> xd
21:30 <+bridge> [ddnet] <Jupstar ‚ú™> but const ref int is 8 bytes, vs 4 bytes if the compiler isnt optimizing this lel
21:30 <+bridge> [ddnet] <Ryozuki> lmao
21:30 <+bridge> [ddnet] <heinrich5991> it's gonna take an extra 8 bytes
21:30 <+bridge> [ddnet] <heinrich5991> the actual int has to be stored somewhere, too
21:31 <+bridge> [ddnet] <Jupstar ‚ú™> registers
21:31 <+bridge> [ddnet] <heinrich5991> not if you have a pointer to it ^^
21:31 <+bridge> [ddnet] <Ryozuki> @Not Keks how do u find this
21:32 <+bridge> [ddnet] <heinrich5991> so a const ref to an int needs like 12 bytes in this case
21:32 <+bridge> [ddnet] <Jupstar ‚ú™> i remembered the pr when we talked about it
21:32 <+bridge> [ddnet] <Jupstar ‚ú™> so i just searched the pr
21:32 <+bridge> [ddnet] <Jupstar ‚ú™> true^^
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> if somebody wants to enlighten me, i am still interested in knowing if atomics have downsides
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> 
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> e.g. variables could live in L1/2/3 cache only
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> or simply in registers
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> 
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> But ofc interesting cases are objects with a specific lifetime, e.g. heap objects
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> 
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> And what about stack allocated objects?
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> What if a share a stack object with another thread lol
22:05 <+bridge> [ddnet] <Jupstar ‚ú™> who is compiler pro here, do we have such ppl
22:14 <+bridge> [ddnet] <heinrich5991> if you put your atomic into a register, then there cannot be a downside
22:14 <+bridge> [ddnet] <deen> i think with LTO FindEntities is inlined and the Entities array being passed to it in a different type is causing the strict aliasing problem.
22:15 <+bridge> [ddnet] <heinrich5991> I don't quite get your question. what do you mean? do you ask if atomics can live in registers?
22:15 <+bridge> [ddnet] <heinrich5991> yes, they can
22:15 <+bridge> [ddnet] <Jupstar ‚ú™> well if the compiler can assume it so easily
22:15 <+bridge> [ddnet] <Jupstar ‚ú™> 
22:15 <+bridge> [ddnet] <Jupstar ‚ú™> i some situation it probs optimizes them out
22:16 <+bridge> [ddnet] <heinrich5991> it's the same as for a normal variable
22:16 <+bridge> [ddnet] <heinrich5991> if it'd put the normal variable into a register, it'd also do it for the atomic
22:16 <+bridge> [ddnet] <Ryozuki> atomics have overhead right
22:16 <+bridge> [ddnet] <heinrich5991> not Ordering::Relaxed ones
22:16 <+bridge> [ddnet] <heinrich5991> not `Ordering::Relaxed` ones
22:16 <+bridge> [ddnet] <heinrich5991> on all platforms that I know
22:17 <+bridge> [ddnet] <Ryozuki> i find it curious many people confuse volatile with it being thread safe because the compiler cannot reorder it
22:17 <+bridge> [ddnet] <Ryozuki> right?
22:17 <+bridge> [ddnet] <Learath2> Hm, I don't really see the aliasing issue there :/
22:17 <+bridge> [ddnet] <Learath2> Maybe I need to brush up on my aliasing rules
22:17 <+bridge> [ddnet] <Jupstar ‚ú™> well with what optimization level?
22:17 <+bridge> [ddnet] <heinrich5991> `volatile` was the way to go before C had a memory level
22:17 <+bridge> [ddnet] <Ryozuki> ah i see
22:17 <+bridge> [ddnet] <heinrich5991> `volatile` was the way to go before C had a memory model
22:18 <+bridge> [ddnet] <Jupstar ‚ú™> e.g. o2 might consider this a break of the standard which garantuees visibility of the atomic or smth like this
22:18 <+bridge> [ddnet] <heinrich5991> at the optimization level where vector iterators don't have overhead over pointers
22:19 <+bridge> [ddnet] <Ryozuki> new shiny stuff
22:19 <+bridge> [ddnet] <Ryozuki> https://github.com/features/code-search
22:19 <+bridge> [ddnet] <Jupstar ‚ú™> well thats the optmization i use xdd
22:20 <+bridge> [ddnet] <Ryozuki> its funny
22:20 <+bridge> [ddnet] <Ryozuki> they show rust code
22:20 <+bridge> [ddnet] <Ryozuki> in the image
22:20 <+bridge> [ddnet] <Ryozuki> XD
22:20 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1040012979783082135/image.png
22:20 <+bridge> [ddnet] <Jupstar ‚ú™> i could swear i trigged this today already, without applying for the beta
22:20 <+bridge> [ddnet] <Learath2> I wonder if this is just a compiler bug, it smells sane to me
22:22 <+bridge> [ddnet] <Ryozuki> if i remember correctly, its because relaxed is a weak memory ordering right? but if you use a strong memory ordering on a weakly ordered cpu arch it has a lot of overhead
22:22 <+bridge> [ddnet] <Jupstar ‚ú™> they should show inlay hints for parameters so i can use references without ppl complaining that points are more obvious xdd
22:22 <+bridge> [ddnet] <Ryozuki> i need to reread atomics again
22:23 <+bridge> [ddnet] <Ryozuki> and strong orderings in strongly ordered cpus are cheap too
22:23 <+bridge> [ddnet] <Ryozuki> such as x86
22:24 <+bridge> [ddnet] <Jupstar ‚ú™> its like with teeworlds strong and weak
22:25 <+bridge> [ddnet] <Ryozuki> xd
22:25 <+bridge> [ddnet] <Jupstar ‚ú™> i think its not really overhead, but simply less optimization oppoturnities
22:25 <+bridge> [ddnet] <Ryozuki> nono
22:25 <+bridge> [ddnet] <Ryozuki> i think the weak ordered cpus have to add more instructions
22:25 <+bridge> [ddnet] <Ryozuki> to achieve the strong ordering
22:25 <+bridge> [ddnet] <Ryozuki> i forgot the blog post
22:26 <+bridge> [ddnet] <Jupstar ‚ú™> i mean they have to flush all memory before the fence
22:26 <+bridge> [ddnet] <Jupstar ‚ú™> thats already overhead
22:26 <+bridge> [ddnet] <Ryozuki> ye
22:26 <+bridge> [ddnet] <Jupstar ‚ú™> yeah rip, we need a new multi threaded design
22:27 <+bridge> [ddnet] <Jupstar ‚ú™> i kinda dislike "stopping" execution midrun
22:27 <+bridge> [ddnet] <Ryozuki> well u gotta sync
22:27 <+bridge> [ddnet] <Ryozuki> somehow
22:27 <+bridge> [ddnet] <Jupstar ‚ú™> i wish we'd have amazin AIs that would be like. YO nobos here this is better
22:27 <+bridge> [ddnet] <Jupstar ‚ú™> yes
22:27 <+bridge> [ddnet] <Jupstar ‚ú™> sync at a specific point
22:28 <+bridge> [ddnet] <Jupstar ‚ú™> but not so randomly
22:28 <+bridge> [ddnet] <Jupstar ‚ú™> i mean our CPUs are optimized for this now anyway
22:28 <+bridge> [ddnet] <Jupstar ‚ú™> but who knows what potentials we are wasting
22:28 <+bridge> [ddnet] <Learath2> well it's not very random anyway, cache coherency is pretty well designed üòÑ
22:29 <+bridge> [ddnet] <Jupstar ‚ú™> and pretty slow xd
22:29 <+bridge> [ddnet] <Jupstar ‚ú™> i used coherent memory first for our vulkan backend
22:29 <+bridge> [ddnet] <Jupstar ‚ú™> but an explicit flush at a good timepoint so much faster
22:29 <+bridge> [ddnet] <Jupstar ‚ú™> the driver, hardware whatever simply isnt clever enough
22:30 <+bridge> [ddnet] <Learath2> The issue is that the ram speed isn't catching up to the cpu. "Memory wall" creates a huge issue
22:30 <+bridge> [ddnet] <Ryozuki> when 10ghz ram
22:30 <+bridge> [ddnet] <Jupstar ‚ú™> but wouldnt that be an argument against these random cache flushes
22:30 <+bridge> [ddnet] <Learath2> shared l2 caches helped a fair bit in delaying the writeback
22:30 <+bridge> [ddnet] <Jupstar ‚ú™> u go back to RAM then
22:30 <+bridge> [ddnet] <Jupstar ‚ú™> ok sure
22:31 <+bridge> [ddnet] <Learath2> but at the end of the day, data just has to go to the ram for the caches to all sync up
22:31 <+bridge> [ddnet] <Ryozuki> @Learath2 are l2 shared? wasnt the l3? i read about caches not long ago
22:31 <+bridge> [ddnet] <Jupstar ‚ú™> shared cache will make it a bit better
22:31 <+bridge> [ddnet] <Ryozuki> but i dont know much
22:31 <+bridge> [ddnet] <Ryozuki> also why is a cache line 64bytes
22:31 <+bridge> [ddnet] <Learath2> Depends on the architecture
22:32 <+bridge> [ddnet] <Ryozuki> we should do branchless programming
22:32 <+bridge> [ddnet] <Ryozuki> it can be rly fast
22:32 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1040016100731134032/image.png
22:32 <+bridge> [ddnet] <Learath2> Only really worth it in cases where branch predictor is more likely to fail than succeed, but yes, it's a nice place to get some optimization in
22:32 <+bridge> [ddnet] <Ryozuki> https://en.algorithmica.org/hpc/pipelining/branchless/
22:33 <+bridge> [ddnet] <Ryozuki> > In general, data structures are made branchless by implicitly or explicitly padding them so that their operations take a constant number of iterations. Refer to the article for more complex examples.
22:34 <+bridge> [ddnet] <Ryozuki> the std string is a nice example
22:34 <+bridge> [ddnet] <Ryozuki> > rings. Oversimplifying things, an std::string is comprised of a pointer to a null-terminated char array (also known as a ‚ÄúC-string‚Äù) allocated somewhere on the heap and one integer containing the string size.
22:34 <+bridge> [ddnet] <Ryozuki> > 
22:34 <+bridge> [ddnet] <Ryozuki> > A common value for a string is the empty string ‚Äî which is also its default value. You also need to handle them somehow, and the idiomatic approach is to assign nullptr as the pointer and 0 as the string size, and then check if the pointer is null or if the size is zero at the beginning of every procedure involving strings.
22:34 <+bridge> [ddnet] <Ryozuki> > 
22:34 <+bridge> [ddnet] <Ryozuki> > However, this requires a separate branch, which is costly (unless the majority of strings are either empty or non-empty). To remove the check and thus also the branch, we can allocate a ‚Äúzero C-string,‚Äù which is just a zero byte allocated somewhere, and then simply point all empty strings there. Now all string operations with empty strings have to read this useless zero byte, but this is still much cheaper than a branch misprediction.
22:35 <+bridge> [ddnet] <heinrich5991> @Ryozuki Relaxed is the weakest possible memory ordering
22:35 <+bridge> [ddnet] <heinrich5991> it's basically none at all
22:35 <+bridge> [ddnet] <heinrich5991> at that point, the CPU only guarantees that it doesn't tear writes
22:35 <+bridge> [ddnet] <heinrich5991> but I know of no CPU that would tear writes at atomic widths
22:35 <+bridge> [ddnet] <Ryozuki> @heinrich5991 whats a write tear?
22:35 <+bridge> [ddnet] <Learath2> I seem to have an addiction to debugging, I just can't stop
22:35 <+bridge> [ddnet] <Ryozuki> weird addiction but ok
22:36 <+bridge> [ddnet] <heinrich5991> I'd employ you instantly üòÑ
22:36 <+bridge> [ddnet] <heinrich5991> but I'm no employer
22:36 <+bridge> [ddnet] <Learath2> Say you are writing a 32 bit value, it shouldn't be possible for half the write 16 bit to be observed
22:36 <+bridge> [ddnet] <Ryozuki> to be observed means read?
22:37 <+bridge> [ddnet] <Learath2> E.g. the old value was FFFF FFFF. You are writing 0000 0000. 0000 FFFF should never be read
22:37 <+bridge> [ddnet] <Jupstar ‚ú™> @Ryozuki use non volatile int64 in jvm and read and write at the same time to one var
22:37 <+bridge> [ddnet] <Ryozuki> ah
22:37 <+bridge> [ddnet] <Learath2> Write tears can be an issue with some types that can have trap representations and stuff
22:37 <+bridge> [ddnet] <Ryozuki> so it cant half write
22:37 <+bridge> [ddnet] <Jupstar ‚ú™> i dont even know if that still happens
22:37 <+bridge> [ddnet] <Ryozuki> it shouldnt*
22:37 <+bridge> [ddnet] <Jupstar ‚ú™> but that was the first time i actually encountered it xD
22:38 <+bridge> [ddnet] <Ryozuki> a tear is not completly writing all bytes
22:38 <+bridge> [ddnet] <Ryozuki> i guess
22:38 <+bridge> [ddnet] <heinrich5991> yes
22:38 <+bridge> [ddnet] <heinrich5991> well
22:38 <+bridge> [ddnet] <heinrich5991> no
22:38 <+bridge> [ddnet] <heinrich5991> not writing all bytes at the same time
22:38 <+bridge> [ddnet] <Ryozuki> ah ok
22:38 <+bridge> [ddnet] <heinrich5991> so that the intermediate value can be observed
22:38 <+bridge> [ddnet] <Ryozuki> is write tear the term?
22:38 <+bridge> [ddnet] <Ryozuki> i only see vsync stuff in google
22:38 <+bridge> [ddnet] <Jupstar ‚ú™> lel
22:38 <+bridge> [ddnet] <Ryozuki> xd
22:39 <+bridge> [ddnet] <Jupstar ‚ú™> when merge vk pr for more awesome vk prs
22:39 <+bridge> [ddnet] <Jupstar ‚ú™> soon mailbox support
22:39 <+bridge> [ddnet] <Jupstar ‚ú™> for tearless lower latency gameplay
22:39 <+bridge> [ddnet] <Jupstar ‚ú™> and fifo relaxed for tryhards
22:39 <+bridge> [ddnet] <Learath2> I'll spend 30 more minutes on this, if I don't get it I need to find a way to stop myself üòõ
22:41 <+bridge> [ddnet] <heinrich5991> yes. e.g.: https://www.programmerall.com/article/29491023681/
22:45 <+bridge> [ddnet] <Learath2> Ok, deen is definitely right. The compiler seems confident FindEntities doesn't modify apPlayersInRange
22:47 <+bridge> [ddnet] <Jupstar ‚ú™> change it to array ref and u'll know
22:47 <+bridge> [ddnet] <deen> I'm still wondering if this is standard C++ or the compiler optimizing too much
22:48 <+bridge> [ddnet] <deen> but probably it's standard and I have to go through and change dozens of places in DDNet code now üòÑ
22:48 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
22:48 <+bridge> [ddnet] <Learath2> I think it's the compiler to be honest. This really looks sane to me :/
22:48 <+bridge> [ddnet] <Jupstar ‚ú™> but if u explicitly take the pointer of the array, what then?
22:49 <+bridge> [ddnet] <deen> what do you mean by that?
22:49 <+bridge> [ddnet] <Jupstar ‚ú™> &aArray and aArray are the same pointer wise
22:49 <+bridge> [ddnet] <Jupstar ‚ú™> but maybe its still aliasing differently
22:50 <+bridge> [ddnet] <deen> I think at the point where you use `(CEntity **) apPlayersInRange` the compiler says this is a totally different value than `apPlayersInRange` since they have a different type. And then it reorders the inlined `FindEntities` code to be run afterwards.
22:50 <+bridge> [ddnet] <deen> Since `FindEntities` has no side effects anymore then
22:50 <+bridge> [ddnet] <Learath2> Well I can actually check this. Let me just disassemble it üòõ
22:51 <+bridge> [ddnet] <deen> so if you call a function with a parameter that gets written to, don't cast it to another type
22:52 <+bridge> [ddnet] <deen> I'd be happier if this was a compiler bug and not another annoying C/C++ thing to keep in mind when coding/reviewing
22:52 <+bridge> [ddnet] <deen> but just disabling strict aliasing probably costs too much performance
22:57 <+bridge> [ddnet] <Ryozuki> Note for self https://www.approxion.com/pointers-c-part-iii-strict-aliasing-rule/
22:59 <+bridge> [ddnet] <Jupstar ‚ú™> changed all alaising and works
22:59 <+bridge> [ddnet] <deen> Why does it work?
23:00 <+bridge> [ddnet] <heinrich5991> ```c++
23:00 <+bridge> [ddnet] <heinrich5991> struct measurements_t {
23:00 <+bridge> [ddnet] <heinrich5991>     uint8_t level;
23:00 <+bridge> [ddnet] <heinrich5991>     uint16_t temperature;
23:00 <+bridge> [ddnet] <heinrich5991>     uint32_t force;
23:00 <+bridge> [ddnet] <heinrich5991> };
23:00 <+bridge> [ddnet] <heinrich5991>  
23:00 <+bridge> [ddnet] <heinrich5991> void convert(const uint8_t* data, struct measurements_t* measurements) {
23:00 <+bridge> [ddnet] <heinrich5991>     /* Fill measurements object with raw data. */
23:00 <+bridge> [ddnet] <heinrich5991>     *measurements = *((struct measurements_t*) &data[0]);
23:00 <+bridge> [ddnet] <heinrich5991> }
23:00 <+bridge> [ddnet] <heinrich5991> ```
23:00 <+bridge> [ddnet] <Ryozuki> yes
23:00 <+bridge> [ddnet] <heinrich5991> I think the article is wrong in claiming that this is UB because of the aliasing rule
23:00 <+bridge> [ddnet] <Ryozuki> > In an attempt to convert data stored in a buffer (maybe read over a network connection) into a high-level structure, a pointer to ‚Äòstruct measurements_t‚Äô is aliased with a pointer to a ‚Äòuint8_t‚Äô. Since both types are incompatible (pointer to struct vs. pointer to ‚Äòuint8_t‚Äô) this code is a violation of the strict aliasing rule. Experienced C developers most likely recognized immediately that this code yields undefined behavior,
23:00 <+bridge> [ddnet] <heinrich5991> because uint8_t is unsigned char, and char stuff is allowed to alias
23:01 <+bridge> [ddnet] <heinrich5991> it might still be UB due to other reasons
23:01 <+bridge> [ddnet] <heinrich5991> like alignment
23:01 <+bridge> [ddnet] <Jupstar ‚ú™> i dunno i mean we dont go from CCharacter pointers to CEntity pointers, but from array to pointer
23:01 <+bridge> [ddnet] <Jupstar ‚ú™> 
23:01 <+bridge> [ddnet] <Jupstar ‚ú™> but i dunno why exactly its forbidden
23:02 <+bridge> [ddnet] <Ryozuki> > https://stackoverflow.com/questions/23848188/strict-aliasing-rule-and-char-pointers
23:02 <+bridge> [ddnet] <Jupstar ‚ú™> but lto really gives a shit about u using UB XD
23:02 <+bridge> [ddnet] <Jupstar ‚ú™> https://github.com/Jupeyy/ddnet/commit/9da473f73cfbdd0d641c0ff1da77ab1f6134e831
23:02 <+bridge> [ddnet] <Jupstar ‚ú™> 
23:02 <+bridge> [ddnet] <Jupstar ‚ú™> i changed the paramter to array ref to easily find them
23:03 <+bridge> [ddnet] <Ryozuki> ea sports
23:03 <+bridge> [ddnet] <Jupstar ‚ú™> its in the game
23:03 <+bridge> [ddnet] <Ryozuki> XD
23:07 <+bridge> [ddnet] <Ryozuki> https://preview.redd.it/8dhwi2o2kyy91.gif?width=640&format=mp4&s=441e95c971f863254588caa71ef42436d3e507bf
23:07 <+bridge> [ddnet] <Ryozuki> https://www.reddit.com/r/ProgrammerHumor/comments/yqozdo/its_a_good_language_too/
23:07 <+bridge> [ddnet] <Ryozuki> @Not Keks
23:07 <+bridge> [ddnet] <Ryozuki> xd
23:08 <+bridge> [ddnet] <Jupstar ‚ú™> the first comment lol
23:08 <+bridge> [ddnet] <Jupstar ‚ú™> its actually true
23:08 <+bridge> [ddnet] <Jupstar ‚ú™> python is the fusion, very "sn[e]aky"
23:08 <+bridge> [ddnet] <Learath2> Mh the call isn't inlined, nor is it reordered
23:09 <+bridge> [ddnet] <deen> does the call do anything at all?
23:09 <+bridge> [ddnet] <deen> Maybe it's optimized away because the compiler thinks it does nothing anyway
23:09 <+bridge> [ddnet] <Learath2> It looks like the whole function
23:11 <+bridge> [ddnet] <deen> Now you're confusing me üòÑ
23:12 <+bridge> [ddnet] <heinrich5991> @Not Keks btw re putting atomics into registers: https://rust.godbolt.org/z/5boWoq4zx
23:12 <+bridge> [ddnet] <Jupstar ‚ú™> yeah wow, for 2 lines of code
23:12 <+bridge> [ddnet] <heinrich5991> well, it's going to be that way in larger examples, too
23:12 <+bridge> [ddnet] <heinrich5991> what kind of example would you like to see?
23:12 <+bridge> [ddnet] <Learath2> It seems the call is done and the result is correct, but the compiler doesnt use the actual array. Unless I'm completely misreading this
23:13 <+bridge> [ddnet] <Jupstar ‚ú™> i want to know when exactly the compiler makes this assumption
23:13 <+bridge> [ddnet] <Jupstar ‚ú™> under which assumption does it break it
23:13 <+bridge> [ddnet] <heinrich5991> relaxed atomics have the same semantics as normal variables
23:13 <+bridge> [ddnet] <heinrich5991> it breaks under no assumption
23:13 <+bridge> [ddnet] <heinrich5991> on all cpu architectures that I know of
23:14 <+bridge> [ddnet] <heinrich5991> on optimization levels that optimize vector iterators to the same level as pointers
23:14 <+bridge> [ddnet] <deen> well, that still fits with my strict aliasing theory though
23:14 <+bridge> [ddnet] <deen> for the rest of the function the optimizer decided it doesn't need the array because it was zero-initialized anyway and no one accessed it inbetween the read
23:15 <+bridge> [ddnet] <deen> so just put a constant 0 there
23:16 <+bridge> [ddnet] <Ryozuki> @heinrich5991 what is x86-64-v2
23:16 <+bridge> [ddnet] <heinrich5991> it makes some assumptions about the modernity of the x86-64 cpu
23:16 <+bridge> [ddnet] <heinrich5991> if you mean the target architecture
23:16 <+bridge> [ddnet] <deen> line 25: https://gitlab.archlinux.org/archlinux/rfcs/-/merge_requests/2/diffs
23:17 <+bridge> [ddnet] <Jupstar ‚ú™> e.g. if u read the var in a different thread, how would it optimize it then?
23:17 <+bridge> [ddnet] <Jupstar ‚ú™> 
23:17 <+bridge> [ddnet] <Jupstar ‚ú™> relaxed atomics must be visible in finite time to the other thread
23:17 <+bridge> [ddnet] <Jupstar ‚ú™> normal variables not
23:17 <+bridge> [ddnet] <Jupstar ‚ú™> 
23:17 <+bridge> [ddnet] <Jupstar ‚ú™> i mean there is a reason volatile is different to relaxed atomics i guess
23:17 <+bridge> [ddnet] <Ryozuki> i see
23:17 <+bridge> [ddnet] <Jupstar ‚ú™> maybe a volatile variable could (in theory) never expose itself to the other thread
23:18 <+bridge> [ddnet] <heinrich5991> ah, I see
23:20 <+bridge> [ddnet] <heinrich5991> @Not Keks here's a difference, indeed: https://rust.godbolt.org/z/a8x9P4Tr7
23:21 <+bridge> [ddnet] <heinrich5991> so basically the compiler has to guarantee that it reloads the atomic at some point
23:21 <+bridge> [ddnet] <heinrich5991> but not the variable
23:21 <+bridge> [ddnet] <Ryozuki> bad gateway lol
23:21 <+bridge> [ddnet] <heinrich5991> works for me‚Ñ¢
23:21 <+bridge> [ddnet] <Ryozuki> a hard refresh fixed it
23:28 <+bridge> [ddnet] <Jupstar ‚ú™> if u find the c++ ref to this show pls
23:28 <+bridge> [ddnet] <Jupstar ‚ú™> when it comes to upcasting and downcasting and then even from array to pointer pointer
23:28 <+bridge> [ddnet] <Jupstar ‚ú™> it gets hard to search google for this xD
23:33 <+bridge> [ddnet] <Learath2> Okay yeah this is UB
23:33 <+bridge> [ddnet] <deen> > This bug (and some linked discussions) indicate that compiler developers don‚Äôt necessarily consider int8_t and uint8_t to be character types for aliasing purposes.
23:33 <+bridge> [ddnet] <deen> From https://blog.regehr.org/archives/1307
23:34 <+bridge> [ddnet] <deen> Also, help:
23:34 <+bridge> [ddnet] <deen> > A lot of C code is broken under strict aliasing. Separate compilation is probably what protects us from broader compiler exploitation of the brokenness, but it is a very poor kind of protection.
23:34 <+bridge> [ddnet] <deen> Maybe we should disable strict aliasing after all...
23:34 <+bridge> [ddnet] <deen> Makes sense that LTO exposes these problems then
23:34 <+bridge> [ddnet] <Learath2> Ok I give up. This is way too confusing üòÑ
23:36 <+bridge> [ddnet] <Learath2> It should be fine. We are accessing through a type that is the base class of the dynamic type of the object. C++17 6.10p8.7
23:36 <+bridge> [ddnet] <Jupstar ‚ú™> We should fix all
23:37 <+bridge> [ddnet] <Jupstar ‚ú™> I wouldn't be so sure. We talk about arrays here
23:37 <+bridge> [ddnet] <Jupstar ‚ú™> This is a completely different data type
23:37 <+bridge> [ddnet] <deen> Should I just open a GCC bug and tell them their compiler is wrong? Probably easiest way to get a standard reference üòÑ
23:37 <+bridge> [ddnet] <Jupstar ‚ú™> Xdd
23:37 <+bridge> [ddnet] <Jupstar ‚ú™> Good idea
23:38 <+bridge> [ddnet] <Learath2> I heard they are very mean üòõ
23:38 <+bridge> [ddnet] <deen> Hm, they do have a warning when opening a compiler bug not to do so if it is aliasing related:
23:38 <+bridge> [ddnet] <deen> > Before reporting that GCC compiles your code incorrectly, compile it with gcc -Wall -Wextra and see whether this shows anything wrong with your code. Similarly, if compiling with -fno-strict-aliasing -fwrapv makes a difference, your code probably is not correct.
23:38 <+bridge> [ddnet] <Jupstar ‚ú™> Use fake account xd
23:38 <+bridge> [ddnet] <Learath2> Let me ask on the C++ irx
23:39 <+bridge> [ddnet] <Learath2> irc*
23:39 <+bridge> [ddnet] <Learath2> They have pedants on call 7/24
23:39 <+bridge> [ddnet] <Jupstar ‚ú™> I love the confidence
23:39 <+bridge> [ddnet] <Learath2> Clang compiles it properly, no? Maybe a difference might pique their interest
23:39 <+bridge> [ddnet] <deen> I bet they had factor 100 more false bug reports with strict aliasing compared to true bugs
23:40 <+bridge> [ddnet] <Jupstar ‚ú™> It probably has less insane optimizations
23:40 <+bridge> [ddnet] <deen> yes, with Clang it's fine
23:40 <+bridge> [ddnet] <Jupstar ‚ú™> I'd trust GCC. Their binaries are still faster xd
23:40 <+bridge> [ddnet] <Jupstar ‚ú™> The performance is everything else never betrayed me
23:41 <+bridge> [ddnet] <Jupstar ‚ú™> The performance is everything rule never betrayed me
23:45 <+bridge> [ddnet] <TheNoobestNoob> yo! someone can tell me a way to access private variables from a class?
23:48 <+bridge> [ddnet] <deen> you can access them from methods of the same class. if you want children to have access, make them protected, if you want everyone to have access make public or use a getter/setter method. If you want some specific functions/classes to access them, you can use friends
