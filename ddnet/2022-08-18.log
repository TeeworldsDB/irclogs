00:00 <+bridge> [ddnet] <Voxel> I might not be doing this right, since editing the outline color in the if statement doesn't affect the outline color. But does affect the actual character color.
00:05 <+bridge> [ddnet] <Voxel> Oh yea, fixed it so that curly brackets are now normal brackets
00:33 <+bridge> [ddnet] <Voxel> Is there a reason why `TextRender()->TextOutlineColor` doesn't do anything in this scenario, yet `TextRender()->TextColor` does?
00:33 <+bridge> [ddnet] <Voxel> I rearranged the code a tiny but to have the colors change to default before the first text is rendered, and at the end of the if statement.
00:56 <+bridge> [ddnet] <louis> the clip/trim icons are a little hard to understand but everything else look good
00:56 <+bridge> [ddnet] <Voxel> I wish there were better symbols for them <:(
00:57 <+bridge> [ddnet] <Voxel> If any of you guys want to help out, feel free to search though the free icons in here:
00:57 <+bridge> [ddnet] <Voxel> https://fontawesome.com/search?m=free
00:57 <+bridge> [ddnet] <Voxel> keep in mind they **have** to be in the free section
01:22 <+bridge> [ddnet] <Voxel> Also if we find enough files, do you think we can also replace `file_icons.png` with FontIcons?
01:42 <+bridge> [ddnet] <Voxel> @Not Keks I was told you know a bit about this
01:44 <+bridge> [ddnet] <Chairn> can we not create character on our own and embed them in font icon file?
01:45 <+bridge> [ddnet] <Voxel> I mean...
01:46 <+bridge> [ddnet] <Voxel> I never thought about that.
01:49 <+bridge> [ddnet] <Voxel> But if the font file needs updating again it would overwrite
01:54 <+bridge> [ddnet] <Chairn> overwrite what?
01:54 <+bridge> [ddnet] <Chairn> creating character seems rather easy on linux with fontforge package
01:55 <+bridge> [ddnet] <Voxel> Oh, you mean adding NEW characters? I thought you meant replacing already existing characters
01:55 <+bridge> [ddnet] <Chairn> or replacing yeah
01:55 <+bridge> [ddnet] <Chairn> whatever works i guess
01:56 <+bridge> [ddnet] <Voxel> Even then I don't think you can update a font file without replacing all the characters
01:56 <+bridge> [ddnet] <Chairn> in both way, you still need to design the character and put it in font file 🙂
01:56 <+bridge> [ddnet] <Chairn> of course you can
01:56 <+bridge> [ddnet] <Voxel> Oh...
01:57 <+bridge> [ddnet] <Voxel> I'm reading the license right now to see if you can do that
01:58 <+bridge> [ddnet] <Chairn> i meant it technically, no idea about legal terms
05:14 <+bridge> [ddnet] <TsFreddie> lots of chinese servers lost connection to masters
05:14 <+bridge> [ddnet] <TsFreddie> rip
07:09 <+bridge> [ddnet] <Jupstar> Just look how the server browser verified symbol did it
07:09 <+bridge> [ddnet] <Jupstar> Maybe do label overwrites it or smth like that
07:10 <+bridge> [ddnet] <Voxel> I **did** look at how the verified symbol was made. All it is is just two unicodes on top of each other.
07:11 <+bridge> [ddnet] <Voxel> Maybe
07:13 <+bridge> [ddnet] <Voxel> Maybe. The verified symbol uses DoLabelStreamed, meanwhile I just used DoLabel
07:31 <+bridge> [ddnet] <Jupstar> U can add it to the props struct with default value and remove wherever it overwrites it
08:45 <+bridge> [ddnet] <Tater> @Not Keks any idea what might cause this?
08:45 <+bridge> [ddnet] <Tater> ```
08:45 <+bridge> [ddnet] <Tater> [2022-08-18 01:18:03][vulkan]: device lost
08:45 <+bridge> [ddnet] <Tater> [2022-08-18 01:18:03][vulkan]: vulkan error: Submitting to graphics queue failed.: device lost
08:45 <+bridge> [ddnet] <Tater> [2022-08-18 01:18:03][assert]: src\engine\client\backend\vulkan\backend_vulkan.cpp(1114): Submitting to graphics queue failed.: device lost
08:45 <+bridge> [ddnet] <Tater> ```
08:45 <+bridge> [ddnet] <Tater> It happened 4 times randomly in the last 6 months
08:51 <+bridge> [ddnet] <Tater> hmm actually it may be from using nvidia overlay to record. I'm pretty sure it only happens when I do that
08:51 <+bridge> [ddnet] <Tater> hmm actually it may be from using nvidia overlay to record. I'm pretty sure it only happened when I did that
09:03 <+bridge> [ddnet] <Jupstar> :\
09:19 <+bridge> [ddnet] <Voxel> Putting this here to remind myself later (Now that we're changing the icons, why not have there be actually different icons for the different elements?)
09:19 <+bridge> [ddnet] <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1009723202081144842/unknown.png
09:35 <+bridge> [ddnet] <fokkonaut> All of your sketches look better than anything I ever drew
09:36 <+bridge> [ddnet] <fokkonaut> All of your sketches look better than anything I ever drawn
10:25 <+bridge> [ddnet] <pilonpl> It's because it's digital
10:28 <+bridge> [ddnet] <Cellegen | RiH> any file which aren't generated by the client cannot be accessed like that
10:28 <+bridge> [ddnet] <Cellegen | RiH> perhaps the .map files only, but anything else needs permissions at least
10:44 <+bridge> [ddnet] <Voxel> isnt there literally a fuction in the code that detects what type of file it is
10:45 <+bridge> [ddnet] <Voxel> theres an enum AND a endswith thing
10:47 <+bridge> [ddnet] <Player X> file.endswith('.map') etc.
10:47 <+bridge> [ddnet] <Voxel> yea
10:48 <+bridge> [ddnet] <Player X> dunno what it's in C++ tho
10:48 <+bridge> [ddnet] <Player X> dunno what the function is called in C++ tho
11:12 <+bridge> [ddnet] <fokkonaut> eh?
11:17 <+bridge> [ddnet] <pilonpl> ```if (filename[filename.lenght-1] == 'p' and filename[filename.lenght-2] == 'a' and filename[filename.lenght-3] == 'm' and filename[filename.lenght-4] == '.') {
11:17 <+bridge> [ddnet] <pilonpl> 
11:17 <+bridge> [ddnet] <pilonpl> }```
11:17 <+bridge> [ddnet] <Learath2> LOL, is that actual code we have?
11:17 <+bridge> [ddnet] <Voxel> no
11:18 <+bridge> [ddnet] <Learath2> Should be replaced with an str_endswith if so
11:18 <+bridge> [ddnet] <pilonpl> I hope not lol
11:18 <+bridge> [ddnet] <k2d222> lenght
11:18 <+bridge> [ddnet] <pilonpl> That's just my solution
11:18 <+bridge> [ddnet] <Voxel> i checked, we do use endswith (fortunately)
11:19 <+bridge> [ddnet] <Voxel> when i get back on computer im going to try and make file_icons.png obsolete :troll: 
11:19 <+bridge> [ddnet] <Voxel> (which is harder than it sounds for me)
11:21 <+bridge> [ddnet] <CrazyDevNEW> Where are all the console commands described in the sources?
11:23 <+bridge> [ddnet] <Voxel> config_variables.h
11:23 <+bridge> [ddnet] <Voxel> i think thats what u mean right
11:26 <+bridge> [ddnet] <CrazyDevNEW> Or rather, where the code of each rcon command is described
11:26 <+bridge> [ddnet] <CrazyDevNEW> i need to edit super command, addweapon and jetpqck
11:27 <+bridge> [ddnet] <CrazyDevNEW> i need to edit super command, addweapon and jetpack
11:30 <+bridge> [ddnet] <pilonpl> I am not an expert but maybe src/game/server/ddracecommands.cpp ?
11:32 <+bridge> [ddnet] <CrazyDevNEW> that's exactly what I was looking for, thanks
11:48 <+bridge> [ddnet] <k2d222> I'm looking at the c++ codebase for the first time 🙂 I have seen multiple times an int be used instead of a bool, why is that?
11:49 <+bridge> [ddnet] <CrazyDevNEW> Are there any sources with more server administration functionality?
11:50 <+bridge> [ddnet] <CrazyDevNEW> It's hard for me to rewrite the code to give someone a jetpack or something else
12:33 <+bridge> [ddnet] <ReiTW> Depends on what you do
12:34 <+bridge> [ddnet] <ReiTW> When you have 32 bits you can store 32 booleans
12:53 <+bridge> [ddnet] <k2d222> well here for example
12:53 <+bridge> [ddnet] <k2d222> IsStrokeCommand is only used there
12:53 <+bridge> [ddnet] <k2d222> https://cdn.discordapp.com/attachments/293493549758939136/1009777105560670268/unknown.png
12:58 <+bridge> [ddnet] <Learath2> This one is probably just an artifact of migration from C way back in the day
12:59 <+bridge> [ddnet] <k2d222> ok.. there are quite a few then. It doesn't matter too much I suppose, but I found it a bit confusing
13:17 <+bridge> [ddnet] <ReiTW> Or that, didn't know tw was C only before
13:59 <+bridge> [ddnet] <Ryozuki> https://en.cppreference.com/w/cpp/utility/bitset
13:59 <+bridge> [ddnet] <Ryozuki> i heard some funky stuff about this tho
14:01 <+bridge> [ddnet] <Ryozuki> https://stackoverflow.com/questions/30295174/what-is-the-performance-of-stdbitset
14:02 <+bridge> [ddnet] <Ryozuki> > sizeof(bitset<8>) => 8
14:02 <+bridge> [ddnet] <Ryozuki> > sizeof(uint8_t) => 1
14:02 <+bridge> [ddnet] <Ryozuki> zero cost abstractions in c++ hehe
14:06 <+bridge> [ddnet] <ReiTW> lol didn't know that
14:06 <+bridge> [ddnet] <ReiTW> afterall C++ has too many stuff
14:07 <+bridge> [ddnet] <Ryozuki> yeah
14:07 <+bridge> [ddnet] <Ryozuki> but bitset doesnt optimize as well
14:07 <+bridge> [ddnet] <Ryozuki> xd
14:07 <+bridge> [ddnet] <ReiTW> I guess that's more for simplicity ?
14:07 <+bridge> [ddnet] <Ryozuki> its cuz
14:07 <+bridge> [ddnet] <lynn> oh hey
14:07 <+bridge> [ddnet] <Ryozuki> u cant use operator[] to index bits
14:07 <+bridge> [ddnet] <Ryozuki> the answer explains it
14:07 <+bridge> [ddnet] <lynn> that BMTH song has a six impala remix
14:08 <+bridge> [ddnet] <Ryozuki> #off-topic ?
14:08 <+bridge> [ddnet] <lynn> it's not good tho imo lol
14:08 <+bridge> [ddnet] <Learath2> Hm, I thought bitset did optimize properly for sizes that are = 0 (mod 8)
14:08 <+bridge> [ddnet] <Ryozuki> > If you are using bitset in a way that does actually make it clearer and cleaner than bit-fiddling, like checking for one bit at a time instead of using a bit mask, then inevitably you lose all those benefits that bitwise operations provide, like being able to check to see if 64 bits are set at one time against a mask, or using FFS instructions to quickly determine which bit is set among 64-bits.
14:08 <+bridge> [ddnet] <Ryozuki> > 
14:08 <+bridge> [ddnet] <Ryozuki> > I'm not sure that bitset incurs a penalty to use in all ways possible (ex: using its bitwise operator&), but if you use it like a fixed-size boolean array which is pretty much the way I always see people using it, then you generally lose all those benefits described above. We unfortunately can't get that level of expressiveness of just accessing one bit at a time with operator[] and have the optimizer figure out all the bitwise manipulati
14:11 <+bridge> [ddnet] <Learath2> Huh, doesn't std::bitset have member functions that implement these operations in an optimal way? I'm sure `std::bitset::any` uses an FFS
14:14 <+bridge> [ddnet] <Ryozuki> > If you genuinely need to access a bunch of bits with a random access pattern which, for some reason or other, needs to check and set just one bit a time, then it might be ideally implemented for such a purpose. But my point is that almost all use cases I've encountered didn't require that, and when it's not required, the old school way involving bitwise operations tends to be significantly more efficient.
14:14 <+bridge> [ddnet] <Ryozuki> idk
14:17 <+bridge> [ddnet] <Learath2> hm, you can't get it to emit a clz, so finding the first set bit is annoying
14:18 <+bridge> [ddnet] <Learath2> but `any`, `all`, `none` all seem to be implemented in a sane way
14:21 <+bridge> [ddnet] <Learath2> I guess you could technically do `to_ulong` followed by a `builtin_clzl`
14:22 <+bridge> [ddnet] <Learath2> Hm, not that I could get gcc to emit a clz with a loop and an ulong
16:06 <+bridge> [ddnet] <Ryozuki> https://www.tomshardware.com/news/tsmc-initiates-3nm-chips-production-next-month
16:25 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1009830308272685086/unknown.png
16:25 <+bridge> [ddnet] <Ryozuki> its upgrade time
16:32 <+bridge> [ddnet] <ReiTW> uff
18:52 <+bridge> [ddnet] <CrazyDevNEW> Metasploit?
18:52 <+bridge> [ddnet] <CrazyDevNEW> https://cdn.discordapp.com/attachments/293493549758939136/1009867392551231578/unknown.png
18:52 <+bridge> [ddnet] <CrazyDevNEW> young hacker
18:53 <+bridge> [ddnet] <Chairn> he also uses telegram, probably a catalan secessionist
18:54 <+bridge> [ddnet] <CrazyDevNEW> Maybe
18:57 <+bridge> [ddnet] <CrazyDevNEW> Wtf
18:57 <+bridge> [ddnet] <CrazyDevNEW> https://cdn.discordapp.com/attachments/293493549758939136/1009868531506106460/unknown.png
18:57 <+bridge> [ddnet] <CrazyDevNEW> Wtf
18:57 <+bridge> [ddnet] <CrazyDevNEW> https://cdn.discordapp.com/attachments/293493549758939136/1009868695977349211/unknown.png
19:00 <+bridge> [ddnet] <CrazyDevNEW> ₽id0r
19:14 <+bridge> [ddnet] <gerdoe> :monkalaugh:
19:14 <+bridge> [ddnet] <Ar1gin> what's wrong?
19:15 <+bridge> [ddnet] <CrazyDevNEW> API Log4j
19:15 <+bridge> [ddnet] <Ar1gin> bro
19:15 <+bridge> [ddnet] <Ar1gin> it's not log4j
19:16 <+bridge> [ddnet] <Ar1gin> it's log4cpp
19:17 <+bridge> [ddnet] <CrazyDevNEW> may be.  I didn't read the documentation
19:17 <+bridge> [ddnet] <Steinchen> Hey, which maps have the most  finishes? Excluding race stuff
19:19 <+bridge> [ddnet] <CrazyDevNEW> I very quickly went through the documentation and fashioned a few keywords: “C ++”, “API”, “Java Log4j”
19:19 <+bridge> [ddnet] <CrazyDevNEW> #mapping
19:19 <+bridge> [ddnet] <Ar1gin> <https://archlinux.org/packages/community/x86_64/log4cplus/>
19:20 <+bridge> [ddnet] <Steinchen> idk if that fits into mapping
19:20 <+bridge> [ddnet] <Steinchen> mapping and maps are 2 different things
19:21 <+bridge> [ddnet] <Chairn> i'd say flappy bird
19:22 <+bridge> [ddnet] <Steinchen> Nope,  only new best time counts
19:22 <+bridge> [ddnet] <Steinchen> nerfed it
22:15 <+bridge> [ddnet] <Anderson watts> I'll 20 people on how to earn $10,000 or more in just 3day's from the crypto market.but you will pay me 10% commission when you receive your profit. if interested send me a direct message, for more information... or Contact via Telegram\: https://t.me/+tfGh-LUPGbdmY2U8
22:16 <+bridge> [ddnet] <Jupstar> @Discord Mod
22:17 <+bridge> [ddnet] <Jupstar ✪> Zwelf\:
23:05 <+bridge> [ddnet] <Chairn> use with caution
23:05 <+bridge> [ddnet] <Chairn> https://github.com/ortegaalfredo/kscope/blob/master/doc/HDD-microphones.pdf
23:12 <+bridge> [ddnet] <gerdoe> lol?
23:12 <+bridge> [ddnet] <Chairn> there's a python program to kill your hdd as well
23:12 <+bridge> [ddnet] <Chairn> or kill your vps' hdd
23:30 <+bridge> [ddnet] <louis> feature idea: soft reset
23:31 <+bridge> [ddnet] <louis> soft reset will teleport you back to the last checkpoint, and it could be toggled within a map setting or tile or whatnot
23:31 <+bridge> [ddnet] <louis> cause sometimes a map doesn't work with teleport tiles so you're forced to make it faily
23:33 <+bridge> [ddnet] <Cellegen | RiH> allow practicing players to teleport to any teleport using a custom command: /tp [number], instead of having access in rcon
23:33 <+bridge> [ddnet] <Cellegen | RiH> allow practicing players to teleport to any teleport location using a custom command: /tp [number], instead of having access in rcon
23:33 <+bridge> [ddnet] <Cellegen | RiH> allow practicing players to teleport to any cp location using a custom command: /tp [number], instead of having access in rcon
