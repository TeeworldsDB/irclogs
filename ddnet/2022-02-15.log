08:08 <+bridge_> [ddnet] <Ryozuki> imagine not having loop {} which is like a while(true) :BASED:
08:15 <+bridge_> [ddnet] <Ryozuki> meh most fixes are using booleans for places where bools are required
09:42 <+bridge_> [ddnet] <chillerdragon> o.O
09:42 <+bridge_> [ddnet] <chillerdragon> (@deen)
09:43 <+bridge_> [ddnet] <chillerdragon> lmao deen is such an professional \:D
09:43 <+bridge_> [ddnet] <chillerdragon> (@Ryozuki)
10:24 <+bridge_> [ddnet] <Cellegen | HU> :justatest:
10:35 <+bridge_> [ddnet] <fokkonaut> wtf xd
10:38 <+bridge_> [ddnet] <Souly> can we somehow maybe get estimated number instead of what we currently have
10:38 <+bridge_> [ddnet] <Souly> so that developer doesnt have to die
11:27 <+bridge_> [ddnet] <deen> the color indicates the estimated number
12:11 <+bridge_> [ddnet] <fokkonaut> f1: `leak_ip_address_to_all_servers`
12:12 <+bridge_> [ddnet] <Souly> **estimated number**
12:12 <+bridge_> [ddnet] <Souly> that command actually leaks ip
12:12 <+bridge_> [ddnet] <fokkonaut> real number > estimated
12:12 <+bridge_> [ddnet] <fokkonaut> of course, that does serverinfo requests the old way by pinging each one manually
12:12 <+bridge_> [ddnet] <Souly> ye and that's not safe
12:13 <+bridge_> [ddnet] <fokkonaut> i doubt tho that vali or whoever still has fake servers on 0.6, due to the http master
12:13 <+bridge_> [ddnet] <fokkonaut> u wont die of it + just restart router or do it with a vpn
12:13 <+bridge_> [ddnet] <fokkonaut> your client caches the pings
12:13 <+bridge_> [ddnet] <fokkonaut> and saved them upon restart
12:13 <+bridge_> [ddnet] <fokkonaut> so do it once and u r fine until new servers come
12:13 <+bridge_> [ddnet] <Souly> i will die
12:14 <+bridge_> [ddnet] <fokkonaut> stop troll, its hardcore unfunny ^^
12:14 <+bridge_> [ddnet] <fokkonaut> and will not get funnier over time xd
12:15 <+bridge_> [ddnet] <Souly> https://tenor.com/view/spunch-bop-spongebob-crying-cube-mr-krabs-gif-19973394
12:15 <+bridge_> [ddnet] <fokkonaut> #showroom
12:34 <+ChillerDragon> watfaka is this live freeze :D i somewhat saw it on github and now after a merge with upstream i get random freezes haha
12:34 <+ChillerDragon> is it used in some map already?
12:35 <+bridge_> [ddnet] <bencie> not on official maps
12:35 <+ChillerDragon> hmk
12:35 <+ChillerDragon> do you have a tldr how it works?
12:35 <+bridge_> [ddnet] <Patiga> you can't do movement key inputs with it
12:36 <+ChillerDragon> when?
12:36 <+ChillerDragon> on tile touch?
12:36 <+bridge_> [ddnet] <Patiga> when you have the effect, one tile turns it on, one off
12:36 <+ChillerDragon> are you saying i drunk mapped that index somewhere?
12:36 <+bridge_> [ddnet] <Patiga> yea
12:36 <+ChillerDragon> lol
12:36 <+bridge_> [ddnet] <Patiga> I suppose ^^
12:36 <+ChillerDragon> INDEEED
12:36 <+ChillerDragon> 144
12:37 <+ChillerDragon> HOW DAFAK DID THAT HAPPEN
12:37 <+ChillerDragon> Ok thanks bois
12:38 <+ChillerDragon> @bencie lmao i always thought ur name is benice
12:38 <+ChillerDragon> as in ben ice or be nice
12:38 <+bridge_> [ddnet] <bencie> you just noticed?
12:38 <+bridge_> [ddnet] <bencie> :D
12:38 <+ChillerDragon> but bencie is like so odd
12:38 <+ChillerDragon> i noticed when i loaded the save game
12:38 <+bridge_> [ddnet] <bencie> Although I've heard that before ^^ it's my irl name with an i added
12:38 <+ChillerDragon> took me 10 mins
12:39 <+bridge_> [ddnet] <bencie> hahahahah
12:39 <+ChillerDragon> had to go to ddnet.tw and typed benice 3 times and somehow the name had no points
12:40 <+ChillerDragon> was about to contact ddnet staff that your name was wiped from the database
12:40 <+bridge_> [ddnet] <bencie> LOL
12:40 <+bridge_> [ddnet] <bencie> that's funny
12:40 <+ChillerDragon> If I would try to fake you in game it won't be hard to identify me
13:50 <+bridge_> [ddnet] <Souly> ben ice
14:06 <+bridge_> [ddnet] <bencie> souli
14:21 <+bridge_> [ddnet] <deen> @Patiga @Learath2 what is the executable that is run on $optimize? Want to do it locally
14:22 <+bridge_> [ddnet] <Patiga> `edit_map`, let me check the options used
14:23 <+bridge_> [ddnet] <Patiga> `--remove-everything-unused --shrink-tiles-layers`
14:24 <+bridge_> [ddnet] <deen> why not --shrink-layers?
14:25 <+bridge_> [ddnet] <Patiga> because that would touch the game layers. that will change the position of the kill barrier and if the map is shrunk from the left or up it will move the map's floating point precision
14:26 <+bridge_> [ddnet] <Patiga> I first made it do `--shrink-layers`, but I think Ravie and maybe others were against that
14:26 <+bridge_> [ddnet] <deen> ok
14:27 <+bridge_> [ddnet] <Patiga> -> if you want to do it locally on a normal, map, `--shrink-layers` should be harmless
14:29 <+bridge_> [ddnet] <esteban65g6> @everyone
14:29 <+bridge_> [ddnet] <esteban65g6>  Free Discord Nitro AirDrop from Steam!
14:29 <+bridge_> [ddnet] <esteban65g6>  Share your screen in HD 
14:29 <+bridge_> [ddnet] <esteban65g6>  Collect or create your own custom and animated emoji
14:29 <+bridge_> [ddnet] <esteban65g6>  Support the server and let everyone know about your support
14:29 <+bridge_> [ddnet] <esteban65g6> https://steamnitrro.com/airdrop
14:32 <+bridge_> [ddnet] <Ryozuki> @Not Keks @Learath2 here us caring about 2gb map when they require 12gb ram nowadays
14:32 <+bridge_> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/943137782203834419/unknown.png
14:32 <+bridge_> [ddnet] <Ryozuki> :PepeA:
14:33 <+bridge_> [ddnet] <Learath2> Minimum 12g memory :pepeW:
14:33 <+bridge_> [ddnet] <Learath2> We are so in the wrong timeline
14:33 <+bridge_> [ddnet] <Ryozuki> i wonder if the game is coded in java or something lmfao
14:36 <+bridge_> [ddnet] <Not Keks> memory is simply the easiest hardware to scale
14:40 <+bridge_> [ddnet] <Learath2> bad memory usage apologists smh
14:41 <+bridge_> [ddnet] <Not Keks> i understand that you are mad if memory is wasted
14:41 <+bridge_> [ddnet] <Not Keks> and i agree in this case
14:41 <+bridge_> [ddnet] <Not Keks> but gameengines probably simply try to not unload textures/vertices etc as much as possible
14:42 <+bridge_> [ddnet] <Ryozuki> its hard for me to comprenhend how they need so much ram
14:43 <+bridge_> [ddnet] <Not Keks> is that an MMO or smth?
14:43 <+bridge_> [ddnet] <Not Keks> open world?
14:43 <+bridge_> [ddnet] <Ryozuki> its elden ring
14:43 <+bridge_> [ddnet] <Ryozuki> yes open source
14:43 <+bridge_> [ddnet] <Ryozuki> souls like
14:43 <+bridge_> [ddnet] <Ryozuki> open world
14:43 <+bridge_> [ddnet] <Ryozuki> *
14:43 <+bridge_> [ddnet] <Ryozuki> lmao idk why i said open source
14:43 <+bridge_> [ddnet] <Ryozuki> xd
14:43 <+bridge_> [ddnet] <Not Keks> that was ur desire xd
14:43 <+bridge_> [ddnet] <Ryozuki> xd
14:43 <+bridge_> [ddnet] <Ryozuki> imagine looking into the source code of a AAA game
14:43 <+bridge_> [ddnet] <Ryozuki> would be interesting
14:43 <+bridge_> [ddnet] <Ryozuki> or maybe disappointing
14:44 <+bridge_> [ddnet] <Not Keks> its alot of scripting language
14:44 <+bridge_> [ddnet] <Not Keks> for all events basically
14:44 <+bridge_> [ddnet] <Ryozuki> i expect some native fully optimized assembly here and there
14:44 <+bridge_> [ddnet] <Ryozuki> like crypto people
14:44 <+bridge_> [ddnet] <Not Keks> only physics and other stuff that need high performance use lower level language mostly
14:44 <+bridge_> [ddnet] <Learath2> I mean if you are interested unreal engines source is available, it's a massive part of the source code
14:44 <+bridge_> [ddnet] <Ryozuki> ah
14:45 <+bridge_> [ddnet] <Ryozuki> i wanna know about the frostbite engine source code
14:45 <+bridge_> [ddnet] <Ryozuki> bf3 and bf4 look too good for their age
14:45 <+bridge_> [ddnet] <Ryozuki> must be some good engineeringf
14:45 <+bridge_> [ddnet] <Ryozuki> must be some good engineering
14:45 <+bridge_> [ddnet] <Not Keks> the engines are often very good indeed
14:46 <+bridge_> [ddnet] <Learath2> I'm more interested in what rockstar has, their open world games have always been above the rest for me
14:46 <+bridge_> [ddnet] <Ryozuki> ah ye
14:46 <+bridge_> [ddnet] <Ryozuki> and they perform rly well
14:47 <+bridge_> [ddnet] <Ryozuki> gta 5 is a beast
14:47 <+bridge_> [ddnet] <Ryozuki> the amount of detail
14:47 <+bridge_> [ddnet] <Ryozuki> on a open world game
14:47 <+bridge_> [ddnet] <Ryozuki> it has no match
14:47 <+bridge_> [ddnet] <Learath2> RDR2 aswell, great performance for a game of that scale
14:47 <+bridge_> [ddnet] <Not Keks> i'd say a lot of approximation for stuff that should look good but not be too realistic
14:48 <+bridge_> [ddnet] <Ryozuki> @Learath2 we are oficially in c++17 land
14:48 <+bridge_> [ddnet] <Learath2> \o/
14:49 <+bridge_> [ddnet] <Learath2> I can remove that one ugly void_t hack
14:50 <+bridge_> [ddnet] <Ryozuki> i wonder if #4711 is fixed by using vulkan
14:50 <+bridge_> [ddnet] <DDNet> https://github.com/ddnet/ddnet/issues/4711
14:50 <+bridge_> [ddnet] <Not Keks> directly used the automatic std::array auto template deduction
14:50 <+bridge_> [ddnet] <Not Keks> https://github.com/ddnet/ddnet/blob/08a40740b38e9233619e83534fcb1cf59106468b/src/engine/client/backend/vulkan/backend_vulkan.cpp#L2049
14:50 <+bridge_> [ddnet] <Ts懒散> why is DOWNLOAD_GTEST on by default in windows
14:50 <+bridge_> [ddnet] <Not Keks> yeah a bit annoying, but heinrich said he did it, because google said you should do it xD
14:51 <+bridge_> [ddnet] <Ryozuki> @Not Keks are u using the c++ vulkan api?
14:51 <+bridge_> [ddnet] <Not Keks> i'd hope so 😛
14:51 <+bridge_> [ddnet] <Ryozuki> or the C one
14:51 <+bridge_> [ddnet] <Not Keks> C
14:51 <+bridge_> [ddnet] <Ryozuki> there is a c++ one btw
14:51 <+bridge_> [ddnet] <Not Keks> i know
14:51 <+bridge_> [ddnet] <Ryozuki> why not the c++?
14:51 <+bridge_> [ddnet] <Not Keks> i dunno i just prefer to write my own wrappers
14:52 <+bridge_> [ddnet] <Ryozuki> ☕
14:54 <+bridge_> [ddnet] <Learath2> Ryozuki, what are your feelings on this?
14:55 <+bridge_> [ddnet] <Ryozuki> :PES3_Flushed:
14:55 <+bridge_> [ddnet] <Learath2> Heinrich would have a spicy opinion about that too 😄 He is not a big fan of rolling your own almost anything
14:55 <+bridge_> [ddnet] <Ryozuki> i would use the c++
14:55 <+bridge_> [ddnet] <Ryozuki> im sure its safer
14:55 <+bridge_> [ddnet] <Ryozuki> they actually use smart pointers iirc
14:55 <+bridge_> [ddnet] <Not Keks> the problem is, you dont gain alot from it
14:56 <+bridge_> [ddnet] <Not Keks> device->dosmth
14:56 <+bridge_> [ddnet] <Not Keks> 
14:56 <+bridge_> [ddnet] <Not Keks> or
14:56 <+bridge_> [ddnet] <Not Keks> 
14:56 <+bridge_> [ddnet] <Not Keks> dosmth(device)
14:56 <+bridge_> [ddnet] <Chairn> worst reason to do so
14:57 <+bridge_> [ddnet] <Ryozuki> <https://github.com/edg-l/SuperSDL/blob/master/src/graphics/renderer.cpp> i think i achieved rendering a triangle
14:57 <+bridge_> [ddnet] <Ryozuki> old code xd
14:58 <+bridge_> [ddnet] <Learath2> \o/
14:58 <+bridge_> [ddnet] <Not Keks> did you at least understand it?
14:58 <+bridge_> [ddnet] <Ryozuki> :PepeA:
14:58 <+bridge_> [ddnet] <Not Keks> or just copy paste xd
14:58 <+bridge_> [ddnet] <Ryozuki> some stuff
14:58 <+bridge_> [ddnet] <Ryozuki> not everything
14:58 <+bridge_> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/943144300231934033/unknown.png
14:58 <+bridge_> [ddnet] <Not Keks> i mean in the end vulkan still feels similar to OpenGL, its just that OpenGL hides synchronizations and allocations
14:58 <+bridge_> [ddnet] <Ryozuki> u rly have lot of control
14:58 <+bridge_> [ddnet] <Ryozuki> xdd
14:59 <+bridge_> [ddnet] <Not Keks> and then you have 10000000000000 lines of code xd
14:59 <+bridge_> [ddnet] <Ryozuki> tho if u ask me now i dont remember much
15:00 <+bridge_> [ddnet] <Not Keks> `vk::PipelineLayoutCreateInfo PipelineLayoutInfo = {};`
15:00 <+bridge_> [ddnet] <Not Keks> 
15:00 <+bridge_> [ddnet] <Not Keks> for example is even more verbose than c version
15:00 <+bridge_> [ddnet] <Not Keks> `vkPipelineLayoutCreateInfo PipelineLayoutInfo{};`
15:00 <+bridge_> [ddnet] <Not Keks> xd
15:00 <+bridge_> [ddnet] <Ryozuki> this is from when i thought using only C and not c++ was the cool kids thing: <https://github.com/edg-l/SimpleGame>
15:00 <+bridge_> [ddnet] <Not Keks> (how i used in inside c++ code ofc)
15:01 <+bridge_> [ddnet] <Ryozuki> xd
15:01 <+bridge_> [ddnet] <Not Keks> therefor you can code the compiler for you simplegame in 1 month
15:01 <+bridge_> [ddnet] <Not Keks> while for rust and c++ you'll need years 😄
15:01 <+bridge_> [ddnet] <Ryozuki> :weird:
15:02 <+bridge_> [ddnet] <Ts懒散> TIL I can't compile teeworlds in china
15:02 <+bridge_> [ddnet] <Not Keks> do you own a pure chinese computer now, or what? xd
15:03 <+bridge_> [ddnet] <Learath2> Actually `vk::PipelineLayoutCreateInfo PipelineLayoutInfo{};` should be fine in C++ too, no?
15:03 <+bridge_> [ddnet] <Not Keks> ah yeah, i only meant the scope
15:03 <+bridge_> [ddnet] <Learath2> oic
15:03 <+bridge_> [ddnet] <Not Keks> but yeah dunno, i dont want to rewrite it now
15:03 <+bridge_> [ddnet] <Not Keks> the documention is in c, so i use c
15:03 <+bridge_> [ddnet] <Learath2> namespaces are one of the few C++ things I actually enjoy
15:04 <+bridge_> [ddnet] <Not Keks> its simply more accessable for me 😄
15:04 <+bridge_> [ddnet] <Not Keks> i like template programming with c++ most i think
15:04 <+bridge_> [ddnet] <Not Keks> you can do so much bs with it, and that's what i like
15:04 <+bridge_> [ddnet] <Not Keks> you never learn out what quirks are possible with it xD
15:05 <+bridge_> [ddnet] <Ryozuki> thats why i avoid c++
15:05 <+bridge_> [ddnet] <Ryozuki> what if some quirk is UB
15:05 <+bridge_> [ddnet] <Ryozuki> :monkalaugh:
15:05 <+bridge_> [ddnet] <Not Keks> its just a meta language
15:06 <+bridge_> [ddnet] <Ryozuki> https://stackoverflow.com/questions/56781981/c-variable-template-this-is-ub
15:06 <+bridge_> [ddnet] <Not Keks> just bcs rust says something isnt UB by documenting it, doesnt mean that its intuitive
15:07 <+bridge_> [ddnet] <Not Keks> are condition variables in rust FIFO? do they garantuee to exectue immediatly?
15:07 <+bridge_> [ddnet] <Not Keks> ```
15:07 <+bridge_> [ddnet] <Not Keks> cond.notify_all();
15:07 <+bridge_> [ddnet] <Not Keks> cond.wait(mutex);
15:07 <+bridge_> [ddnet] <Not Keks> ```
15:07 <+bridge_> [ddnet] <Not Keks> 
15:07 <+bridge_> [ddnet] <Not Keks> what happens here?
15:07 <+bridge_> [ddnet] <Not Keks> do we wait, or do we notify ourself?
15:07 <+bridge_> [ddnet] <Not Keks> xd
15:07 <+bridge_> [ddnet] <Learath2> I think that's well defined, you've missed that notification
15:08 <+bridge_> [ddnet] <Not Keks> it's not well defined in a way that you think its intuitive
15:08 <+bridge_> [ddnet] <Not Keks> you can signal yourself indeed
15:08 <+bridge_> [ddnet] <Not Keks> (in c++)
15:08 <+bridge_> [ddnet] <Not Keks> that's why i am asking
15:09 <+bridge_> [ddnet] <Ryozuki> > This method will ensure that any current waiters on the condition variable are awoken. Calls to notify_all() are not buffered in any way.
15:09 <+bridge_> [ddnet] <Not Keks> yes it makes no garantue that it executes directly
15:10 <+bridge_> [ddnet] <Learath2> It has to execute directly if it's not buffered in any way
15:10 <+bridge_> [ddnet] <Learath2> Rust is lacking a standard that defines this terminology though, so who really knows 😛
15:11 <+bridge_> [ddnet] <Ryozuki> @Not Keks did u try rust yet
15:12 <+bridge_> [ddnet] <Not Keks> i sometimes read a bit of code, but i still dont like the syntax, i want a c like rust xd
15:12 <+bridge_> [ddnet] <Not Keks> i have nothing against the concept of rust, defs helps to not shoot yourself
15:12 <+bridge_> [ddnet] <Ryozuki> hmm
15:12 <+bridge_> [ddnet] <Ryozuki> i dont dislike the syntax
15:12 <+bridge_> [ddnet] <Ryozuki> sometimes it can get a bit weird
15:12 <+bridge_> [ddnet] <Not Keks> tho, when i'd use it, i'd use safe only code, else it's useless xd
15:12 <+bridge_> [ddnet] <Ryozuki> when u have lot of types
15:13 <+bridge_> [ddnet] <Ryozuki> but that also happens in c++
15:13 <+bridge_> [ddnet] <Ryozuki> i only used unsafe code to call C functions
15:13 <+bridge_> [ddnet] <Not Keks> well i am ofc also fine with proven code
15:13 <+bridge_> [ddnet] <Learath2> @Not Keks are you sure that it's not ordered properly in C++?
15:13 <+bridge_> [ddnet] <Not Keks> not everywhere safe code can be used ofc
15:14 <+bridge_> [ddnet] <Ryozuki> i feel like rust will look bad until u try it **and** get to intermediate level atleast
15:14 <+bridge_> [ddnet] <Not Keks> gimme a second
15:15 <+bridge_> [ddnet] <Ryozuki> or atleast past the initial stage where u think the compiler trashes u for no reason
15:15 <+bridge_> [ddnet] <Learath2> C++11 30.5p4:
15:15 <+bridge_> [ddnet] <Learath2> > The implementation shall behave as if all executions of notify_one, notify_all, and each part of the wait, wait_for, and wait_until executions are executed in a single unspecified total order consistent with the "happens before" order.
15:15 <+bridge_> [ddnet] <Ryozuki> is "happens before" order defined?
15:16 <+bridge_> [ddnet] <Ryozuki> i never rly read a standard much
15:16 <+bridge_> [ddnet] <Ryozuki> i guess they are like legal texts
15:16 <+bridge_> [ddnet] <Ryozuki> u gotta define everything
15:17 <+bridge_> [ddnet] <Ryozuki> @Not Keks we have 343 issues
15:17 <+bridge_> [ddnet] <Ryozuki> the discussion stuff totally didnt work
15:17 <+bridge_> [ddnet] <Ryozuki> we have to make a purge
15:17 <+bridge_> [ddnet] <Learath2> Yep 1.10p12
15:19 <+bridge_> [ddnet] <Learath2> Basically if an evaluation is sequenced before another (due to a sequence point (like ;)) it happens before or if an evaluation inter-thread happens before another 😄
15:20 <+bridge_> [ddnet] <Learath2> When you want to actually analyse whether there is a data race it gets very annoying very quick to figure out what "happens before" what
15:20 <+bridge_> [ddnet] <Ryozuki> just use rust 4head
15:21 <+bridge_> [ddnet] <Ryozuki> dont mind me im just here chatting cuz this endless queue
15:21 <+bridge_> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/943149952027226192/unknown.png
15:21 <+bridge_> [ddnet] <Ryozuki> :feelsbadman:
15:21 <+bridge_> [ddnet] <Learath2> https://github.com/teeworlds/teeworlds/pull/2891#issuecomment-877839655 here is a quick example
15:22 <+bridge_> [ddnet] <Learath2> everyone is perma stuck in queue, I wonder why amazon just wont run more servers with their bottomless wealth
15:22 <+bridge_> [ddnet] <Ryozuki> ye its weird
15:22 <+bridge_> [ddnet] <Ryozuki> @Learath2 i think its cuz the game design
15:22 <+bridge_> [ddnet] <Ryozuki> mayeb they didnt design it to scale that well
15:23 <+bridge_> [ddnet] <Ryozuki> hey i remember we removed volatiles too
15:23 <+bridge_> [ddnet] <Ryozuki> i did it actually xd
15:23 <+bridge_> [ddnet] <Learath2> Justifying removing them is not actually as trivial as one might initially think
15:24 <+bridge_> [ddnet] <Ryozuki> https://github.com/ddnet/ddnet/issues/4216
15:24 <+bridge_> [ddnet] <Learath2> It's easy to quote some folk tale "Volatile is never what you want"
15:25 <+bridge_> [ddnet] <Ryozuki> > Both the lock and the volatile can be avoided by just using an atomic here
15:26 <+bridge_> [ddnet] <Ryozuki> this was mostly our case too
15:26 <+bridge_> [ddnet] <Ryozuki> we just needed atomics instead of volatile
15:26 <+bridge_> [ddnet] <Ryozuki> (quoting u btw)
15:28 <+bridge_> [ddnet] <Ryozuki> @Learath2 i like how instead of agreeing with u he calls for mom
15:28 <+bridge_> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/943151668948787240/unknown.png
15:28 <+bridge_> [ddnet] <Ryozuki> well im joking obviously but it looks like t hat
15:28 <+bridge_> [ddnet] <Ryozuki> :monkalaugh:
15:30 <+bridge_> [ddnet] <Ryozuki> :PepeA:
15:30 <+bridge_> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/943152173330599946/unknown.png
15:30 <+bridge_> [ddnet] <Ryozuki> well its my time bye
15:30 <+bridge_> [ddnet] <Learath2> o/
15:31 <+bridge_> [ddnet] <Learath2> Fwiw I did actually believe that volatile was necessary until I actually went through the steps of figuring out what happens
15:46 <+bridge_> [ddnet] <deen> I think queues can make something seem more popular and be used intentionally. (Not sure sure if this is the case here though)
15:47 <+bridge_> [ddnet] <Ryozuki> i doubt since its a f2p game and the only way to spend money is if ur past the queue inside the game
15:48 <+bridge_> [ddnet] <Not Keks> @Learath2 ok sry
15:48 <+bridge_> [ddnet] <Not Keks> my example only works with the wait that doesnt take a extra condition
15:48 <+bridge_> [ddnet] <Not Keks> https://en.cppreference.com/w/cpp/thread/condition_variable/wait
15:51 <+bridge_> [ddnet] <Learath2> @Not Keks does it though? Which part of that page should I read?
15:51 <+bridge_> [ddnet] <Not Keks> the first sentence
15:52 <+bridge_> [ddnet] <Learath2> "The effects of notify_one()/notify_all() and each of the three atomic parts of wait()/wait_for()/wait_until() (unlock+wait, wakeup, and lock) take place in a single total order that can be viewed as modification order of an atomic variable: the order is specific to this individual condition variable. This makes it impossible for notify_one() to, for example, be delayed and unblock a thread that started waiting just after the call to noti
15:52 <+bridge_> [ddnet] <Learath2> 
15:52 <+bridge_> [ddnet] <Learath2> This note derived from the part of the standard I quoted seems to suggest that only a spurious wakeup is possible in that case
15:53 <+bridge_> [ddnet] <Learath2> But that has nothing to do with the notify_all imo, spurious wakeups just randomly happen 😄
15:53 <+bridge_> [ddnet] <Not Keks> mhh I'm not so sure about that
15:53 <+bridge_> [ddnet] <Learath2> Also, no need to be sorry, it is very annoying to figure out what all this means
15:53 <+bridge_> [ddnet] <Not Keks> i could swear i had a bug with condition variables once, and it was bcs the wait returned for no reason
15:54 <+bridge_> [ddnet] <Not Keks> and notify_one fixed it then xd
15:54 <+bridge_> [ddnet] <Learath2> Wait does return for no reason at all, called a spurious wakeup, you always have to check a condition when you wakeup
15:54 <+bridge_> [ddnet] <deen> but if people hear that others are waiting in the queue, they'll think "wow, that's a popular game, maybe I should check that out too".
15:55 <+bridge_> [ddnet] <Not Keks> ok yeah, then i accept this too, but this is still unintuitive(i guess that was our starting point of the discussion)
15:57 <+bridge_> [ddnet] <Learath2> I actually read some ancient discussion on spurious wakeups once. I think the arguments were that 1) it allows for much higher performance and 2) when you wakeup you have to check a condition anyway, since a broadcast waking up someone else before you might have changed the condition
15:58 <+bridge_> [ddnet] <Learath2> Oh and 3) I think a POSIX guy argued that it forces people to have "correct" code if you threaten them with spurious wakeups 😄
15:58 <+bridge_> [ddnet] <Not Keks> xD
16:17 <+bridge_> [ddnet] <Not Keks> @Learath2 would you say we should also guard the variables in our code, it's probably safer, i think i'll create a pr
16:17 <+bridge_> [ddnet] <Learath2> guard?
16:17 <+bridge_> [ddnet] <Not Keks> check the conditions correctly
16:18 <+bridge_> [ddnet] <Learath2> If we are using a cond var anywhere, we definitely should be
16:18 <+bridge_> [ddnet] <Learath2> Either with wait + if or the predicate form, either is okay with me
16:28 <+bridge_> [ddnet] <Not Keks> @Learath2 what does ` CAutoreleasePool AutoreleasePool; ` fix btw?
16:34 <+bridge_> [ddnet] <Learath2> I think SDL is internally creating some refcounted types and if we don't have an outer pool to catch and release those they leak
16:34 <+bridge_> [ddnet] <Learath2> Some obj-c refcounted types that is
16:35 <+bridge_> [ddnet] <Not Keks> weird stuff xD
16:35 <+bridge_> [ddnet] <Not Keks> i wonder if that's actually still needed
16:36 <+bridge_> [ddnet] <Learath2> idk what tool was used to find the initial leak, so idk how you'd check if removing it changes sth
16:36 <+bridge_> [ddnet] <Not Keks> oh ok
16:37 <+bridge_> [ddnet] <Learath2> Each thread creates a thread-wide autorelease pool automatically, but it's not drained until the thread is dead, so the gfx thread having a local one makes sense
16:38 <+bridge_> [ddnet] <Not Keks> i wonder why they even use such things, but anyway, thanks for explaination
16:44 <+bridge_> [ddnet] <Learath2> Well obj-c is implementing modern language with C aesthetics 😄
16:44 <+bridge_> [ddnet] <Learath2> The staple of a modern language is the ability to just allocate stuff on the heap and then forget about it
16:49 <+bridge_> [ddnet] <Learath2> It does allow some very interesting things, obj-c is wild
16:49 <+bridge_> [ddnet] <Learath2> You can monkey-patch stuff, literally replacing running code with other compiled code at runtime
16:58 <+bridge_> [ddnet] <deen> I think we should consider the tutorial map and vulkan support as a major improvement and release that as 16.0
16:59 <+bridge_> [ddnet] <deen> and use that for the last Steam marketing round we have available (not sure if they have much of an effect anyway)
17:12 <+bridge_> [ddnet] <Ryozuki> is this rly it? or its sarcasm xd
17:14 <+bridge_> [ddnet] <deen> automatic memory management is definitely something that unites modern high level languages
17:15 <+bridge_> [ddnet] <deen> it cuts out a main cause of bugs and crashes at the cost of performance and memory usage
17:16 <+bridge_> [ddnet] <deen> (the original term "high level language" was for C, FORTRAN, Pascal, etc, so maybe should say https://en.wikipedia.org/wiki/Very_high-level_programming_language)
17:19 <+bridge_> [ddnet] <Ryozuki> is obj-c using a gc?
17:31 <+bridge_> [ddnet] <Learath2> It uses both approaches, it has autorelease pools that will deallocate everything in themselves when they go out of scope, and they have gc for some cases
19:25 <+bridge_> [ddnet] <Ryozuki> https://dkb.io/post/google-search-is-dying
19:25 <+bridge_> [ddnet] <Ryozuki> https://news.ycombinator.com/item?id=30347719
19:26 <+bridge_> [ddnet] <Ryozuki> i also always put "reddit" at the end of my queries
19:26 <+bridge_> [ddnet] <Ryozuki> specially for reviews
19:26 <+bridge_> [ddnet] <Ryozuki> real people usually give more honest opinions than stupid paid websites
19:26 <+bridge_> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/943211719143067659/unknown.png
19:27 <+bridge_> [ddnet] <Ryozuki> > So how can we regain authenticity? What if you want to know what a genuine real life human being thinks about the latest Lenovo laptop?
19:27 <+bridge_> [ddnet] <Ryozuki> > 
19:27 <+bridge_> [ddnet] <Ryozuki> > You append “reddit" to your query (or hacker news, or stack overflow, or some other community you trust).
19:27 <+bridge_> [ddnet] <Ryozuki> > 
19:28 <+bridge_> [ddnet] <Ryozuki> > Google is dead.
19:28 <+bridge_> [ddnet] <Ryozuki> > 
19:28 <+bridge_> [ddnet] <Ryozuki> > Long live Google + “site:reddit.com”.
19:28 <+bridge_> [ddnet] <Ryozuki> chillerdragon i found ur girlfriend https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/
19:56 <+bridge_> [ddnet] <Not Keks> i more and more find stuff i want to know on reddit rather than stackoverflow xD
20:59 <+bridge_> [ddnet] <deen> same, depending on what I need site:reddit.com, or site:ycombinator.com, etc. but it's not necessarily google's fault, but of the people doing "seo"
21:15 <+bridge_> [ddnet] <Learath2> I've actually noticed that I don't really enjoy this new smart search stuff that's been getting more and more popular for the last 5 years
21:16 <+bridge_> [ddnet] <deen> you mean the sidebar?
21:17 <+bridge_> [ddnet] <deen> There were some funny stories about that too: https://hristo-georgiev.com/google-turned-me-into-a-serial-killer
