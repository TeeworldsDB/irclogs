01:32 < bridge> <louis> ye quite tragic
07:36 < bridge> <chillerdragon> Ok pro
07:39 < bridge> <chillerdragon> @milkeeycat: if the player is already spectating you should be able to control their viewport with this snap item https://chillerdragon.github.io/teeworlds-protocol/06/snap_items.html#obj_spectator_info
07:40 < bridge> <chillerdragon> Or do you mean /spec doing /pause? That should be sv\_pauseable 0 iirc
07:41 < bridge> <milkeeycat> I was trying to do https://github.com/ddnet/ddnet/issues/7097, when you spec 1 person it works fine, but when multi-view is used, when you select a tee, after 2 packets, the servers returns `-1` client id :\
07:44 < bridge> <chillerdragon> You are trying to reach 666? @milkeeycat such Nobel efforts for the dark lord
07:45 < bridge> <milkeeycat> im trying to make more prs which won't be reviewed for months :feelsbadman:
07:45 < bridge> <chillerdragon> At some point they will overflow to 0
07:46 < bridge> <chillerdragon> @fokkonaut: the issue should be fixed yes. But as a hotfix you could remove the click to spec feature for newer ddnet clients because they have the feature client side already.
09:34 < ws-client> <ChillerDragon> @sayin9094 so what exactly do you mean by "the server is yours" :D how long will it be online? And i can really put my stuff on there or what? 
15:33 < bridge> <kollpotato> ChillerDragon: do snapshot messages have to be compressed for the client to process them?
16:06 < ws-client> <ChillerDragon> @kollpotato you mean huffman compressed? No as a server you can just not compress anything and also not set the compression flag in the packet header and all clients should unpack it just fine
16:09 < bridge> <kollpotato> alright thanks
16:10 < bridge> <kollpotato> im just trying to find out why client wont process my snapshot
16:10 < bridge> <kollpotato> it decodes just fine by twnet parser
16:10 < bridge> <kollpotato> maybe the ack is wrong
16:10 < bridge> <kollpotato> but it wasnt wrong before xd
16:12 < ws-client> <ChillerDragon> is your crc correct?
16:12 < ws-client> <ChillerDragon> does the client log anything in debug mode?
16:13 < bridge> <kollpotato> ive compared the whole snapshot to what libtw2 would produce
16:13 < bridge> <kollpotato> absolutely the same snapshot
16:14 < ws-client> <ChillerDragon> if you suspect ack stuff i would recommend testing with snap empty
16:14 < bridge> <kollpotato> alright
16:14 < bridge> <kollpotato> havent tried debug yet
16:14 < ws-client> <ChillerDragon> the ddnet client will display the map and unlocks the fully working chat if the server only ever sents snap empty
16:14 < bridge> <kollpotato> is it just debug 1 in the console?
16:14 < ws-client> <ChillerDragon> yes
16:15 < bridge> <kollpotato> alright i will try with snap empty
16:15 < ws-client> <ChillerDragon> but i think i moved all useful log prints out of debug already so it might not print more not sure
16:15 < bridge> <kollpotato> and just send random ack values xD
16:15 < ws-client> <ChillerDragon> <:justatest:572499997178986510>
16:20 < bridge> <kollpotato> ChillerDragon: is this supposed to be the last message before the actual game loads?
16:20 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1323309701680857198/image.png?ex=67740bb2&is=6772ba32&hm=837da2b96b1b8ddf1d77564e6f19d9af3d4834d541b1feb16d62ec308295fb95&
16:21 < bridge> <kollpotato> snap empty with random ack values is not working either
16:21 < bridge> <kollpotato> the map loads just fine tho
16:21 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1323310048100745227/image.png?ex=67740c05&is=6772ba85&hm=7b7709d725d1d551081b6ae4103ccb0796b4ae3b436eddf1483a0081c04650a7&
16:25 < bridge> <kollpotato> there is NETMSG_RCON_CMD message sent by the client
16:26 < bridge> <kollpotato> im not sure if i should acknowledge it or not lol
16:26 < bridge> <kollpotato> well i will do it
16:26 < bridge> <kollpotato> maybe it will work now
16:40 < bridge> <animepdf> Today is day of PRs or smth? Like 10 of them already
16:52 < ws-client> <ChillerDragon> @kollpotato yes you have to ack all vital messages. Which is basically everything but player inputs.
18:49 < bridge> <0x571> and where did teesports go?
18:50 < bridge> <milkeeycat> https://discord.com/channels/252358080522747904/342454474117218334/1323234428792602625
18:51 < bridge> <ogyr41k> –∑–∞–±–∞–Ω–∏–ª–∏ —á–µ –¥–µ–ª–∞—Ç—å
18:51 < bridge> <milkeeycat> $english
18:51 < bridge> <DDNet> Hi! Most of us communicate in English. If you‚Äôre having trouble with English, use <https://www.deepl.com/en/translator> to help you out.
18:52 < bridge> <ogyr41k> I got banned, what do I do?
18:54 < bridge> <ogyr41k> help me unban
18:54 < bridge> <APFFF> #‚úâ-create-a-ticket
18:54 < bridge> <APFFF> @ogyr41k #‚úâ-create-a-ticket
18:56 < bridge> <ogyr41k> where to write
18:57 < bridge> <APFFF> https://cdn.discordapp.com/attachments/293493549758939136/1323349170702254254/image.png?ex=67743074&is=6772def4&hm=68f3ebd6c3e354572d4c3d9d750d5defd63badf2856bcdfda3e9c7d85acef658&
18:57 < bridge> <ogyr41k> üëç
19:00 < bridge> <ogyr41k> what to put in the first line, where to find it.
19:02 < bridge> <APFFF> check here https://www.whatsmyip.org/
19:07 < bridge> <ogyr41k> how long to unban
19:09 < bridge> <_voxeldoesart> pleaaase i wanna go back to breaking server rules pleeeaaase ü•π
19:10 < bridge> <APFFF> Why cant I react to your messages :justatest:
19:10 < bridge> <_voxeldoesart> womp womp
19:11 < bridge> <APFFF> :owo:
20:37 < bridge> <kollpotato> ChillerDragon: hmm i think i found the root of the issue but im not sure
20:38 < bridge> <kollpotato> the client sends info packet twice
20:38 < bridge> <kollpotato> but i dont understand why it does that
20:38 < bridge> <kollpotato> i acknowledge that twice
20:38 < bridge> <kollpotato> so it should be correct
20:39 < bridge> <kollpotato> but the client acknowledges one vital chunk less than i have sent
20:39 < bridge> <kollpotato> weird af
22:40 < bridge> <ryozuki> https://www.hyrumslaw.com/
22:40 < bridge> <ryozuki> > An observation on Software Engineering
22:40 < bridge> <ryozuki> > 
22:40 < bridge> <ryozuki> > Put succinctly, the observation is this:
22:40 < bridge> <ryozuki> > 
22:40 < bridge> <ryozuki> >     With a sufficient number of users of an API,
22:40 < bridge> <ryozuki> >     it does not matter what you promise in the contract:
22:40 < bridge> <ryozuki> >     all observable behaviors of your system
22:40 < bridge> <ryozuki> >     will be depended on by somebody.
22:40 < bridge> <ryozuki> this can be applied to ddnet the game itself xD
