04:36 <+bridge> [ddnet] <heinrich5991> https://cdn.discordapp.com/attachments/293493549758939136/1048080212430176357/image.png
07:52 <+bridge> [ddnet] <Jupstar ‚ú™> Part of challenge or fail?
09:17 <+ChillerDragon> jopstar send skil to write performant code xd
09:17 <+ChillerDragon> I create and write to 18 text files for todays aoc
09:18 <+ChillerDragon> ``0m0.057s`` oof
09:26 <+bridge> [ddnet] <Jupstar ‚ú™> Is that slow?
09:26 <+bridge> [ddnet] <Jupstar ‚ú™> Cannot judge on the complexity of the tasks
09:28 <+ChillerDragon> wait for the other gamers to share their runtime
10:09 <+bridge> [ddnet] <deen> Oops üòÑ
10:40 <+ChillerDragon> ?
10:45 <+bridge> [ddnet] <Jupstar ‚ú™> Irc nobo
10:59 <+ChillerDragon> :c
11:02 <+bridge> [ddnet] <Jupstar ‚ú™> It's the bug Heinrich found
11:02 <+bridge> [ddnet] <Jupstar ‚ú™> Which was on ddnet website apparently
11:12 <+bridge> [ddnet] <Ryozuki> the joy of compiling llvm
11:12 <+bridge> [ddnet] <Ryozuki> keeps me warm at winter
11:13 <+bridge> [ddnet] <Learath2> üòõ
11:15 <+bridge> [ddnet] <Ryozuki> 85C under heavy sustained load
11:15 <+bridge> [ddnet] <Ryozuki> aka compiling
11:15 <+bridge> [ddnet] <Ryozuki> i think its normal, i read about 90C or smth
11:16 <+bridge> [ddnet] <Ryozuki> compiling is even more resource intensive than gaming so its hard to find real compiling temps
11:16 <+bridge> [ddnet] <Learath2> Depends on the cpu I guess
11:16 <+bridge> [ddnet] <Ryozuki> 5800x
11:16 <+bridge> [ddnet] <Ryozuki> i think the tpm is 100w?
11:16 <+bridge> [ddnet] <Ryozuki> its a hot cpu i heard
11:16 <+bridge> [ddnet] <Learath2> Maybe compare against synthetic benchmarks?
11:17 <+bridge> [ddnet] <Learath2> Prime95 should be more taxing than compiling even
11:17 <+bridge> [ddnet] <Ryozuki> while gaming e.g on dota i get 65-72
11:17 <+bridge> [ddnet] <Ryozuki> iirc
11:17 <+bridge> [ddnet] <Ryozuki> maybe i put too little thermal paste
11:18 <+bridge> [ddnet] <Learath2> As long as it covers the top of the cpu you do want as little as possible
11:19 <+bridge> [ddnet] <Ryozuki> yeah
11:19 <+bridge> [ddnet] <Ryozuki> i put a  pea
11:20 <+bridge> [ddnet] <Ryozuki> maybe the pea was too small tho
11:21 <+bridge> [ddnet] <Learath2> Well you can check if you have extra paste. See if it covered the entire thing üòÑ
11:21 <+bridge> [ddnet] <Ryozuki> i do
11:21 <+bridge> [ddnet] <Ryozuki> xd
11:22 <+bridge> [ddnet] <Ryozuki> max mhz is 4850
11:22 <+bridge> [ddnet] <Ryozuki> rn all cores are running at 4600
11:22 <+bridge> [ddnet] <Ryozuki> maybe its throttling
11:23 <+bridge> [ddnet] <Ryozuki> ok ill check this out
11:25 <+bridge> [ddnet] <Learath2> Seems amd says <90 is k
11:27 <+bridge> [ddnet] <Jupstar ‚ú™> If not it would shut down
11:28 <+bridge> [ddnet] <deen> Nowadays CPUs throttle/reduce boost instead of just shutting down instantly
11:44 <+bridge> [ddnet] <Ewan> damn im jelly
11:44 <+bridge> [ddnet] <Ewan> having to compile template heavy shit all the time on a 2.9GHz 6 core
12:02 <+bridge> [ddnet] <Ryozuki> im back
12:03 <+bridge> [ddnet] <Ryozuki> idk if i should let it settle a bit
12:04 <+bridge> [ddnet] <Ryozuki> rn idling at 31C
12:04 <+bridge> [ddnet] <Ryozuki> well 31-40
12:06 <+bridge> [ddnet] <Ryozuki> i had some system fans set to a fixed speed on the mobo
12:06 <+bridge> [ddnet] <Ryozuki> but now i adjusted them to follow cpu temp xD
12:06 <+bridge> [ddnet] <Ryozuki> i can definitly hear my nasa pc
12:08 <+bridge> [ddnet] <Ryozuki> seems like  its stable at 81-82 compiling llvm
12:08 <+bridge> [ddnet] <Ryozuki> i guess its an improvement
12:08 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1048193973740634153/image.png
12:09 <+bridge> [ddnet] <Ryozuki> single core boost is 4.8ghz and when all is at full load it kinda reached 4.7ghz sometimes
12:10 <+bridge> [ddnet] <Ryozuki> fun test
12:10 <+bridge> [ddnet] <Ryozuki> ```
12:10 <+bridge> [ddnet] <Ryozuki> ‚ùØ openssl speed
12:10 <+bridge> [ddnet] <Ryozuki> Doing mdc2 for 3s on 16 size blocks: 5174992 mdc2's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing mdc2 for 3s on 64 size blocks: 1428405 mdc2's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing mdc2 for 3s on 256 size blocks: 364764 mdc2's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing mdc2 for 3s on 1024 size blocks: 91642 mdc2's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing mdc2 for 3s on 8192 size blocks: 11401 mdc2's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing mdc2 for 3s on 16384 size blocks: 5667 mdc2's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md4 for 3s on 16 size blocks: 25496375 md4's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md4 for 3s on 64 size blocks: 18429772 md4's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md4 for 3s on 256 size blocks: 9538163 md4's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md4 for 3s on 1024 size blocks: 3318838 md4's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md4 for 3s on 8192 size blocks: 468306 md4's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md4 for 3s on 16384 size blocks: 236379 md4's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md5 for 3s on 16 size blocks: 36114377 md5's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md5 for 3s on 64 size blocks: 20944396 md5's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md5 for 3s on 256 size blocks: 8995503 md5's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md5 for 3s on 1024 size blocks: 2755487 md5's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md5 for 3s on 8192 size blocks: 368630 md5's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing md5 for 3s on 16384 size blocks: 185251 md5's in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> Doing hmac(md5) for 3s on 16 size blocks: 15471998 hmac(md5)'s in 3.00s
12:10 <+bridge> [ddnet] <Ryozuki> ```
13:48 <+bridge> [ddnet] <deen> AoC day 2 felt like Sqlite:
13:48 <+bridge> [ddnet] <deen> ```
13:48 <+bridge> [ddnet] <deen> create table t(a int, b int);
13:49 <+bridge> [ddnet] <deen> .import --csv '|tr " ABCXYZ" ",123123" < day02.in' t
13:49 <+bridge> [ddnet] <deen> select sum(b+(4+b-a)%3*3) from t; # Part 1
13:49 <+bridge> [ddnet] <deen> select sum((a+b)%3+1+(b-1)*3) from t; # Part 2
13:49 <+bridge> [ddnet] <deen> ```
13:50 <+bridge> [ddnet] <Anime.pdf> No fucking way :feelsbadman:
13:51 <+bridge> [ddnet] <deen> Really fiddly to get the calculation right though
14:02 <+bridge> [ddnet] <ReiTW> wtf
14:02 <+ChillerDragon> wot
14:02 <+ChillerDragon> hacker
14:02 <+bridge> [ddnet] <ReiTW> rewrite linux kernel in 10lines now
14:03 <+bridge> [ddnet] <Learath2> Lol, nice idea
14:04 <+ChillerDragon> okay cool sqlite can import csv didn't know that.. but wtf is this tr and < day02.in thing? looks like shell to me
14:05 <+ChillerDragon> also since when can you calculate rock paper scissor using maffs? xd
14:07 <+bridge> [ddnet] <Patiga> I'm using this years advent of code to dive a bit into haskell
14:07 <+bridge> [ddnet] <Patiga> the first day I built a monstrosity
14:08 <+bridge> [ddnet] <Patiga> but someone showed me how to do stuff better and today I actually feel like I can share the solution üòÖ
14:08 <+bridge> [ddnet] <Patiga> https://cdn.discordapp.com/attachments/293493549758939136/1048224153867653140/2.hs
14:09 <+bridge> [ddnet] <heinrich5991> spoilers!
14:09 <+bridge> [ddnet] <heinrich5991> I just woke up
14:09 <+bridge> [ddnet] <heinrich5991> :p
14:09 <+bridge> [ddnet] <Learath2> Hm, I was thinking of skipping this year but maybe I‚Äôll just do them all in python to have some practice
14:09 <+bridge> [ddnet] <Patiga> true, but deen already posted a solution here :p
14:09 <+bridge> [ddnet] <Learath2> Late night? üòõ
14:09 <+bridge> [ddnet] <Patiga> and I think its fair since I mean we literally say that we are posting solutions ^^
14:10 <+bridge> [ddnet] <Anime.pdf> Did you hardcod all combinations? Wtf?
14:10 <+bridge> [ddnet] <Patiga> btw I'm open for suggestion on how I can improve my haskell coding
14:10 <+bridge> [ddnet] <Anime.pdf> Did you hardcode all combinations? Wtf?
14:11 <+bridge> [ddnet] <Alexander> I failed the second part of day 2 like 3 times because I didn't change my code correctly xd
14:11 <+bridge> [ddnet] <Anime.pdf> I failed first part for 3 times cuz im fucking dumb
14:11 <+bridge> [ddnet] <Anime.pdf> :feelsbadman:
14:12 <+bridge> [ddnet] <Alexander> The thing is
14:12 <+bridge> [ddnet] <Alexander> I have to convert the data first to json or an array to work with it in javascript
14:12 <+bridge> [ddnet] <Anime.pdf> Cant you read a file
14:12 <+bridge> [ddnet] <Anime.pdf> Line by line
14:13 <+bridge> [ddnet] <Alexander> I can but I'm trying to keep my code as simple as possible
14:13 <+bridge> [ddnet] <Anime.pdf> :monkalaugh:
14:13 <+bridge> [ddnet] <Alexander> And its really easy to convert using a few regex queries
14:15 <+bridge> [ddnet] <Anime.pdf> I created struct that accepts char in constructor and contains assigned value, also it has function to correctly compare with other values:justatest:
14:16 <+bridge> [ddnet] <- Mahdiyar> ```
14:16 <+bridge> [ddnet] <- Mahdiyar> [string "src/tools.lua"]:393: bad argument #1 to 'TableFlatten' (unexpected nil
14:16 <+bridge> [ddnet] <- Mahdiyar> bam.exe: script error (-t for more detail)
14:16 <+bridge> [ddnet] <- Mahdiyar> 
14:16 <+bridge> [ddnet] <- Mahdiyar> ``` 
14:16 <+bridge> [ddnet] <- Mahdiyar> what is error?
14:16 <+bridge> [ddnet] <DDNet> https://github.com/ddnet/ddnet/issues/1
14:21 <+bridge> [ddnet] <heinrich5991> ah, done üôÇ
14:21 <+bridge> [ddnet] <heinrich5991> was there a better method than hardcoding the combinations?
14:21 <+bridge> [ddnet] <Anime.pdf> for my fans
14:21 <+bridge> [ddnet] <Anime.pdf> https://cdn.discordapp.com/attachments/293493549758939136/1048227525047881898/main.cpp
14:22 <+bridge> [ddnet] <Anime.pdf> oh why it sent like txt
14:22 <+bridge> [ddnet] <Anime.pdf> oh why it sent like text
14:22 <+bridge> [ddnet] <Anime.pdf> i sent file
14:22 <+bridge> [ddnet] <heinrich5991> ```py
14:22 <+bridge> [ddnet] <heinrich5991> import sys
14:22 <+bridge> [ddnet] <heinrich5991> from collections import Counter
14:22 <+bridge> [ddnet] <heinrich5991> input = ["".join(x.split()) for x in open(sys.argv[1] if len(sys.argv) > 1 else "input")]
14:22 <+bridge> [ddnet] <heinrich5991> c = Counter(input)
14:22 <+bridge> [ddnet] <heinrich5991> print(c["AX"] * 4 + c["AY"] * 8 + c["AZ"] * 3 + c["BX"] * 1 + c["BY"] * 5 + c["BZ"] * 9 + c["CX"] * 7 + c["CY"] * 2 + c["CZ"] * 6)
14:22 <+bridge> [ddnet] <heinrich5991> # G:13682 L:11386
14:22 <+bridge> [ddnet] <heinrich5991> print(c["AX"] * 3 + c["AY"] * 4 + c["AZ"] * 8 + c["BX"] * 1 + c["BY"] * 5 + c["BZ"] * 9 + c["CX"] * 2 + c["CY"] * 6 + c["CZ"] * 7)
14:22 <+bridge> [ddnet] <heinrich5991> # G:12881 L:13600
14:22 <+bridge> [ddnet] <heinrich5991> ```
14:22 <+bridge> [ddnet] <Anime.pdf> ü•π
14:23 <+bridge> [ddnet] <ReiTW> hope someone does the next challenge in asm x86
14:24 <+bridge> [ddnet] <Anime.pdf> in smalltalk with all oop principles would be cool
14:24 <+bridge> [ddnet] <Anime.pdf> AoC buisness edition
14:25 <+bridge> [ddnet] <Anime.pdf> AoC business edition
14:28 <+bridge> [ddnet] <Alexander> I will probably do something else for the challenge next time
14:28 <+bridge> [ddnet] <Alexander> Maybe try using nodejs since it has access to filesystem and try getting the lines in an array
14:29 <+bridge> [ddnet] <Alexander> That way my code would work even if the input gets changed
14:30 <+bridge> [ddnet] <Ryozuki> rust split_terminator is god
14:30 <+bridge> [ddnet] <ReiTW> split_terminator?
14:30 <+bridge> [ddnet] <Ryozuki> https://doc.rust-lang.org/std/primitive.str.html#method.split_terminator
14:30 <+bridge> [ddnet] <Ryozuki> > Equivalent to split, except that the trailing substring is skipped if empty.
14:31 <+bridge> [ddnet] <Ryozuki> let v: Vec<&str> = "A.B.".split_terminator('.').collect();
14:31 <+bridge> [ddnet] <Ryozuki> assert_eq!(v, ["A", "B"]);
14:31 <+bridge> [ddnet] <Ryozuki> btw u can collect a tuple into a hashmap seamlessly
14:31 <+bridge> [ddnet] <Ryozuki> @ReiTW in case u didnt know
14:32 <+bridge> [ddnet] <Ryozuki> `let guide: HashMap<&str, &str> = inp.split_terminator('\n').map(|x| x.split_once(' ').unwrap()).collect();`
14:32 <+bridge> [ddnet] <ReiTW> I used split(" ")
14:32 <+bridge> [ddnet] <ReiTW> smth like
14:32 <+bridge> [ddnet] <Alexander> Sounds to me like
14:32 <+bridge> [ddnet] <Alexander> ```js
14:32 <+bridge> [ddnet] <Alexander> "A.B".split(".") // ["A","B"]
14:32 <+bridge> [ddnet] <Alexander> ```
14:32 <+bridge> [ddnet] <Alexander> in js
14:32 <+bridge> [ddnet] <ReiTW> ```
14:32 <+bridge> [ddnet] <ReiTW> &str.split(" ").collect::<String>();
14:32 <+bridge> [ddnet] <ReiTW> ```
14:32 <+bridge> [ddnet] <Ryozuki> @Alexander_ my input is not "A.B" tho
14:32 <+bridge> [ddnet] <ReiTW> to get a vector
14:32 <+bridge> [ddnet] <Ryozuki> its "A.B."
14:33 <+bridge> [ddnet] <Alexander> Oh
14:33 <+bridge> [ddnet] <Alexander> I didn't see that one
14:33 <+bridge> [ddnet] <Ryozuki> "A.B.".split(".") 
14:33 <+bridge> [ddnet] <Ryozuki> 
14:33 <+bridge> [ddnet] <Ryozuki> Array(3) [ "A", "B", "" ]
14:33 <+bridge> [ddnet] <Alexander> Yeyeye
14:33 <+bridge> [ddnet] <Ryozuki> ```
14:33 <+bridge> [ddnet] <Ryozuki> "A.B.".split(".") 
14:33 <+bridge> [ddnet] <Ryozuki> 
14:33 <+bridge> [ddnet] <Ryozuki> Array(3) [ "A", "B", "" ]
14:33 <+bridge> [ddnet] <Ryozuki> ```
14:33 <+bridge> [ddnet] <Alexander> Then I'd just use a filter or something to filter out the empty strings in an array
14:34 <+bridge> [ddnet] <Ryozuki> why collecting to a string tho
14:34 <+bridge> [ddnet] <Alexander> But for you it's better to use that other function which does it automatically
14:34 <+bridge> [ddnet] <Ryozuki> well i just started the second
14:34 <+bridge> [ddnet] <Ryozuki> well day 2 part 1
14:35 <+bridge> [ddnet] <Ryozuki> oh well
14:35 <+bridge> [ddnet] <Ryozuki> i see a hashmap doesnt make sense here xd
14:35 <+bridge> [ddnet] <Ryozuki> i should finish the exercise before commenting kek
14:36 <+bridge> [ddnet] <ReiTW> well exactly:
14:36 <+bridge> [ddnet] <ReiTW> 
14:36 <+bridge> [ddnet] <ReiTW> ```rust
14:36 <+bridge> [ddnet] <ReiTW> let result = line.split(" ").collect::<Vec<&str>>();
14:36 <+bridge> [ddnet] <ReiTW>             
14:36 <+bridge> [ddnet] <ReiTW>             let opponent = match *result.get(0).unwrap() {
14:36 <+bridge> [ddnet] <ReiTW>                 "A" => Shape::Rock,
14:36 <+bridge> [ddnet] <ReiTW>                 "B" => Shape::Paper,
14:36 <+bridge> [ddnet] <ReiTW>                 "C" => Shape::Scissors,
14:36 <+bridge> [ddnet] <ReiTW>                 _ => panic!("Invalid shape !"),
14:36 <+bridge> [ddnet] <ReiTW>             };
14:36 <+bridge> [ddnet] <ReiTW> ```
14:36 <+bridge> [ddnet] <ReiTW> I did that
14:36 <+bridge> [ddnet] <Alexander> Y'all making your code readable and shit what the fuck
14:36 <+bridge> [ddnet] <ReiTW> what I was always doing is parse the input file, then do what they asked
14:37 <+bridge> [ddnet] <Alexander> My code looked like a shit ton of if statements
14:37 <+bridge> [ddnet] <Alexander> Not my proudest moment tbh
14:47 <+bridge> [ddnet] <deen> Yes, I'm piping in tr to translate A -> 1, B ->2 etc
14:48 <+bridge> [ddnet] <deen> It felt right to use modulo 3 calculations since you have 3 values, each of which can beat the other. So I tried out a few calculations by hand and saw that it fit
14:49 <+bridge> [ddnet] <deen> Ah, good idea too
14:51 <+bridge> [ddnet] <deen> I started with that first too and thought "there must be a better way"
14:51 <+bridge> [ddnet] <Alexander> The thing is
14:51 <+bridge> [ddnet] <Alexander> I was using the browser console
14:51 <+bridge> [ddnet] <Alexander> I was too lazy to set up a proper environment
14:52 <+bridge> [ddnet] <Alexander> My thought was: "Oh well no one is gonna see my code so why would I write it properly"
14:52 <+bridge> [ddnet] <Alexander> huge mistake
14:54 <+bridge> [ddnet] <deen> That reminds me of a cool project: https://bellard.org/tcc/tccboot_readme.html
15:05 <+bridge> [ddnet] <Ryozuki> @ReiTW @Alexander_ https://gist.github.com/edg-l/e135c755a61da828666bfde7e87edcd1
15:05 <+bridge> [ddnet] <Ryozuki> my rusty part 1
15:05 <+bridge> [ddnet] <Ryozuki> xd
15:06 <+bridge> [ddnet] <Alexander> Hold on a sec im gonna learn brainfuck
15:06 <+bridge> [ddnet] <Alexander> Turn this into a code gold
15:06 <+bridge> [ddnet] <Alexander> Turn this into a code golf
15:07 <+bridge> [ddnet] <Alexander> Jokes aside, your code looks beautiful and readable
15:07 <+bridge> [ddnet] <Ryozuki> tyty
15:10 <+bridge> [ddnet] <ReiTW> ty @Ryozuki
15:11 <+bridge> [ddnet] <JSaurusRex> im considering adding support for gamemodes to ddnet, currently the code expects it to be ddrace in a few places
15:11 <+bridge> [ddnet] <JSaurusRex> would this pr be accepted or nah?
15:11 <+bridge> [ddnet] <ReiTW> ho lol tf
15:11 <+bridge> [ddnet] <ReiTW> pr it & u'll get ur answer ig
15:11 <+bridge> [ddnet] <JSaurusRex> true, but it's probably a bunch of work
15:11 <+bridge> [ddnet] <JSaurusRex> better ask before i start
15:12 <+bridge> [ddnet] <Ryozuki> i also thought about using the module but i didnt want to use my brain too much
15:12 <+bridge> [ddnet] <Ryozuki> so i just hardcoded the match xd
15:13 <+bridge> [ddnet] <Ryozuki> i also thought about using the modulo but i didnt want to use my brain too much
15:13 <+bridge> [ddnet] <Ryozuki> a cool thing i like to do is, since most ppl go for golfing or ugly, i try to go for clean and beauty
15:13 <+bridge> [ddnet] <Ryozuki> kek
15:14 <+bridge> [ddnet] <Ryozuki> its just so fun to use rust abstractions
15:15 <+bridge> [ddnet] <Alexander> exactly what I'm going to do in the next one
15:25 <+bridge> [ddnet] <Ryozuki> part 2 <https://gist.github.com/edg-l/dd7910ce7904258f9e4b8050303063c6>
15:25 <+bridge> [ddnet] <Ryozuki> just one from function to my abstractions kek
15:55 <+bridge> [ddnet] <Jupstar ‚ú™> gist url starting with dd
15:55 <+bridge> [ddnet] <Jupstar ‚ú™> 
15:55 <+bridge> [ddnet] <Jupstar ‚ú™> cant be luck
15:57 <+bridge> [ddnet] <deen> This sounds like https://github.com/teeframe/ddnet-skeleton
16:14 <+bridge> [ddnet] <JSaurusRex> omg it already exists
16:17 <+bridge> [ddnet] <ReiTW> teeframe website is down tho
16:21 <+bridge> [ddnet] <Ryozuki> `[N*N || N <- [1,2,3,4,5]].`
16:21 <+bridge> [ddnet] <Ryozuki> and ppl complain about rust syntax smh
16:22 <+bridge> [ddnet] <Anime.pdf> "Just learn the syntax"
16:28 <+bridge> [ddnet] <Ryozuki> ```erlang
16:28 <+bridge> [ddnet] <Ryozuki> 7> Color = 16#F09A29.
16:28 <+bridge> [ddnet] <Ryozuki> 15768105
16:28 <+bridge> [ddnet] <Ryozuki> 8> Pixel = <<Color:24>>.
16:28 <+bridge> [ddnet] <Ryozuki> <<240,154,41>>
16:28 <+bridge> [ddnet] <Ryozuki> 9>```
16:28 <+bridge> [ddnet] <Ryozuki> ok thats cool
16:29 <+bridge> [ddnet] <Ryozuki> > Put the binary values of #F09A29 on 24 bits of space (Red on 8 bits, Green on 8 bits and Blue also on 8 bits) in the variable Pixel.
16:29 <+bridge> [ddnet] <Ryozuki> i dont think i seen first class support for this in other langs
16:30 <+bridge> [ddnet] <Ryozuki> (this is erlang)
16:31 <+bridge> [ddnet] <Ryozuki> ```erlang
16:31 <+bridge> [ddnet] <Ryozuki> 10> Pixels = <<213,45,132,64,76,32,76,0,0,234,32,15>>.
16:31 <+bridge> [ddnet] <Ryozuki> <<213,45,132,64,76,32,76,0,0,234,32,15>>
16:31 <+bridge> [ddnet] <Ryozuki> 11> <<Pix1:24, Pix2:24, Pix3:24, Pix4:24>> = Pixels.
16:31 <+bridge> [ddnet] <Ryozuki> <<213,45,132,64,76,32,76,0,0,234,32,15>>
16:32 <+bridge> [ddnet] <Ryozuki> 12> <<R:8, G:8, B:8>> = <<Pix1:24>>.
16:32 <+bridge> [ddnet] <Ryozuki> <<213,45,132>>
16:32 <+bridge> [ddnet] <Ryozuki> ```
16:32 <+bridge> [ddnet] <Ryozuki> pog
16:39 <+bridge> [ddnet] <Ryozuki> ```erlang
16:39 <+bridge> [ddnet] <Ryozuki> <<SourcePort:16, DestinationPort:16,
16:39 <+bridge> [ddnet] <Ryozuki> AckNumber:32,
16:39 <+bridge> [ddnet] <Ryozuki> DataOffset:4, _Reserved:4, Flags:8, WindowSize:16,
16:39 <+bridge> [ddnet] <Ryozuki> CheckSum: 16, UrgentPointer:16,
16:39 <+bridge> [ddnet] <Ryozuki> Payload/binary>> = SomeBinary.``` 
16:39 <+bridge> [ddnet] <Ryozuki> :o this is how u would parse a tcp segment
16:39 <+bridge> [ddnet] <Ryozuki> crazy
16:58 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1048266852238884965/unknown.png
16:58 <+bridge> [ddnet] <Ryozuki> lol
17:04 <+bridge> [ddnet] <Jupstar ‚ú™> looks kinda dangerous xd
17:09 <+bridge> [ddnet] <Devinci> hey @deen , do you mind if I share your AOC repo with some people outside of ddnet (friends/uni) ? Your codes are insane
17:12 <+ChillerDragon> jopstar wat about da shield icons they rdy? https://github.com/ddnet/ddnet-data-svg/pull/32
17:17 <+bridge> [ddnet] <Jupstar ‚ú™> i still think they should be removed from game.png
17:17 <+bridge> [ddnet] <Jupstar ‚ú™> to another file
17:17 <+bridge> [ddnet] <Jupstar ‚ú™> it will break all current game.pngs out there
17:18 <+bridge> [ddnet] <Jupstar ‚ú™> also i dislike that the shields are randomly placed on the file
17:29 <+bridge> [ddnet] <heinrich5991> this looks relatively readable to me. is it a list comprehension like `[n*n for n in [1,2,3,4,5]]` in python?
17:29 <+bridge> [ddnet] <Ryozuki> yeah
17:31 <+bridge> [ddnet] <Ryozuki> the rough syntax is
17:31 <+bridge> [ddnet] <Ryozuki> `NewList = [Expression || GeneratorExp1, GeneratorExp2, ..., GeneratorExpN, Condition1, Condition2, ... ConditionM].`
17:32 <+bridge> [ddnet] <Ryozuki> ```erlang
17:32 <+bridge> [ddnet] <Ryozuki>  [X || X <- [1,2,3,4,5,6,7,8,9,10], X rem 2 =:= 0].
17:32 <+bridge> [ddnet] <Ryozuki> [2,4,6,8,10]```
17:34 <+bridge> [ddnet] <Ryozuki> =:= is for true equality lol
17:35 <+bridge> [ddnet] <heinrich5991> what does the other equality do? ^^
17:35 <+bridge> [ddnet] <heinrich5991> does haskell have a problem like JS's `===`?
17:37 <+bridge> [ddnet] <Ryozuki> ```erlang
17:37 <+bridge> [ddnet] <Ryozuki> 6> 5 =:= 5.
17:37 <+bridge> [ddnet] <Ryozuki> true
17:37 <+bridge> [ddnet] <Ryozuki> 7> 1 =:= 0.
17:37 <+bridge> [ddnet] <Ryozuki> false
17:37 <+bridge> [ddnet] <Ryozuki> 8> 1 =/= 0.
17:37 <+bridge> [ddnet] <Ryozuki> true
17:37 <+bridge> [ddnet] <Ryozuki> 9> 5 =:= 5.0.
17:37 <+bridge> [ddnet] <Ryozuki> false
17:37 <+bridge> [ddnet] <Ryozuki> 10> 5 == 5.0.
17:37 <+bridge> [ddnet] <Ryozuki> true
17:37 <+bridge> [ddnet] <Ryozuki> 11> 5 /= 5.0.
17:37 <+bridge> [ddnet] <Ryozuki> false
17:38 <+bridge> [ddnet] <Ryozuki> ```
17:38 <+bridge> [ddnet] <Jupstar ‚ú™> uff / for a not
17:38 <+bridge> [ddnet] <Jupstar ‚ú™> thats hard
17:38 <+bridge> [ddnet] <Jupstar ‚ú™> for my brain
17:38 <+bridge> [ddnet] <Jupstar ‚ú™> ryozuki, how many language do you know?
17:38 <+bridge> [ddnet] <Jupstar ‚ú™> s
17:39 <+bridge> [ddnet] <Ryozuki> define knowing
17:39 <+bridge> [ddnet] <Ryozuki> thats always a hard question to answer
17:39 <+bridge> [ddnet] <Ryozuki> i would even say i dont know c++
17:40 <+bridge> [ddnet] <Ryozuki> im not confident in it lol
17:40 <+bridge> [ddnet] <Jupstar ‚ú™> u know how to open files
17:40 <+bridge> [ddnet] <Jupstar ‚ú™> do basic math
17:40 <+bridge> [ddnet] <Jupstar ‚ú™> start a thread
17:40 <+bridge> [ddnet] <Jupstar ‚ú™> and know what makes the language unique (does it use pointers, managed memory etc.)
17:40 <+bridge> [ddnet] <Jupstar ‚ú™> yeah but u could write much stuff in c++ still
17:40 <+bridge> [ddnet] <Ryozuki> rust,c++,java,c#,python,js/ts,latex
17:41 <+bridge> [ddnet] <Ryozuki> i tried lua but i dont know how to open a file on top of my head rn
17:41 <+bridge> [ddnet] <Ryozuki> i just know its all tables
17:41 <+bridge> [ddnet] <Jupstar ‚ú™> xd
17:41 <+bridge> [ddnet] <Ryozuki> erlang is the first function lang im learning
17:41 <+bridge> [ddnet] <Ryozuki> well rust takes a lot of bits from functional programming
17:42 <+bridge> [ddnet] <Ryozuki> from what im learning, pattern matching is the most important thing in functional languages rn?
17:42 <+bridge> [ddnet] <Ryozuki> xd
17:42 <+bridge> [ddnet] <Ryozuki> or maybe its a erlang thing
17:42 <+bridge> [ddnet] <heinrich5991> also that functions are values
17:42 <+bridge> [ddnet] <Ryozuki> and atoms
17:42 <+bridge> [ddnet] <heinrich5991> what are atoms?
17:42 <+bridge> [ddnet] <Ryozuki> an atom is a variable whose value is its name itself iirc
17:43 <+bridge> [ddnet] <Ryozuki> > Atoms are literals, constants with their own name for value. What you see is what you get and don't expect more. The atom cat means "cat" and that's it. You can't play with it, you can't change it, you can't smash it to pieces; it's cat. Deal with it.
17:43 <+bridge> [ddnet] <Ryozuki> all lowercase names in erlang are atoms
17:43 <+bridge> [ddnet] <Ryozuki> ```erlang
17:43 <+bridge> [ddnet] <Ryozuki> 3> RestaurantMenu = [{steak, 5.99}, {beer, 3.99}, {poutine, 3.50}, {kitten, 20.99}, {water, 0.00}].
17:43 <+bridge> [ddnet] <Ryozuki> [{steak,5.99},
17:43 <+bridge> [ddnet] <Ryozuki> {beer,3.99},
17:43 <+bridge> [ddnet] <Ryozuki> {poutine,3.5},
17:43 <+bridge> [ddnet] <Ryozuki> {kitten,20.99},
17:43 <+bridge> [ddnet] <Ryozuki> {water,0.0}]
17:43 <+bridge> [ddnet] <Ryozuki> 4> [{Item, Price*1.07} || {Item, Price} <- RestaurantMenu, Price >= 3, Price =< 10].
17:44 <+bridge> [ddnet] <Ryozuki> [{steak,6.409300000000001},{beer,4.2693},{poutine,3.745}]
17:44 <+bridge> [ddnet] <Ryozuki> ```
17:44 <+bridge> [ddnet] <Ryozuki> @heinrich5991 im surprised u never seen atoms :o
17:44 <+bridge> [ddnet] <Jupstar ‚ú™> i also never seen that xd
17:44 <+bridge> [ddnet] <heinrich5991> I didn't know they were called atoms. seen them in lisps before, I think
17:44 <+bridge> [ddnet] <heinrich5991> called :cat there
17:44 <+bridge> [ddnet] <Ryozuki> but in erlang they are supposedly useful cuz erlang is all about message passing between processes, and atoms take 4-8 bytes no matter how long its name is
17:44 <+bridge> [ddnet] <Ryozuki> to tag messages
17:45 <+bridge> [ddnet] <heinrich5991> its usages seem to be where other languages would use built-in struct members or enumerations?
17:46 <+bridge> [ddnet] <Ryozuki> > An atom is a literal, a constant with name.
17:46 <+bridge> [ddnet] <Ryozuki> the oficial erlang definition
17:46 <+bridge> [ddnet] <Ryozuki> xD
17:46 <+bridge> [ddnet] <Ryozuki> idk
17:46 <+bridge> [ddnet] <Ryozuki> https://www.erlang.org/doc/reference_manual/data_types.html#atom
17:46 <+bridge> [ddnet] <Jupstar ‚ú™> i only know racket
17:46 <+bridge> [ddnet] <Jupstar ‚ú™> a modern dialect of lisp
17:46 <+bridge> [ddnet] <Ryozuki> @Not Keks u know actually most telecom companies use erlang
17:47 <+bridge> [ddnet] <Jupstar ‚ú™> "modern" xd
17:47 <+bridge> [ddnet] <Ryozuki> it apparently powers 40% of the internet
17:47 <+bridge> [ddnet] <Ryozuki> or so i read
17:47 <+bridge> [ddnet] <Jupstar ‚ú™> crazy
17:47 <+bridge> [ddnet] <Jupstar ‚ú™> i thought they use java in germany, that'd explain why it sucks
17:47 <+bridge> [ddnet] <Ryozuki> erlang/OTP otp literally means open telecom platform
17:48 <+bridge> [ddnet] <Ryozuki> eh i think erlang makes lot of sense
17:48 <+bridge> [ddnet] <Ryozuki> for this
17:48 <+bridge> [ddnet] <Ryozuki> note that erlang can control processes that use other languages
17:48 <+bridge> [ddnet] <Ryozuki> such as java
17:49 <+bridge> [ddnet] <Ryozuki> or so i read
17:49 <+bridge> [ddnet] <Jupstar ‚ú™> hoinestly i never used or seen any real erlang code in my life
17:50 <+bridge> [ddnet] <Ryozuki> me neither tbh
17:51 <+bridge> [ddnet] <Ryozuki> @Not Keks apparently
17:51 <+bridge> [ddnet] <Ryozuki> whatsapp uses erlang
17:51 <+bridge> [ddnet] <Jupstar ‚ú™> man
17:51 <+bridge> [ddnet] <Jupstar ‚ú™> did discord change font
17:51 <+bridge> [ddnet] <Jupstar ‚ú™> or did i accedentially changed it
17:51 <+bridge> [ddnet] <Alexander> yes and it's awful
17:51 <+bridge> [ddnet] <Jupstar ‚ú™> my name looks like trash xD
17:51 <+bridge> [ddnet] <Alexander> look at the letters W and S
17:51 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=FJQyv26tFZ8
17:51 <+bridge> [ddnet] <Ryozuki> by a engineer from fb whatsapp
17:52 <+bridge> [ddnet] <Ryozuki> they did
17:52 <+bridge> [ddnet] <Jupstar ‚ú™> the R also looks weird
17:52 <+bridge> [ddnet] <Jupstar ‚ú™> kinda if its not full height xD
17:52 <+bridge> [ddnet] <Jupstar ‚ú™> WR
17:52 <+bridge> [ddnet] <Jupstar ‚ú™> WRACS
17:52 <+bridge> [ddnet] <Ryozuki> >  T-Mobile uses Erlang in its SMS and authentication systems.
17:52 <+bridge> [ddnet] <Ryozuki> > 
17:52 <+bridge> [ddnet] <Ryozuki> > ‚Ä¢ Motorola is using Erlang in call processing products in the public-safety industry.
17:52 <+bridge> [ddnet] <Ryozuki> > 
17:52 <+bridge> [ddnet] <Ryozuki> > ‚Ä¢ Ericsson uses Erlang in its support nodes, used in GPRS and 3G mobile networks worldwide.
17:52 <+bridge> [ddnet] <Ryozuki> basically telecom
17:53 <+bridge> [ddnet] <Ryozuki> which has a shitload of users
17:53 <+bridge> [ddnet] <Ryozuki> but its not "hype"
17:53 <+bridge> [ddnet] <Jupstar ‚ú™> mh crazy
17:53 <+bridge> [ddnet] <Jupstar ‚ú™> the silent hero
17:54 <+bridge> [ddnet] <Jupstar ‚ú™> https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/erlang.html
17:54 <+bridge> [ddnet] <Jupstar ‚ú™> slower than java
17:54 <+bridge> [ddnet] <Jupstar ‚ú™> trash
17:54 <+bridge> [ddnet] <Ryozuki> erlang is slow
17:54 <+bridge> [ddnet] <Ryozuki> they dont hide it
17:54 <+bridge> [ddnet] <Ryozuki> xD
17:54 <+bridge> [ddnet] <Ryozuki> the point of erlang is, scalability and 100% uptime
17:55 <+bridge> [ddnet] <Ryozuki> u can even replace nodes in place
17:55 <+bridge> [ddnet] <Ryozuki> but its a bit shitty cuz
17:55 <+bridge> [ddnet] <Ryozuki> it has lot of history baggage i guess
17:55 <+bridge> [ddnet] <Ryozuki> the syntax comes from prolog
17:56 <+bridge> [ddnet] <Ryozuki> and its known to be ugly af
17:56 <+bridge> [ddnet] <Ryozuki> even erlang ppl themselves say it
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> https://benchmarksgame-team.pages.debian.net/benchmarksgame/download/fastest.svg
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> 
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> c, c++, rust
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> 
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> then long time nothing
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> 
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> then c#
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> 
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> to me its clear. i need to learn rust, since i already know c++
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> 
17:57 <+bridge> [ddnet] <Jupstar ‚ú™> rest is trash xd
17:59 <+ChillerDragon> jopstar: "name a language in which you can open files, do basic math, start a thread, and know if it uses pointers, managed memory etc" ryo: "latext"
18:01 <+bridge> [ddnet] <Jupstar ‚ú™> xd
18:01 <+ChillerDragon> legends say ryo ranked global #1 with latex only in 2014
18:02 <+ChillerDragon> in aoc
18:02 <+bridge> [ddnet] <Ryozuki> u can do it in latex
18:02 <+bridge> [ddnet] <Ryozuki> its turing complete
18:02 <+bridge> [ddnet] <Ryozuki> well idk about threads
18:03 <+ChillerDragon> then u can also list css there
18:03 <+ChillerDragon> xd
18:03 <+bridge> [ddnet] <Jupstar ‚ú™> yeah forget threads
18:03 <+bridge> [ddnet] <Jupstar ‚ú™> is css turing complete?
18:03 <+ChillerDragon> https://stackoverflow.com/a/5239256
18:04 <+ChillerDragon> probably as turing complete as latex
18:04 <+bridge> [ddnet] <Jupstar ‚ú™> wtf XDD
18:05 <+bridge> [ddnet] <Ryozuki> ```erlang
18:05 <+bridge> [ddnet] <Ryozuki> same(X,X) ->
18:05 <+bridge> [ddnet] <Ryozuki> true;
18:05 <+bridge> [ddnet] <Ryozuki> same(_,_) ->
18:05 <+bridge> [ddnet] <Ryozuki> false.```
18:05 <+bridge> [ddnet] <Ryozuki> ```erlang
18:05 <+bridge> [ddnet] <Ryozuki> same(X,X) ->
18:05 <+bridge> [ddnet] <Ryozuki>   true;
18:05 <+bridge> [ddnet] <Ryozuki> same(_,_) ->
18:05 <+bridge> [ddnet] <Ryozuki>   false.
18:05 <+bridge> [ddnet] <Ryozuki> ```
18:05 <+bridge> [ddnet] <Ryozuki> damn functional langs
18:05 <+bridge> [ddnet] <Ryozuki> this is 1 function
18:05 <+bridge> [ddnet] <Ryozuki> it returns if 2 values are equal
18:06 <+bridge> [ddnet] <Ryozuki> since variables can only be bound 1 time and cant change
18:06 <+bridge> [ddnet] <Ryozuki> X is bound to the first value, and then on the second argument it checks if the pattern matches
18:06 <+bridge> [ddnet] <Ryozuki> aka its the same
18:06 <+bridge> [ddnet] <Ryozuki> weird stuff
18:07 <+bridge> [ddnet] <chillerdragon> ryo when pr code snippet syntax coloring to weechat
18:07 <+bridge> [ddnet] <chillerdragon> https://zillyhuhn.com/cs/.1670000707.png
18:07 <+bridge> [ddnet] <chillerdragon> this looks plaintext
18:07 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1048284389727014932/image.png
18:07 <+bridge> [ddnet] <Ryozuki> kek
18:13 <+ChillerDragon> bruv sloppy tw designers cloud2 full of edges
18:14 <+ChillerDragon> https://zillyhuhn.com/cs/.1670001119.png
18:14 <+ChillerDragon> https://zillyhuhn.com/cs/.1670001132.png
18:14 <+ChillerDragon> https://zillyhuhn.com/cs/.1670001149.png
18:15 <+bridge> [ddnet] <deen> Of course not, go ahead üòÑ
18:16 <+bridge> [ddnet] <deen> smells like prolog
18:16 <+bridge> [ddnet] <Ryozuki> yeah
18:16 <+bridge> [ddnet] <Ryozuki> erlang syntax is based on prolog
18:17 <+bridge> [ddnet] <deen> Then it will be a good fit for many of these puzzles
18:17 <+bridge> [ddnet] <Ryozuki> erlang was first implemented in prolog too
18:17 <+bridge> [ddnet] <Ryozuki> well i hear many times erlang is bad for string manipulation
18:17 <+bridge> [ddnet] <deen> prolog too
18:17 <+bridge> [ddnet] <deen> it's the worst. many times in prolog I ran out of memory or out of time with simple string manipulations
18:17 <+bridge> [ddnet] <deen> even worse than haskell and that's hard
18:18 <+bridge> [ddnet] <Ryozuki> xd
18:18 <+bridge> [ddnet] <Ryozuki> apparently erlang was designed by a telecom company, and they never used strings
18:18 <+bridge> [ddnet] <Ryozuki> or so i read
18:20 <+bridge> [ddnet] <deen> Ericson
18:20 <+bridge> [ddnet] <deen> Ericson language = Erlang I guess?
18:26 <+bridge> [ddnet] <Ryozuki> probs xD
18:33 <+bridge> [ddnet] <deen> WhatsApp is the use case I always remember when I hear of Erlang: http://highscalability.com/blog/2014/3/31/how-whatsapp-grew-to-nearly-500-million-users-11000-cores-an.html
18:33 <+bridge> [ddnet] <deen> > 40 million users per engineer
18:33 <+bridge> [ddnet] <deen> > 19B messages in & 40B out per day
18:33 <+bridge> [ddnet] <deen> > > 11,000 cores run the Erlang system
18:33 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1048290929515167754/image.png
18:33 <+bridge> [ddnet] <Ryozuki> lol
18:34 <+bridge> [ddnet] <Ryozuki> > As such, statically typed languages are to be seen as safer than their dynamic counterparts. While this might be true when comparing with many dynamic languages, Erlang begs to differ and certainly has a track record to prove it. The best example is the often reported nine nines (99.9999999%) of availability offered on the Ericsson AXD 301 ATM switches, consisting of over 1 million lines of Erlang code. Please note that this is not an ind
18:36 <+bridge> [ddnet] <Jupstar ‚ú™> why are they even over 1 million lines of code xD
18:37 <+bridge> [ddnet] <Ryozuki> > 
18:37 <+bridge> [ddnet] <Ryozuki> > 
18:37 <+bridge> [ddnet] <Ryozuki> > In-memory Mnesia database using about 2TB of RAM sharded across 16 partitions to store about 18 billion records.
18:37 <+bridge> [ddnet] <Ryozuki> lol
18:38 <+bridge> [ddnet] <Ryozuki> mnesia is a db that comes with erlang itself
18:38 <+bridge> [ddnet] <Ryozuki> https://www.erlang.org/doc/man/mnesia.html
18:40 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1048292537208668190/image.png
18:40 <+bridge> [ddnet] <Ryozuki> this is the switch xD
18:41 <+bridge> [ddnet] <Ryozuki> > 
18:41 <+bridge> [ddnet] <Ryozuki> >     Supports IP, MPLS, ATM, Frame Relay, circuit emulation and voice services
18:41 <+bridge> [ddnet] <Ryozuki> >     The system scales from 10 Gbit/s, in one sub-rack, up to 160 Gbit/s.
18:41 <+bridge> [ddnet] <Ryozuki> https://www.carritech.com/telecommunications-products/core-network/ericsson-axd-series/ericsson-axd-301/
18:41 <+bridge> [ddnet] <Ryozuki> "request a quote"
18:41 <+bridge> [ddnet] <Ryozuki> i wonder how much it costs
19:27 <+bridge> [ddnet] <Index> Well, that was more paper-based result calculating than actual code..
19:27 <+bridge> [ddnet] <Index> Also im quite impressed with your one-line shell solution for day1, @deen :o
19:27 <+bridge> [ddnet] <Index> ```bash
19:27 <+bridge> [ddnet] <Index> #!/bin/bash
19:27 <+bridge> [ddnet] <Index> # Advent of Code 02
19:27 <+bridge> [ddnet] <Index> x1=$(sed 's/A X/4/g;s/A Y/8/g;s/A Z/3/g;s/B X/1/g;s/B Y/5/g;s/B Z/9/g;s/C X/7/g;s/C Y/2/g;s/C Z/6/g' "$1" | paste -s -d+ | bc)
19:28 <+bridge> [ddnet] <Index> x2=$(sed 's/A X/3/g;s/A Y/4/g;s/A Z/8/g;s/B X/1/g;s/B Y/5/g;s/B Z/9/g;s/C X/2/g;s/C Y/6/g;s/C Z/7/g' "$1" | paste -s -d+ | bc)
19:28 <+bridge> [ddnet] <Index> echo "$x1 $x2"
19:28 <+bridge> [ddnet] <Index> ```
19:29 <+bridge> [ddnet] <deen> Yes, but too many lines to do the final calculation on paper üòÑ
19:29 <+bridge> [ddnet] <Anime.pdf> Wadafuk:justatest:
19:32 <+bridge> [ddnet] <Ryozuki> bash is cursed
19:32 <+bridge> [ddnet] <Ryozuki> well thats more sed
19:33 <+bridge> [ddnet] <Anime.pdf> Its just like rust, just need to learn the syntax :greenthing:
19:34 <+bridge> [ddnet] <Ryozuki> https://xkcd.com/1313/
20:07 <+ChillerDragon>  oh cool @Index sed can take multiple patterns i should add that to my toolbox
20:10 <+bridge> [ddnet] <Ryozuki> wrong ping lmao
20:10 <+ChillerDragon> wotefek
20:10 <+bridge> [ddnet] <Ryozuki> u pinged a Nana „Éä„Éä#6814
20:11 <+ChillerDragon> da hek
20:14 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1048316272041021490/image.png
20:14 <+bridge> [ddnet] <Anime.pdf> Stop using irc
20:22 <+bridge> [ddnet] <Jupstar ‚ú™> chillerdragon: now do entities and we have enough high res stuff xd
20:32 <+ChillerDragon> ewww entities
20:32 <+ChillerDragon> but yea generic unhook would be nice
20:34 <+ChillerDragon> whats that xd @Ryozuki is that AI generated?
20:35 <+bridge> [ddnet] <Ryozuki> y
20:35 <+ChillerDragon> good stuff
20:53 <+bridge> [ddnet] <Ryozuki> i need to leaarn more erlang, maybe it can be useful to do some server side stuff
20:53 <+bridge> [ddnet] <Matodor> how compile only server?
20:53 <+bridge> [ddnet] <Matodor> 
20:53 <+bridge> [ddnet] <Matodor> ```cmake -DDOWNLOAD_GTEST=OFF -DCLIENT=OFF ..```
20:53 <+bridge> [ddnet] <Matodor> not work
20:53 <+bridge> [ddnet] <Matodor> \
20:53 <+bridge> [ddnet] <Matodor> https://cdn.discordapp.com/attachments/293493549758939136/1048326074917994507/image.png
20:58 <+bridge> [ddnet] <Nouaa> `cmake DDNet-Server` should work just fine
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> what version r u using
21:01 <+bridge> [ddnet] <Matodor> can i skip GTEST with -DDOWNLOAD_GTEST=OFF  ?
21:01 <+bridge> [ddnet] <Jupstar ‚ú™> pnglite is not in ddnet anymore
21:02 <+bridge> [ddnet] <Jupstar ‚ú™> so its outdated whatever u use
21:02 <+bridge> [ddnet] <Matodor> im building ddnet-pvp
21:02 <+bridge> [ddnet] <Matodor> https://github.com/TeeworldsCN/ddnet-pvp
21:02 <+bridge> [ddnet] <Jupstar ‚ú™> yes
21:03 <+bridge> [ddnet] <Matodor> thx :brownbear:
21:03 <+bridge> [ddnet] <Matodor> https://cdn.discordapp.com/attachments/293493549758939136/1048328514702692372/image.png
21:06 <+bridge> [ddnet] <Matodor> https://cdn.discordapp.com/attachments/293493549758939136/1048329320197791864/image.png
21:06 <+bridge> [ddnet] <Nouaa> ./DDNet-Server
21:07 <+bridge> [ddnet] <Matodor> https://cdn.discordapp.com/attachments/293493549758939136/1048329499596554328/image.png
21:07 <+bridge> [ddnet] <Matodor> https://tenor.com/view/scam2022-scam-gif-24329035
21:07 <+bridge> [ddnet] <Matodor> :trollet:
21:07 <+bridge> [ddnet] <Nouaa> it would have just been easier tbh
21:08 <+bridge> [ddnet] <Nouaa> you have been asking for things for weeks
21:10 <+bridge> [ddnet] <Matodor> me?)
21:11 <+bridge> [ddnet] <Nouaa> hmm, perhaps it isn't u
21:12 <+bridge> [ddnet] <Nouaa> someone was there asking about cmake for days/weeks lol
21:14 <+bridge> [ddnet] <Nouaa> it was @- Mahdiyar, nvm üôÇ
21:46 <+bridge> [ddnet] <Nouaa> hmm, maybe it isn't u
23:18 <+bridge> [ddnet] <ReiTW> https://twitter.com/JusticeRage/status/1598649735362945026
23:18 <+bridge> [ddnet] <ReiTW> https://twitter.com/gf_256/status/1598104835848798208
23:19 <+bridge> [ddnet] <ReiTW> openai rly good
23:36 <+bridge> [ddnet] <Ryozuki> lol this is poggers
23:36 <+bridge> [ddnet] <Learath2> @deen do you happen to know a way to update a set of rows with their `ROW_NUMBER()`s in a query?
23:37 <+bridge> [ddnet] <deen> update ... where row_number() == ?
23:37 <+bridge> [ddnet] <deen> haven't tried though
23:38 <+bridge> [ddnet] <Learath2> I want to set a column to the row_number
23:38 <+bridge> [ddnet] <Learath2> Basically, I want to persist an `ORDER BY`
23:39 <+bridge> [ddnet] <Learath2> So I have a `Pos` column on the row. After ordering how I want, now I need to set the `Pos` column
23:39 <+bridge> [ddnet] <deen> Why does my question possibly violate their policy? üòÑ
23:39 <+bridge> [ddnet] <deen> https://cdn.discordapp.com/attachments/293493549758939136/1048367954020012192/Screenshot_2022-12-02_at_23.39.44.png
23:40 <+bridge> [ddnet] <deen> Pos = ROW_NUMBER() doesn't work?
23:41 <+bridge> [ddnet] <Ryozuki> https://twitter.com/carnage4life/status/1598332648723976193
23:41 <+bridge> [ddnet] <Learath2> I'm not quite sure how to put the select + order by and the update together :/
23:41 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1048368412012847255/image.png
23:42 <+bridge> [ddnet] <deen> I think OpenAI would pass most interviews' soft questions
23:43 <+bridge> [ddnet] <deen> https://cdn.discordapp.com/attachments/293493549758939136/1048368950288859166/Screenshot_2022-12-02_at_23.43.50.png
23:44 <+bridge> [ddnet] <Ryozuki> nice question :o
23:44 <+bridge> [ddnet] <deen> it was actually a follow-up to another question I had for it
23:44 <+bridge> [ddnet] <Ryozuki> but the concurrency model is totally flawed
23:44 <+bridge> [ddnet] <Ryozuki> rust allows actually using mutexes in a completly safe way
23:44 <+bridge> [ddnet] <deen> Oh well, fooled me since I don't know it üòÑ
23:44 <+bridge> [ddnet] <Ryozuki> not just message passing
23:45 <+bridge> [ddnet] <Ryozuki> and mutexes are usually faster? as far as i know
23:45 <+bridge> [ddnet] <Ryozuki> so yeah, a rust dev would call this a bit bs tbh
23:45 <+bridge> [ddnet] <Ar1gin> really?
23:45 <+bridge> [ddnet] <Ryozuki> yeah
23:46 <+bridge> [ddnet] <Ryozuki> message passing is a way to do things but in rust you can use mutexes
23:46 <+bridge> [ddnet] <Ryozuki> and read write locks
23:46 <+bridge> [ddnet] <Ryozuki> in a completly safe way
23:46 <+bridge> [ddnet] <Ryozuki> if u dont use unsafew
23:46 <+bridge> [ddnet] <Ryozuki> because of the Send + Sync traits
23:46 <+bridge> [ddnet] <Ryozuki> https://doc.rust-lang.org/nomicon/send-and-sync.html
23:47 <+bridge> [ddnet] <Learath2> I seem to need something like a join but with update
23:47 <+bridge> [ddnet] <Ryozuki> for what?
23:48 <+bridge> [ddnet] <deen> I should always add Bible style to the answers, more fun
23:48 <+bridge> [ddnet] <deen> https://cdn.discordapp.com/attachments/293493549758939136/1048369994850902076/Screenshot_2022-12-02_at_23.47.51.png
23:48 <+bridge> [ddnet] <Ryozuki> lol
23:50 <+bridge> [ddnet] <Ewan> non-iostreams are suicide
23:51 <+bridge> [ddnet] <Ewan> strtok
23:51 <+bridge> [ddnet] <Ryozuki> rust better
23:52 <+bridge> [ddnet] <Ryozuki> split + iterators ftw
23:52 <+bridge> [ddnet] <Ewan> ü¶ê
23:52 <+bridge> [ddnet] <Ewan> yeah
23:52 <+bridge> [ddnet] <Ewan> i don't like the c way either
23:52 <+bridge> [ddnet] <Ryozuki> c++ dopesnt even handle utf8 well by def
23:52 <+bridge> [ddnet] <Ewan> u just have to use wide implementations
23:52 <+bridge> [ddnet] <Ewan> wstring and prepending literals with L""
23:52 <+bridge> [ddnet] <Ryozuki> u can still have bad utf9
23:52 <+bridge> [ddnet] <Ryozuki> utf8
23:52 <+bridge> [ddnet] <Ewan> yeah
23:52 <+bridge> [ddnet] <Ryozuki> in rust its just UB to have bad utf8
23:53 <+bridge> [ddnet] <Ryozuki> so if u dont use unsafe u dont have bad utf8
23:56 <+bridge> [ddnet] <Ewan> neat
23:57 <+bridge> [ddnet] <Ryozuki> good good
23:57 <+bridge> [ddnet] <Ryozuki> :BASED:
