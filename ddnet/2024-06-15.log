00:00 <+bridge> <Jupstar âœª> but as said in such cases we could think about proof of work concepts or similar
00:00 <+bridge> <Jupstar âœª> i mean preventing spam is hard for everyone
00:00 <+bridge> <totar> you could authenticate with steam without having steam installed on your PC with openid
00:00 <+bridge> <Jupstar âœª> and if email login requires a moderator to proof it in worst case, so be it
00:00 <+bridge> <Jupstar âœª> sure
00:01 <+bridge> <totar> this is working poorly for kog atm
00:01 <+bridge> <Jupstar âœª> i know
00:01 <+bridge> <Jupstar âœª> steam integration will exist
00:01 <+bridge> <Jupstar âœª> and i hope most ppl simply click on that
00:01 <+bridge> <Ewan> i think purely email would be the best
00:02 <+bridge> <totar> I was just about to say we should simply spam as many openid providers as we can reasonable use and then ignore email
00:03 <+bridge> <Jupstar âœª> see we have the spam problem there too
00:03 <+bridge> <Jupstar âœª> maybe a bit harder, but still exists
00:03 <+bridge> <Jupstar âœª> the account server cannot guess if the session token is valid
00:04 <+bridge> <Jupstar âœª> it has to spam the steam http server
00:04 <+bridge> <totar> if you use the email_verified tag in openid on supported providers to migrate people to/from an openid account or use it to log them in without sending an email
00:04 <+bridge> <totar> you can use the email_verified tag in openid on supported providers to migrate people to/from an openid account or use it to log them in without sending an email
02:12 <+bridge> <zhn> bypassing by re-entering server or connecting dummy
02:20 <+bridge> <yrrr_> unless its a whitelist instead of a blacklist
03:20 <+ws-client> <ChillerDragon> @louis my client does not do physics its only network stuff for now no prediction or gui. But yea I was thinking of doing some AI stuff with it. I don't think the client needs physics for that anyways
03:20 <+ws-client> <ChillerDragon> The client sends inputs and gets back state from the server. Seems like enough to train an AI on it.
03:47 <+bridge> <louis> ah yeah for sure
03:47 <+bridge> <louis> I think that sorta constitutes a python "wrapper"
03:48 <+bridge> <louis> just need to compute state at max speed so training doesn't take an ðŸ˜…eon
10:33 <+bridge> <Infinity> Sure, but ideally I want it to be as close to an actual player as possible.
10:33 <+bridge> <Infinity> 
10:33 <+bridge> <Infinity> I think it would be interesting to be able to adjust for ping in the future
12:03 <+bridge> <zhn> you are as close as possible with server side too since you manipulate with user input and can track it both as a server and as a client
12:04 <+bridge> <zhn> i don't think it can help with ping adjustment also like what should it adjust :p
12:49 <+bridge> <Infinity> Fair enough, so far I haven't looked at the server side code a lot.
12:49 <+bridge> <Infinity> 
12:49 <+bridge> <Infinity> I guess the question remains the same then: Are there any python wrappers for the server? Or is there any advice you can give before I go down the rabbit hole myself? ðŸ˜‚
12:52 <+ws-client> <ChillerDragon> I am still wondering what the word "wrapper" means for you
12:54 <+bridge> <meloÆž> i dont think anyone is sane enough to wrap the entire server-side in python :D
12:55 <+ws-client> <ChillerDragon> i can call a launch of DDNet-Server in a python script in 1 line xd
12:55 <+ws-client> <ChillerDragon> But yea @Infinity you are probably looking for this https://github.com/timakro/tmlp
12:57 <+bridge> <meloÆž> :think_bot:
12:59 <+bridge> <Infinity> Yup, I already saw timakro's project and put it on my "to read" list.
12:59 <+bridge> <Infinity> Guess I'll dig into it a little deeper 
12:59 <+bridge> <Infinity> 
12:59 <+bridge> <Infinity> Thanks guys
13:00 <+bridge> <Infinity> run the client (or server), connect a player and input controls via python while receiving some kind of observation
13:02 <+ws-client> <ChillerDragon> I am not sure if I would call that a wrapper. But yea as I said if you need a client fully written in python im currently in the progress of building that.
13:02 <+ws-client> <ChillerDragon> But so far it is still missing some things 
13:03 <+ws-client> <ChillerDragon> Connecting already works but no snap support yet
13:09 <+bridge> <Infinity> Just some kind of interface I guess
13:10 <+bridge> <Infinity> Sounds very interesting though!
13:34 <+bridge> <zhn> there's no wrappers in that way ig, maybe lua based ones but they're mostly private
13:35 <+bridge> <zhn> the best solution for is modifying server to send needed information in econ so you can send and receive it from python
13:35 <+bridge> <zhn> why just not use cpp xd
13:37 <+bridge> <meloÆž> Cpp hard!
13:49 <+bridge> <Infinity> I wanted do as little as possible with cpp, because I want to focus on the RL side of things and not spend ages fighting build systems.
13:49 <+bridge> <Infinity> 
13:49 <+bridge> <Infinity> It's just a side project meant to be fun and doing everything in cpp sounds more like work than fun ðŸ˜‚
13:58 <+bridge> <zhn> :justatest:
14:13 <+bridge> <teero777> cpp is fun
14:31 <+bridge> <zhn> ye c++26 is neat
14:31 <+bridge> <zhn> waiting for std::reflect
16:33 <+bridge> <fokkonaut> chillerdragon: wire ?
16:46 <+bridge> <meloÆž> Will Take another 10 Years for anyone to actually Work with c++26, i mean Just See how many FOSS Projects still use c++17
19:41 <+bridge> <aegisub> hi I maintain a c++11 application ðŸ™‚
19:45 <+bridge> <Jupstar âœª> hi
19:46 <+bridge> <zhn> im ready to throw it all just for language benefits
19:46 <+bridge> <zhn> cpp is kinda fun to use after all
19:53 <+bridge> <learath2> C++20 has been quite enjoyable
19:55 <+bridge> <meloÆž> i want to utilize concepts in blockworlds so badly :(
19:55 <+bridge> <meloÆž> 
19:55 <+bridge> <meloÆž> ```c++
19:55 <+bridge> <meloÆž> concept IsInvitable = requires(T t) {
19:55 <+bridge> <meloÆž>     { t.Accept() } -> std::same_as<void>;
19:55 <+bridge> <meloÆž>     { t.Decline() } -> std::same_as<void>;
19:55 <+bridge> <meloÆž> };
19:55 <+bridge> <meloÆž> ```
19:55 <+bridge> <ryozuki> hi i maintain a rust 2024 app :gigachad:
19:55 <+bridge> <meloÆž> Ryo! glad to have you here - how many more translations until i get wiki contributor? need it to flex
19:55 <+bridge> <meloÆž> i also added translation markers once!
19:55 <+bridge> <learath2> One day I'll make my own C-like language. Just need to sit down and plan it out
19:57 <+bridge> <jxsl13> blub
20:40 <+bridge> <fokkonaut> @louis.place F-DDrace [uses confetti](https://github.com/fokkonaut/F-DDrace/commit/1fc352482937e7e5e8a03de51451162f39d5d388) too now, and has a small cosmetic command for it :)
21:13 <+bridge> <fokkonaut> @0xfaulty
21:14 <+bridge> <0xfaulty> ty
21:14 <+bridge> <fokkonaut> I didn't send Sv_ReadyToEnter when changing design, that was the error
21:14 <+bridge> <fokkonaut> np
22:47 <+bridge> <borsmatyas02> i found a bug. as you can see here i can reach the upper wall with hook when im at the ground. but when im falling (so im upper) i cant reach it.
22:47 <+bridge> <borsmatyas02> https://cdn.discordapp.com/attachments/293493549758939136/1251639239225905275/DDNet_Client_2024-06-14_18-13-12.mp4?ex=666f4f60&is=666dfde0&hm=054610c6aca0286989a3d3da031adedca64787e2d26383f3a3e60118039ea204&
22:48 <+bridge> <borsmatyas02> look at those noobs blocking each other btw
22:52 <+bridge> <syrinok> Not a bug, hook has travel time, if you're falling it'll lower your hook range
22:54 <+bridge> <syrinok> You can extend your hook this way as well, your max range will shift slightly depending on your body, making some hooks possible
22:59 <+bridge> <syrinok> Here's an example
22:59 <+bridge> <syrinok> https://cdn.discordapp.com/attachments/293493549758939136/1251642350929707038/example.mp4?ex=666f5246&is=666e00c6&hm=affe03c9e68afaee58aa660d1e6395b8d37fa83026e9432aa6e09ff3c2741210&
23:04 <+bridge> <Ewan> how are you still on that map
23:04 <+bridge> <syrinok> It's a demo!
23:53 <+bridge> <Ewan> makes sense
