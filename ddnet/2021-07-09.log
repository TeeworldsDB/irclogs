00:10 <+bridge> [ddnet] <Jupstar âœª> I think you can also add an envelop timer that tells you how long your client is open
00:10 <+bridge> [ddnet] <Jupstar âœª> would also be funny in a map
00:10 <+bridge> [ddnet] <Jupstar âœª> (non synced env)
00:12 <+bridge> [ddnet] <Jupstar âœª> and since ddnet doesnt use floats anymore to store the time it should be pretty accurate, depending on how reliable the processor gives timestamps
00:12 <+bridge> [ddnet] <Jupstar âœª> and since ddnet doesnt use floats anymore to store the envelop time it should be pretty accurate, depending on how reliable the processor gives timestamps
01:01 <+bridge> [ddnet] <Jupstar âœª> not checked for correctness xd
01:01 <+bridge> [ddnet] <Jupstar âœª> https://cdn.discordapp.com/attachments/293493549758939136/862830800592830504/time_start.map
01:36 <+bridge> [ddnet] <Jupstar âœª> Oh I think very last tile layer is wrong must be deleted
01:52 <+bridge> [ddnet] <Learath2> This is cute, we should take it
02:50 <+bridge> [ddnet] <Ravie> it's already in ddnet client
02:54 <+bridge> [ddnet] <louis> it is?
02:54 <+bridge> [ddnet] <Ravie> yeah I guess not many people know about it
02:56 <+bridge> [ddnet] <louis> how
02:56 <+bridge> [ddnet] <Ravie> you need a quad with an envelope assigned and enable Info
02:57 <+bridge> [ddnet] <Ravie> ah and I think you can't move the first and last points or so, so add some in the envelope
02:59 <+bridge> [ddnet] <louis> wtff
02:59 <+bridge> [ddnet] <louis> wait its so buggy tho
11:25 <+bridge> [ddnet] <CovER> Add info next to the player's nickname where I can see I have a strong or weak hook to him
11:31 <+bridge> [ddnet] <murpi> https://github.com/ddnet/ddnet/pull/3476
12:45 <+bridge> [ddnet] <hussainx3> this a lots numbers!
13:20 <+bridge> [ddnet] <timakro> To the rustaceans\:```pub
13:20 <+bridge> [ddnet] <timakro> impl From<&str> for Error {
13:20 <+bridge> [ddnet] <timakro>     fn from(msg: &str) -> Error {
13:20 <+bridge> [ddnet] <timakro>         Error(msg.to_owned())
13:20 <+bridge> [ddnet] <timakro>     }
13:20 <+bridge> [ddnet] <timakro> }
13:20 <+bridge> [ddnet] <timakro> 
13:20 <+bridge> [ddnet] <timakro> impl From<String> for Error {
13:20 <+bridge> [ddnet] <timakro>     fn from(msg: String) -> Error {
13:20 <+bridge> [ddnet] <timakro>         Error(msg)
13:20 <+bridge> [ddnet] <timakro>     }
13:20 <+bridge> [ddnet] <timakro> }
13:20 <+bridge> [ddnet] <timakro> ```Can I shorten this?
13:20 <+bridge> [ddnet] <timakro> To the rustaceans\:```
13:20 <+bridge> [ddnet] <timakro> pub struct Error(String);
13:20 <+bridge> [ddnet] <timakro> 
13:20 <+bridge> [ddnet] <timakro> impl From<&str> for Error {
13:20 <+bridge> [ddnet] <timakro>     fn from(msg: &str) -> Error {
13:20 <+bridge> [ddnet] <timakro>         Error(msg.to_owned())
13:20 <+bridge> [ddnet] <timakro>     }
13:20 <+bridge> [ddnet] <timakro> }
13:20 <+bridge> [ddnet] <timakro> 
13:20 <+bridge> [ddnet] <timakro> impl From<String> for Error {
13:21 <+bridge> [ddnet] <timakro>     fn from(msg: String) -> Error {
13:21 <+bridge> [ddnet] <timakro>         Error(msg)
13:21 <+bridge> [ddnet] <timakro>     }
13:21 <+bridge> [ddnet] <timakro> }
13:21 <+bridge> [ddnet] <timakro> ```Can I shorten this?
13:21 <+bridge> [ddnet] <timakro> I want to be able to create errors from static strings and from strings built for example with `format!`
13:22 <+bridge> [ddnet] <timakro> In a function that returns `Result<(), Error>` I want to be able to write `return Err("message".into())`
13:24 <+bridge> [ddnet] <timakro> Oh, and I can't really use `Result<(), String>` because I need to distinguish between different `Error` types, e.g. `module1::Error`
13:48 <+bridge> [ddnet] <Ryozuki> Cow<str, 'static> ?
13:49 <+bridge> [ddnet] <Ryozuki> Cow<'static, str> *
13:51 <+bridge> [ddnet] <Ryozuki> ```rust
13:51 <+bridge> [ddnet] <Ryozuki> impl From<String> for Error {
13:51 <+bridge> [ddnet] <Ryozuki>     fn from(msg: String) -> Error {
13:51 <+bridge> [ddnet] <Ryozuki>         Error(msg)
13:51 <+bridge> [ddnet] <Ryozuki>     }
13:51 <+bridge> [ddnet] <Ryozuki> }
13:51 <+bridge> [ddnet] <Ryozuki> ```
13:51 <+bridge> [ddnet] <Ryozuki> ups
13:51 <+bridge> [ddnet] <Ryozuki> ```rust
13:51 <+bridge> [ddnet] <Ryozuki> use std::borrow::Cow;
13:52 <+bridge> [ddnet] <Ryozuki> 
13:52 <+bridge> [ddnet] <Ryozuki> pub struct Error(Cow<'static, str>);
13:52 <+bridge> [ddnet] <Ryozuki> 
13:52 <+bridge> [ddnet] <Ryozuki> impl From<&'static str> for Error {
13:52 <+bridge> [ddnet] <Ryozuki>     fn from(msg: &'static str) -> Error {
13:52 <+bridge> [ddnet] <Ryozuki>         Error(Cow::Borrowed(msg))
13:52 <+bridge> [ddnet] <Ryozuki>     }
13:52 <+bridge> [ddnet] <Ryozuki> }
13:52 <+bridge> [ddnet] <Ryozuki> 
13:52 <+bridge> [ddnet] <Ryozuki> impl From<String> for Error {
13:52 <+bridge> [ddnet] <Ryozuki>     fn from(msg: String) -> Error {
13:52 <+bridge> [ddnet] <Ryozuki>         Error(Cow::Owned(msg))
13:52 <+bridge> [ddnet] <Ryozuki>     }
13:52 <+bridge> [ddnet] <Ryozuki> }
13:52 <+bridge> [ddnet] <Ryozuki> 
13:52 <+bridge> [ddnet] <Ryozuki> fn lol() -> Result<(), Error> {
13:52 <+bridge> [ddnet] <Ryozuki>     Err("my error".into())
13:52 <+bridge> [ddnet] <Ryozuki> }
13:52 <+bridge> [ddnet] <Ryozuki> 
13:52 <+bridge> [ddnet] <Ryozuki> fn lol2() -> Result<(), Error> {
13:52 <+bridge> [ddnet] <Ryozuki>     Err(String::from("hello").into())
13:52 <+bridge> [ddnet] <Ryozuki> }
13:52 <+bridge> [ddnet] <Ryozuki> 
13:52 <+bridge> [ddnet] <Ryozuki> fn main() {}
13:52 <+bridge> [ddnet] <Ryozuki> ```
13:52 <+bridge> [ddnet] <Ryozuki> @timakro i would do it like this i guess
13:52 <+bridge> [ddnet] <Ryozuki> :greenthing:
15:14 <+bridge> [ddnet] <Learath2> ```rust
15:14 <+bridge> [ddnet] <Learath2> impl<T: Into<String>> From<T> for Error {
15:14 <+bridge> [ddnet] <Learath2>     fn from(msg: T) -> Error {
15:14 <+bridge> [ddnet] <Learath2>         Error(msg.into())
15:14 <+bridge> [ddnet] <Learath2>     }
15:14 <+bridge> [ddnet] <Learath2> }```
15:14 <+bridge> [ddnet] <Learath2> Not quite sure if the compiler is smart enough to optimize this but it should work
15:17 <+bridge> [ddnet] <Learath2> Update: it is https://godbolt.org/z/f1TEad99r
15:27 <+bridge> [ddnet] <Ryozuki> https://godbolt.org/
15:27 <+bridge> [ddnet] <Ryozuki> ups
15:27 <+bridge> [ddnet] <Ryozuki> actually i think mine is better
15:28 <+bridge> [ddnet] <Ryozuki> i just gotta figure out hwo to share
15:28 <+bridge> [ddnet] <Ryozuki> this
15:28 <+bridge> [ddnet] <Learath2> Ofc a cow will have better performance, he asked for shorter ðŸ˜„
15:28 <+bridge> [ddnet] <Ryozuki> https://godbolt.org/z/sd64Pvnaz
15:28 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
15:28 <+bridge> [ddnet] <Ryozuki> oh shorten
15:28 <+bridge> [ddnet] <Ryozuki> but i think its better to use cow
15:30 <+bridge> [ddnet] <Ryozuki> https://godbolt.org/z/5orM7T1TM
15:30 <+bridge> [ddnet] <Ryozuki> i fixed the functions
15:39 <+bridge> [ddnet] <louis> :twcow:
21:42 <+bridge> [ddnet] <heinrich5991> @Kaffeine the problem is likely that the server doesn't support the extended serverinfo protocol, but just the old fstd protocol
21:57 <+bridge> [ddnet] <gerdoe> imagine have ability to abort vote as vote starter
21:57 <+bridge> [ddnet] <lynn> holy shit
21:57 <+bridge> [ddnet] <lynn> that HAS to be an issue already
22:04 <+bridge> [ddnet] <gerdoe> didn't find any heh
22:36 <+bridge> [ddnet] <NeXus> lol this is great ðŸ˜„
22:36 <+bridge> [ddnet] <NeXus> https://cdn.discordapp.com/attachments/293493549758939136/863156615977238548/unknown.png
23:43 <+bridge> [ddnet] <chillerdragon> Stack over trolls
