00:00 < bridge> <Ewan> ppl would really hate that in ddrace
00:00 < bridge> <Teero> ye ik thats why it would be cool to have the ddnet client support moving tiles on game layers
00:00 < bridge> <Teero> its pretty annoying since its only serverside on kog
00:01 < bridge> <Ewan> that's not how that works
00:01 < bridge> <Ewan> it's just not predicted by the client
00:02 < bridge> <Teero> yes
00:02 < bridge> <Ewan> it's still rendered fine
00:02 < bridge> <Teero> exactly
00:02 < bridge> <Teero> thats what i said
00:02 < bridge> <gerdoe> its not that easy to add both server side and client side i suppose
00:02 < bridge> <gerdoe> not that one-day task
00:03 < bridge> <Voxel> cant wait for a troll level with moving blocks
00:03 < bridge> <trml> there will perhaps be some questions about how to implement it. will it be possible to switch them on/off? will the tile move the player around when standing on it? and what if the player get stuck between a moving and a solid tile (or two moving tiles), should the player remain stuck or glitch out of it somehow?
00:03 < bridge> <Teero> single-pixel onetilers :justatest:
00:03 < bridge> <gerdoe> it means entities will use envelopes too kekw
00:04 < bridge> <Voxel> getting squished into the cieling:
00:04 < bridge> <Teero> instant death
00:04 < bridge> <Voxel> i dont think thats even coded in lol
00:05 < bridge> <gerdoe> let mapper choose lol
00:06 < bridge> <gerdoe> imagine being able to teleport tee body if its stuck
00:06 < bridge> <Voxel> >teleports it to finish
00:06 < bridge> <gerdoe> hey jao
00:06 < bridge> <gerdoe> chillerdragon:
00:07 < bridge> <Voxel> you scared him off!!
00:07 < bridge> <gerdoe> :santatrollet:
00:09 < bridge> <jao> :justatest:
00:09 < bridge> <Teero> https://cdn.discordapp.com/attachments/293493549758939136/1112865276594237572/image.png
00:09 < bridge> <Teero> as for the squshing ig
00:09 < bridge> <gerdoe> imagine every skin squashed
00:09 < bridge> <Teero> or something like this
00:09 < bridge> <Teero> xD that would be fun!
00:16 < bridge> <Voxel> hydraulic press
01:31 < bridge> <Learath2> No reason not to, we were offered to be shown the code KoG has, but I don't think they intend to go open source anytime soon, so they'll either have to extract the moving tiles part or show someone they trust that has time to implement it the code. Overall a lot of moving parts that just haven't aligned yet, that's all
01:32 < bridge> <Teero> Ah ok cool
01:47 < bridge> <Tater> Kog has a server download you can use to test it. In theory it would not be hard to test all possible interactions from that
02:11 < bridge> <heinrich5991> `.release()` doesn't destroy the pointer, it's more like getting the raw pointer out of the unique pointer and forgetting that it was a `unique_ptr` (and not calling its destructor)
02:11 < bridge> <Learath2> Yeah, not the best word choice from mr
02:11 < bridge> <Learath2> me*
02:44 < bridge> <Ellada> https://youtu.be/1AiYCVzy6YY
04:27 < bridge> <Ewan> a little irritating that clang-tidy doesn't distinguish between `const` and `constexpr` variable definitions when using the `readability-identifier-naming` checks
04:28 < bridge> <Ewan> because i want a `constexpr` definition to be named like a macro, in `UPPER_CASE`
04:28 < bridge> <Ewan> but i want `const` variable definitions (which i only use over constexpr when it's not a compile-time evaluable expression) to be named like normal variables (`CamelCase`)
04:30 < bridge> <Ewan> because i want a `constexpr` variable definition to be named like a macro, in `UPPER_CASE`
04:30 < bridge> <Ewan> but i want `const` variable definitions (which i only use over constexpr when it's not a compile-time evaluable expression) to be named like normal variables (`CamelCase`)
04:44 < bridge> <TsFreddie> https://cdn.discordapp.com/attachments/293493549758939136/1112934591636967544/mmexport1685414441242.png
04:46 < bridge> <TsFreddie> New guys code be like: I'm gonna ignore the key to audioevent mapping and make it order dependant instead
04:48 < bridge> <TsFreddie> Sorry for off-topic, haven't been so disappointed by some code in quite a while, had to find somewhere to complaint before i yell at colleagues.
06:15 < bridge> <Ewan> that's obnoxious
06:15 < bridge> <Ewan> there's not even an enumeration for the sound names
06:15 < bridge> <Ewan> you're just supposed to guess?
06:29 < bridge> <Ewan> ack another thing clang-tidy `readability-identifier-naming` doesn't consider is lambdas
06:29 < bridge> <Ewan> i name them like functions but it wants to name them like variables
06:42 < bridge> <TsFreddie> ok, just teached our QA guy how to use C# reflection to grab types without an assembly reference and I'm regretting it
06:42 < bridge> <TsFreddie> Should've just said i don't know
06:43 < bridge> <TsFreddie> The QA guy is a vim user (well, vim plugin in Jetbrians' rider)
06:43 < bridge> <TsFreddie> So that's cool
06:44 < bridge> <Ewan> fakevim or whatever
06:44 < bridge> <TsFreddie> idk, I don't use vim
07:45 < bridge> <ReiTW> Shouldn't be that hard knowing it's quad based
09:05 < bridge> <Ewan> -
09:05 < bridge> <deen> Haha, do note that this channel is logged though üòÑ
09:06 < bridge> <TsFreddie> I know.
09:06 < bridge> <Ewan> He knows
09:06 < bridge> <Ewan> :poggers2:
09:07 < bridge> <deen> I use this channel for work too. When I don't know how to do X I write "I'm disappointed that Rust doesn't support X", and the Rust fans will help me find the idiomatic solution üòÑ
09:07 < bridge> <TsFreddie> :poggers2:
09:07 < bridge> <Ewan> You are gaming the system
09:10 < bridge> <Ryozuki> ive been tricked
09:10 < bridge> <Ryozuki> but well i use it too for work
09:11 < bridge> <Ryozuki> e g const cast from ystday xd
09:11 < bridge> <Ewan> where are you using that
09:11 < bridge> <Ewan> beware
09:11 < bridge> <Ryozuki> read backlog
09:11 < bridge> <Ryozuki> i asked cuz i know its dangerous
09:11 < bridge> <Ryozuki> but i wont explain again xd
09:12 < bridge> <Ewan> :justatest: scrolling
09:12 < bridge> <Ryozuki> .
09:12 < bridge> <Ryozuki> @Ewan Green
09:14 < bridge> <Ewan> thanks
09:14 < bridge> <Ewan> yeah that‚Äôs pretty much it
09:15 < bridge> <TsFreddie> <a:Catxplosion:1082715870893195274> how do I stop myself from working 16hours day
09:16 < bridge> <deen> Find a hobby/girlfriend
09:16 < bridge> <Ewan> Or a bf
09:16 < bridge> <TsFreddie> while still meeting impossible ddl*
09:16 < bridge> <TsFreddie> :justatest:
09:16 < bridge> <deen> I'm only speaking from experience üòÑ
09:16 < bridge> <TsFreddie> also yes, a bf would be better
09:17 < bridge> <Ewan> Where do you get a hobby
09:18 < bridge> <deen> Switch to a western company with a more reasonable work culture. I haven't had any deadlines for a while. But I'm not sure how easy it is to work for them when living in China
09:18 < bridge> <TsFreddie> <a:Catxplosion:1082715870893195274>
09:18 < bridge> <TsFreddie> i'm fine with ddl
09:18 < bridge> <TsFreddie> but project manager doesn't understand how long things take
09:19 < bridge> <TsFreddie> we submit estimate, by the time it reaches the boss it was cut in half
09:19 < bridge> <deen> "This is a huge undertaking, I haven't done this before, so can't estimate the time. If you have to write something down, write 6 months."
09:19 < bridge> <TsFreddie> ye, and we got 3
09:19 < bridge> <TsFreddie> :hdog:
09:20 < bridge> <deen> I assumed you write 6 months when it will actually take 1
09:20 < bridge> <TsFreddie> well
09:20 < bridge> <TsFreddie> then I should write 2 years
09:21 < bridge> <Ryozuki> is it frowned upon to be gay in china?
09:21 < bridge> <TsFreddie> idk
09:21 < bridge> <TsFreddie> maybe
09:21 < bridge> <TsFreddie> so far everyone seems to be okay with it
09:21 < bridge> <Ryozuki> can u legally marry
09:21 < bridge> <TsFreddie> no
09:21 < bridge> <Ryozuki> thats the answer i guess
09:21 < bridge> <TsFreddie> :justatest:
09:22 < bridge> <TsFreddie> i've heard there's a hack to just get the gov to register each other as the other's legal guardian
09:22 < bridge> <cyberFighter> whyd u have to do him like that
09:23 < bridge> <TsFreddie> oh btw i have a boyfriend now
09:23 < bridge> <TsFreddie> not that exciting tho cuz we are in separate cities, and have only met twice.
09:24 < bridge> <Ewan> damn
09:24 < bridge> <Ewan> i need a job
09:24 < bridge> <Ewan> or a hobby
09:24 < bridge> <Ewan> or a gf any works
09:24 < bridge> <deen> Cool, congrats!
09:24 < bridge> <Ryozuki> mood
09:24 < bridge> <Ryozuki> xd
09:24 < bridge> <Ryozuki> i got a job and a hobby tho :BASEDHALT:
09:25 < bridge> <Ewan> something something sigma male
09:25 < bridge> <cyberFighter> i dont have either
09:25 < bridge> <cyberFighter> :justatest:
09:25 < bridge> <Ryozuki> how old r u
09:25 < bridge> <cyberFighter> 16
09:25 < bridge> <cyberFighter> maybe too early
09:25 < bridge> <Ewan> you hobby is school
09:25 < bridge> <Ewan> or job
09:25 < bridge> <Ewan> pick
09:26 < bridge> <Ewan> nobody in llvm server responded to my clang tidy questions yet
09:27 < bridge> <Ewan> it is unconsciously keeping me from going to bed
09:27 < bridge> <TsFreddie> make server mod
09:27 < ws-client> <JStar> www.google.com
09:27 < bridge> <cyberFighter> ?
09:27 < bridge> <Ewan> i can make code my job or hobby but not both
09:27 < ws-client> <JStar> all clang-tidy information u need
09:27 < bridge> <TsFreddie> ah bummer
09:27 < bridge> <TsFreddie> i did
09:27 < ws-client> <JStar> is in the internet
09:27 < bridge> <cyberFighter> oh i thought that was a bot advertising some site
09:28 < bridge> <Ewan> lol? Not even docs say that‚Äôs why i ask
09:28 < ws-client> <JStar> yeah let's make google great again xd
09:30 < bridge> <Ewan> üï≥Ô∏è
09:30 < bridge> <Ewan> I want to leave the house
09:30 < bridge> <Ewan> but idk where to go
09:31 < ws-client> <JStar> shopping
09:33 < ws-client> <ChillerDragon> https://duckduckgo.com/ *
09:34 < ws-client> <ChillerDragon> google is spyware
09:34 < ws-client> <JStar> duckduckgo is also american
09:34 < ws-client> <ChillerDragon> https://github.com/BugBugGo/BugBugGo
09:34 < ws-client> <ChillerDragon> then use bugbuggo
09:34 < ws-client> <ChillerDragon> its german
09:34 < ws-client> <JStar> https://www.ecosia.org/
09:34 < ws-client> <JStar> also german
09:34 < ws-client> <ChillerDragon> :tree:
09:34 < ws-client> <JStar> but they use bing backend
09:34 < ws-client> <JStar> and bing is america
09:34 < ws-client> <JStar> xd
09:34 < ws-client> <ChillerDragon> so does duckduckgo
09:34 < ws-client> <JStar> yeah
09:35 < ws-client> <ChillerDragon> bing masterrace
09:35 < ws-client> <ChillerDragon> microsft top G company
09:35 < ws-client> <JStar> nanosoft
09:35 < ws-client> <ChillerDragon> i am thinking about getting a load to buy ms stock
09:35 < bridge> <Gewinum> what phone are u using chillerdragon and jstar
09:35 < ws-client> <ChillerDragon> iphone
09:35 < ws-client> <JStar> some android with broken display from my sis xd
09:35 < ws-client> <ChillerDragon> premium libre applke device
09:36 < ws-client> <ChillerDragon> F jupsti
09:36 < bridge> <Gewinum> whats the purpose avoiding things like disc if u have iphone
09:36 < ws-client> <ChillerDragon> ur sis play tw?
09:36 < ws-client> <JStar> my other sis played it a bit
09:36 < ws-client> <ChillerDragon> wowo so many sis
09:36 < ws-client> <JStar> we are a family of equality
09:36 < ws-client> <JStar> 2 boys, 2 girls
09:37 < ws-client> <ChillerDragon> @Gewinum i tried the pinephone but it sucks ass xd
09:37 < ws-client> <ChillerDragon> 1 cup
09:37 < ws-client> <JStar> ah yeah i remember xDD
09:37 < ws-client> <JStar> ddnet on your pinephone
09:37 < ws-client> <JStar> 3 fps
09:37 < ws-client> <ChillerDragon> yes pog times
09:37 < ws-client> <ChillerDragon> still better than my 4090
09:37 < ws-client> <ChillerDragon> :justatest:
09:37 < ws-client> <JStar> true
09:37 < ws-client> <JStar> probably because it didnt use gnome
09:37 < ws-client> <ChillerDragon> axaxax
09:37 < bridge> <Ewan> who cares if it‚Äôs an American company
09:38 < ws-client> <ChillerDragon> libre mobile is just not there yet for me to enjoy it
09:38 < ws-client> <ChillerDragon> linux desktop is amazing
09:38 < ws-client> <ChillerDragon> but linux mobile breaks me
09:38 < ws-client> <ChillerDragon> i just try to avoid using the phone at all cost
09:38 < bridge> <Ewan> i embrace the phone
09:38 < ws-client> <JStar> @Ewan if you didnt know, Linux comes from Europe. We value our privacy
09:38 < bridge> <Ewan> what?
09:38 < ws-client> <JStar> We are proud of it
09:39 < bridge> <Ewan> linux comes from anywhere the contributors are
09:39 < bridge> <Ewan> many of them are American since most big tech companies are American and dump such money into OSS
09:39 < ws-client> <JStar> yeah yeah sure
09:39 < bridge> <Gewinum> amerikan much money
09:39 < bridge> <Ewan> that argument is silly lol
09:39 < ws-client> <JStar> and they also dump all my privacy into their databases
09:40 < ws-client> <ChillerDragon> gotta backup the privacy to make it safe
09:40 < bridge> <Gewinum> hmm so the linuks is spyware
09:40 < ws-client> <ChillerDragon> if you do not want to be spied on get a cabin in the woods
09:40 < ws-client> <ChillerDragon> no other way
09:41 < ws-client> <JStar> @Ewan the truth is, european companies are too bad to collect data succesfully, so politics were like: Ah nice no lobby against it, lets sell it as we love privacy xd
09:41 < ws-client> <ChillerDragon> xd
09:41 < ws-client> <JStar> if silicon valley would be in europe it wouldnt be like it here
09:41 < ws-client> <ChillerDragon> skill issue
09:41 < bridge> <Gewinum> im going to get a cabin in tue woods
09:41 < bridge> <David*¬∞Villa> Hello, 
09:41 < bridge> <David*¬∞Villa> sorry to bother you devs, but i have to ask:
09:41 < bridge> <David*¬∞Villa> Is it in progress to develop the possibility to return to the old freeze design with stars instead of a bar? Deen told me some long time ago to give it a try and get used to the new design. Since I was forced to, i gave it a try and i still dont like it üòÑ
09:41 < bridge> <David*¬∞Villa> I would REALLY apreciate if you could add the possibility for costumizing the freeze animation :heartw:
09:42 < bridge> <Ewan> I‚Äôm not protecting malicious privacy practices but to say that software is inherently bad because it‚Äôs American is insane
09:42 < ws-client> <JStar> no
09:42 < ws-client> <ChillerDragon> my life hack was replacing the freeze skin by something so ugly that i forgot stars existed
09:43 < bridge> <Ewan> ‚Äúno‚Äù :gigachad:
09:44 < bridge> <Ryozuki> no
09:45 < ws-client> <JStar> @Ewan you have to understand one thing. Europe is not America and America is not Europe. Why do Americans hate China so much? Because they don't trust them. American companies did do weird shit, like spying the german chancellor. There simply is always mistrust against it here. You are right, most developers in America are probably good ppl. But capitalism wants more money, and data is money
09:45 < ws-client> <JStar> so american companies = spy  => money
09:45 < ws-client> <JStar> simple
09:45 < ws-client> <ChillerDragon> spy2win
09:45 < ws-client> <ChillerDragon> thats why heinrich added teehistorian
09:45 < bridge> <Ewan> Americans hate China?
09:46 < ws-client> <ChillerDragon> to maximise profits
09:46 < ws-client> <JStar> ofc not all
09:46 < ws-client> <JStar> China is soon overtaking american in terms of total economy
09:47 < ws-client> <JStar> Ofc most americans don't like this fact
09:47 < ws-client> <JStar> and not only the Trump fans, also Biden shoots against them
09:47 < ws-client> <ChillerDragon> china evil is big propaganda even i got brainwashed into thinking that tiktok eats children soulds
09:47 < bridge> <Ewan> I can understand how you might think that but the majority of Americans don‚Äôt give a single shit
09:47 < ws-client> <ChillerDragon> you sure?
09:47 < ws-client> <JStar> I wouldn't be so sure about it
09:47 < bridge> <Ryozuki> üá™üá∫
09:47 < bridge> <Ryozuki> best
09:47 < bridge> <Ewan> Very few are lucky enough to have such little struggle in their life to get that invested in politics
09:47 < bridge> <Ryozuki> china and us bad
09:47 < ws-client> <JStar> they might not be actively be against china
09:48 < bridge> <Ryozuki> :gigachad:
09:48 < ws-client> <JStar> but if trump says, it's chinas fault. Suddenly all agree xd
09:49 < ws-client> <ChillerDragon> china virus
09:49 < ws-client> <JStar> all egos
09:49 < ws-client> <JStar> when do we create an open world
09:50 < ws-client> <ChillerDragon> the planet too big
09:50 < bridge> <cyberFighter> hi chiller
09:50 < ws-client> <ChillerDragon> coberfita
09:50 < bridge> <Ewan> I have lived in the U.S.A. my whole life, people who consciously involve themselves in politics to the point of legitimately hating China for that reason are the loud minority
09:50 < ws-client> <ChillerDragon> poor david wants to talk about freeze stars and yall spam it away with china offtopic
09:51 < bridge> <Ewan> Freeze stars just use an older client
09:51 < bridge> <Ewan> Can‚Äôt have any improvements without someone complaining
09:51 < bridge> <cyberFighter> i dont understand why people want freeze stars so much
09:53 < ws-client> <JStar> @Ewan i still doubt it tbh xd. When u'd ask ppl to say 1 good and one bad thing about google in europe. it's probably: i can search anything -- they steal my data xdd
09:54 < bridge> <Ewan> Same in U.S.A.
09:54 < bridge> <Ewan> I‚Äôm not pretending to know how it works in Europe because I‚Äôve never been there
09:54 < ws-client> <JStar> the mistrust against a different country is always bigger tho
09:54 < bridge> <Ewan> Why are you so sure we don‚Äôt care about privacy
09:55 < ws-client> <JStar> Different country, different cultures, different laws
09:55 < ws-client> <JStar> Why are guns allowed in USA?
09:55 < ws-client> <JStar> it's obvious that they cause so much mass shootings
09:55 < bridge> <Ewan> The loud minorities
09:55 < ws-client> <JStar> and still they seem to have the power
09:55 < ws-client> <JStar> cant be that minor
09:57 < bridge> <Ewan> Many have been convinced that guns are necessary because even if they wouldn‚Äôt think they need it to ‚Äòprotect themselves‚Äô, here there is the prospect of the person you‚Äôre defending yourself against having a gun
09:58 < bridge> <Ewan> So now owning a gun they at a statistical advantage in this theoretical situation that doesn‚Äôt really happen often enough to matter as much as the gun-advocates say
09:58 < bridge> <Ewan> Screwed up situation
09:59 < bridge> <Ewan> I am personally anti-gun, most people I know are anti-gun, and even those that aren‚Äôt are rarely super into it. Doesn‚Äôt mean they wouldn‚Äôt want to have one ‚Äújust in case‚Äù
10:00 < bridge> <Ewan> Gun control is partially about selling a lifestyle that aligns with existing right-wing views, and for most people who are pro-gun it‚Äôs no longer about whether having them is a good idea, it‚Äôs about protecting their bullshit rights out of principle
10:26 < bridge> <uguz> ye
10:26 < bridge> <uguz> kali linux
10:27 < bridge> <Ewan> why pfp
10:36 < bridge> <Jupstar ‚ú™> Mhh, then i dunno. Can u try the version from the website?
10:40 < bridge> <ReiTW> :justatest:
10:52 < bridge> <Ewan> are we hacking yet ü§ì
10:53 < ws-client> <ChillerDragon> ?
10:56 < bridge> <uguz> ye it worked thanks
10:57 < bridge> <uguz> little brother installed that shit idk
10:57 < bridge> <uguz> were using windows
10:57 < bridge> <Ewan> :brownbear:
10:58 < bridge> <Jupstar ‚ú™> It's great. U have a good brother
10:58 < bridge> <Ryozuki> yea my brother got hacks its not my fault
10:58 < bridge> <uguz> no idea how i get my main games on this os
10:59 < bridge> <Ryozuki> I recently let my brother play this amazing game. But when I got home my account had been banned until February 21st. My brother said he didn't know why this happened. Until I found out he had installed a hacked version of Ddrace. I'm sorry for what happened, but please release my account again. I really like this game, and I didn't want to be without playing it for so long. I promise this will never happen again
10:59 < bridge> <Jupstar ‚ú™> With steam most games should work actually
10:59 < bridge> <uguz> haha
10:59 < bridge> <uguz> some games are not in steam
10:59 < bridge> <Jupstar ‚ú™> U can still add them there
11:00 < bridge> <Jupstar ‚ú™> Add steam foreign games
11:00 < bridge> <uguz> no idea what you mean
11:00 < bridge> <Ryozuki> add non steam game
11:01 < bridge> <Ryozuki> and then u can use proton
11:01 < bridge> <uguz> but how i install them
11:01 < bridge> <Ryozuki> https://lutris.net/
11:02 < bridge> <Cellegen | RiH> you can run the file from ddnet linux folder as an executable too, at least on ubuntu based os
11:02 < bridge> <uguz> thanks mate
11:02 < bridge> <uguz> not speaking about ddnet haha
11:02 < bridge> <uguz> Minecraft, league of legends
11:02 < bridge> <Ryozuki> minecraft is linux native
11:03 < bridge> <Ryozuki> league sucks, play dota
11:03 < bridge> <cyberFighter> as opposed to an ubuntu cringe os
11:03 < bridge> <uguz> well i played some rounds dota2 but i feel more comfortable with lol
11:03 < bridge> <Ryozuki> :Sigh:
11:04 < bridge> <Ewan> So true
11:04 < bridge> <uguz> chess still the best game
11:04 < bridge> <Ryozuki> magnus goat
11:04 < bridge> <uguz> +
11:04 < bridge> <uguz> i beat this magnus random dw
11:05 < bridge> <Ryozuki> i just noticed who in ur pfp is xd
11:05 < bridge> <uguz> the madafucking top g
11:05 < bridge> <uguz> Don't correct me
11:06 < bridge> <bencie> https://cdn.discordapp.com/attachments/293493549758939136/1113030737181016074/Screenshot_20230530-110635.jpg
11:06 < bridge> <bencie> this guy?
11:07 < ws-client> <JStar> the guy owned by mf legend greta
11:07 < bridge> <Ryozuki> xd
11:07 < bridge> <Ryozuki> why he uses anime girls
11:07 < bridge> <Ryozuki> she is from oshi no ko iirc
11:08 < bridge> <Ryozuki> is he a weeb üíÄ
11:08 < bridge> <bencie> he's been posting a lot of pics with anime girls lmao
11:11 < bridge> <Ewan> he is a douche canoe
11:18 < bridge> <heinrich5991> adding this (in a way that works with the current system) would be okay in principle. we'd need someone to do this. Learath2 said he might do it in the far future
11:22 < bridge> <Learath2> You'll need to find a developer to implement it. I'm interested in adding an option for it, but I don't have time. The people who do have time aren't interested in using that time to bring back an old option for a handful of people
11:34 < bridge> <Nouaa> @c0d3d3v was working on it months ago, but I dunno if he has a prototype or smth
11:38 < bridge> <Learath2> Integer overflow in brain. Man had so many women around he accidentally revirginized himself
11:44 < bridge> <Ryozuki> https://www.phoronix.com/news/Vulkan-1.3.251-Released
11:44 < bridge> <Ryozuki> @Jupeyy_Keks
11:44 < bridge> <Ryozuki> epic logo
11:45 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1113040598514024459/vulkan.webp
11:47 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1113040900944306306/Vulkan-1.3-White-BG-sml_.png
11:58 < bridge> <Ewan> sweet
12:04 < bridge> <Jupstar ‚ú™> Hot
12:45 < bridge> <TsFreddie> i  like valve
12:48 < bridge> <TsFreddie> i'm actually curious when big companies contributing to open standard, is it a executive decision or just some guy in a technical department thought it might be fun to work on
12:54 < bridge> <Ryozuki> @Learath2 so bad mlir is not const correct
12:54 < bridge> <Ryozuki> ```cpp
12:54 < bridge> <Ryozuki>   /// Return the dialect registry associated with this context.
12:54 < bridge> <Ryozuki>   const DialectRegistry &getDialectRegistry();
12:54 < bridge> <Ryozuki> ```
12:54 < bridge> <Ryozuki> this should be const
12:54 < bridge> <Ryozuki> `const DialectRegistry &getDialectRegistry() const;`
12:55 < bridge> <Ryozuki> ```cpp
12:55 < bridge> <Ryozuki>  const DialectRegistry &MLIRContext::getDialectRegistry() {
12:55 < bridge> <Ryozuki>    return impl->dialectsRegistry;
12:55 < bridge> <Ryozuki>  }
12:55 < bridge> <Ryozuki> ```
12:55 < bridge> <Ryozuki> the impl
13:01 < bridge> <David*¬∞Villa> I'll pay you with free membership of my onlyfans, If you inplement it :justatest:
13:01 < bridge> <c0d3d3v> @heinrich5991 @Learath2 @Nouaa @David*¬∞Villa @deen  Big sorry from my side. 
13:01 < bridge> <c0d3d3v> Originally my thought was to add the new design only if there is an option to return to the original design. But at that time it was decided together to force only the new design. Meanwhile I promised some players to implement such an option (e.g. AOE). But because so many things have happened (to me) and I was mentally not so well, I had no motivation to spend time to implement it. But if it's ok for everyone now I will try to implement the featur
13:02 < bridge> <Learath2> My only requirement from it is that it happens client side. Please don't just make it a serverside toggle
13:03 < bridge> <Learath2> Also no need to apologize. It's all volunteer work. If you feel like doing something, do it, if not don't. It's not your responsibility alone
13:03 < bridge> <Jupstar ‚ú™> wb
13:04 < bridge> <David*¬∞Villa> God send you. Thx ‚ù§Ô∏è
13:04 < bridge> <David*¬∞Villa> Don't stress yourself since it's volunteer Work. I'm just glad to know someone ist working on it üôÇ
13:05 < bridge> <c0d3d3v> Stars are currently only server side generated. But I can try my best to generate them client side.
13:06 < bridge> <Nouaa> hope you're feeling better
13:10 < bridge> <Ryozuki> @Learath2 this is why rust is better
13:10 < bridge> <Ryozuki> const by default
13:11 < bridge> <Ryozuki> otherwise
13:11 < bridge> <Ryozuki> people forget
13:11 < bridge> <Ryozuki> even llvm devs
13:11 < bridge> <Ryozuki> im mad
13:11 < bridge> <Ryozuki> <a:aPES2_ArriveExplosion:903233567868473344>
13:16 < bridge> <ReiTW> stars position only is sent by the server, the rest is client-side, even the stars movement (going out of the tee etc..)
13:17 < bridge> <ReiTW> stars position & direction only is sent by the server, the rest is client-side, even the stars movement (going out of the tee etc..)
13:18 < bridge> <Cellegen | RiH> league has its own wine version, but very fucking unstable
13:18 < bridge> <Cellegen | RiH> ge-lol version x
13:19 < bridge> <QBQAQ> I want to start the local server, but it reports an error and flashes back
13:19 < bridge> <QBQAQ> why
13:19 < bridge> <QBQAQ> https://cdn.discordapp.com/attachments/293493549758939136/1113064104236691527/image.png
13:19 < bridge> <QBQAQ> im noooooooooooooooooooooooob
13:28 < bridge> <Mr.Gh0s7> is that the full log?
13:56 < bridge> <c0d3d3v> yes I know... thats what I meant. Thanks
13:59 < bridge> <QBQAQ> maybe?idk where the log is
13:59 < bridge> <QBQAQ> its terminal's last lines
14:00 < bridge> <Mr.Gh0s7> what is the whole log that gets displayed in terminal?
14:01 < bridge> <QBQAQ> there is no error in terminal,i connected to lan server and after 1second it just broke down
14:02 < bridge> <QBQAQ> this is the last lines
14:02 < bridge> <QBQAQ> wired
14:02 < bridge> <Mr.Gh0s7> it's probably the map then. But I am not sure since the info you provided is very limited ¬Ø\_(„ÉÑ)_/¬Ø
14:04 < bridge> <QBQAQ> sorry for occupied your time and Thank you
14:05 < bridge> <QBQAQ> üò≠
14:06 < bridge> <QBQAQ> failed to open 'myServerconfig.cfg'
14:06 < bridge> <QBQAQ> i find it
14:06 < bridge> <QBQAQ> https://cdn.discordapp.com/attachments/293493549758939136/1113076043725676594/image.png
14:07 < bridge> <QBQAQ> i cant find myServerConfig.cfg
14:07 < bridge> <QBQAQ> https://cdn.discordapp.com/attachments/293493549758939136/1113076277612662857/image.png
14:07 < bridge> <QBQAQ> lol
14:08 < bridge> <ReiTW> @QBQAQ if you could copy the content of the logs directly & show, maybe it is just misconfigured but running
14:10 < bridge> <QBQAQ> but when i connect to my server, it just broke down in 1second
14:34 < bridge> <fokkonaut> my server currently sends points, not time, i did a little hack there. once time score is properly added (i think it is now?) i will migrate to it
14:37 < bridge> <Ryozuki> it is not
14:37 < bridge> <Ryozuki> now
14:37 < bridge> <Ryozuki> it is
14:38 < bridge> <Ryozuki> @fokkonaut send client `"client_score_kind": "time"`
14:45 < bridge> <fokkonaut> ah perfect
15:04 < bridge> <Ryozuki> https://github.com/salsa-rs/salsa
15:04 < ws-client> <JStar> ryos
15:04 < ws-client> <JStar> rustup cant download a file, even tho when i download over the URL it says manually it works
15:04 < ws-client> <JStar> any idea?
15:06 < ws-client> <JStar> The rust docs
15:07 < ws-client> <JStar> maybe im out of disk :joy:
15:10 < bridge> <Ryozuki> wat
15:10 < bridge> <Ryozuki> xs
15:10 < ws-client> <JStar> yeah yeah sad af 
15:11 < ws-client> <JStar> the rust doc uses >600 MB :joy:
15:12 < ws-client> <JStar> the target dir of my project uses fckn 18 GBytes xd
15:12 < ws-client> <JStar> wtf is it doing there xD
15:16 < ws-client> <JStar> chillerdragon: when will u be a server hoster?
15:17 < ws-client> <JStar> apparently 18gbyte build data is sane
15:19 < ws-client> <ChillerDragon> i am a server hoster
15:19 < ws-client> <JStar> $/month?
15:19 < ws-client> <JStar> how much disk space
15:20 < ws-client> <ChillerDragon> my pricing is a bit rigged
15:20 < ws-client> <ChillerDragon> what do you need it for?
15:20 < ws-client> <ChillerDragon> do you need ssh?
15:20 < ws-client> <JStar> host some projects
15:20 < ws-client> <ChillerDragon> i am not a vserver hoster
15:21 < ws-client> <ChillerDragon> i can host you a single project if i like the project
15:21 < ws-client> <ChillerDragon> or if you pay :D 
15:21 < ws-client> <JStar> xd
15:21 < ws-client> <JStar> guess i'll need to use my homeserver, didnt know building in debug mode uses 18gbyte build data
15:21 < ws-client> <JStar> and VPS on the internet only have like 20-40gb ssd
15:21 < ws-client> <JStar> so this is kindof a problem
15:23 < bridge> <Patiga> @Jupeyy_Keks (JStar) I also regularely run `cargo clean` in my bigger projects to gain back 10GB of space which accumulates over time
15:23 < ws-client> <ChillerDragon> thats why i run my minecraft server on a home server
15:23 < ws-client> <ChillerDragon> my mc world uses 1.8tb
15:23 < ws-client> <JStar> i did cargo clean, lets see how much the rebuild costs :D
15:23 < bridge> <Ryozuki> https://github.com/rochacbruno/rust_memes
15:23 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1113095457602801734/safety_speed_conc.png
15:23 < ws-client> <JStar> nice 16gb less xd
15:24 < bridge> <Ryozuki> @Learath2 i found my logo!
15:24 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1113095540738097232/strikeforce.png
15:24 < bridge> <Patiga> JStar nice ^^
15:25 < ws-client> <JStar> does it happen bcs of package upgrades?
15:25 < ws-client> <ChillerDragon> we really need pings dont we jupsti?
15:25 < bridge> <cyberFighter> your whole server is "a little hack"
15:25 < ws-client> <JStar> ChillerDragon: i take every feature u have xd
15:25 < ws-client> <ChillerDragon> xd
15:26 < bridge> <fokkonaut> always has been, but works better than many other mods :P
15:26 < bridge> <fokkonaut> its the small details u have to take care of
15:26 < bridge> <cyberFighter> antiping:
15:26 < bridge> <fokkonaut> antiping is to be expected not to work with custom weapons :D
15:28 < bridge> <cyberFighter> @fokkonaut btw i got tunelock onto a server and prediction is weird even with antiping off
15:28 < bridge> <cyberFighter> @fokkonaut btw i got tunelock onto an online server and prediction is weird even with antiping off
15:28 < bridge> <cyberFighter> (at least to me)
15:28 < bridge> <fokkonaut> Of course, the client doesnt know about it.
15:28 < bridge> <fokkonaut> Everyone with different tunes as you will look buggy
15:29 < bridge> <cyberFighter> no, if i have the tunelock MYSELF
15:29 < bridge> <cyberFighter> its still buggy
15:29 < bridge> <fokkonaut> in how far?
15:29 < bridge> <fokkonaut> did you move all of the code?
15:29 < bridge> <cyberFighter> wdym how far
15:29 < bridge> <fokkonaut> in how far is it buggy
15:30 < bridge> <fokkonaut> i.e. what is happening
15:30 < bridge> <cyberFighter> my tee moves at like 10 fps
15:30 < bridge> <cyberFighter> instead of normal
15:31 < bridge> <fokkonaut> which tunedid u set
15:31 < bridge> <Ryozuki> jupstar not gonna lie
15:31 < bridge> <Ryozuki> since u went to that chat
15:31 < bridge> <Ryozuki> its like i ignore ur messages
15:31 < bridge> <cyberFighter> ground_friction 1
15:31 < bridge> <Ryozuki> less visbility idk
15:31 < bridge> <Ryozuki> also i tend to do cargo clean every once in a while
15:32 < bridge> <Ryozuki> specially with nightly rust updates
15:32 < bridge> <Ryozuki> tbh idk if cargo itself deletes old artifacts
15:32 < bridge> <Ryozuki> and the big target build dir.. well thats what u get with static linking
15:32 < bridge> <Ryozuki> and lot of debug info
15:32 < bridge> <fokkonaut> then for some reason it didnt get updated correctly to your client.
15:32 < bridge> <fokkonaut> cant tell why right now, i dont even know how you set up the server, so if you remember, on my server it was working
15:34 < bridge> <Cellegen | RiH> Window dragger has been made and I'm happy with this method, this way it doesn't need to update every frame, but only when it needs to update. :feelsbossman:
15:34 < bridge> <Cellegen | RiH> https://cdn.discordapp.com/attachments/293493549758939136/1113098049707851817/2023-05-30_15-32-12.mp4
15:34 < bridge> <Cellegen | RiH> Next up is making different variations of windows and the console will be set up in no time
15:35 < ws-client> <JStar> next level GUI
15:38 < bridge> <Ryozuki> jupstar
15:38 < bridge> <Ryozuki> do u think a programming language focused on making guis but compiled is feasible
15:38 < bridge> <Ryozuki> i wonder how that would look
15:38 < bridge> <Cellegen | RiH> :justatest:
15:38 < bridge> <Cellegen | RiH> perhaps
15:38 < bridge> <Cellegen | RiH> godot is basically that
15:39 < bridge> <cyberFighter> @fokkonaut is there no tune lock dump command
15:39 < bridge> <fokkonaut> there is
15:40 < bridge> <fokkonaut> i dont remember if it was f-ddrace only or also in the pr tho
15:40 < bridge> <cyberFighter> oh
15:40 < bridge> <cyberFighter> found it
15:40 < bridge> <fokkonaut> nice
15:40 < bridge> <Jupstar ‚ú™> It sucks, but it's possible. E.g. by using wasm and hot reload the module. Or by having something like a url that automatically calls the UI u working on.
15:40 < bridge> <cyberFighter> what about tune lock reset
15:40 < bridge> <cyberFighter> and leave
15:40 < bridge> <Jupstar ‚ú™> Best would be a rust interpreter ^^
15:40 < bridge> <Jupstar ‚ú™> And later compile
15:41 < bridge> <cyberFighter> (not sure what tune lock leave would be used for but its a command for tunezones)
15:42 < bridge> <Ryozuki> meh
15:42 < bridge> <Ryozuki> i am making edlang
15:42 < bridge> <Ryozuki> but maybe wanted to make it more domain specific
15:43 < bridge> <Ryozuki> but idk an interesting domain
15:45 < bridge> <heinrich5991> yes, client-side would be good, so the server doesn't get more complex due to this
15:45 < bridge> <Ryozuki> @TsFreddie did u update the chinese community on using the ddnet wiki? i think it has way more content now https://wiki.ddnet.org/wiki/Main_Page/zh
15:46 < bridge> <Ryozuki> also there is a new chinese translator working a lot it seems
15:49 < bridge> <TsFreddie> i did
15:51 < bridge> <Ryozuki> @TsFreddie Ë∞¢Ë∞¢
15:51 < bridge> <Ryozuki> :justatest:
15:51 < bridge> <Ryozuki> im chinese now
15:51 < bridge> <TsFreddie> https://github.com/TeeworldsCN/teeworlds.cn/commit/e491ddf9ae8cba590bf5b3c7cb1e964e77942124
15:51 < bridge> <TsFreddie> just did this for good mesure
15:53 < bridge> <Ryozuki> https://www.unison-lang.org/
15:53 < bridge> <Ryozuki> i think it has meta programming capabilities
15:53 < bridge> <Ryozuki> lisp of the future?
15:54 < bridge> <Ryozuki> > Many dependency conflicts arise from definitions competing for the same names. Since Unison references code by hash instead of by name, an entire class of conflicts can be eliminated.
15:54 < bridge> <TsFreddie> nothing beats https://wy-lang.org/
16:06 < bridge> <Mr.Gh0s7> I recently found this site https://exercism.org/ which has "courses"  for many languages. Here's the one for unison https://exercism.org/tracks/unison
16:07 < bridge> <Cellegen | RiH> no gdscript :kek:
16:07 < bridge> <Cellegen | RiH> let's made one and teach them how to make an editor :toptri:
16:07 < bridge> <Cellegen | RiH> let's make one and teach them how to make an editor :toptri:
16:07 < bridge> <Mr.Gh0s7> üòÜ
16:08 < bridge> <Cellegen | RiH> some languages listed there are extension eh?
16:08 < bridge> <Cellegen | RiH> looks good tbh
16:09 < bridge> <Mr.Gh0s7> https://github.com/exercism
16:16 < ws-client> <ChillerDragon> jopsti u here?
16:22 < bridge> <Jupstar ‚ú™> Hi
16:23 < ws-client> <ChillerDragon> ah nice
16:23 < ws-client> <ChillerDragon> go reload webchat
16:23 < ws-client> <JStar2> user is already logged in
16:23 < ws-client> <JStar2> xd
16:23 < ws-client> <ChillerDragon> classic
16:23 < ws-client> <ChillerDragon> wait a second
16:24 < ws-client> <ChillerDragon> btw it now sets a 30day cookie with last login name
16:24 < ws-client> <ChillerDragon> auto highlights the input field
16:24 < ws-client> <JStar2> epic
16:24 < ws-client> <ChillerDragon> so next time it shoould just be open url press enter and u in
16:24 < ws-client> <ChillerDragon> oh @JStar2 and pings
16:24 < ws-client> <ChillerDragon> also this works JStar2
16:24 < ws-client> <ChillerDragon> i hope xd
16:25 < ws-client> <JStar2> lol, nice xD
16:25 < ws-client> <ChillerDragon> pog
16:25 < bridge> <Jupstar ‚ú™> @Jupeyy_Keks
16:25 < ws-client> <ChillerDragon> ?xd
16:25 < ws-client> <JStar2> mhh i see, i need to use my dc name then
16:25 < ws-client> <ChillerDragon> yes
16:25 < ws-client> <ChillerDragon> this should ping @Jupstar ‚ú™ 
16:26 < ws-client> <JStar2> i mean Jupeyy_Keks
16:26 < ws-client> <ChillerDragon> who dis
16:26 < ws-client> <JStar2> else im not pinged
16:26 < ws-client> <JStar2> its my "real" discord tag
16:26 < ws-client> <ChillerDragon> wait so @Jupstar ‚ú™  never pinged u?
16:26 < ws-client> <JStar2> it does
16:26 < ws-client> <ChillerDragon> but?
16:26 < ws-client> <JStar2> bcs on ddnet server i have nickname
16:26 < ws-client> <ChillerDragon> a
16:26 < ws-client> <JStar2> but if smn pings me on discord, it says Jupeyy_Keks
16:26 < ws-client> <ChillerDragon> i see
16:30 < bridge> <cyberFighter> anooother game crash
16:30 < bridge> <Jupstar ‚ú™> U the alt tab guy?
16:30 < bridge> <Jupstar ‚ú™> I already told u simply use opengl
16:31 < bridge> <cyberFighter> i should just deete steam
16:31 < bridge> <cyberFighter> i should just delete steam
16:31 < bridge> <Jupstar ‚ú™> Is it BCS of steam or what?
16:31 < bridge> <Jupstar ‚ú™> Blame GPU manufacturer for not giving life time driver support. Xd
16:32 < bridge> <cyberFighter> doesnt happen if i dont use steam or if i dont use opengl as far as i know
16:33 < bridge> <Jupstar ‚ú™> Rip to u, but simply use opengl 3.3
16:33 < bridge> <Jupstar ‚ú™> With ur setup u probably don't care about more fps do u?
16:34 < bridge> <Ryozuki> i sent this at work, someone replied with this https://nas.sr/%D9%82%D9%84%D8%A8/
16:34 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1113113257352364162/repl.png
16:35 < bridge> <TsFreddie> epic
16:35 < bridge> <Ryozuki> https://en.wikipedia.org/wiki/Qalb_(programming_language)
16:36 < bridge> <Jupstar ‚ú™> But it was no assert right?
16:36 < bridge> <cyberFighter> i get 30 fps if i open the  scoreboard in a full server with opengl
16:37 < bridge> <Jupstar ‚ú™> That's as much as any switch game üòÇ
16:37 < bridge> <cyberFighter> switch sux
16:38 < bridge> <Jupstar ‚ú™> Mh i dunno bro. Just be mainstream and buy new hardware to enjoy the epicness of hightech
16:39 < bridge> <cyberFighter> i am broke
16:39 < bridge> <Jupstar ‚ú™> Sell your liver
16:39 < bridge> <Jupstar ‚ú™> Kidneys
16:39 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113114586862862346/image.png
16:40 < bridge> <cyberFighter> i mean i can post one
16:40 < bridge> <Jupstar ‚ú™> I mean send me the latest one
16:40 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113114738998648892/DDNet_win64-steam_crash_log_2023-05-30_15-33-13_11152_8049f74bad64b7281da0e7f824d115e3a9238c2f.RTP
16:40 < bridge> <Jupstar ‚ú™> But i probably can't help u tbh
16:40 < bridge> <Jupstar ‚ú™> Alt tab crashes are weird
16:41 < bridge> <Jupstar ‚ú™> No assert logs right?
16:41 < bridge> <cyberFighter> nope
16:41 < bridge> <Jupstar ‚ú™> Ok ;/
16:43 < ws-client> <ChillerDragon> i added desktop notifcations lemme know if it works on your browser jopsti
16:43 < ws-client> <ChillerDragon> they optional and opt in with da big bell
16:44 < bridge> <cyberFighter> @fokkonaut lmao
16:44 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113115669987348580/DDNet_Client_2023-05-30_16-43-04.mp4
16:45 < ws-client> <JStar3> i dont see them chiller
16:46 < ws-client> <JStar3> but i dont like them anyway ;)
16:47 < ws-client> <ChillerDragon> ok good
16:47 < ws-client> <ChillerDragon> but which browser do you use? which version?
16:47 < ws-client> <ChillerDragon> u on debian? xd
16:48 < ws-client> <JStar3> firefox dev edition: 114.0b9 (64-Bit)
16:48 < ws-client> <pinger> @ChillerDragon pinger
16:48 < bridge> <TsFreddie> pinger
16:48 < ws-client> <pinger> !
16:48 < ws-client> <pinger> if you click the bell nothing happens? @JStar3
16:48 < ws-client> <JStar3> what bell :joy:
16:49 < ws-client> <pinger> reload page
16:49 < ws-client> <JStar3> i did
16:49 < ws-client> <pinger> under ddnet sever logo
16:49 < ws-client> <JStar> ah troll
16:49 < ws-client> <pinger> https://zillyhuhn.com/cs/.1685458150.png
16:49 < ws-client> <JStar> black on black
16:49 < ws-client> <JStar> huge troll
16:49 < ws-client> <pinger> how is this hidden? xd
16:49 < ws-client> <JStar> yeah ok
16:49 < bridge> <TsFreddie> dm me this
16:49 < ws-client> <pinger> now tab out
16:49 < ws-client> <JStar> i have monitor brightness low
16:49 < ws-client> <pinger> @JStar get pinged
16:49 < ws-client> <pinger> u only get notification when tabbed out of browser tab
16:50 < ws-client> <pinger> @JStar @JStar @JStar @JStar
16:50 < ws-client> <pinger> @JStar @JStar
16:50 < ws-client> <pinger> @JStar @JStar
16:50 < ws-client> <pinger> @JStar @JStar
16:50 < ws-client> <JStar> thanks
16:50 < ws-client> <pinger> does it worek?xd
16:50 < ws-client> <JStar> wait
16:50 < ws-client> <JStar> JStar
16:50 < ws-client> <TsFreddie> oh i saw the url
16:50 < ws-client> <JStar> Jstar
16:50 < ws-client> <JStar> JStar
16:50 < ws-client> <JStar> i dunno
16:50 < ws-client> <pinger> u cant ping ur self
16:50 < ws-client> <pinger> u have to be tabbed out
16:50 < ws-client> <JStar> write a text maybe
16:50 < ws-client> <pinger> @JStar switch tab ffs
16:50 < bridge> <cyberFighter> JStar
16:50 < ws-client> <pinger> JStar
16:50 < ws-client> <pinger> JStar
16:50 < ws-client> <JStar> yeah
16:50 < bridge> <TsFreddie> spam
16:50 < ws-client> <pinger> worked?
16:50 < bridge> <Ryozuki> spam
16:50 < ws-client> <JStar> works
16:51 < ws-client> <pinger> nice pog
16:51 < ws-client> <ChillerDragon> :justatest:
16:51 < ws-client> <JStar> gg
16:51 < ws-client> <ChillerDragon> fuck what happend to mr justatest
16:51 < bridge> <Ryozuki> the emoji doesnt work anyway
16:51 < ws-client> <JStar> what spam TsFreddie?
16:51 < bridge> <Ryozuki> :justatest:
16:51 < ws-client> <JStar> it's science
16:51 < bridge> <Ryozuki> u all
16:51 < ws-client> <JStar> applied science
16:51 < bridge> <TsFreddie> worse ham
16:51 < ws-client> <ChillerDragon> why do the images not show omg
16:52 < bridge> <TsFreddie> reply parser when
16:52 < bridge> <Robyt3> this one looks like it has to do with the Steam overlay
16:52 < bridge> <Robyt3> ```
16:52 < bridge> <Robyt3> amdvlk64.dll!vk_icdNegotiateLoaderICDInterfaceVersion+0x2f07a
16:52 < bridge> <Robyt3> SteamOverlayVulkanLayer64.dll!vkGetSwapchainImagesKHR+0x42e
16:52 < bridge> <Robyt3> graphics-hook64.dll!dummy_debug_proc+0x86c7
16:52 < bridge> <Robyt3> vulkan-1.dll!vkDestroyDescriptorPool+0x47d1d
16:52 < bridge> <Robyt3> ```
16:52 < ws-client> <ChillerDragon> reply is the worst
16:52 < bridge> <Jupstar ‚ú™> Mh but he is the only person I know having this
16:52 < bridge> <Jupstar ‚ú™> And he had ancient hardware
16:52 < ws-client> <TsFreddie> fix your ``` code block parser btw
16:53 < ws-client> <JStar> true
16:53 < ws-client> <TsFreddie> fix your triple ` code block parser btw
16:53 < ws-client> <JStar> but irc has no multiline
16:54 < ws-client> <ChillerDragon> omg i sat all day waiting for delivery guy didnt leave da flat for 1s and now i got a email saying i wasnt there
16:54 < ws-client> <ChillerDragon> u kidding me!?
16:54 < bridge> <Jupstar ‚ú™> @cyberfighter but there u have it. Disable steam overlay
16:54 < bridge> <Jupstar ‚ú™> Great that all these graphic hooks never cause problemsüòÇüòÇüòÇ
16:54 < ws-client> <ChillerDragon> @TsFreddie ye its on todo first i gotta build fake mulitline messages on top of irc xd
16:54 < bridge> <Robyt3> I found this old post relating to that dll: https://www.reddit.com/r/vulkan/comments/91r967/update_your_drivers_if_vkcreateswapchainkhr/e30xrgb/
16:55 < ws-client> <JStar> yeah, but sadly he has no update i think
16:55 < ws-client> <JStar> and since it says amdvlk, its probs amd
16:55 < bridge> <TsFreddie> ChillerDragon
16:55 < bridge> <TsFreddie> https://cdn.discordapp.com/attachments/293493549758939136/1113118571481010176/OIG.png
16:55 < ws-client> <emottester> my emotes gone :c urs too? :pepeH:
16:56 < ws-client> <ChillerDragon> lmao TsFreddie
16:56 < bridge> <Learath2> Not only would be good. I wouldn't really even consider merging a serverside fix for this
16:56 < bridge> <Ryozuki> @heinrich5991 i have a question and since u may have xp with cxx, how do u represent a method that returns a reference to something?
16:56 < bridge> <Ryozuki> for example my context (cpp class) has a method: `const DialectRegistry &getDialectRegistry();`
16:56 < bridge> <Ryozuki> how do i replicate this on rust, lifetime and all
16:56 < bridge> <Ryozuki> well i ask if u know any hints otherwise ill figure it eventually xd
16:57 < bridge> <Ryozuki> i figured that i can have a DialectRegistry & in rust directly, what i cant have is the DialectRegistry directly
16:57 < bridge> <Ryozuki> well idk if thats correct anyway
16:57 < bridge> <Learath2> I'd guess just `fn getDialectRegistry() -> &DialectRegistry`
16:58 < bridge> <Ryozuki> i guess
16:58 < bridge> <Ryozuki> i gotta abstract this, cuz u can also have a owned dialect registry
16:58 < bridge> <Ryozuki> ```rust
16:58 < bridge> <Ryozuki> pub struct DialectRegistry {
16:58 < bridge> <Ryozuki>     pub(crate) ptr: UniquePtr<ffi::DialectRegistry>,
16:58 < bridge> <Ryozuki> }
16:58 < bridge> <Ryozuki> ```
16:58 < bridge> <Ryozuki> maybe i should have a hidden inner registry that is an enum
16:58 < bridge> <Ryozuki> owned and borrowed?
16:59 < bridge> <Learath2> Do you really need the distinction anywhere?
16:59 < bridge> <Ryozuki> @Learath2 i mean
17:00 < bridge> <Ryozuki> in rust i should be able to make a dialect registry that i own
17:00 < bridge> <Ryozuki> and i should also be able to call context.getdialectregistry()
17:00 < bridge> <Ryozuki> that returns a borrowed one no?
17:00 < bridge> <Ryozuki> or should i simply copy it
17:00 < bridge> <Ryozuki> xd
17:00 < bridge> <heinrich5991> yes, I worded it incorrectly
17:02 < bridge> <heinrich5991> I would leak the distinction between `UniquePtr<DialectRegistry>` and `&DialectRegistry` to the caller
17:02 < bridge> <heinrich5991> i.e. not wrap it
17:02 < bridge> <Ryozuki> i see
17:03 < bridge> <Ryozuki> but i dont want to duplicate code
17:03 < bridge> <Ryozuki> maybe i should make a trait
17:03 < bridge> <Ryozuki> (DialectRegistry has methods)
17:03 < bridge> <heinrich5991> if you implement it on `DialectRegistry`, it should work with `UniquePtr<DialectRegistry>` and `&DialectRegistry`
17:03 < bridge> <Ryozuki> hm
17:04 < bridge> <heinrich5991> `&self` methods, at least
17:04 < bridge> <Ryozuki> but i wanted to hide DialectRegistry from the ffi itself
17:04 < bridge> <Ryozuki> i mean i have my own struct DialectRegistry that wraps the ffi related structure
17:04 < bridge> <Ryozuki> inside
17:04 < bridge> <heinrich5991> I see
17:04 < bridge> <Ryozuki> (i kinda wanna make a safe interface)
17:04 < bridge> <heinrich5991> yes, newtyping stuff like that doesn't work well in rust
17:05 < bridge> <heinrich5991> cxx is supposed to be safe already(?)
17:05 < bridge> <Ryozuki> yeah it is
17:05 < bridge> <Ryozuki> (if u made it correct)
17:05 < bridge> <Ryozuki> but i want to make a safe and rusty interface
17:06 < bridge> <cyberFighter> ok
17:06 < bridge> <Ryozuki> i think i rly need to hide this
17:06 < bridge> <Ryozuki> maybe i can just use a pointer?
17:06 < bridge> <Ryozuki> it would work for ref and unique ptr
17:07 < bridge> <Learath2> Hm, I don't quite get why you'd want a distinction between the two. Don't you need to call into C++ to create an ownerd DialectRegistry? That would return a UniquePtr and the const reference stuff would be through a immutable borrow
17:07 < bridge> <heinrich5991> `*mut` you mean?
17:07 < bridge> <Ryozuki> ye
17:07 < bridge> <heinrich5991> dunno if you can go from `*mut` to `UniquePtr`
17:07 < bridge> <cyberFighter> it just crashed again but i turned off overlay in steam
17:07 < bridge> <cyberFighter> at least thats what its saying
17:07 < bridge> <Ryozuki> ```rust
17:07 < bridge> <Ryozuki> std::unique_ptr<MLIRContext> context_new()
17:07 < bridge> <Ryozuki> {
17:07 < bridge> <Ryozuki>     return std::make_unique<MLIRContext>();
17:07 < bridge> <Ryozuki> }
17:07 < bridge> <Ryozuki> 
17:07 < bridge> <Ryozuki> const DialectRegistry& context_get_dialect_registry(const MLIRContext &context)
17:07 < bridge> <Ryozuki> {
17:07 < bridge> <Ryozuki>     auto& reg = const_cast<MLIRContext &>(context).getDialectRegistry();
17:07 < bridge> <Ryozuki>     return reg;
17:07 < bridge> <Ryozuki> }
17:07 < bridge> <Ryozuki> 
17:07 < bridge> <Ryozuki> std::unique_ptr<DialectRegistry> dialect_registry_new()
17:08 < bridge> <Ryozuki> {
17:08 < bridge> <Ryozuki>     return std::make_unique<DialectRegistry>();
17:08 < bridge> <Ryozuki> }
17:08 < bridge> <Ryozuki> ```
17:08 < bridge> <Ryozuki> i want to model this
17:08 < bridge> <Ryozuki> and take advante of lifetimes and ownership in rust ofc
17:08 < bridge> <Learath2> Do you have some crashdumps?
17:08 < bridge> <Learath2> Or do the jupstar advice, get a 4090
17:08 < bridge> <Ryozuki> (the const_cast is needed there, trust me on this)
17:08 < bridge> <heinrich5991> but you already have it, with `UniquePtr` and `&`
17:08 < ws-client> <ChillerDragon> jupsti good life advisor
17:08 < bridge> <Learath2> (I sort of doubt it, but I'll try to trust you on that one)
17:08 < bridge> <heinrich5991> the const-cast doesn't look needed there, now that you mention it üòÑ
17:09 < bridge> <cyberFighter> the dump looks the same as before
17:09 < bridge> <heinrich5991> i.e. why is the method not taking `const this`?
17:09 < bridge> <cyberFighter> but i turned it off, wut
17:09 < bridge> <Ryozuki> i checked the llvm code, the have simple get method not marked const (they probs forgot) so i dont want to make the method on the rust side take &self mut, so i used const cast on the cpp side
17:09 < bridge> <Ryozuki> getDialectRegistry() is not const
17:09 < bridge> <Ryozuki> but it should be
17:10 < bridge> <heinrich5991> I see
17:10 < bridge> <Ryozuki> my rant
17:10 < bridge> <Jupstar ‚ú™> Steamovertroll
17:10 < bridge> <Learath2> Well you don't even need a cast then, no? You can just do `const auto &`
17:10 < bridge> <heinrich5991> you do need the cast for `this`
17:11 < bridge> <Ryozuki> this being mlircontext
17:11 < bridge> <Ryozuki> right?
17:11 < bridge> <heinrich5991> ye
17:11 < bridge> <Ryozuki> im lost
17:11 < bridge> <Learath2> Ah, I misread that on the phone. Yeah I see
17:11 < bridge> <Ryozuki> what do u mean here
17:11 < bridge> <Learath2> Dont mind me. I thought you needed the return to be const but was okay with taking an &mut
17:12 < bridge> <Ryozuki> llvm literally doesnt use const for methods
17:12 < bridge> <Ryozuki> insane people kek
17:12 < bridge> <heinrich5991> it's just a hint, in C++
17:12 < bridge> <heinrich5991> I can see why they do it ^^
17:12 < bridge> <heinrich5991> a hint to the programmer
17:12 < bridge> <Learath2> It's still good to mark const things const
17:12 < bridge> <Ryozuki> yeah but cxx passes it as const for & in rust
17:12 < bridge> <heinrich5991> ye
17:21 < bridge> <Learath2> Btw idk if you can somehow end up with an actually const context that cast is ub. Don't know if possible
17:25 < bridge> <Ryozuki> well i control how the context is made
17:25 < bridge> <Ryozuki> (the new function)
17:25 < bridge> <Ryozuki> and its not const
17:25 < bridge> <Ryozuki> is that it?
17:25 < bridge> <Ryozuki> xd
17:28 < bridge> <Ryozuki> i think i got something
17:28 < bridge> <Ryozuki> i made my own ptr wrapper
17:28 < bridge> <Ryozuki> ```rust
17:28 < bridge> <Ryozuki> pub(crate) enum FFIPtr<'a, T>
17:28 < bridge> <Ryozuki> where
17:28 < bridge> <Ryozuki>     T: UniquePtrTarget,
17:28 < bridge> <Ryozuki> {
17:28 < bridge> <Ryozuki>     Owned(UniquePtr<T>),
17:28 < bridge> <Ryozuki>     Borrowed(&'a T),
17:28 < bridge> <Ryozuki> }
17:28 < bridge> <Ryozuki> 
17:28 < bridge> <Ryozuki> impl<'a, T> FFIPtr<'a, T>
17:28 < bridge> <Ryozuki> where
17:28 < bridge> <Ryozuki>     T: UniquePtrTarget,
17:28 < bridge> <Ryozuki> {
17:28 < bridge> <Ryozuki>     pub fn pin_mut(&mut self) -> Pin<&mut T> {
17:28 < bridge> <Ryozuki>         match self {
17:28 < bridge> <Ryozuki>             FFIPtr::Owned(x) => x.pin_mut(),
17:28 < bridge> <Ryozuki>             FFIPtr::Borrowed(_) => todo!(),
17:28 < bridge> <Ryozuki>         }
17:28 < bridge> <Ryozuki>     }
17:28 < bridge> <Ryozuki> }
17:28 < bridge> <Ryozuki> 
17:28 < bridge> <Ryozuki> impl<'a, T> AsRef<T> for FFIPtr<'a, T> where T: UniquePtrTarget {
17:28 < bridge> <Ryozuki>     fn as_ref(&self) -> &T {
17:28 < bridge> <Ryozuki>         match self {
17:28 < bridge> <Ryozuki>             FFIPtr::Owned(x) => x,
17:28 < bridge> <Ryozuki>             FFIPtr::Borrowed(x) => x,
17:28 < bridge> <Ryozuki>         }
17:29 < bridge> <Ryozuki>     }
17:29 < bridge> <Ryozuki> }
17:29 < bridge> <Ryozuki> ```
17:29 < bridge> <Ryozuki> ok
17:29 < bridge> <Ryozuki> i forgot i ahd the todo
17:29 < bridge> <Ryozuki> xd
17:30 < bridge> <Voxel> wtf is 'a, T
17:33 < bridge> <Ryozuki> lifetime, generics
17:34 < bridge> <cyberFighter> @Voxel hi
17:35 < bridge> <Voxel> hi
17:47 < bridge> <Ryozuki> meh im lost
17:56 < bridge> <cyberFighter> isnt this like the 128371283712th time this happened to this server
17:56 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113133955567321089/screenshot_2023-05-30_17-56-22.png
17:58 < bridge> <Jupstar ‚ú™> at least he made rainbow colors for the tees
17:59 < bridge> <Jupstar ‚ú™> it happens quite often tho, that's right
17:59 < bridge> <Jupstar ‚ú™> but heinrich is aware
17:59 < bridge> <cyberFighter> rgb flood
18:00 < bridge> <Voxel> gay flood
18:00 < bridge> <Jupstar ‚ú™> it's ogay
18:00 < bridge> <Jupstar ‚ú™> he is it even called DDNet Turkey
18:01 < bridge> <Jupstar ‚ú™> that sounds not allowed
18:01 < bridge> <Jupstar ‚ú™> why is it even called DDNet Turkey
18:01 < bridge> <cyberFighter> DDOS GUARD
18:01 < bridge> <Jupstar ‚ú™> it's a guard for ddosers
19:38 < bridge> <Ewan> he doesn‚Äôt know T :feelsbadman:
19:43 < bridge> <Ryozuki> do u know when u enter a spiral of stuff
19:43 < bridge> <Ryozuki> and u find more and more wrong stuff
19:43 < bridge> <Ryozuki> which u can possibly do but ur blinded by stress or smth
19:43 < bridge> <Ryozuki> that was my day
19:44 < bridge> <Ewan> sad
19:44 < bridge> <Ewan> what wrong stuff
19:44 < bridge> <Ryozuki> the cxx stuff
19:44 < bridge> <Ryozuki> xd
19:44 < bridge> <Ryozuki> i wish llvm was made in rust
19:45 < bridge> <Ryozuki> millions of lines wasted on cpp
19:45 < bridge> <Ryozuki> but man, if u do a c api, make it complete
19:45 < bridge> <Ryozuki> smh
19:47 < bridge> <Voxel> i think you should do it then
19:47 < bridge> <fokkonaut> DDNet Turkey DDOS GUARD Not Official - Novice ARX3000
19:47 < bridge> <fokkonaut> Address: ddnet://185.72.9.253:8303
19:47 < bridge> <fokkonaut> 
19:47 < bridge> <fokkonaut> Why is this server not banned yet?
19:47 < bridge> <fokkonaut> They have fake player stats & probably grabbing IPs?
19:47 < bridge> <Ewan> idk what u r writing ffi for
19:48 < bridge> <Ewan> i can't make sense of ur ptr :feelsbadman:
19:49 < bridge> <Ryozuki> ngl i would if im paid
19:49 < bridge> <Ryozuki> otherwise i couldnt do it
19:49 < bridge> <Ryozuki> cuz its too much time i dont have
19:50 < bridge> <Ryozuki> what pyr
19:50 < bridge> <Ryozuki> ptr
19:50 < bridge> <Ewan> ur wrapper
19:50 < bridge> <Ryozuki> what u dont get
19:50 < bridge> <Ewan> rust things
19:50 < bridge> <Ewan> ```rs
19:50 < bridge> <Ewan> impl<'a, T> AsRef<T> for FFIPtr<'a, T> where T: UniquePtrTarget {
19:50 < bridge> <Ewan>     fn as_ref(&self) -> &T {
19:50 < bridge> <Ewan>         match self {
19:50 < bridge> <Ewan>             FFIPtr::Owned(x) => x,
19:50 < bridge> <Ewan>             FFIPtr::Borrowed(x) => x,
19:50 < bridge> <Ewan>         }
19:50 < bridge> <Ewan>     }
19:50 < bridge> <Ewan> }
19:50 < bridge> <Ewan> ```
19:51 < bridge> <Ewan> ```rs
19:51 < bridge> <Ewan> impl<'a, T> AsRef<T> for FFIPtr<'a, T> where T: UniquePtrTarget { // concept/constraint?
19:51 < bridge> <Ewan>     fn as_ref(&self) -> &T { // return type?
19:51 < bridge> <Ewan>         match self { // idk
19:51 < bridge> <Ewan>             FFIPtr::Owned(x) => x,
19:51 < bridge> <Ewan>             FFIPtr::Borrowed(x) => x,
19:51 < bridge> <Ewan>         }
19:51 < bridge> <Ewan>     }
19:51 < bridge> <Ewan> }
19:51 < bridge> <Ewan> ```
19:51 < bridge> <Ryozuki> yeah
19:51 < bridge> <Ryozuki> what u call concept
19:51 < bridge> <Ryozuki> its trait bounds in rust
19:52 < bridge> <Ryozuki> self = FFIPtr
19:52 < bridge> <Ryozuki> match is cuz self is a enum
19:52 < bridge> <Ryozuki> so i do stuff based on what variant it is
19:52 < bridge> <Ryozuki> on Owned its a uniqueptr<t>
19:52 < bridge> <Ryozuki> which has a deref impl to &T
19:52 < bridge> <Ryozuki> so it worjs
19:52 < bridge> <Ryozuki> works
19:53 < bridge> <Ryozuki> on borrowed its already &T
19:53 < bridge> <Ryozuki> @Ewan Green got it? xd
19:53 < bridge> <Ryozuki> rust has pattern matching, a feature modern langs have, and if a new lang doesnt have, its pretty bad, cuz its one of the best new things
19:54 < bridge> <Ryozuki> algebraic data types should always be first class
19:54 < bridge> <Ewan> what is the `'a` in the template
19:54 < bridge> <Ryozuki> the lifetime
19:54 < bridge> <Ryozuki> of the reference
19:54 < bridge> <Ewan> oh nice
19:54 < bridge> <Ryozuki> the reference needs to outlive 'a
19:55 < bridge> <Ryozuki> @Ewan Green a more sane and that works correctly is Cow<'a T>
19:55 < bridge> <Ryozuki> @Ewan Green a more sane and that works correctly is Cow<'a, T>
19:55 < bridge> <Omar -> hello
19:55 < bridge> <Ryozuki> this is a clone on write smart pointer
19:55 < bridge> <Omar -> https://cdn.discordapp.com/attachments/293493549758939136/1113163842348920952/image.png
19:55 < bridge> <Omar -> wanna help please
19:55 < bridge> <Ryozuki> https://doc.rust-lang.org/std/borrow/enum.Cow.html
19:55 < bridge> <Ryozuki> learn
19:55 < bridge> <Ewan> you need visual studio
19:56 < bridge> <Omar -> cant compile for unknown reason
19:56 < bridge> <Omar -> i have one
19:56 < bridge> <Ewan> which one
19:56 < bridge> <Ewan> üß†
19:56 < bridge> <Omar -> https://cdn.discordapp.com/attachments/293493549758939136/1113164053569863710/image.png
19:56 < bridge> <Omar -> see
19:56 < bridge> <Omar -> üáπüá≠
19:56 < bridge> <Omar -> üëç
19:57 < bridge> <Omar -> CMake Error at CMakeLists.txt:42 (project):
19:57 < bridge> <Omar ->   Generator
19:57 < bridge> <Omar -> 
19:57 < bridge> <Omar ->     Visual Studio 17 2022
19:57 < bridge> <Omar -> 
19:57 < bridge> <Omar ->   could not find any instance of Visual Studio.
19:57 < bridge> <Omar -> 
19:57 < bridge> <Omar -> 
19:57 < bridge> <Omar -> 
19:57 < bridge> <Omar -> Configuring incomplete, errors occurred!
19:57 < bridge> <Ewan> if it's not in `C:\Program Files` or whatever its default location is, cmake can't find it
19:57 < bridge> <Ewan> speaking from experience
19:58 < bridge> <Omar -> you mean the visual studio code?
19:58 < bridge> <Omar -> or the source
19:58 < bridge> <Ewan> the program
19:58 < bridge> <Omar -> cmake?
19:58 < bridge> <Ewan> no, visual studio
19:58 < bridge> <Omar -> :justatest:
19:58 < bridge> <Omar -> okay wait
19:59 < bridge> <Ewan> does std::borrow define any other animals
19:59 < bridge> <Omar -> C:\ProgramData\Microsoft\Windows\Start Menu\Programs
19:59 < bridge> <Omar -> this is visual studio path
19:59 < bridge> <Ewan> that's where the shortcut is
19:59 < bridge> <Ewan> not the app
19:59 < bridge> <Omar -> ew
19:59 < bridge> <Omar -> mb
19:59 < bridge> <Omar -> C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE
19:59 < bridge> <Omar -> this one?
19:59 < bridge> <Ewan> yeah
19:59 < bridge> <Ewan> weird
20:00 < bridge> <Omar -> :think_bot:
20:00 < bridge> <Omar -> maybe the problem in the cmake app itself?
20:00 < bridge> <Ryozuki> what xd
20:00 < bridge> <Ewan> copy on write = beloved bovine
20:00 < bridge> <Ryozuki> ah xd
20:01 < bridge> <Chairn> lol, first time i received a job proposition on linkedin with my outdated profile
20:01 < bridge> <Chairn> was located in Cork, Ireland
20:02 < bridge> <Ewan> sux but this is a google question
20:02 < bridge> <Ewan> cmake works by using module scripts to find components
20:02 < bridge> <Omar -> nah it's chatgpt question
20:02 < bridge> <Ewan> if it's broken it's on a lower level
20:02 < bridge> <Ewan> than just the app
20:02 < bridge> <Ryozuki> ```rust
20:02 < bridge> <Ryozuki> use std::borrow::Cow
20:02 < bridge> <Ryozuki> struct Items<'a, X: 'a> where [X]: ToOwned<Owned = Vec<X>> {
20:02 < bridge> <Ryozuki>     values: Cow<'a, [X]>,
20:02 < bridge> <Ryozuki> }
20:02 < bridge> <Ryozuki> 
20:02 < bridge> <Ryozuki> impl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned = Vec<X>> {
20:02 < bridge> <Ryozuki>     fn new(v: Cow<'a, [X]>) -> Self {
20:02 < bridge> <Ryozuki>         Items { values: v }
20:02 < bridge> <Ryozuki>     }
20:03 < bridge> <Ryozuki> }
20:03 < bridge> <Ryozuki> 
20:03 < bridge> <Ryozuki> ```
20:03 < bridge> <Ryozuki> with this items can hold both a vec and array
20:04 < bridge> <Ryozuki> innit
20:04 < bridge> <Ewan> seeing generics so tightly integrated with actual data is a little confusing
20:04 < bridge> <Ewan> in cpp they are just slapped on as an afterthought
20:04 < bridge> <Ryozuki> ye bad cpp
20:05 < bridge> <Ryozuki> in rust u can be generic over types
20:05 < bridge> <Ryozuki> and over lifetimes iirc
20:05 < bridge> <Ryozuki> higher kindes types are possible too
20:05 < bridge> <Ryozuki> metro internet slow
20:05 < bridge> <Chairn> could be Apple, i saw they have European hq there
20:06 < bridge> <Ryozuki> ```rust
20:06 < bridge> <Ryozuki> struct Closure<F> {
20:06 < bridge> <Ryozuki>     data: (u8, u16),
20:06 < bridge> <Ryozuki>     func: F,
20:06 < bridge> <Ryozuki> }
20:06 < bridge> <Ryozuki> 
20:06 < bridge> <Ryozuki> impl<F> Closure<F>
20:07 < bridge> <Ryozuki>     where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8,
20:07 < bridge> <Ryozuki> {
20:07 < bridge> <Ryozuki>     fn call(&self) -> &u8 {
20:07 < bridge> <Ryozuki>         (self.func)(&self.data)
20:07 < bridge> <Ryozuki>     }
20:07 < bridge> <Ryozuki> }
20:07 < bridge> <Ryozuki> 
20:07 < bridge> <Ryozuki> fn do_it(data: &(u8, u16)) -> &u8 { &data.0 }
20:07 < bridge> <Ryozuki> 
20:07 < bridge> <Ryozuki> fn main() {
20:07 < bridge> <Ryozuki>     let clo = Closure { data: (0, 1), func: do_it };
20:07 < bridge> <Ryozuki>     println!("{}", clo.call());
20:07 < bridge> <Ryozuki> }
20:07 < bridge> <Ryozuki> ```
20:07 < bridge> <Ryozuki> @Ewan Green kinda more advanced rust
20:07 < bridge> <Ryozuki> https://doc.rust-lang.org/nomicon/hrtb.html
20:07 < bridge> <Ewan> >_>
20:07 < bridge> <Ewan> i'm still trying to digest ur ptr impl lol
20:07 < bridge> <Ewan> syntax is WTF
20:10 < bridge> <Ryozuki> xd
20:11 < bridge> <Ewan> ```rs
20:11 < bridge> <Ewan> impl<'a, T> AsRef<T> // define lifetime and to hold T as a reference
20:11 < bridge> <Ewan> for FFIPtr<'a, T> // when (how is it accessed?)
20:11 < bridge> <Ewan> where T: UniquePtrTarget { // trait bounds
20:11 < bridge> <Ewan>     fn as_ref(&self) -> &T { // return type
20:11 < bridge> <Ewan>         match self { // lookup self from FFIPtr enum, idk what it does with it
20:11 < bridge> <Ewan>             FFIPtr::Owned(x) => x,
20:11 < bridge> <Ewan>             FFIPtr::Borrowed(x) => x,
20:11 < bridge> <Ewan>         }
20:11 < bridge> <Ewan>     }
20:11 < bridge> <Ewan> }
20:11 < bridge> <Ewan> ```
20:11 < bridge> <Ewan> closer?
20:11 < bridge> <Ryozuki> no
20:11 < bridge> <Ewan> fuck
20:11 < bridge> <Ryozuki> AsRef<T>
20:12 < bridge> <Ryozuki> is a trait
20:12 < bridge> <Ryozuki> we are implementing this trait for our type
20:12 < bridge> <Ewan> oh
20:12 < bridge> <Ewan> ohhh this is the reference operator?
20:12 < bridge> <Ryozuki> for a given lifetime 'a
20:12 < bridge> <Ryozuki> no
20:12 < bridge> <Ryozuki> its a trait used by smart pointers
20:12 < bridge> <Ryozuki> Box<T> for example
20:13 < bridge> <Ryozuki> it is akin to unique_ptr
20:13 < bridge> <Ryozuki> i hate mobile
20:13 < bridge> <Ryozuki> i type so slow
20:14 < bridge> <Omar -> :kek:
20:14 < bridge> <Ryozuki> https://doc.rust-lang.org/std/convert/trait.AsRef.html
20:14 < bridge> <Ryozuki> @Ewan Green
20:14 < bridge> <Ewan> interesting
20:15 < bridge> <Ryozuki> anyway its to get &T out of our type
20:15 < bridge> <Ryozuki> which is generic over T
20:15 < bridge> <Ryozuki> traits define shared behavior
20:16 < bridge> <Ryozuki> its like a interface but better
20:16 < bridge> <Ewan> yea if it was interface you'd implement for owned and borrowed separately?
20:16 < bridge> <Ryozuki> in rust u only have structs, enums,  arrays
20:16 < bridge> <Ewan> and one is already ref so u just return that, other is something else so u do something else
20:16 < bridge> <Ewan> i forgot
20:17 < bridge> <Ewan> technically this doesn't sound like an issue but convention would be hard to pick up lol
20:17 < bridge> <Ryozuki> well the as_ref method is to avoid code repetition
20:17 < bridge> <Ryozuki> otherwise i gotta do the match manually
20:17 < bridge> <Ryozuki> everywhere i wanna exctract the enum inner data
20:17 < bridge> <Ryozuki> enums in rust can hold data
20:17 < bridge> <Ryozuki> like structs
20:17 < bridge> <Ryozuki> each variant
20:17 < bridge> <Ewan> wh
20:18 < bridge> <Ryozuki> algebraic data types at work
20:18 < bridge> <Ewan> can they just hold any variant data instead of int, or are u saying they're not constant
20:18 < bridge> <Ewan> can they just hold any variant data instead of integers, or are u saying they're not constant
20:18 < bridge> <Ryozuki> they are staticslly typed
20:18 < bridge> <Ryozuki> whats constant is the variant identifier
20:18 < bridge> <Ewan> enum something : string {
20:18 < bridge> <Ewan> value = "test",
20:18 < bridge> <Ewan> };
20:18 < bridge> <Ryozuki> the value inside can be anything within the domain of that value
20:18 < bridge> <Ewan> ?
20:18 < bridge> <Ewan> oic
20:19 < bridge> <Ewan> how do u define domain for that,
20:19 < bridge> <Ryozuki> Result in rust is a enum
20:19 < bridge> <Ryozuki> ```rust
20:19 < bridge> <Ryozuki> pub enum Result<T, E> {
20:19 < bridge> <Ryozuki>     Ok(T),
20:19 < bridge> <Ryozuki>     Err(E),
20:19 < bridge> <Ryozuki> }
20:19 < bridge> <Ryozuki> ```
20:19 < bridge> <Ryozuki> whathever type T is
20:19 < bridge> <Ryozuki> xz
20:19 < bridge> <Ewan> nice
20:20 < bridge> <Ryozuki> rust enums are cpp tagged unions
20:20 < bridge> <Ryozuki> but super powered
20:20 < bridge> <Ryozuki> and safe
20:20 < bridge> <Ryozuki> lightning fast
20:20 < bridge> <Ewan> nice
20:20 < bridge> <Ryozuki> fearless concurrnecy
20:20 < bridge> <Ryozuki> sry i got the urge to say buzzwords
20:20 < bridge> <Ryozuki> kek
20:21 < bridge> <Ryozuki> u should learn rust
20:21 < bridge> <Ewan> yes i should
20:21 < bridge> <Ewan> i have the tutorial tab open somewhere
20:21 < bridge> <Ryozuki> https://github.com/nrc/r4cppp
20:22 < bridge> <Ewan> nice
20:23 < bridge> <Ewan> `If you are using C or C++, it is probably because you have to - `
20:23 < bridge> <Ewan> wow bad take right off the bat
20:24 < bridge> <Ewan> this is like "i know you hate cpp, i sure do, here's why rust is better"
20:24 < bridge> <Ryozuki> no its a good take
20:24 < bridge> <Ryozuki> xx
20:24 < bridge> <Voxel> it really isnt
20:24 < bridge> <Ewan> isnt what
20:24 < bridge> <Voxel> a good take
20:25 < bridge> <Ewan> yeah it's just a weird assumption from a strictly safety/performance perspective
20:25 < bridge> <Ewan> they did not consider that some people might like it...
20:26 < bridge> <Ewan> it sounds like they're talking to someone who picked up cpp as a 3rd or 4th language after using other higher level langs
20:26 < bridge> <Ryozuki> what
20:26 < bridge> <Ryozuki> thats ur assumption tho xd
20:27 < bridge> <Ryozuki> anyway dont focus on tgat
20:27 < bridge> <Ryozuki> that
20:27 < bridge> <Ewan> yea
20:27 < bridge> <Ewan> xd
20:27 < bridge> <Ewan> what env do u use for rust
20:28 < bridge> <cyberFighter> ???????????????
20:28 < bridge> <cyberFighter> my game just crashed by changing the resolution
20:28 < bridge> <cyberFighter> oh i got an assert log
20:28 < bridge> <Ewan> spill the tea sister
20:29 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113172394677379142/DDNet_win64-steam_crash_log_2023-05-30_17-09-54_8020_8049f74bad64b7281da0e7f824d115e3a9238c2f.RTP
20:31 < bridge> <Ewan> oh boy gibberish üòÉ
20:31 < bridge> <Jupstar ‚ú™> assert log pls
20:32 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113173050452611172/DDNet_assert_log_2023-05-30_20-28-06_8020.txt
20:32 < bridge> <cyberFighter> ok come on discord you didnt have to leak my binds
20:32 < bridge> <Ewan> idk how text containers work but is it trying to free a texture without releasing?
20:32 < bridge> <Voxel> you dont use L to jump??
20:32 < bridge> <Jupstar ‚ú™> can u remember where the client was
20:33 < bridge> <Jupstar ‚ú™> before u did alt tab
20:33 < bridge> <cyberFighter> i didnt even alt tab
20:33 < bridge> <cyberFighter> i changed resolution
20:33 < bridge> <cyberFighter> and thats when it crashed
20:33 < bridge> <Jupstar ‚ú™> were u ingame?
20:33 < bridge> <cyberFighter> yes
20:33 < bridge> <Voxel> send demo
20:33 < bridge> <Jupstar ‚ú™> is yaR0$ a user u know?
20:33 < bridge> <cyberFighter> no
20:33 < bridge> <Jupstar ‚ú™> when was it?
20:33 < bridge> <Ewan> are we not gonna talk about `/home/deen/isos/ddnet/`
20:33 < bridge> <cyberFighter> when was what
20:34 < bridge> <Jupstar ‚ú™> the crash
20:34 < bridge> <Jupstar ‚ú™> did it just happened
20:34 < bridge> <Jupstar ‚ú™> sadly i can't find a user named `yaR0$` online
20:34 < bridge> <cyberFighter> 8 minutes ago
20:34 < bridge> <Jupstar ‚ú™> mh
20:34 < bridge> <Jupstar ‚ú™> what server?
20:34 < bridge> <cyberFighter> i was in a lan server
20:34 < bridge> <Jupstar ‚ú™> oh
20:34 < bridge> <Jupstar ‚ú™> where the fuck does `yaR0$` come from then xd
20:35 < bridge> <Jupstar ‚ú™> @Robyt3 maybe server browser?
20:35 < bridge> <Jupstar ‚ú™> read above
20:35 < bridge> <Jupstar ‚ú™> interesting xd
20:35 < bridge> <cyberFighter> this game just hates me for real
20:35 < bridge> <Jupstar ‚ú™> in this case its not your fault
20:35 < bridge> <Jupstar ‚ú™> it's a bug that haunts us long time
20:38 < bridge> <Jupstar ‚ú™> it's interesting, that it is still hard to reproduce xd
20:40 < bridge> <Ryozuki> neovim or vscode
20:40 < bridge> <Ryozuki> rust-analyzer
20:41 < bridge> <cyberFighter> also i changed resolution cuz i wanted to record a video of this issue
20:41 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113175353146474526/image.png
20:41 < bridge> <cyberFighter> but then it fixed after the crash
20:41 < bridge> <cyberFighter> lol
20:41 < bridge> <cyberFighter> but then it fixed itself after the crash
20:41 < bridge> <Ewan> vscode bleh
20:42 < bridge> <Ewan> when qt creator integration ‚òπÔ∏è
20:42 < bridge> <Ewan> it has nim already...
20:42 < bridge> <cyberFighter> wait i found the bug
20:42 < bridge> <cyberFighter> actually idk if its a bug
20:42 < bridge> <Jupstar ‚ú™> HYPE
20:43 < bridge> <Jupstar ‚ú™> UNHYPE
20:43 < bridge> <cyberFighter> setting "show info" on doesnt let you right click the green dots
20:44 < bridge> <cyberFighter> is that a bug???? or just some goofy as hell feature
20:44 < bridge> <Jupstar ‚ú™> what is show info
20:44 < bridge> <cyberFighter> shows the numbers of tiles placed
20:45 < bridge> <Jupstar ‚ú™> ah editor, wtf even happened to the editor xD
20:45 < bridge> <Jupstar ‚ú™> looks completely different
20:45 < bridge> <cyberFighter> i like it more honestly
20:46 < bridge> <Jupstar ‚ú™> what green dots?
20:46 < bridge> <cyberFighter> uh
20:46 < bridge> <cyberFighter> anchor points?
20:46 < bridge> <cyberFighter> for quads
20:46 < bridge> <Jupstar ‚ú™> ah
20:46 < bridge> <Jupstar ‚ú™> for me it works
20:46 < bridge> <Jupstar ‚ú™> but im on nightly
20:47 < bridge> <cyberFighter> what version
20:48 < bridge> <cyberFighter> oh wait nightly nvm lol
20:48 < bridge> <cyberFighter> im on 17.0.2 but it happened to me since 17.0 rc (and earlier i think?)
20:48 < bridge> <cyberFighter> im on 17.0.2 but it happened to me since 17.0.something rc (and earlier i think?)
20:58 < bridge> <Ewan> seeing rust println format syntax just makes me wish std::format was real
20:59 < bridge> <Ewan> still rly using sprintf or +/+= w. std strings to do this kind of stuff
21:02 < bridge> <Jupstar ‚ú™> why dont u use string streams
21:02 < bridge> <Jupstar ‚ú™> they are the most efficient ones
21:05 < bridge> <Ryozuki> arent they bad tho
21:05 < bridge> <Ewan> streams are fine i guess but i don't like streams because they are misleading
21:05 < bridge> <Ewan> they always copy
21:05 < bridge> <Ryozuki> well operator overloading like that is evil
21:05 < bridge> <Ryozuki> and the std does it
21:05 < bridge> <Ryozuki> its ugly af
21:06 < bridge> <Ryozuki> if ur refering  to cout
21:06 < bridge> <Ryozuki> and cin
21:06 < bridge> <Ewan> no
21:06 < bridge> <Ewan> fstreams also have an intermediate buffer on top of the source
21:06 < bridge> <Ewan> source buffer -> intermediate buffer -> file
21:06 < bridge> <Ewan> bad if streaming big stuff
21:06 < bridge> <Ryozuki> rust streaming is rly nice
21:06 < bridge> <Ryozuki> https://edgarluque.com/blog/zstd-streaming-in-rust/
21:07 < bridge> <Ewan> caption 10/10
21:07 < bridge> <Ryozuki> also in rust its not buffered by default , u need to wrap around a bufwriter
21:07 < bridge> <Ewan> nice
21:07 < bridge> <Robyt3> @Jupeyy_Keks @cyberfighter "Show info" has a more hidden feature when selecting quad layers: it shows a separate pivot point for the envelope points associated with it so you can more easily position quads for animations. You can't select multiple of those points at the same time. Maybe there are other bugs though, because this feature is so well hidden and therefore not tested at lot.
21:11 < bridge> <Jupstar ‚ú™> ah
21:12 < bridge> <Ewan> also i'm not sure if
21:12 < bridge> <Ewan> ```cpp
21:12 < bridge> <Ewan> std::stringstream ss;
21:12 < bridge> <Ewan> ss << "Today is " << month << " " << day << ", " << year << " and it is " << hour << ":" << minute << ".";
21:12 < bridge> <Ewan> ```
21:12 < bridge> <Ewan> is as efficient as 
21:12 < bridge> <Ewan> ```cpp
21:12 < bridge> <Ewan> std::string str = std::format(
21:12 < bridge> <Ewan> "Today is {} {}, {} and it is {}:{}.", month, day, year, hour, minute);
21:12 < bridge> <Ewan> ```
21:12 < bridge> <Ewan> because i believe std::format still utilizes the stack like c formats
21:12 < bridge> <Jupstar ‚ú™> it's more efficient
21:12 < bridge> <Jupstar ‚ú™> not as efficient
21:13 < bridge> <Jupstar ‚ú™> it's not a consteval as far as i see
21:13 < bridge> <Jupstar ‚ú™> so it has to parse the format string
21:14 < bridge> <Ewan> printf is not consteval either
21:14 < bridge> <Jupstar ‚ú™> yes
21:14 < bridge> <Jupstar ‚ú™> so it's slow xd
21:15 < bridge> <Chairn> is acceleration on with new SDL version?
21:15 < bridge> <Jupstar ‚ú™> no
21:15 < bridge> <Ewan> zzz
21:15 < bridge> <Jupstar ‚ú™> it's gone
21:15 < bridge> <Jupstar ‚ú™> @Ewan Green theorically std::format is faster than printf
21:15 < bridge> <Jupstar ‚ú™> because it is type safe
21:16 < bridge> <Jupstar ‚ú™> if u know u expect an int, u know its never bigger than 4billion
21:16 < bridge> <Jupstar ‚ú™> +-
21:16 < bridge> <Jupstar ‚ú™> 2billion
21:16 < bridge> <Ewan> ya
21:16 < bridge> <Jupstar ‚ú™> so u can estimate the string size
21:16 < bridge> <Jupstar ‚ú™> printf can't do that
21:16 < bridge> <Jupstar ‚ú™> at compile time at least
21:16 < bridge> <Jupstar ‚ú™> string streams have this too, additionally they don't need to replace the "{}"
21:17 < bridge> <Jupstar ‚ú™> they can just throw it against the string after each other
21:17 < bridge> <Jupstar ‚ú™> i guess u could‚Ñ¢Ô∏è write std::format similary fast by creating a stream internally
21:17 < bridge> <Jupstar ‚ú™> rust format! is a macro, so it could do that too
21:17 < bridge> <Jupstar ‚ú™> i dunno if it does tho
21:17 < bridge> <Ewan> yea idk
21:17 < bridge> <Ewan> anyway `if x == 10 { expression; }` is booty cheeks
21:18 < bridge> <Ewan> why mandatory brackets
21:18 < bridge> <Ewan> why can't i do parentheses or brackets to disambiguate test condition from statement body
21:18 < bridge> <Jupstar ‚ú™> bcs u dont have the () brackets
21:18 < bridge> <Jupstar ‚ú™> i think that's one of the nicest rust syntax
21:18 < bridge> <Ewan> it's foul
21:18 < bridge> <Jupstar ‚ú™> bcs also important in rust {} isnt just a scope
21:18 < bridge> <Jupstar ‚ú™> it's an expression
21:19 < bridge> <Jupstar ‚ú™> u can return stuff from it
21:19 < bridge> <Jupstar ‚ú™> without return tho
21:19 < bridge> <Ewan> it also creates inconsistent branching syntax since functions have parentheses
21:19 < bridge> <Jupstar ‚ú™> { 1 }
21:19 < bridge> <Ewan> ya
21:19 < bridge> <Ewan> that part is neat
21:20 < bridge> <Ewan> a more logical ternary operator
21:20 < bridge> <Jupstar ‚ú™> i think more ugly is if u have to set the generic explicitly
21:20 < bridge> <Jupstar ‚ú™> 
21:20 < bridge> <Jupstar ‚ú™> e.g. let's assume u need generic for unknown reason:
21:20 < bridge> <Jupstar ‚ú™> std::cmp::max::<i32>(2, 3)
21:20 < bridge> <Jupstar ‚ú™> looks weird af xD
21:23 < bridge> <Ewan> let's fucking gooooo
21:24 < bridge> <Ewan> ddnet magnet arrived
21:24 < bridge> <Ewan> i didn't realize he sent it üòÉ
21:24 < bridge> <Jupstar ‚ú™> wow, how long did it take?
21:24 < bridge> <Jupstar ‚ú™> 20 years? xd
21:25 < bridge> <Ryozuki> u will learn in time
21:25 < bridge> <Ryozuki> to apreciate rust syntax
21:25 < bridge> <Ryozuki> nah
21:25 < bridge> <Ryozuki> parenthesis are in fact bloat
21:25 < bridge> <Ryozuki> in ifs
21:26 < bridge> <Ryozuki> also in rust everything is an expression
21:33 < bridge> <Ewan> we just got a parking ticket for somewhere neither my mom, sister or i were on the day it's cited
21:34 < bridge> <Ewan> the fuck
21:35 < bridge> <Jupstar ‚ú™> is it even real? xd
21:38 < bridge> <cyberFighter> close that issue https://github.com/ddnet/ddnet/issues/6513, pretty sure its just show info
21:39 < bridge> <Ewan> is * still used for getting iterator values
21:41 < bridge> <Ewan> it‚Äôs actually an overdue notice for the fictitious ticket
21:41 < bridge> <Ewan> addressed to my mom but the plate number is none of ours and we were never there lol
21:41 < bridge> <Ewan> $100 fine $100 late penalty
21:41 < bridge> <Ewan> ridiculous
21:44 < ws-client> <ChillerDragon> @admins will i get banned for this client mod? xd
21:44 < ws-client> <ChillerDragon> https://zillyhuhn.com/cs/.1685475884.png
21:45 < ws-client> <ChillerDragon> it highlights spaikes
21:45 < ws-client> <ChillerDragon> because when i get tired i always run into spikes on silex maps
21:47 < bridge> <cyberFighter> ???????????
21:47 < ws-client> <ChillerDragon> its really useful
21:48 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113192110196273243/image.png
21:48 < ws-client> <ChillerDragon> to not brain afk jump into spike
21:48 < ws-client> <ChillerDragon> it only hights those with direct air line
21:48 < ws-client> <ChillerDragon> nothing behind walls
21:48 < bridge> <cyberFighter> ok i will make a map and hide spikes behind walls
21:48 < ws-client> <ChillerDragon> then they are not dangerous
21:48 < ws-client> <ChillerDragon> mostl
21:48 < ws-client> <ChillerDragon> y
21:48 < bridge> <cyberFighter> and a speeder
21:48 < ws-client> <ChillerDragon> yikes
21:49 < bridge> <cyberFighter> :troll:
21:51 < ws-client> <ChillerDragon> i can also toggle the behind walls cff
21:51 < ws-client> <ChillerDragon> cfg
21:51 < bridge> <Voxel> if you can get banned for having a hook/hammer radius then this is probably an offence
21:51 < ws-client> <ChillerDragon> oh shit there were bans for that?
21:51 < bridge> <Voxel> from what i remember
21:52 < bridge> <Ewan> how u become purple?
21:52 < bridge> <Mr.Gh0s7> you join spec
21:52 < ws-client> <ChillerDragon> isnt ddnet client showing hookline
21:52 < bridge> <Ewan> no in the diskord
21:52 < bridge> <Mr.Gh0s7> (the ones with the Dev role are)
21:52 < bridge> <Ewan> yea
21:52 < bridge> <Ewan> voxel is dev?
21:53 < bridge> <Mr.Gh0s7> yeah
21:53 < bridge> <cyberFighter> hammer got that janky ass hitbox
21:53 < bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1113193577867116594/Screenshot_20230530_155331_Discord.jpg
21:54 < bridge> <Voxel> maybe its refering to the grenade thing but
21:54 < bridge> <Voxel> still
21:54 < bridge> <cyberFighter> what is that yellow thing
21:54 < bridge> <Ewan> does hookcoll not pre-calculate
21:54 < bridge> <cyberFighter> it doesnt
21:54 < bridge> <Ryozuki> contributing to ddnet
21:54 < bridge> <cyberFighter> actually it does kinda
21:54 < bridge> <Ryozuki> the role doesnt mean anything
21:54 < bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1003018796417691799/unknown.png
21:54 < bridge> <Voxel> 
21:54 < bridge> <Voxel> i made this a while back
21:54 < bridge> <Voxel> as a concept
21:54 < bridge> <Ryozuki> just that u made some contributions
21:54 < bridge> <Ewan> wuh
21:55 < bridge> <Voxel> hammer radius
21:55 < bridge> <cyberFighter> it just shows the max distance of the hook
21:55 < bridge> <Ewan> it calculates whether or not it will hit something
21:55 < bridge> <Ewan> just as cheats
21:55 < bridge> <cyberFighter> doesnt take ur speed tho
21:58 < bridge> <cyberFighter> xpanic shotgun preview
21:59 < bridge> <Voxel> tru
22:00 < bridge> <gerdoe> i had design doc on xxxpanic that had like 10-20 new weapons and new buildings concepts
22:00 < bridge> <gerdoe> lost it five years ago duh
22:00 < bridge> <Chairn> you'll just follow red lines out of tiredness now :troll:
22:01 < bridge> <cyberFighter> new buildings to abuse
22:02 < bridge> <cyberFighter> also 10-20 is just bloat honestly
22:02 < bridge> <gerdoe> nah it was bounded to your level so you would be forced to upgrade every time
22:03 < ws-client> <ChillerDragon> @Chairn omg pls no
22:03 < bridge> <cyberFighter> but grinding in xpanic is so slow
22:03 < bridge> <gerdoe> like you couldnt carry more than three weapons besides hammer and pistol
22:03 < bridge> <Ewan> does `match` fail on compile if it doesn't have a catch-all like `y => {}` or `_ => {}` or does it do something else
22:03 < bridge> <Ewan> warn & use the latter or something
22:04 < bridge> <cyberFighter> even with the exp bug
22:04 < bridge> <gerdoe> nah there was another level system that wasn't that boring
22:04 < bridge> <Ryozuki> match requires all branches to be covered
22:04 < bridge> <Ewan> bleh
22:04 < bridge> <Ryozuki> not bleh
22:04 < bridge> <cyberFighter> nvm scratch that, i forgot how slow leveling is in tw mods in general
22:04 < bridge> <Ryozuki> it prevents bugs
22:04 < bridge> <Ryozuki> also
22:04 < bridge> <Learath2> doesn't have to have a catch-all btw
22:04 < bridge> <Learath2> enums you can cover completely
22:04 < bridge> <Ewan> yeah
22:05 < bridge> <Ryozuki> and if u know something is unreachable u can do
22:05 < bridge> <Ewan> idk i think it should just warn
22:05 < bridge> <Ryozuki> `_ => unreachable!()`
22:05 < bridge> <Ryozuki> and it will panic if it ever happens
22:05 < bridge> <Ryozuki> and
22:05 < bridge> <Ewan> o nice
22:05 < bridge> <Ryozuki> IF and ONLY IF
22:05 < bridge> <Ryozuki> ur super sure
22:05 < bridge> <Ewan> wait maybe i don't want panic
22:05 < bridge> <Ryozuki> u can use unsafe
22:05 < bridge> <gerdoe> also when we ran xpanic server with quantum people haven't complained about that
22:05 < bridge> <gerdoe> cuz vip and cuz huge online
22:05 < bridge> <Ryozuki> unsafe { unreachable_unchecked!()}
22:05 < bridge> <Ewan> can't we runtime assert and move on with life
22:05 < bridge> <Ewan> or console warn or smth
22:05 < bridge> <cyberFighter> vip is p2w
22:05 < bridge> <Ryozuki> yeah, u can do that
22:06 < bridge> <gerdoe> not that hard tho
22:06 < bridge> <Learath2> You can do whatever you want in that branch. The point is you clearly have to think about every case and make a conscious decision
22:06 < bridge> <Ewan> yeah
22:06 < bridge> <gerdoe> you could play more than average vip and get the same amount of exp
22:06 < bridge> <Ewan> so what if you add an enum value to the definition and forget to add it to a match that has `{} => unreachable!()`, does it tell u about that?
22:06 < bridge> <cyberFighter> pretty sure it gives double upgrades
22:07 < bridge> <gerdoe> nope
22:07 < bridge> <Ryozuki> u cant forget
22:07 < bridge> <Ryozuki> cuz code wont compile
22:07 < bridge> <Ewan> oh yeah
22:07 < bridge> <Ewan> swag
22:07 < bridge> <gerdoe> it had exp bonus and something that i don't remember
22:07 < bridge> <Learath2> um, you can if there is a catch-all
22:07 < bridge> <Ryozuki> yeah
22:07 < bridge> <Ewan> that is the catch all
22:07 < bridge> <Ewan> will it warn
22:07 < bridge> <Ewan> if it knows
22:07 < bridge> <Ryozuki> no
22:07 < bridge> <Learath2> It won't
22:07 < bridge> <Ewan> fucked
22:07 < bridge> <Learath2> Enums I usually cover completely for this reason
22:07 < bridge> <Ryozuki> yeah u should
22:07 < bridge> <Ewan> in cpp if u want to cover all bases u omit default: and compiler will usually tell you that ur missing a possible value
22:07 < bridge> <Ryozuki> also
22:08 < bridge> <Ryozuki> match has way more syntax
22:08 < bridge> <Ryozuki> than what u know now
22:08 < bridge> <Ewan> yea i see it has like
22:08 < bridge> <Ewan> | and if
22:08 < bridge> <Ewan> seems super powerful
22:08 < bridge> <Ewan> big fan
22:08 < bridge> <Learath2> As the last case I usually have all the unreachable ones or'd together
22:08 < bridge> <Ryozuki> and another
22:08 < bridge> <Ryozuki> the @
22:09 < bridge> <Ewan> o_O
22:09 < bridge> <cyberFighter> ok but did the server have ultimate vip too
22:09 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1113197471074615376/image.png
22:09 < bridge> <Ewan> <https://github.com/nrc/r4cppp/blob/master/control-flow.md> not mentioned here :[
22:09 < bridge> <Ryozuki> u can also pattern match ranges
22:09 < bridge> <Ewan> ..?
22:09 < bridge> <Ewan> `..`? or smth
22:10 < bridge> <Ryozuki> https://doc.rust-lang.org/reference/patterns.html#identifier-patterns
22:10 < bridge> <Ryozuki> ```rust
22:10 < bridge> <Ryozuki> let x = 2;
22:10 < bridge> <Ryozuki> 
22:10 < bridge> <Ryozuki> match x {
22:10 < bridge> <Ryozuki>     e @ 1 ..= 5 => println!("got a range element {}", e),
22:10 < bridge> <Ryozuki>     _ => println!("anything"),
22:10 < bridge> <Ryozuki> }
22:10 < bridge> <Ryozuki> ```
22:10 < bridge> <Ewan> no parentheses on `e @ 1 ..= 5` is so weird to me atm
22:10 < bridge> <gerdoe> no
22:11 < bridge> <Ryozuki> > To bind the matched value of a pattern to a variable, use the syntax variable @ subpattern. For example, the following binds the value 2 to e (not the entire range: the range here is a range subpattern).
22:11 < bridge> <Ewan> why only 2
22:11 < bridge> <Ewan> wouldn't it be 2,3,4
22:11 < bridge> <Ewan> = e
22:11 < bridge> <Ryozuki> `if let Person {name: ref person_name, age: 18..=150 } = value { }`
22:12 < bridge> <Learath2> My favourite RFC
22:12 < bridge> <Ewan> cool
22:12 < bridge> <Ryozuki> because x is 2 duh
22:12 < bridge> <Ewan> oh lmfao
22:12 < bridge> <Ewan> i wasn't looking there
22:12 < bridge> <fokkonaut> secounds
22:13 < bridge> <Ewan> but if x was 3 or 4 it would still be e?
22:13 < bridge> <cyberFighter> true
22:13 < bridge> <Ewan> and how to make inclusive
22:13 < bridge> <Learath2> oh you are not talking about my favourite RFC
22:13 < bridge> <Learath2> I was talking about RFC 2294 https://github.com/rust-lang/rust/issues/51114
22:13 < bridge> <Learath2> if let in match guard
22:13 < bridge> <Ewan> thought that was drake for a moment
22:14 < bridge> <Ryozuki> ye
22:14 < bridge> <Ewan> excellent
22:14 < bridge> <Ryozuki> and 5
22:14 < bridge> <Ryozuki> cuz the =
22:14 < bridge> <Ryozuki> 1 ..= 5
22:14 < bridge> <Ryozuki> [1,5]
22:14 < bridge> <Ryozuki> 1 ..5
22:14 < bridge> <Ryozuki> [1,5)
22:14 < bridge> <Ewan> =..= (1,5)?
22:15 < bridge> <Ewan> funny rat face
22:15 < bridge> <Ryozuki> 1 is inclusive always
22:15 < bridge> <Ryozuki> xd
22:15 < bridge> <Ewan> oops
22:15 < bridge> <Ewan> algebr
22:18 < bridge> <Voxel> =..= konsti
22:18 < bridge> <Ewan> ```rs
22:18 < bridge> <Ewan>     let x = 34isize;
22:18 < bridge> <Ewan>     let x = 34usize;
22:18 < bridge> <Ewan> ```
22:18 < bridge> <Ewan> why not `let x = 34i`/`let x = 34u`
22:21 < bridge> <Ryozuki> lol
22:21 < bridge> <Ryozuki> cuz that doesnt mean anything
22:21 < bridge> <Ryozuki> u have
22:21 < bridge> <Ryozuki> i8 i16 i32 i64 i128 isize
22:21 < bridge> <Ryozuki> and the unsigned variants
22:22 < bridge> <Ryozuki> usize is used for indexing
22:22 < bridge> <Ryozuki> isize for ptr offset shenanigans
22:26 < ws-client> <ChillerDragon> can we increase max zoom to cover all of Back In Time 2 please?
22:26 < bridge> <Ewan> 5 characters for a literal specifier is crazy
22:31 < bridge> <Ryozuki> ????????
22:31 < bridge> <Ryozuki> long long double
22:31 < bridge> <Ryozuki> 16 chars
22:32 < bridge> <Ryozuki> also rust has strong type inference
22:32 < bridge> <Ryozuki> f64 in rust btw
22:33 < bridge> <Ewan> `std::float64_t`
22:33 < bridge> <Learath2> `auto x = 34L`
22:33 < bridge> <Ryozuki> let is shorter
22:33 < bridge> <Ryozuki> ler x = 32i64;
22:33 < bridge> <Ryozuki> god
22:33 < bridge> <Ryozuki> i cant type
22:33 < bridge> <Learath2> I think @Ewan Green was talking about the suffix
22:33 < bridge> <Ewan> ye i was
22:34 < bridge> <Ryozuki> bloat
22:34 < bridge> <Ewan> also cpp23 isn't real but `auto x = 32i64; `
22:34 < bridge> <Ryozuki> see
22:34 < bridge> <Ryozuki> they copied rust
22:34 < bridge> <Ryozuki> they know the better  lang
22:34 < bridge> <Ryozuki> gotta catch up
22:35 < bridge> <Learath2> (btw long long double isn't even a thing :D)
22:35 < bridge> <Ryozuki> rly?
22:36 < bridge> <Ryozuki> idk why i remembered it
22:36 < bridge> <Learath2> Atleast it's not a thing in C11 and C++17. I don't remember if it was ever added
22:36 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1113204432390328360/image.png
22:37 < bridge> <Jupstar ‚ú™> i never understod why ppl use these types
22:38 < bridge> <Jupstar ‚ú™> of uin32_t etc.
22:38 < bridge> <Jupstar ‚ú™> of uint32_t etc.
22:38 < bridge> <Learath2> Sometimes you want a fixed bitwidth
22:38 < bridge> <Learath2> e.g. a 64 bit mask
22:38 < bridge> <Jupstar ‚ú™> so u'd use uint64_t
22:39 < bridge> <Ryozuki> u64
22:39 < bridge> <Learath2> Ah you don't understand why people would use non-specific bit-width types?
22:39 < bridge> <Jupstar ‚ú™> instead of uint32_t etc.
22:39 < bridge> <Jupstar ‚ú™> yeah i guess i was missing a instead xD
22:39 < bridge> <Learath2> Sometimes you don't care about bit width but care only about range. It lets the compiler do it's thing
22:39 < bridge> <Ewan> Ya i use uint for iteration and stuff
22:40 < bridge> <Jupstar ‚ú™> u can use auto
22:40 < bridge> <Jupstar ‚ú™> or simply int32_t
22:40 < bridge> <Ryozuki> imagine having c style for loops
22:40 < bridge> <Ryozuki> kek
22:40 < bridge> <Jupstar ‚ú™> still better than it suddenly getting 16bits xD
22:41 < bridge> <Learath2> e.g. I want to represent numbers up to 2^32, if I force `uint32_t`, it might have to waste memory or use inefficient instructions on a 64bit system
22:41 < bridge> <Ryozuki> eh
22:41 < bridge> <Ryozuki> i think its better if its more deterministic
22:41 < bridge> <Ryozuki> idk the word
22:41 < bridge> <Ryozuki> langs should allow i{1-20320312032101}
22:41 < bridge> <Ryozuki> like llvm
22:42 < bridge> <Ryozuki> The integer type is a very simple type that simply specifies an arbitrary bit width for the integer type desired. Any bit width from 1 bit to 223(about 8 million) can be specified.
22:42 < bridge> <Ryozuki> Syntax:    
22:42 < bridge> <Ryozuki> 
22:42 < bridge> <Ryozuki> iN
22:42 < bridge> <Learath2> You can't know what sort of integer is efficient to do operations with on every system, the compiler can know that since it knows the target
22:43 < bridge> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1113206163060834304/image.png
22:45 < bridge> <Learath2> It even gives you the option to optimize for what you want. If you think you know better than the compiler then you are free to pick your own
22:45 < bridge> <Jupstar ‚ú™> what do u guess how did gcc implement them? üòâ
22:45 < bridge> <Jupstar ‚ú™> on 64bit
22:45 < bridge> <Learath2> Which 64bit?
22:45 < bridge> <Jupstar ‚ú™> x64
22:46 < bridge> <Learath2> They all probably map to int32_t until the 64bit variants
22:46 < bridge> <Ewan> rarely necessary
22:47 < bridge> <Jupstar ‚ú™> ```
22:47 < bridge> <Jupstar ‚ú™> typedef signed char        int_fast8_t;
22:47 < bridge> <Jupstar ‚ú™> typedef long int        int_fast16_t;
22:47 < bridge> <Jupstar ‚ú™> typedef long int        int_fast32_t;
22:47 < bridge> <Jupstar ‚ú™> typedef long int        int_fast64_t;
22:47 < bridge> <Jupstar ‚ú™> ```
22:47 < bridge> <Jupstar ‚ú™> all 64bit except int8
22:47 < bridge> <Jupstar ‚ú™> same for unsigned
22:47 < bridge> <Learath2> See, I don't know better than the compiler. Better leave it to the compiler then
22:48 < bridge> <Jupstar ‚ú™> after your logic:  everytime u use an `int` it's worse than what the compiler would do
22:48 < bridge> <Jupstar ‚ú™> (ofc only in theory)
22:48 < bridge> <Jupstar ‚ú™> if we believe this typedefs
22:49 < bridge> <Learath2> No, if you pick the one with the correct range, the compiler will pick the proper bitwidth required on your target
22:49 < bridge> <Jupstar ‚ú™> anyway good night ü•±
22:50 < bridge> <Ewan> auto int
22:50 < bridge> <Ewan> auto i; i < deeznuts; i++
22:50 < bridge> <Learath2> No please, before you go please let me know of the optimal values of those for sparc64 and riscv64 too
22:50 < bridge> <Jupstar ‚ú™> i dont have the header files installed sry
23:02 < bridge> <heinrich5991> they're very slow AFAIK
23:03 < bridge> <heinrich5991> I want to see a benchmark for these claims. I have seen opposite benchmarks, that snprintf was a lot faster than std::stringstream
23:06 < bridge> <Chairn> same here, because each `<<` is a separate call
23:07 < bridge> <Chairn> while printf is called only once and thus makes a single allocation
23:08 < bridge> <heinrich5991> I don't know why it's faster, but the benchmark said it was
23:08 < bridge> <Learath2> it is real, you just need to have gcc 13 or clang 14 :pepeW:
23:09 < bridge> <Jupstar ‚ú™> Makes no sense that they are faster. If they are, then it's BCS of bad impl
23:09 < bridge> <Jupstar ‚ú™> Especially printf
23:10 < bridge> <Learath2> It's probably because stringstreams are just optimized worse, possibly because it'd require lots of devirtualization which compilers are bad at
23:10 < bridge> <Learath2> Atleast that's my rough guess
23:11 < bridge> <heinrich5991> glad we're a science where we can easily run experiments. if the data will say that snprintf is faster, then it's apparently faster
23:11 < bridge> <heinrich5991> if that's the result, then it doesn't matter that it *should* be slower, it just wouldn't be
23:11 < bridge> <Jupstar ‚ú™> ?
23:12 < bridge> <Jupstar ‚ú™> What kind of argument is that
23:12 < bridge> <Jupstar ‚ú™> BCS unordered map sucks. Hashmaps suck or what
23:12 < bridge> <heinrich5991> no. because unordered map is slow. that's all I'm saying
23:12 < bridge> <heinrich5991> no. because unordered-map is slow. that's all I'm saying
23:12 < bridge> <heinrich5991> no. because unordered_map is slow. that's all I'm saying
23:12 < bridge> <heinrich5991> no. unordered_map is slow. that's all I'm saying
23:12 < bridge> <heinrich5991> std::stringstream was also slow some time ago
23:13 < bridge> <heinrich5991> I don't know if that changed
23:13 < bridge> <Learath2> Why does it matter which one of them looks faster? If you bench them apparently snprintf is faster than stringstream
23:13 < bridge> <heinrich5991> or at least was faster some years ago
23:13 < bridge> <Ryozuki> python print is faster
23:13 < bridge> <Ryozuki> :gigachad:
23:13 < bridge> <Ryozuki> rust println may be slower cuz it locks
23:14 < bridge> <Ryozuki> iirc
23:14 < bridge> <Ryozuki> idk if c++ does this
23:14 < bridge> <Learath2> https://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html here is a dude doing just int to string, which is a meh benchmark but even here `std::ostringstream` fell behing `sprintf`
23:14 < bridge> <heinrich5991> rust `println!` is slower than python `print`s
23:14 < bridge> <Ryozuki> the lock
23:14 < bridge> <Ryozuki> u can acquire it and use write! iirc
23:14 < bridge> <Ryozuki> then its faster i think
23:14 < bridge> <heinrich5991> also the line buffering, I think
23:15 < bridge> <Learath2> OR, don't acquire the lock, do an unsafe write, is fastest
23:16 < bridge> <Ryozuki> but well with rust u wotn see garbage prints in threaded env
23:16 < bridge> <heinrich5991> only if you use `println!` consistently
23:16 < bridge> <Ryozuki> yeah
23:16 < bridge> <heinrich5991> I think you won't see them in C either
23:16 < bridge> <heinrich5991> if you use `printf` consistently?
23:16 < bridge> <heinrich5991> with `
23:16 < bridge> <heinrich5991> with `\n`
23:16 < bridge> <Ryozuki> yeah \n flushes
23:17 < bridge> <Learath2> I actually don't know if that's guaranteed, but that is how it is on a lot of platforms
23:17 < bridge> <heinrich5991> oh yea, I'm definitely talking about impl details right now
23:17 < bridge> <heinrich5991> threading is no longer an impl detail since c11/c++11
23:18 < bridge> <Learath2> I think it might be like actually guaranteed in rust though, no?
23:18 < bridge> <Ryozuki> it's ISO C behaviour
23:18 < bridge> <Jupstar ‚ú™> https://gist.github.com/matklad/764a1a7200217fd69739bbb7505e9ab4
23:18 < bridge> <Jupstar ‚ú™> 
23:18 < bridge> <Jupstar ‚ú™> sync_with_stdio
23:18 < bridge> <Jupstar ‚ú™> Magic
23:18 < bridge> <Jupstar ‚ú™> But can't find the string benchmarks
23:18 < bridge> <Ryozuki> > When a stream is line buffered, characters are intended to be transmitted to or from the host environment as a block when a new-line character is encountered.
23:19 < bridge> <Ryozuki> its line buffered by def i think
23:19 < bridge> <heinrich5991> > intended
23:19 < bridge> <Ryozuki> ISO C99 section 7.19.3/3
23:19 < bridge> <heinrich5991> is that a guarantee?
23:19 < bridge> <Ryozuki> Support for these characteristics is implementation-defined, and may be affected via the setbuf and setvbuf functions.
23:19 < bridge> <Ryozuki> xd
23:20 < bridge> <Ryozuki> > printf prints to standard output, which is line-buffered by default when reading from a tty on UNIX variants.
23:20 < bridge> <Ryozuki> idk
23:20 < bridge> <Ryozuki> cant find a rly good source
23:20 < bridge> <Ryozuki> google is rly bad at printf
23:21 < bridge> <Ryozuki> cuz its just nobos asking
23:21 < bridge> <Ryozuki> anyway time to sleep
23:26 < bridge> <Jupstar ‚ú™> Not in the second
23:27 < bridge> <heinrich5991> I can reproduce this example, 718ms iostream, 365ms cstdio, 230ms iostream_unsynced
23:27 < bridge> <Learath2> https://quick-bench.com/q/z1MfZDeu8RBj_q6d3xx1cJGTJ7c here is my quick bench
23:27 < bridge> <Jupstar ‚ú™> It also depends on if u do a heap allocation which is ofc slow
23:27 < bridge> <Jupstar ‚ú™> 
23:27 < bridge> <Jupstar ‚ú™> Anyway
23:27 < bridge> <heinrich5991> Learath2 seems to do heap alloc in both cases
23:28 < bridge> <Jupstar ‚ú™> My argument is
23:28 < bridge> <Jupstar ‚ú™> Type guarantees let u optimize it. Printf will always need to parse the format string if it's not moved to consteval
23:28 < bridge> <heinrich5991> the argument is irrelevant, unless you talk about a non-existant implementation
23:28 < bridge> <heinrich5991> the benchmark proves it's currently slower with the actual implementations
23:29 < bridge> <Jupstar ‚ú™> But u can control the stream base class
23:29 < bridge> <Learath2> If we are going to talk hypotheticals, aren't both of them doing the exact same thing, with the exact same types and constants so should both optimize to the exact same thing?
23:29 < bridge> <heinrich5991> ah true, that too
23:30 < bridge> <heinrich5991> gcc optimizes `printf("%s\n", string);` to `puts(string);`
23:30 < bridge> <heinrich5991> in the same way, it could optimize `snprintf(buf, sizeof(buf), "%d", integer);` to the fastest integer conversion routine
23:31 < bridge> <Jupstar ‚ú™> Wow cool guys
23:31 < bridge> <Jupstar ‚ú™> Finally u understand
23:31 < bridge> <Learath2> Why does it have to end up as a stream?
23:31 < bridge> <heinrich5991> https://c.godbolt.org/z/qqj5fnW1b
23:32 < bridge> <Learath2> I guess(tm) you could make `std::ostringstream` similarly fast by creating a format string internally
23:32 < bridge> <Jupstar ‚ú™> As said printf can't beat CPP here. If it does, it's because CPP implementation suck. Play around with variadic templates
23:33 < bridge> <Jupstar ‚ú™> And u understand. U can in fact even parse constants at compile time already
23:33 < bridge> <Learath2> What I don't follow is why do you take this as an a priori? It's not really obvious to me why stringstream should be faster?
23:33 < bridge> <Jupstar ‚ú™> How long is the longest int?
23:34 < bridge> <Jupstar ‚ú™> As string
23:34 < bridge> <Learath2> on x86-64 9 or 10 characters? idk off the top of my head
23:35 < bridge> <Learath2> assuming int64_t
23:35 < bridge> <Jupstar ‚ú™> How long is the longest vararg
23:36 < bridge> <Jupstar ‚ú™> If the compiler knows what's dealing with it has the potential to optimize it. I'm not saying it does
23:36 < bridge> <heinrich5991> so you're saying a sufficiently smart compiler might make it faster
23:37 < bridge> <Jupstar ‚ú™> Comparing it to a c function
23:37 < bridge> <Jupstar ‚ú™> That is not allowed to be optimized. Yes
23:38 < bridge> <heinrich5991> so an optimized C++ function might be faster than an unoptimized C function
23:38 < bridge> <Jupstar ‚ú™> I don't mean the implementation
23:38 < bridge> <Jupstar ‚ú™> I mean the information it has
23:38 < bridge> <Jupstar ‚ú™> U know what I mean. I really need to sleep now
23:39 < bridge> <heinrich5991> good night üôÇ
23:39 < bridge> <Learath2> A sufficiently smart compiler is also allowed to just look at the arguments before putting them into whatever format varargs require on the platform
