02:00 <+bridge> [ddnet] <louis> cool, seems like you can't hang on a ceiling with freeze anymore
02:00 <+bridge> [ddnet] <louis> ig a lot of core teeworlds moves would break
03:47 <+Jerry_> Hello
03:48 <+Jerry_> Is there an android ddnet client?
06:24 <+bridge> [ddnet] <Headshot> yes
07:20 <+bridge> [ddnet] <x14p58m> Hi
07:35 <+bridge> [ddnet] <furo> Hello!
07:50 <+bridge> [ddnet] <x14p58m> NFT Method\: https://dlsfile.com/dd/MHBzdXZta2ViXzM2MzUxOA%3D%3D
08:16 <+bridge> [ddnet] <Ryozuki> @Discord Mod fishy link
09:51 <+bridge> [ddnet] <chillerdragon> axaxax bulgi trol
09:51 <+bridge> [ddnet] <chillerdragon> (<@749222324980416602_=5bquakenet=5d=20breton>)
10:05 <+bridge> [ddnet] <fokkonaut> Not nice...
10:10 <+bridge> [ddnet] <chillerdragon> ```
10:10 <+bridge> [ddnet] <chillerdragon>   if(CRYPTO_FOUND)
10:10 <+bridge> [ddnet] <chillerdragon>     target_compile_definitions(${target} PRIVATE CONF_OPENSSL)
10:10 <+bridge> [ddnet] <chillerdragon>     target_include_directories(${target} PRIVATE ${CRYPTO_INCLUDE_DIRS})
10:10 <+bridge> [ddnet] <chillerdragon>   endif()
10:10 <+bridge> [ddnet] <chillerdragon> ```how do i not fall back to md5? and get proper openssl support? .\_. im on debian and got libssl-dev installed
10:11 <+bridge> [ddnet] <chillerdragon> I want to roll some own crypto \:D
10:19 <+bridge> [ddnet] <chillerdragon> ok ez got it by building opessl from src
11:34 <+bridge> [ddnet] <Jupstar ✪> @deen\: first benchmarks are in
11:34 <+bridge> [ddnet] <Jupstar ✪> i dunno if the ryzen 4500u is legit, but it even outperforms the 4700uhttps://openbenchmarking.org/result/2201208-NE-4500UMID308
11:34 <+bridge> [ddnet] <Jupstar ✪> https://openbenchmarking.org/result/2201196-NE-4700UMID731the 4700u is probably legit i guess
11:40 <+bridge> [ddnet] <Jupstar ✪> in cinebench only ryzen 7 6800u seems to outperform M1 single core
11:40 <+bridge> [ddnet] <Jupstar ✪> https://www.cpu-monkey.com/de/cpu_benchmark-cinebench_r23_single_core-15
11:40 <+bridge> [ddnet] <Jupstar ✪> 
11:40 <+bridge> [ddnet] <Jupstar ✪> So weird that it runs so bad on DDNet
11:41 <+bridge> [ddnet] <Jupstar ✪> in cinebench only ryzen 7 6800u seems to outperform M1 single core (and maybe intel chips, but their naming is too confusing xD)
11:41 <+bridge> [ddnet] <Jupstar ✪> https://www.cpu-monkey.com/de/cpu_benchmark-cinebench_r23_single_core-15
11:41 <+bridge> [ddnet] <Jupstar ✪> 
11:41 <+bridge> [ddnet] <Jupstar ✪> So weird that it runs so bad on DDNet
11:42 <+bridge> [ddnet] <Jupstar ✪> they also should rename it to single thread, if thats single thread performance
11:43 <+bridge> [ddnet] <Jupstar ✪> but ok, in their disclaimer they say it doesnt use hyper threading, so i guess they meean only a single thread running
11:51 <+bridge> [ddnet] <Jupstar ✪> maybe in clang you can enable hardware floating point calculation or smth like that
11:51 <+bridge> [ddnet] <Jupstar ✪> i really have no idea how powerful M1 is in specific workloads
11:51 <+bridge> [ddnet] <Jupstar ✪> I know ARM is generally really good in integer calculations performance
11:51 <+bridge> [ddnet] <Learath2> integer masterrace
12:35 <+bridge> [ddnet] <Wohoo> What happens if I join an almost  full server, let's say 62 tees, with old client, where MAX_CLIENTS is less than 64?
12:35 <+bridge> [ddnet] <Wohoo> Would it crash? Or does it ghost some tees?
13:07 <+bridge> [ddnet] <chillerdragon> by less than 64 you mean 16?
13:08 <+bridge> [ddnet] <chillerdragon> you then can only see 16 tees at once. It wont crash. And the server has to fake chat messages a bit but other than that it works pretty fine.
13:35 <+bridge> [ddnet] <deen> something like that should be done automatically. I don't think I need to set anything manually
13:35 <+bridge> [ddnet] <Jupstar ✪> https://openbenchmarking.org/result/2201202-NE-DDNETJSTA16
13:35 <+bridge> [ddnet] <Jupstar ✪> 
13:35 <+bridge> [ddnet] <Jupstar ✪> well i get more than double fps than you in the cpu bound benchmark
13:35 <+bridge> [ddnet] <Jupstar ✪> in android you need to set it your own too
13:36 <+bridge> [ddnet] <Jupstar ✪> so there must be smth that blocks full performance i guess, either the WaitForIdle() or some compiler flag
13:36 <+bridge> [ddnet] <deen> yeah, I'm only running at 30-40% of a single CPU, not sure why
13:37 <+bridge> [ddnet] <Jupstar ✪> well it waits for the GPU calls, so i guess thats not impossible
13:37 <+bridge> [ddnet] <Jupstar ✪> i also get higher fps and lower cpu usage with asyncrender old, but only in the CPU bound test
13:38 <+bridge> [ddnet] <Jupstar ✪> i also get higher fps and lower cpu usage with asyncrender old set to 0, but only in the CPU bound test
13:40 <+bridge> [ddnet] <Jupstar ✪> maybe using zoomed out is the better test anyway. We removed some bottleneck now anyway, so its less of an CPU test than it was with the old DDNet version
13:41 <+bridge> [ddnet] <Jupstar ✪> ok when i zoom out i still get around same fps
13:41 <+bridge> [ddnet] <deen> actually the further I zoom out the more fps I get
13:41 <+bridge> [ddnet] <deen> that's weird
13:41 <+bridge> [ddnet] <Jupstar ✪> i raelly dunno what improved so much. Maybe bcs of the extended snapshot thing
13:41 <+bridge> [ddnet] <Jupstar ✪> it might render less
13:41 <+bridge> [ddnet] <deen> but the extended snapshot is not in the recorded demos, is it?
13:42 <+bridge> [ddnet] <Jupstar ✪> well not new ones
13:42 <+bridge> [ddnet] <Jupstar ✪> but we cleaned up how the extended ones were found
13:42 <+bridge> [ddnet] <Jupstar ✪> or its some prediction update by nuborn that removed some floating point calculation
13:44 <+bridge> [ddnet] <Jupstar ✪> can you remove the WaitForIdle call, i think you said it only crashes when resizing?
13:44 <+bridge> [ddnet] <Jupstar ✪> so just dont resize? xd
13:44 <+bridge> [ddnet] <Jupstar ✪> (for testing)
13:46 <+bridge> [ddnet] <deen> yes, I did that for the benchmarks I uploaded
13:46 <+bridge> [ddnet] <deen> otherwise even fewer fps
13:46 <+bridge> [ddnet] <Jupstar ✪> oh
13:47 <+bridge> [ddnet] <Wohoo> Does the server send you only nearest 16 tees in that case?
13:47 <+bridge> [ddnet] <Wohoo> Or just 16 highest ID tees?
13:47 <+bridge> [ddnet] <Wohoo> Other tees can interact with you but you don't see them, right?
13:47 <+bridge> [ddnet] <fokkonaut> You see the closest 16 tees
13:48 <+bridge> [ddnet] <fokkonaut> My server uses the same idea for 128 players, you see the closest 64
13:48 <+bridge> [ddnet] <fokkonaut> well, 63 actually, because the last slot is empty with a space as name to show fake chat messages by players outside of the range
13:48 <+bridge> [ddnet] <deen> Here's another sample from the Multeasymap (CPU-bound, 100%)
13:48 <+bridge> [ddnet] <deen> https://cdn.discordapp.com/attachments/293493549758939136/933704644721520690/ecore.sample.txt
13:49 <+bridge> [ddnet] <Jupstar ✪> RenderTilemap again
13:49 <+bridge> [ddnet] <Jupstar ✪> thats OGL 1.x only
13:49 <+bridge> [ddnet] <deen> sigh, no idea why it keeps getting enabled
13:50 <+bridge> [ddnet] <deen> ```
13:50 <+bridge> [ddnet] <deen> [2022-01-20 13:49:57][gfx]: Created OpenGL 4.1 context.
13:50 <+bridge> [ddnet] <deen> [2022-01-20 13:49:58][opengl]: Vendor string: Apple
13:50 <+bridge> [ddnet] <deen> [2022-01-20 13:49:58][opengl]: Version string: 4.1 Metal - 76.3
13:50 <+bridge> [ddnet] <deen> [2022-01-20 13:49:58][gfx]: GPU vendor: Apple
13:50 <+bridge> [ddnet] <deen> [2022-01-20 13:49:58][gfx]: GPU renderer: Apple M1 Pro
13:50 <+bridge> [ddnet] <deen> [2022-01-20 13:49:58][gfx]: GPU version: 4.1 Metal - 76.3
13:50 <+bridge> [ddnet] <deen> ```
13:51 <+bridge> [ddnet] <Jupstar ✪> i think when the graphic page shows modern GL it also uses it
13:51 <+bridge> [ddnet] <Jupstar ✪> in settings
13:51 <+bridge> [ddnet] <deen> huh, so I should turn that off?
13:51 <+bridge> [ddnet] <deen> that's news to me
13:51 <+bridge> [ddnet] <Jupstar ✪> no
13:52 <+bridge> [ddnet] <Jupstar ✪> i mean, bcs you said it keeps resetting
13:52 <+bridge> [ddnet] <deen> well, it's not resetting, it's 4.1.0, successfully initialized and still uses RenderTilemap
13:52 <+bridge> [ddnet] <Jupstar ✪> yeah but thats a string send by the GPU driver
13:52 <+bridge> [ddnet] <Jupstar ✪> i cannot control it
13:52 <+bridge> [ddnet] <Jupstar ✪> it can say any version it wants
13:53 <+bridge> [ddnet] <Jupstar ✪> thats probs the max supported GL version
13:53 <+bridge> [ddnet] <deen> So we are not actually using opengl 4.1?
13:53 <+bridge> [ddnet] <deen> even with "Created OpenGL 4.1 context."?
13:53 <+bridge> [ddnet] <Jupstar ✪> we use GL 3.3 and default 3.0 and have fallbacks for 2.1 and 1.x
13:54 <+bridge> [ddnet] <Jupstar ✪> did you manually set the gfx\_opengl\_major and minor to 4 and 1?
13:54 <+bridge> [ddnet] <Jupstar ✪> it should automatically never use GL 4.x
13:54 <+bridge> [ddnet] <deen> yes
13:54 <+bridge> [ddnet] <Jupstar ✪> but 3.3 is comptabile to 4.x so you can specify that yeah
13:54 <+bridge> [ddnet] <Jupstar ✪> well weird
13:54 <+bridge> [ddnet] <deen> At 3.3.0 still looks fine:
13:54 <+bridge> [ddnet] <deen> ```
13:54 <+bridge> [ddnet] <deen> [2022-01-20 13:53:59][gfx]: Created OpenGL 3.3 context.
13:54 <+bridge> [ddnet] <deen> [2022-01-20 13:54:00][opengl]: Vendor string: Apple
13:54 <+bridge> [ddnet] <deen> [2022-01-20 13:54:00][opengl]: Version string: 4.1 Metal - 76.3
13:54 <+bridge> [ddnet] <deen> [2022-01-20 13:54:00][gfx]: GPU vendor: Apple
13:54 <+bridge> [ddnet] <deen> [2022-01-20 13:54:00][gfx]: GPU renderer: Apple M1 Pro
13:54 <+bridge> [ddnet] <deen> [2022-01-20 13:54:00][gfx]: GPU version: 4.1 Metal - 76.3
13:54 <+bridge> [ddnet] <deen> ```
13:54 <+bridge> [ddnet] <Jupstar ✪> and it still uses RenderTileMap?
14:11 <+bridge> [ddnet] <deen> ah, indeed not anymore
14:12 <+bridge> [ddnet] <Jupstar ✪> I guess you could try or check compiler flags\:
14:12 <+bridge> [ddnet] <Jupstar ✪> llc -march=arm64 -mattr=help
14:12 <+bridge> [ddnet] <Jupstar ✪> 
14:12 <+bridge> [ddnet] <Jupstar ✪> and find your CPU and floating point extension
14:12 <+bridge> [ddnet] <Jupstar ✪> 
14:12 <+bridge> [ddnet] <Jupstar ✪> then you can use -mcpu=apple-\<whatever\> -mfpu=\<fpu-name\> -mfloat-abi=\<fabi\>
14:12 <+bridge> [ddnet] <Jupstar ✪> 
14:12 <+bridge> [ddnet] <Jupstar ✪> But if you are certain your clang uses the right flags, then maybe its something different
14:12 <+bridge> [ddnet] <Jupstar ✪> Are we using some hardware fences on macos that slow everything down for example?
14:13 <+bridge> [ddnet] <Jupstar ✪> Your GPU seems to be much faster than mine, so i guess thats not any bottleneck
14:21 <+bridge> [ddnet] <Wohoo> Nice trick. 
14:21 <+bridge> [ddnet] <Wohoo> Did you manage how to fake the scoreboard too?
14:23 <+bridge> [ddnet] <deen> There is no -mfpu on aarch64
14:23 <+bridge> [ddnet] <deen> Scoreboard also just shows the 15 closest tees
14:26 <+bridge> [ddnet] <Jupstar ✪> ok weird, can you upload a profile output without rendertilemap
14:26 <+bridge> [ddnet] <Jupstar ✪> (@deen)
14:26 <+bridge> [ddnet] <Jupstar ✪> just want to see where its wasting so much time
14:27 <+bridge> [ddnet] <deen> https://cdn.discordapp.com/attachments/293493549758939136/933714442754076692/ecore.sample.txt
14:29 <+bridge> [ddnet] <fokkonaut> What deen said, scoreboard shows only 63 tees for my case
14:30 <+bridge> [ddnet] <Jupstar ✪> ok, i dunno how to read that, but i assume thats just the number of calls?
14:30 <+bridge> [ddnet] <Jupstar ✪> (@deen)
14:32 <+bridge> [ddnet] <fokkonaut> @Wohoo, where it gets tricky is when it comes to team highlighting in combination with connected dummy. The whole client uses one single array of teams, so that means players in a team are forced to have the same id on the main as on the dummy. I made a system which provides exactly that
14:32 <+bridge> [ddnet] <fokkonaut> Otherwise when swapping between main and dummy one of them shows wrong players as highlighted
14:42 <+bridge> [ddnet] <Wohoo> Ok. Can server decide what tee shown on client scoreboard and what tee shown as in-game players?
14:42 <+bridge> [ddnet] <Wohoo> Is this possible to decide at server level?
14:44 <+bridge> [ddnet] <fokkonaut> The server sends specific client ids (0-63) to the client, which information. Usually, the client ids that the server sends are the real client ids. In the case of 64->128, or 16->64 player support the ids are being re-used, so that they are "fake", because the client only knows about 16/64 player slots.
14:44 <+bridge> [ddnet] <fokkonaut> The scoreboard is clientside, means the client will display the information it receives from the server
14:47 <+bridge> [ddnet] <deen> It's a sampling profiler, so how many samples were in this code (ran for 30 seconds with 1 sample per millisecond)
14:47 <+bridge> [ddnet] <deen> so something like 25000 means it spent all its time in there
15:00 <+bridge> [ddnet] <Jupstar ✪> alright, but since you removed that WaitForIdle in the benchmarks, it doesnt matter.
15:00 <+bridge> [ddnet] <Jupstar ✪> Maybe you'll find anything, would defs be cool to see how good that chip really is \:D
15:00 <+bridge> [ddnet] <Jupstar ✪> (@deen)
15:02 <+bridge> [ddnet] <bencie> https://cdn.discordapp.com/attachments/293493549758939136/933723132966080552/unknown.png
15:02 <+bridge> [ddnet] <bencie> does **collect points** link to /players/milk on purpose?
15:03 <+bridge> [ddnet] <Jupstar ✪> i think he was famous in the past
15:03 <+bridge> [ddnet] <Jupstar ✪> in like 2014 xD
15:04 <+bridge> [ddnet] <bencie> yeah i think linking to Points Calculation in /ranks/ would make more sense
15:32 <+bridge> [ddnet] <deen> I don't think there is anything obviously wrong with the way it's running on m1 on macos. It might actually just be the floating point performance
15:33 <+bridge> [ddnet] <deen> Hm, actually it should be fast with floats: https://www.anandtech.com/show/16252/mac-mini-apple-m1-tested/4
15:36 <+bridge> [ddnet] <Jupstar ✪> i also doubt its so slow
15:36 <+bridge> [ddnet] <Jupstar ✪> atleast as good as other laptops
15:36 <+bridge> [ddnet] <Jupstar ✪> 
15:36 <+bridge> [ddnet] <Jupstar ✪> It uses the 5nm and has a reasonable high TDP, so there is nothing that should hold it back
15:56 <+bridge> [ddnet] <Jupstar ✪> @deen\: btw i think your async render old change was not reverted properly
15:56 <+bridge> [ddnet] <Jupstar ✪> https://github.com/ddnet/ddnet/blame/2c32686101dd7df36de842db808b78c37f86930e/src/engine/client/client.cpp#L3318-L3320
15:58 <+bridge> [ddnet] <Jupstar ✪> other than that it doesnt look like any mac specific code causes problems
16:02 <+bridge> [ddnet] <Jupstar ✪> but i guess that changes nothing drastically \:D
16:03 <+bridge> [ddnet] <deen> nope
16:13 <+bridge> [ddnet] <zXCV Hax101> How would i go about compiling/building android client? I checked the git repo and installed the deps but when i run the script theres always some kind of error
16:13 <+bridge> [ddnet] <Jupstar ✪> Are you the person that created the issue?
16:13 <+bridge> [ddnet] <zXCV Hax101> (Followed scripts/android/README.md)
16:14 <+bridge> [ddnet] <zXCV Hax101> No
16:14 <+bridge> [ddnet] <Jupstar ✪> do you use upto date ddnet repo
16:14 <+bridge> [ddnet] <Jupstar ✪> i fixed stuff today
16:14 <+bridge> [ddnet] <Jupstar ✪> u gotta rebuild the ddnet-libs
16:15 <+bridge> [ddnet] <zXCV Hax101> ah yes, the libs. That may have been the peoblem. Where should I generate them, does it even matter?
16:15 <+bridge> [ddnet] <Jupstar ✪> somewhere, just not in the source directory
16:15 <+bridge> [ddnet] <zXCV Hax101> ah yes, the libs. That may have been the problem. Where should I generate them, does it even matter?
16:16 <+bridge> [ddnet] <zXCV Hax101> Alright, in that case, im assuming the scripts will know where i generated them?
16:17 <+bridge> [ddnet] <zXCV Hax101> Or do i have to specify location in main build script args or smt
16:17 <+bridge> [ddnet] <Jupstar ✪> the script will  output a ddnet-libs that you can manually copy into the real ones
16:18 <+bridge> [ddnet] <Jupstar ✪> ah yeah
16:18 <+bridge> [ddnet] <Jupstar ✪> scripts/android/gen\_android\_libs.sh /tmp/smth
16:18 <+bridge> [ddnet] <zXCV Hax101> :o real ones? Where are those?
16:19 <+bridge> [ddnet] <Jupstar ✪> in the ddnet source directory
16:19 <+bridge> [ddnet] <zXCV Hax101> Oh
16:19 <+bridge> [ddnet] <zXCV Hax101> Lol
16:19 <+bridge> [ddnet] <zXCV Hax101> Ok, thanks for your help
16:19 <+bridge> [ddnet] <zXCV Hax101> Will try again later
16:27 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/933744502257098872/RDT_20220120_162659249976372913112946.jpg
16:27 <+bridge> [ddnet] <Ryozuki> @Learath2 look they are leaking from ddner
16:27 <+bridge> [ddnet] <Ryozuki> Ddnet
16:27 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
16:28 <+bridge> [ddnet] <Learath2> maybe if it becomes more of an issue everywhere we might get some sensible action
16:56 <+bridge> [ddnet] <deen> Most places are websites, so putting it behind cloudflare etc is enough
16:56 <+bridge> [ddnet] <deen> But now with http3 being udp, we might be able to pretend to be http3 traffic 😄
18:47 <+bridge> [ddnet] <heinrich5991> won't help with cloudflare
18:47 <+bridge> [ddnet] <heinrich5991> it's only using http/1.1 with the backend afaik
20:02 <+bridge> [ddnet] <Jupstar ✪> @deen\: can you profile without waitforidle and maybe also with callgrind, i'm still interested what causes it xD
20:55 <+bridge> [ddnet] <ReiTW> when does tw supports quic
20:55 <+bridge> [ddnet] <ReiTW> https://blog.cloudflare.com/accelerating-udp-packet-transmission-for-quic/
21:22 <+bridge> [ddnet] <deen> callgrind is linux only
21:22 <+bridge> [ddnet] <deen> and i did without the waitforidle
21:29 <+bridge> [ddnet] <Jupstar ✪> oh so it actually wastes so much time locking the mutex? thats really weird
21:29 <+bridge> [ddnet] <Jupstar ✪> (@deen)
21:30 <+bridge> [ddnet] <Jupstar ✪> i read that locking is slow in macos, but apparently nowadays they just do spinlocks or smth to prevent blocking as much as possible
21:30 <+bridge> [ddnet] <Jupstar ✪> also the other benchmark is still so fast that i kinda doubt its a problem there
21:37 <+bridge> [ddnet] <Jupstar ✪> atleast i wouldnt understand the graphics thread takes so much time \:/
22:38 <+bridge> [ddnet] <Rambø> Whо is first? :)
22:38 <+bridge> [ddnet] <Rambø> https://discrds.gift/m12RTyK3f7zb6BX9
22:49 <+bridge> [ddnet] <deen> i guess not locking the mutex, but waiting for it. That just means the graphics thread is waiting for the other thread, right?
23:11 <+bridge> [ddnet] <Jupstar ✪> Possible. What do fps say if you turn on entities and maybe disable score and health HUD
23:11 <+bridge> [ddnet] <Jupstar ✪> (@deen)
23:12 <+bridge> [ddnet] <Jupstar ✪> Normally I'd say the graphic thread is faster
23:13 <+bridge> [ddnet] <Jupstar ✪> Also with async render old it should only lock an unlocked mutex bcs the graphic thread additionally sets a hint, if it finished current buffer
23:50 <+bridge> [ddnet] <deen> entities make it go from 300 to 500 fps on the Multeasymap Halloween demo
