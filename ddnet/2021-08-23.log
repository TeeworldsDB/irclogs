09:05 <+bridge> [ddnet] <gerdoe> https://cdn.discordapp.com/attachments/293493549758939136/879259931298123786/IMG_20210823_094825_973.jpg
11:29 <+bridge> [ddnet] <Jupstar ✪> @deen do you compile SDL yourself?
11:29 <+bridge> [ddnet] <Jupstar ✪> for ddnet-libs
11:29 <+bridge> [ddnet] <deen> yes
11:29 <+bridge> [ddnet] <deen> Should I update it to 2.0.16?
11:30 <+bridge> [ddnet] <Jupstar ✪> ok, not yet, but i made a pr on sdl
11:30 <+bridge> [ddnet] <deen> I heard some people had problems
11:30 <+bridge> [ddnet] <Jupstar ✪> if that goes in we can give it a try
11:30 <+bridge> [ddnet] <deen> yeah, I can add your PR
11:30 <+bridge> [ddnet] <Jupstar ✪> yeah but i'd prefer the SDL devs atleast give a small feedback, who knows if that works on every OS XD
11:30 <+bridge> [ddnet] <Jupstar ✪> only tested it on windows and linux
11:31 <+bridge> [ddnet] <Jupstar ✪> @nori all SDL problems solved under wayland?
11:40 <+bridge> [ddnet] <nori> for me it's works on sway
11:41 <+bridge> [ddnet] <nori> i don't know how it is for gnome/kde
11:42 <+bridge> [ddnet] <Jupstar ✪> ok i'll try it too in a few minutes, and check if glews pr works to convince the glew guy to merge
11:42 <+bridge> [ddnet] <Jupstar ✪> https://github.com/nigels-com/glew/pull/216
11:42 <+bridge> [ddnet] <Jupstar ✪> 
11:42 <+bridge> [ddnet] <Jupstar ✪> Then we also wouldn't need EGL hacks probably
12:22 <+bridge> [ddnet] <Ryozuki> can someone merge/review? #4103 😀
12:22 <+bridge> [ddnet] <DDNet> https://github.com/ddnet/ddnet/pull/4103
12:29 <+bridge> [ddnet] <gerdoe> unsupport macos when xd
12:49 <+bridge> [ddnet] <Jupstar ✪> i cant run macos builds from github :c
12:53 <+bridge> [ddnet] <Jupstar ✪> the problem is, you cannot really test every case, it will be a trial and error again anyway
12:53 <+bridge> [ddnet] <Jupstar ✪> the switch bug was already not really visible
12:54 <+bridge> [ddnet] <Ryozuki> idk
12:54 <+bridge> [ddnet] <Ryozuki> but this fixes a known issue
12:55 <+bridge> [ddnet] <Jupstar ✪> just sayan
12:55 <+bridge> [ddnet] <Jupstar ✪> saiyan
12:55 <+bridge> [ddnet] <Ryozuki> super sayan
12:55 <+bridge> [ddnet] <Jupstar ✪> <-
12:56 <+bridge> [ddnet] <Ryozuki> xD
13:15 <+bridge> [ddnet] <Jupstar ✪> ^ this is why we need c++20 xd
13:15 <+bridge> [ddnet] <Jupstar ✪> u8"path"
13:15 <+bridge> [ddnet] <Jupstar ✪> finished
13:16 <+bridge> [ddnet] <Learath2> I love that Robyt is contributing to ddnet too
13:16 <+bridge> [ddnet] <Learath2> He is great at refactors, would be great to have him around
13:16 <+bridge> [ddnet] <Ryozuki> who is robyt?
13:16 <+bridge> [ddnet] <Jupstar ✪> thats for sure
13:16 <+bridge> [ddnet] <Ryozuki> is he someone famous
13:17 <+bridge> [ddnet] <Jupstar ✪> he's the last man standing vanilla contributor xd
13:17 <+bridge> [ddnet] <Ryozuki> xd
13:17 <+bridge> [ddnet] <Learath2> he has been doing some great work on 0.7 very clean commits, not clinging to staying merge-safe like others
13:17 <+bridge> [ddnet] <Learath2> Downstream client authors haven't been very happy with it but teeworlds is a mess in need of cleaning
13:18 <+bridge> [ddnet] <Ryozuki> ye
13:18 <+bridge> [ddnet] <Ryozuki> but i dont see his prs merged
13:19 <+bridge> [ddnet] <Jupstar ✪> now comes the oy drama
13:19 <+bridge> [ddnet] <Ryozuki> ah well some are
13:19 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879324004987572224/unknown.png
13:19 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
13:20 <+bridge> [ddnet] <Learath2> Nah, oy has been very receptive to his stuff. I honestly expected most to never get merged from how extensive the diffs were
13:20 <+bridge> [ddnet] <Jupstar ✪> i guess aslong as they aren't changing physics or opengl or cpu architecture he is fine xD
13:20 <+bridge> [ddnet] <Jupstar ✪> or c++1
13:20 <+bridge> [ddnet] <Jupstar ✪> 1
13:20 <+bridge> [ddnet] <Jupstar ✪> or stl
13:21 <+bridge> [ddnet] <Jupstar ✪> so basiucally stay at 1999
13:22 <+bridge> [ddnet] <Jupstar ✪> robyt3 should overtake teeworlds vanilla, and just program as he wants
13:22 <+bridge> [ddnet] <Jupstar ✪> then you get a nice teeworlds after 1-2 years
13:22 <+bridge> [ddnet] <Learath2> Seeing as I'm having trouble focusing on math maybe I should finally get rid of `base/tl`
13:23 <+bridge> [ddnet] <Jupstar ✪> 😄
13:23 <+bridge> [ddnet] <Jupstar ✪> c++20 lets go
13:23 <+bridge> [ddnet] <Learath2> I think we are doing 14 in ddnet for now, right?
13:23 <+bridge> [ddnet] <Jupstar ✪> 11
13:23 <+bridge> [ddnet] <Jupstar ✪> 17 would add filesystem support
13:23 <+bridge> [ddnet] <Jupstar ✪> c++20 adds char8_t
13:24 <+bridge> [ddnet] <Jupstar ✪> then the pr above would be 20 lines
13:24 <+bridge> [ddnet] <Jupstar ✪> instead of so many
13:24 <+bridge> [ddnet] <Jupstar ✪> just saiyan
13:24 <+bridge> [ddnet] <Learath2> Maybe we can get to 17 now so I can finally get rid of the ugly `void_t` mess in https://github.com/ddnet/ddnet/blob/master/datasrc/seven/compile.py#L121-L134
13:25 <+bridge> [ddnet] <Jupstar ✪> wtf
13:25 <+bridge> [ddnet] <Jupstar ✪> never noticed it yet
13:26 <+bridge> [ddnet] <Learath2> only instance of template magic in ddnet I guess 😛
13:26 <+bridge> [ddnet] <Learath2> ```c++
13:26 <+bridge> [ddnet] <Learath2> template<class T, typename std::enable_if<!protocol7::is_sixup<T>::value, int>::type = 0>
13:27 <+bridge> [ddnet] <Learath2>     inline int SendPackMsg(T *pMsg, int Flags, int ClientID)```
13:27 <+bridge> [ddnet] <Learath2> Allows this mess
13:28 <+bridge> [ddnet] <Ryozuki> char8_t?
13:28 <+bridge> [ddnet] <Jupstar ✪> char8_t - type for UTF-8 character representation, required to be large enough to represent any UTF-8 code unit (8 bits). It has the same size, signedness, and alignment as unsigned char (and therefore, the same size and alignment as char and signed char), but is a distinct type.
13:28 <+bridge> [ddnet] <Jupstar ✪> https://en.cppreference.com/w/cpp/language/types#char8_t
13:29 <+bridge> [ddnet] <Ryozuki> omaigat
13:29 <+bridge> [ddnet] <Ryozuki> unsigned char, char, signed char, char8_t
13:29 <+bridge> [ddnet] <Jupstar ✪> but its nice bcs std::is_same can be used with constrains to differ between math and characters
13:32 <+bridge> [ddnet] <Ryozuki> why are "string" literals in c char and not unsigned char?
13:32 <+bridge> [ddnet] <Jupstar ✪> good question
13:32 <+bridge> [ddnet] <Jupstar ✪> next question xd
13:32 <+bridge> [ddnet] <Ryozuki> in rust u have strings they are made up of u8
13:32 <+bridge> [ddnet] <Ryozuki> iirc
13:32 <+bridge> [ddnet] <Ryozuki> xd
13:33 <+bridge> [ddnet] <Ryozuki> and char type
13:33 <+bridge> [ddnet] <Ryozuki> > The char type represents a single character. More specifically, since ‘character’ isn’t a well-defined concept in Unicode, char is a ‘Unicode scalar value’, which is similar to, but not the same as, a ‘Unicode code point’.
13:33 <+bridge> [ddnet] <Jupstar ✪> fancy
13:33 <+bridge> [ddnet] <Jupstar ✪> thats the benefit of rust, clean designe
13:33 <+bridge> [ddnet] <Jupstar ✪> thats the benefit of rust, clean designed
13:33 <+bridge> [ddnet] <Ryozuki> ye
13:34 <+bridge> [ddnet] <Ryozuki> i always feel weird casting a char* to unsigned char*
13:36 <+bridge> [ddnet] <Learath2> To allow implementation flexibility I guess
13:36 <+bridge> [ddnet] <Ryozuki> whathever that means
13:36 <+bridge> [ddnet] <Ryozuki> wathever
13:36 <+bridge> [ddnet] <Ryozuki> idk how to write
13:36 <+bridge> [ddnet] <Jupstar ✪> char is unsigned under arm xd
13:37 <+bridge> [ddnet] <Learath2> e.g. afaik older ARM machines didn't have signed support, so you get to avoid a sign extend if your chars are unsigned there
13:37 <+bridge> [ddnet] <Jupstar ✪> i just recently discovered that the ddnet github wiki even mentions how to build for arm32
13:37 <+bridge> [ddnet] <Jupstar ✪> https://github.com/ddnet/ddnet/wiki/armv6h-server
13:41 <+bridge> [ddnet] <Learath2> Working with unicode strings is absolute pain in C and C++
13:42 <+bridge> [ddnet] <Learath2> You get used to it but after using modern languages with stdlibs designed in this decade it's always a bit of a bummer when I need to iterate through utf8 code points by hand
13:43 <+bridge> [ddnet] <Jupstar ✪> honestly i generally dont like working with utf8
13:43 <+bridge> [ddnet] <Jupstar ✪> if you dont program a text editor you can also just use an decoded utf8 string, so directly work in utf32 or whatever that is and dont care about the few extra bytes lost in your RAM
13:43 <+bridge> [ddnet] <Learath2> EW
13:43 <+bridge> [ddnet] <Jupstar ✪> therefore you have direct  access in your memory array
13:43 <+bridge> [ddnet] <Jupstar ✪> the offsets are all equal
13:43 <+bridge> [ddnet] <Jupstar ✪> and only encode to utf8 when needed
13:43 <+bridge> [ddnet] <Jupstar ✪> e.g. networking etc.
13:43 <+bridge> [ddnet] <Learath2> the absolute wastefulness
13:43 <+bridge> [ddnet] <Jupstar ✪> as said
13:43 <+bridge> [ddnet] <Jupstar ✪> if you dont work on text editor
13:43 <+bridge> [ddnet] <Jupstar ✪> it doesnt matter
13:43 <+bridge> [ddnet] <Learath2> You are quadrupling memory use 😄
13:44 <+bridge> [ddnet] <Jupstar ✪> wchar_t is 32bit under linux
13:44 <+bridge> [ddnet] <Jupstar ✪> ok
13:44 <+bridge> [ddnet] <Learath2> Which is why you wouldn't find any wchars in any code I write 😛
13:45 <+bridge> [ddnet] <Jupstar ✪> max ddnet chat message = 256 chars, maybe 10 total
13:45 <+bridge> [ddnet] <Jupstar ✪> 2560 bytes * 4 = 10 240
13:45 <+bridge> [ddnet] <Jupstar ✪> its nothing
13:45 <+bridge> [ddnet] <Jupstar ✪> 10kb and you have no disadvantes of utf8
13:45 <+bridge> [ddnet] <Jupstar ✪> decoding utf8 on fly wastes cpu performance
13:45 <+bridge> [ddnet] <Jupstar ✪> and freetype only takes decoded anyway
13:46 <+bridge> [ddnet] <Learath2> I bet prefetch and using the cache line more efficiently more than makes up for it
13:46 <+bridge> [ddnet] <Jupstar ✪> so you decode every code point every time
13:46 <+bridge> [ddnet] <Jupstar ✪> i doubt at that small numbers
13:47 <+bridge> [ddnet] <Jupstar ✪> make a 256byte unicode string and get a random offset
13:47 <+bridge> [ddnet] <Jupstar ✪> and see the performance
13:48 <+bridge> [ddnet] <Jupstar ✪> utf8 vs 32
13:48 <+bridge> [ddnet] <Jupstar ✪> then we'll know
13:49 <+bridge> [ddnet] <Learath2> It's absolutely trivial to craft a testcase that would make either look worse
13:49 <+bridge> [ddnet] <Jupstar ✪> then make on that makes utf32 look worse
13:49 <+bridge> [ddnet] <Jupstar ✪> but in a realistic ddnet task
13:50 <+bridge> [ddnet] <Jupstar ✪> bcs that was my condition
13:52 <+bridge> [ddnet] <Learath2> Sure, since you didn't mention a metric it is trivial. 1) Receive any message that is just ascii (most of our messages) 2) Notice that your 256 character message is now taking 1k of memory 3) Notice memory does not grow on trees
13:52 <+bridge> [ddnet] <Jupstar ✪> most players are chinese arent they
13:52 <+bridge> [ddnet] <Learath2> Sure, for them notice your 512b message is now taking 1k, similar
13:52 <+bridge> [ddnet] <Jupstar ✪> so you probs often have 4byte utf8
13:53 <+bridge> [ddnet] <Jupstar ✪> yes
13:53 <+bridge> [ddnet] <Jupstar ✪> not going to deny there are disadvantes
13:53 <+bridge> [ddnet] <Jupstar ✪> not going to deny there are disadvantages
13:53 <+bridge> [ddnet] <Jupstar ✪> if you proof me wrong, i accept it
13:53 <+bridge> [ddnet] <Learath2> The disregard with which you treat memory usage actually makes me so annoyed
13:53 <+bridge> [ddnet] <Learath2> This attitude is how we ended up with browsers that use the entire system memory
13:54 <+bridge> [ddnet] <Jupstar ✪> i dunno
13:54 <+bridge> [ddnet] <Jupstar ✪> i think its unrelated
13:54 <+bridge> [ddnet] <Jupstar ✪> browers use utf8 probably
13:54 <+bridge> [ddnet] <Learath2> No not utf32, the attitude of "it's just a few bytes" is what I take issue with
13:54 <+bridge> [ddnet] <Jupstar ✪> but its true
13:55 <+bridge> [ddnet] <Jupstar ✪> do you always shrink your std::vector?
13:55 <+bridge> [ddnet] <Jupstar ✪> probably no
13:55 <+bridge> [ddnet] <Jupstar ✪> so that wastes memory too
13:55 <+bridge> [ddnet] <Learath2> I extensively use linked lists in my code so it's usually not an issue for me
13:55 <+bridge> [ddnet] <Jupstar ✪> well i prefer performance over ram, there is a sweetspot sure
13:56 <+bridge> [ddnet] <Jupstar ✪> but lists in many cases have too many disadvantages bcs of the heap allocations
13:56 <+bridge> [ddnet] <Learath2> Modern arena based allocators are extremely good at putting linked list nodes in the same bucket for me
13:57 <+bridge> [ddnet] <Learath2> But if I'm using a vector I do try to reserve if at all possible and if I'm doing bulk insertions I do shrink it afterwards
13:57 <+bridge> [ddnet] <Jupstar ✪> it depends on the usecase anyway, but i want a 2d game as use case
13:58 <+bridge> [ddnet] <Jupstar ✪> and there the hotpath should stay away from as much allocations or decoding etc as possible
13:58 <+bridge> [ddnet] <Jupstar ✪> but if you want to write a test case and proof me wrong, i'd be glad bcs its better to learn from such things than not 😄
13:59 <+bridge> [ddnet] <Learath2> I mean you constrained me to cases where utf32 is strictly better, so I guess you win. There is no way in hell O(n) indexing is better than O(1) indexing in a 256b string
14:00 <+bridge> [ddnet] <Learath2> Try the same in a 4Mb string and you won't be very glad with your now 16Mb string with now O(n) indexing because it can't fit in even L3 cache
14:01 <+bridge> [ddnet] <Jupstar ✪> possible, i dunno honestly
14:01 <+bridge> [ddnet] <Jupstar ✪> depends of if the processor even loads it into l3 cache at all
14:04 <+bridge> [ddnet] <Learath2> Besides indexing is an operation hardly used at all in string manipulation, atleast not without first scanning through the string anyway
14:05 <+bridge> [ddnet] <gerdoe> yeah and ddnet too
14:05 <+bridge> [ddnet] <gerdoe> every tw project xd
14:34 <+bridge> [ddnet] <Comrade> what's the point of using char8_t instead of char?
14:34 <+bridge> [ddnet] <Comrade> i'm reading its papers and can't find anything
14:34 <+bridge> [ddnet] <Comrade> https://en.cppreference.com/w/cpp/string/char_traits/cmp
14:34 <+bridge> [ddnet] <Comrade> > For the char specialization, eq and lt are defined identically to the built-in operators == and < for type unsigned char (not char).
14:36 <+bridge> [ddnet] <uwu> :giftee_green:
14:38 <+bridge> [ddnet] <Jupstar ✪> mathematically speaking there probably isnt any
14:38 <+bridge> [ddnet] <Jupstar ✪> You could code your codebase to distinct between utf8 and ansii
14:38 <+bridge> [ddnet] <Jupstar ✪> 
14:38 <+bridge> [ddnet] <Jupstar ✪> template <typename T>
14:38 <+bridge> [ddnet] <Jupstar ✪> concept IsUtf = std::is_same_v<T, char8_t> || std::is_same_v<T, char16_t>; //....
14:38 <+bridge> [ddnet] <Jupstar ✪> 
14:38 <+bridge> [ddnet] <Jupstar ✪> template<typename T>
14:38 <+bridge> [ddnet] <Jupstar ✪> void do_smth(T ...) requires IsUtf<T>
14:38 <+bridge> [ddnet] <Jupstar ✪> {
14:38 <+bridge> [ddnet] <Jupstar ✪>  .. do smth for utf
14:38 <+bridge> [ddnet] <Jupstar ✪> }
14:38 <+bridge> [ddnet] <Jupstar ✪> 
14:38 <+bridge> [ddnet] <Jupstar ✪> 
14:38 <+bridge> [ddnet] <Jupstar ✪> template<typename T>
14:38 <+bridge> [ddnet] <Jupstar ✪> void do_smth(T ...) requires !IsUtf<T>
14:38 <+bridge> [ddnet] <Jupstar ✪> {
14:38 <+bridge> [ddnet] <Jupstar ✪> .. do smth for other types
14:38 <+bridge> [ddnet] <Jupstar ✪> }
14:38 <+bridge> [ddnet] <Jupstar ✪> mathematically speaking there probably isnt any
14:39 <+bridge> [ddnet] <Jupstar ✪> You could code your codebase to distinct between utf8 and ansii
14:39 <+bridge> [ddnet] <Jupstar ✪> 
14:39 <+bridge> [ddnet] <Jupstar ✪> ```
14:39 <+bridge> [ddnet] <Jupstar ✪> template <typename T>
14:39 <+bridge> [ddnet] <Jupstar ✪> concept IsUtf = std::is_same_v<T, char8_t> || std::is_same_v<T, char16_t>; //....
14:39 <+bridge> [ddnet] <Jupstar ✪> 
14:39 <+bridge> [ddnet] <Jupstar ✪> template<typename T>
14:39 <+bridge> [ddnet] <Jupstar ✪> void do_smth(T ...) requires IsUtf<T>
14:39 <+bridge> [ddnet] <Jupstar ✪> {
14:39 <+bridge> [ddnet] <Jupstar ✪>  .. do smth for utf
14:39 <+bridge> [ddnet] <Jupstar ✪> }
14:39 <+bridge> [ddnet] <Jupstar ✪> 
14:39 <+bridge> [ddnet] <Jupstar ✪> 
14:39 <+bridge> [ddnet] <Jupstar ✪> template<typename T>
14:39 <+bridge> [ddnet] <Jupstar ✪> void do_smth(T ...) requires !IsUtf<T>
14:39 <+bridge> [ddnet] <Jupstar ✪> {
14:39 <+bridge> [ddnet] <Jupstar ✪> .. do smth for other types
14:39 <+bridge> [ddnet] <Jupstar ✪> }
14:39 <+bridge> [ddnet] <Jupstar ✪> ```
14:39 <+bridge> [ddnet] <uwu> 🧐
14:39 <+bridge> [ddnet] <Comrade> isn't handling everything as UTF-8 the correct way?
14:40 <+bridge> [ddnet] <Jupstar ✪> i doubt
14:40 <+bridge> [ddnet] <Jupstar ✪> does utf8 even exist in c
14:40 <+bridge> [ddnet] <Jupstar ✪> it exist in c++ <20 but only pretty annoying, and they removed it iirc in c++20
14:41 <+bridge> [ddnet] <Jupstar ✪> https://en.cppreference.com/w/cpp/locale/codecvt_utf8
14:41 <+bridge> [ddnet] <Jupstar ✪> ok not removed
14:41 <+bridge> [ddnet] <Jupstar ✪> deprecated in c++17
14:43 <+bridge> [ddnet] <Jupstar ✪> i guess they remove it as soon as there are better utf8 string functions
14:43 <+bridge> [ddnet] <Jupstar ✪> however, for the api in the std it might already be useful now
14:45 <+bridge> [ddnet] <Jupstar ✪> i guess someone under windows could try what happens if you use a utf8 path with std::filesystem
14:45 <+bridge> [ddnet] <Comrade> std::filesystem::path uses std::wstring on Windows
14:46 <+bridge> [ddnet] <Comrade> so yes, some conversion is needed
14:47 <+bridge> [ddnet] <Comrade> but i still don't see any reason why every char string shouldn't be considered as UTF-8 string 😄
14:47 <+bridge> [ddnet] <Jupstar ✪> yeah but apparently windows doesnt
14:47 <+bridge> [ddnet] <Jupstar ✪> have u seen the pr on ddnet?
14:47 <+bridge> [ddnet] <Comrade> which one?
14:48 <+bridge> [ddnet] <Jupstar ✪> #4111
14:48 <+bridge> [ddnet] <DDNet> https://github.com/ddnet/ddnet/pull/4111
14:49 <+bridge> [ddnet] <Jupstar ✪> try that pr with char8_t xd
14:49 <+bridge> [ddnet] <Jupstar ✪> i dont know, but i could imagine msvc added support for it
14:50 <+bridge> [ddnet] <Jupstar ✪> bcs devs are annoyed by these legacy things
14:51 <+bridge> [ddnet] <Comrade> it looks fine
14:53 <+bridge> [ddnet] <Comrade> i don't think char8_t can fix WinAPI awfulness in any way
14:53 <+bridge> [ddnet] <Jupstar ✪> well u8"my_pathüöäÜÖÄ.txt" is easier
14:53 <+bridge> [ddnet] <Jupstar ✪> than converting
14:54 <+bridge> [ddnet] <Jupstar ✪> what msvc does under the hood doesnt matter for the dev then
14:54 <+bridge> [ddnet] <Comrade> "my_pathüöäÜÖÄ.txt" => convert it to UTF-16 => pass it to some `W` WinAPI function
14:54 <+bridge> [ddnet] <Comrade> it's always like that with or without char8_t
14:55 <+bridge> [ddnet] <Jupstar ✪> yeah but since its a distinct type windows can handle it internally
14:55 <+bridge> [ddnet] <Jupstar ✪> it knows it expects an utf8 string now
14:56 <+bridge> [ddnet] <Comrade> WinAPI heavily relies on UTF-16 and it cannot be changed for sure 🤔
14:56 <+bridge> [ddnet] <Jupstar ✪> yes
14:56 <+bridge> [ddnet] <Jupstar ✪> not winapi must change
14:56 <+bridge> [ddnet] <Jupstar ✪> filesystem can implement everything
14:56 <+bridge> [ddnet] <Jupstar ✪> under the hood
14:57 <+bridge> [ddnet] <Jupstar ✪> imagine it like this
14:57 <+bridge> [ddnet] <Jupstar ✪> 
14:57 <+bridge> [ddnet] <Jupstar ✪> u8"ÜÖÄÜÖÄ.txt" works on every system
14:57 <+bridge> [ddnet] <Jupstar ✪> standard
14:58 <+bridge> [ddnet] <Comrade> ah so the point is that it's guaranteed to be UTF-8 string, so std::filesystem stuff is forced to do valid UTF-8 => UTF-16 conversion always?
14:58 <+bridge> [ddnet] <Jupstar ✪> i dunno if that stands like that in the standard
14:58 <+bridge> [ddnet] <Jupstar ✪> but i guess thats the idea yes
15:00 <+bridge> [ddnet] <Comrade> what if `std::filesystem::path file = "ÜÖÄÜÖÄ.txt"` already works as expected?
15:01 <+bridge> [ddnet] <Comrade> what if `std::filesystem::path file = "ÜÖÄÜÖÄ.txt";` already works as expected?
15:01 <+bridge> [ddnet] <Jupstar ✪> uff, thats also possible yeah, really dunno
15:01 <+bridge> [ddnet] <Comrade> and if not, it's definitely a bug
15:01 <+bridge> [ddnet] <Jupstar ✪> i could imagine c++ prepares for string functions that automatically convert such stuff to other types
15:01 <+bridge> [ddnet] <Jupstar ✪> and makes it a requirement for alot of the API
15:02 <+bridge> [ddnet] <Jupstar ✪> and char just doesnt have this requirement
15:02 <+bridge> [ddnet] <Jupstar ✪> bcs c didnt gave it it
15:03 <+bridge> [ddnet] <Comrade> so everyone should now pollute their code with `char8_t` and `u8""` junk?
15:03 <+bridge> [ddnet] <Comrade> that's bad
15:03 <+bridge> [ddnet] <Jupstar ✪> depends, how often do you use unicode?
15:03 <+bridge> [ddnet] <Jupstar ✪> but if you use, i'd do it yes
15:04 <+bridge> [ddnet] <Jupstar ✪> i mean you can probs just use char* and put (char8_t*) before it xd
15:04 <+bridge> [ddnet] <Jupstar ✪> for IO stuff
15:04 <+bridge> [ddnet] <Jupstar ✪> what you use internally is your choice anyway
15:05 <+bridge> [ddnet] <Comrade> you know, even `#pragma once` is not standardized, but it just works correctly everywhere
15:05 <+bridge> [ddnet] <Comrade> and code should be readable!
15:05 <+bridge> [ddnet] <Jupstar ✪> yes
15:05 <+bridge> [ddnet] <Jupstar ✪> i use pragma once always
15:05 <+bridge> [ddnet] <Comrade> the same applies to `char`
15:06 <+bridge> [ddnet] <Jupstar ✪> but thats different still
15:06 <+bridge> [ddnet] <Jupstar ✪> pragma once is an addition
15:06 <+bridge> [ddnet] <Jupstar ✪> not a new way
15:06 <+bridge> [ddnet] <Jupstar ✪> its more like you say header guards should work differently than they are designed
15:06 <+bridge> [ddnet] <Jupstar ✪> char just isnt designed for it
15:08 <+bridge> [ddnet] <Comrade> hmmmm maybe storing arbitrary byte sequence in `char` array actually violates some standards, but again, it just works 😄
15:08 <+bridge> [ddnet] <Jupstar ✪> its not like i dont  understand your point
15:08 <+bridge> [ddnet] <Jupstar ✪> but thats the disadvantage of an old language probably
15:08 <+bridge> [ddnet] <Jupstar ✪> not designed for the future 😄
15:08 <+bridge> [ddnet] <Comrade> yes
15:09 <+bridge> [ddnet] <Comrade> it seems that sometimes people who design C++ and people who actually use it don't understand each other
15:47 <+bridge> [ddnet] <Comrade> ```cpp
15:47 <+bridge> [ddnet] <Comrade> #include <filesystem>
15:47 <+bridge> [ddnet] <Comrade> 
15:47 <+bridge> [ddnet] <Comrade> #ifdef _WIN32
15:47 <+bridge> [ddnet] <Comrade> #include <locale.h>
15:47 <+bridge> [ddnet] <Comrade> #endif
15:47 <+bridge> [ddnet] <Comrade> 
15:47 <+bridge> [ddnet] <Comrade> int main()
15:47 <+bridge> [ddnet] <Comrade> {
15:47 <+bridge> [ddnet] <Comrade> #ifdef _WIN32
15:47 <+bridge> [ddnet] <Comrade>     setlocale(LC_ALL, ".UTF-8");
15:47 <+bridge> [ddnet] <Comrade> #endif
15:47 <+bridge> [ddnet] <Comrade> 
15:47 <+bridge> [ddnet] <Comrade>     const bool success = std::filesystem::create_directory("ÜÖÄÜÖÄ");
15:47 <+bridge> [ddnet] <Comrade> 
15:47 <+bridge> [ddnet] <Comrade>     return (success) ? 0 : 1;
15:47 <+bridge> [ddnet] <Comrade> }
15:47 <+bridge> [ddnet] <Comrade> ```
15:47 <+bridge> [ddnet] <Comrade> this works as expected on both Linux and Windows @Jupstar ✪
15:47 <+bridge> [ddnet] <Comrade> setlocale is needed on Windows
15:48 <+bridge> [ddnet] <Comrade> and it doesn't work with MinGW for some reason
15:48 <+bridge> [ddnet] <Comrade> MSVC is needed
15:48 <+bridge> [ddnet] <Jupstar ✪> mhh
15:48 <+bridge> [ddnet] <Jupstar ✪> if that has no side effects.. locale always changes so much stuff
15:48 <+bridge> [ddnet] <Jupstar ✪> printf and stuff like that
15:49 <+bridge> [ddnet] <Jupstar ✪> but good to know anyway
15:49 <+bridge> [ddnet] <Comrade> but no stupid char8_t 😄
15:50 <+bridge> [ddnet] <Jupstar ✪> but does it work with char8_t?
15:50 <+bridge> [ddnet] <Jupstar ✪> @Comrade
15:50 <+bridge> [ddnet] <Jupstar ✪> i am curious about that xxd
15:50 <+bridge> [ddnet] <Comrade> it does probably
15:50 <+bridge> [ddnet] <Comrade> let's try
15:50 <+bridge> [ddnet] <Comrade> `u8"ÜÖÄÜÖÄ"` is so ugly 😄
15:50 <+bridge> [ddnet] <Jupstar ✪> xD
15:51 <+bridge> [ddnet] <Jupstar ✪> at some point i got used to suffix and prefix of strings and numbers, so idc anymore xD
15:51 <+bridge> [ddnet] <Jupstar ✪> 6llu * 3llu xd
15:51 <+bridge> [ddnet] <Jupstar ✪> just to silence warnings
15:54 <+bridge> [ddnet] <Comrade> it still works well on Linux, but it doesn't work on Windows 😄
15:54 <+bridge> [ddnet] <Comrade> even setlocale doesn't help
15:54 <+bridge> [ddnet] <Jupstar ✪> ui, thats unexpected
15:55 <+bridge> [ddnet] <Jupstar ✪> well thats really sad, guess i need to wait for c++26 then xDD
15:55 <+bridge> [ddnet] <Comrade> or just use good old `char` 😄
15:56 <+bridge> [ddnet] <Comrade> my MSVC installation is few months old so maybe that's why it doesn't work
15:56 <+bridge> [ddnet] <Jupstar ✪> i dunno, could also be that they dont care yet
15:56 <+bridge> [ddnet] <Jupstar ✪> aslong its no requirement
15:57 <+bridge> [ddnet] <Comrade> and MinGW still doesn't work
15:57 <+bridge> [ddnet] <Comrade> tested both Wine and native Windows
15:57 <+bridge> [ddnet] <Jupstar ✪> what gcc does ur mingw use?
15:58 <+bridge> [ddnet] <Jupstar ✪> last time i tested c++20 features alot of stuff was still missing
15:58 <+bridge> [ddnet] <Comrade> `x86_64-w64-mingw32-g++ (GCC) 10-win32 20210110`
15:58 <+bridge> [ddnet] <Comrade> looks quite old
15:58 <+bridge> [ddnet] <Jupstar ✪> yeah, but probs still newer than mine xd
15:58 <+bridge> [ddnet] <Comrade> but it doesn't complain about `-std=c++20` at least
15:59 <+bridge> [ddnet] <Jupstar ✪> https://en.cppreference.com/w/cpp/compiler_support#C.2B.2B20_features
15:59 <+bridge> [ddnet] <Jupstar ✪> msvc is actually really good
15:59 <+bridge> [ddnet] <Jupstar ✪> implemented most stuff
16:01 <+bridge> [ddnet] <Comrade> yes, and STL source code is available finally
16:01 <+bridge> [ddnet] <Comrade> https://github.com/microsoft/STL/blob/472161105d596192194d4715ccad307c6c163b4a/stl/src/filesystem.cpp#L266
16:01 <+bridge> [ddnet] <Jupstar ✪> ah nice
16:17 <+bridge> [ddnet] <Ryozuki> im now fully vaccinated 2/2
16:17 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
16:17 <+bridge> [ddnet] <Ryozuki> :greenthing:
16:20 <+bridge> [ddnet] <Ryozuki> in rust a string has to be valid utf8
16:20 <+bridge> [ddnet] <Ryozuki> but c doesnt have strings anyway
16:20 <+bridge> [ddnet] <Ryozuki> just buffers of data that end with a \\0
16:20 <+bridge> [ddnet] <Ryozuki> :feelsbadman:
16:21 <+bridge> [ddnet] <Comrade> nice, that's how it should be
16:21 <+bridge> [ddnet] <Ryozuki> thats also why the api for the filesystem doesnt use strings in rust iirc, since strings have to be valid utf8 buth unix paths dont
16:21 <+bridge> [ddnet] <Ryozuki> xd
16:22 <+bridge> [ddnet] <Learath2> I am here to be the cranky old man, what are we talking about this time?
16:22 <+bridge> [ddnet] <Ryozuki> that i can sense 5g waves
16:22 <+bridge> [ddnet] <Ryozuki> and that everythiung should be utf8
16:22 <+bridge> [ddnet] <Learath2> 14 days passed after your 2nd vaccine?
16:23 <+bridge> [ddnet] <Ryozuki> no i got it today
16:23 <+bridge> [ddnet] <Ryozuki> im developing my senses
16:23 <+bridge> [ddnet] <Ryozuki> :greenthing:
16:23 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879370339174453318/unknown.png
16:23 <+bridge> [ddnet] <Ryozuki> imagine having a modern std
16:25 <+bridge> [ddnet] <Ryozuki> isnt out there some more modernish libc or something
16:25 <+bridge> [ddnet] <Comrade> hmmmm PathBuf and Path 🤔
16:26 <+bridge> [ddnet] <Learath2> Facebook, google and boost all have moderner implementations of std stuff
16:27 <+bridge> [ddnet] <Learath2> What don't you like about std anyway? It is getting fairly modern nowadays, albeit very slowly
16:27 <+bridge> [ddnet] <Ryozuki> iirc the C std doesnt have filesystem stuff
16:27 <+bridge> [ddnet] <Ryozuki> c++20 does
16:28 <+bridge> [ddnet] <Learath2> Ah, C, yeah C pretty much requires companion libraries
16:28 <+bridge> [ddnet] <Ryozuki> C is so "simple" but thats why it requires either too make the wheel or use libs, and managing libs is a pain
16:28 <+bridge> [ddnet] <Ryozuki> xd
16:29 <+bridge> [ddnet] <Ryozuki> did u figure out the cdoor collision stuff?=
16:29 <+bridge> [ddnet] <Learath2> I know how it works now
16:29 <+bridge> [ddnet] <Ryozuki> :o
16:30 <+bridge> [ddnet] <Learath2> It creates some weird pseudo layer, it's extremely odd how it's implemented
16:49 <+bridge> [ddnet] <Ryozuki> oddly i always name the files lol when testing stuff
16:49 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879376850835611718/unknown.png
16:49 <+bridge> [ddnet] <Ryozuki> just noticed lol
16:50 <+bridge> [ddnet] <Robyt3> are you that one guy hosting a server with "sv_hostname lol"? lol
16:50 <+bridge> [ddnet] <Ryozuki> not hosting a sv rn lol xd
16:51 <+bridge> [ddnet] <Jupstar ✪> ```
16:51 <+bridge> [ddnet] <Jupstar ✪> maintest.cpp  mh.cpp           moduletest.o    test.c      test.cpp  test.txt
16:51 <+bridge> [ddnet] <Jupstar ✪> a.out2  compile.sh  main.cpp  mh2.cpp       moduletest.cppm  moduletest.pcm  test.c.obj  test.exe  tmp
16:51 <+bridge> [ddnet] <Jupstar ✪> ```
16:51 <+bridge> [ddnet] <Jupstar ✪> seems like i like mh or *test
16:51 <+bridge> [ddnet] <Learath2> I always have a `~/test` 😛
16:51 <+bridge> [ddnet] <Ryozuki> @Learath2
16:51 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879377307960229928/unknown.png
16:52 <+bridge> [ddnet] <Learath2> https://cdn.discordapp.com/attachments/293493549758939136/879377457692676246/Screenshot_2021-08-23_at_17.51.51.png
16:52 <+bridge> [ddnet] <Ryozuki> @Jupstar ✪ moduletest
16:52 <+bridge> [ddnet] <Ryozuki> where u testing c++20 modules?
16:52 <+bridge> [ddnet] <Jupstar ✪> yeah
16:52 <+bridge> [ddnet] <Jupstar ✪> with clang
16:52 <+bridge> [ddnet] <Ryozuki> i think they look nice
16:52 <+bridge> [ddnet] <Jupstar ✪> but thats like 1 year old xd
16:52 <+bridge> [ddnet] <Ryozuki> xd
16:53 <+bridge> [ddnet] <Jupstar ✪> welcome to ddnet discord! 😄
16:53 <+bridge> [ddnet] <Robyt3> hey!
16:53 <+bridge> [ddnet] <Ryozuki> oh he joined
16:53 <+bridge> [ddnet] <Ryozuki> thats him
16:53 <+bridge> [ddnet] <Ryozuki> or her
16:54 <+bridge> [ddnet] <Robyt3> I'm usually just lurking around
16:54 <+bridge> [ddnet] <Ryozuki> :bluekitty:
16:55 <+bridge> [ddnet] <Ryozuki> is this zoomed or u rly have big font
16:59 <+bridge> [ddnet] <Ryozuki> L"rb" :monkalaugh:
16:59 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879379228406186034/unknown.png
16:59 <+bridge> [ddnet] <Ryozuki> windows :monkalaugh:
16:59 <+bridge> [ddnet] <Robyt3> maybe we'll add a mode L"fröüß" later lol
17:00 <+bridge> [ddnet] <Learath2> retina display, so hidpi
17:00 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879379645269671986/unknown.png
17:00 <+bridge> [ddnet] <Ryozuki> i actually dislike hiding the pointer stuff behind typedefs
17:00 <+bridge> [ddnet] <Ryozuki> its so confusing
17:01 <+bridge> [ddnet] <Learath2> winapi should really just get a reset
17:01 <+bridge> [ddnet] <Ryozuki> this is also a problem with auto iirc
17:01 <+bridge> [ddnet] <Learath2> sometimes it's okay not to support 16bit executables anymore
17:01 <+bridge> [ddnet] <Ryozuki> xd
17:02 <+bridge> [ddnet] <Learath2> I've sent this a few times, but https://devblogs.microsoft.com/commandline/windows-command-line-unicode-and-utf-8-output-text-buffer/ this blogpost really illustrates how insane winapi can get
17:02 <+bridge> [ddnet] <Ryozuki> @Robyt3 btw ur filesystem io pr doesnt conform with our naming conventions  :monkaS:
17:03 <+bridge> [ddnet] <Robyt3> you mean outside of system.c?
17:03 <+bridge> [ddnet] <Jupstar ✪> typedef has one advantage @Ryozuki 
17:03 <+bridge> [ddnet] <Jupstar ✪> char_ptr a,b;
17:03 <+bridge> [ddnet] <Jupstar ✪> are both pointers
17:03 <+bridge> [ddnet] <Robyt3> I though system.c was not following the naming conventions anyway
17:03 <+bridge> [ddnet] <Jupstar ✪> char* a,b;
17:03 <+bridge> [ddnet] <Jupstar ✪> not
17:03 <+bridge> [ddnet] <Ryozuki> iirc we dont have system.c
17:03 <+bridge> [ddnet] <Ryozuki> we are modern
17:03 <+bridge> [ddnet] <Ryozuki> we got system.cpp
17:03 <+bridge> [ddnet] <Learath2> "modern" 😄
17:03 <+bridge> [ddnet] <Ryozuki> and i think new code should conform
17:03 <+bridge> [ddnet] <Robyt3> yes, this caused me great pain during rebase
17:04 <+bridge> [ddnet] <Robyt3> lol
17:04 <+bridge> [ddnet] <Ryozuki> idk what others think
17:04 <+bridge> [ddnet] <Jupstar ✪> c++23 lets go
17:04 <+bridge> [ddnet] <Comrade> this should be illegal in both C and C++
17:04 <+bridge> [ddnet] <Jupstar ✪> i agree
17:04 <+bridge> [ddnet] <Jupstar ✪> i dislike it too
17:05 <+bridge> [ddnet] <Ryozuki> xD
17:05 <+bridge> [ddnet] <Learath2> Hm, this is a good question, I actually didn't think about what to do in system.cpp
17:05 <+bridge> [ddnet] <Ryozuki> imho new code should conform
17:05 <+bridge> [ddnet] <Ryozuki> i am also for correcting stuff
17:05 <+bridge> [ddnet] <Learath2> It is completely sane syntax if you learn C/C++ properly
17:05 <+bridge> [ddnet] <Jupstar ✪> but makes it harder to read
17:05 <+bridge> [ddnet] <Robyt3> I wanted to have ddnet and upstream somewhat stay in sync, so I didn't update the style on upstream
17:05 <+bridge> [ddnet] <Ryozuki> char *a, *b; this is valid?
17:06 <+bridge> [ddnet] <Jupstar ✪> yes
17:06 <+bridge> [ddnet] <Robyt3> but I agree that new style would be better to have everywhere
17:06 <+bridge> [ddnet] <Ryozuki> i would always put it in 2 lines anyway
17:06 <+bridge> [ddnet] <Jupstar ✪> yes
17:06 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879381158100607117/unknown.png
17:06 <+bridge> [ddnet] <Ryozuki> what is this magic number? xd
17:06 <+bridge> [ddnet] <Learath2> I will say I never have any trouble with it, you will give me no evidence at all about your claim, you will go on with your day, I'll be pissed for the entire night, so let's agree to disagree
17:07 <+bridge> [ddnet] <Jupstar ✪> wtf xD
17:07 <+bridge> [ddnet] <Learath2> Windows epoch is before unix epoch
17:07 <+bridge> [ddnet] <Robyt3> 1 January 1601
17:07 <+bridge> [ddnet] <Ryozuki> lel
17:07 <+bridge> [ddnet] <Robyt3> according to wikipedia
17:07 <+bridge> [ddnet] <Ryozuki> windows wants to be special always
17:08 <+bridge> [ddnet] <Learath2> Btw I don't remember if we clamped that, what happens if the time is before unix epoch?
17:08 <+bridge> [ddnet] <Ryozuki> :monkaS:
17:08 <+bridge> [ddnet] <Learath2> Ah I do, `t == li.QuadPart`
17:09 <+bridge> [ddnet] <Learath2> if it underflows this will fail
17:11 <+bridge> [ddnet] <Comrade> and `time_t` is still 32-bit on some platforms even today 😐
17:11 <+bridge> [ddnet] <Jupstar ✪> ah yeah, the mingw trouble
17:11 <+bridge> [ddnet] <Comrade> and signed for some reason
17:12 <+bridge> [ddnet] <Learath2> @Robyt3 I think your pr looks fine, I'll give it a more thorough eye over tonight
17:12 <+bridge> [ddnet] <Jupstar ✪> @Learath2 can you also review #4103
17:12 <+bridge> [ddnet] <DDNet> https://github.com/ddnet/ddnet/pull/4103
17:13 <+bridge> [ddnet] <Jupstar ✪> @Ryozuki btw sv_swap's default value must also be changed then
17:14 <+bridge> [ddnet] <Ryozuki> aye
17:14 <+bridge> [ddnet] <Ryozuki> should i do it?
17:14 <+bridge> [ddnet] <Jupstar ✪> i dunno
17:14 <+bridge> [ddnet] <Learath2> oooof, 4103 looks scary, I'll take a look
17:14 <+bridge> [ddnet] <Jupstar ✪> ask deen and learath if they are ready for potential trouble xD
17:14 <+bridge> [ddnet] <Ryozuki> :monkaS:
17:14 <+bridge> [ddnet] <Ryozuki> i tested it with switches and teams
17:15 <+bridge> [ddnet] <Learath2> Changing defaults shouldn't break anything
17:15 <+bridge> [ddnet] <Ryozuki> test it with team of 2 and 2+
17:15 <+bridge> [ddnet] <Jupstar ✪> when i tested it, i found the same function as cause
17:15 <+bridge> [ddnet] <Learath2> if you changed the meaning of a value feel free to update the default
17:15 <+bridge> [ddnet] <Jupstar ✪> so yeah, it probably is the right patch
17:15 <+bridge> [ddnet] <Jupstar ✪> but who knows, just look at the "new" startline skip xD
17:15 <+bridge> [ddnet] <Jupstar ✪> the players always find weird stuff xD
17:16 <+bridge> [ddnet] <Ryozuki> xD
17:16 <+bridge> [ddnet] <Jupstar ✪> `SetForceCharacterTeam`
17:16 <+bridge> [ddnet] <Jupstar ✪> this was the problem wasnt it
17:16 <+bridge> [ddnet] <Ryozuki> ye its the cause
17:16 <+bridge> [ddnet] <Ryozuki> maybe the if doesnt need to wrap the other 2 functions
17:16 <+bridge> [ddnet] <Jupstar ✪> yeah also dunno xd
17:16 <+bridge> [ddnet] <Learath2> @Ryozuki about your switchstate netobj, do you think maybe we should send it per team instead? With 64p and delta compression it's not that important and allows more flexibility. fokkonaut seemed a bit concerned
17:18 <+bridge> [ddnet] <Ryozuki> i dont understand
17:18 <+bridge> [ddnet] <Ryozuki> `int Status = (int)GameServer()->Collision()->m_pSwitchers[i].m_Status[Team()];`
17:18 <+bridge> [ddnet] <Ryozuki> isnt it alreayd per team? more or less
17:18 <+bridge> [ddnet] <Ryozuki> xd
17:18 <+bridge> [ddnet] <Learath2> Yes, but you send a snap object per character
17:19 <+bridge> [ddnet] <Ryozuki> ah
17:19 <+bridge> [ddnet] <Ryozuki> feel free to make the pr
17:19 <+bridge> [ddnet] <Learath2> And you send all players switch states to all players
17:19 <+bridge> [ddnet] <Ryozuki> :monkaS:
17:20 <+bridge> [ddnet] <Learath2> Mh, not sure if I want to make the change, I feel it's good as is. Do you see any reason?
17:20 <+bridge> [ddnet] <Ryozuki> i dont know
17:20 <+bridge> [ddnet] <Ryozuki> maybe fokkonaut should explain himself
17:20 <+bridge> [ddnet] <Ryozuki> lately his comments are "not like this"
17:20 <+bridge> [ddnet] <Ryozuki> without any explanation xd
17:21 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/879384775104802826/unknown.png
17:21 <+bridge> [ddnet] <Ryozuki> it triggers me so much xdd
17:21 <+bridge> [ddnet] <Learath2> Yeah, hm
17:21 <+bridge> [ddnet] <Learath2> @fokkonaut what was your concern with the switch state object?
17:47 <+bridge> [ddnet] <chillerdragon> because you do not have an macos? do you want me to test something?
17:47 <+bridge> [ddnet] <chillerdragon> (@Jupstar ✪)
17:47 <+bridge> [ddnet] <Jupstar ✪> a friend of a friend has a friend who has macos on an emulator which is totally not me
17:48 <+bridge> [ddnet] <Jupstar ✪> but nice reply
17:48 <+bridge> [ddnet] <Jupstar ✪> better than the one from discord xd
17:48 <+bridge> [ddnet] <Jupstar ✪> but yeah, actually you can try smth chiller
17:49 <+bridge> [ddnet] <Jupstar ✪> https://github.com/Jupeyy/ddnet/runs/3399295343
17:50 <+bridge> [ddnet] <Jupstar ✪> if you compile yourself, you need to use bundled libs, i tried the glew pr, which we also need
17:51 <+bridge> [ddnet] <Jupstar ✪> and if your mac supports it, especially try opengl 2.1 as this loads the most extensions
17:51 <+bridge> [ddnet] <chillerdragon> thats nice \:)
17:51 <+bridge> [ddnet] <chillerdragon> (@Robyt3)
17:52 <+bridge> [ddnet] <Jupstar ✪> if it starts it is already enough, tahts all i need
17:52 <+bridge> [ddnet] <chillerdragon> is mac even supported at all? I can not get any builds working.
17:52 <+bridge> [ddnet] <Jupstar ✪> you mean, if ddnet supports mac?
17:53 <+bridge> [ddnet] <chillerdragon> ya well ok to be fair only tested teeworlds
17:53 <+bridge> [ddnet] <Jupstar ✪> i wouldn't know that macos isnt supported
17:53 <+bridge> [ddnet] <Jupstar ✪> but i hope with new SDL it gets less buggy
17:53 <+bridge> [ddnet] <Jupstar ✪> bcs the version we have is buggier than the one tsfreddie is testing on
17:55 <+ChillerDragon> I am not sure if its me not using mac at all anymore but I feel like apple gets more and more trash.
17:56 <+bridge> [ddnet] <Jupstar ✪> just bcs they spy you and hide it under child porn as excuse?
17:56 <+bridge> [ddnet] <Jupstar ✪> no but i cannot judge
17:56 <+ChillerDragon> Got so many bugs with the new macbooks at work. And omagawd im not sure who? maybe zsh or the terminal someone hijacks my alt presses so i can not change irc buffers anymore aaa
17:56 <+bridge> [ddnet] <Jupstar ✪> on the emulator it ran normally
17:56 <+bridge> [ddnet] <Jupstar ✪> just the github builds dont work
17:56 <+bridge> [ddnet] <Jupstar ✪> only from ddnet.tw
17:56 <+ChillerDragon> can you compile on the emulator?
17:56 <+bridge> [ddnet] <Jupstar ✪> no
17:56 <+ChillerDragon> lemme try to compile ddnet real quick
17:57 <+bridge> [ddnet] <Jupstar ✪> and i also dont want that trouble
17:57 <+bridge> [ddnet] <Jupstar ✪> its enough is see learath struggle once per month
17:57 <+ChillerDragon> hrhrhr learath the macos guy
17:58 <+ChillerDragon> its more than just the spying its usability and availibility that feels worse than i remembered it. I feel like those two things are the main reason one uses mac.
17:58 <+ChillerDragon> "it just works"
17:59 <+bridge> [ddnet] <Jupstar ✪> its like with android, users like it, bcs its easy
17:59 <+bridge> [ddnet] <Jupstar ✪> but devs hate it
17:59 <+bridge> [ddnet] <Jupstar ✪> bcs its annoying
17:59 <+ChillerDragon> ouu android i feel like i will never try it
17:59 <+ChillerDragon> im planning to replace my iphone by a pinephone in the near future
18:00 <+ChillerDragon> only good thing about mac terminals is that cmd+c and cmd+v works :D
18:00 <+ChillerDragon> not like ctrl+shift+c like in linux
18:00 <+ChillerDragon> yea ddnet does not build on my machine latest macos
18:01 <@deen> ChillerDragon: you see PMs?
18:01 <+ChillerDragon> i see that i got one
18:02 <+ChillerDragon> but i need my archlinux desktop to open it :D
18:02 <+ChillerDragon> https://paste.zillyhuhn.com/0z
18:02 <+ChillerDragon> fakin mac
18:02 <+ChillerDragon> i use arch btw
18:04 <+bridge> [ddnet] <Ryozuki> i use arch btw
18:05 <+bridge> [ddnet] <Jupstar ✪> hi, im jupstar
18:05 <+bridge> [ddnet] <Jupstar ✪> i have an iphone btw xd
18:05 <+ChillerDragon> how can github even build
18:05 <+ChillerDragon> also im vegan
18:05 <+bridge> [ddnet] <Jupstar ✪> nice
18:05 <+ChillerDragon> im not :D
18:05 <+ChillerDragon> i just like saying it
18:06 <+bridge> [ddnet] <Jupstar ✪> i am most of the time xd
18:06 <+ChillerDragon> good meme
18:06 <+bridge> [ddnet] <Robyt3> even github macos build fails like 10% of the time randomly
18:06 <+bridge> [ddnet] <Jupstar ✪> except when i go with friends
18:07 <+ChillerDragon> running ddnet/teeworlds on macOS is cursed anyways isnt it?
18:07 <+ChillerDragon> i dont even know what the current ddnet state on my mac is 
18:07 <+ChillerDragon> https://paste.zillyhuhn.com/0z
18:07 <+bridge> [ddnet] <Jupstar ✪> i dunno, cant be that hard
18:07 <+ChillerDragon> oops wrong paste
18:07 <+bridge> [ddnet] <Jupstar ✪> if it comes hard on hard static link everything
18:07 <+ChillerDragon> oh no it launches
18:08 <+ChillerDragon> but i mean the actual expirience
18:08 <+bridge> [ddnet] <Jupstar ✪> oh, i assume it shouldnt be bad
18:08 <+bridge> [ddnet] <Jupstar ✪> except that the hardware maybe is
18:08 <+ChillerDragon> tabbing in and out didnt work iirc fonts not being rendered resolution being wrong or zoomed
18:08 <+bridge> [ddnet] <fokkonaut> Isnt it self explaining? The layer is always switch for switchstates.
18:08 <+bridge> [ddnet] <Jupstar ✪> didnt we fix all this stuff xd
18:08 <+bridge> [ddnet] <Jupstar ✪> but tabbing in out sound like SDL bug
18:08 <+bridge> [ddnet] <Jupstar ✪> that might be fixed with newer sdl versions
18:09 <+bridge> [ddnet] <gerdoe> doesn't switch layer change it's state like everytime you interact with it
18:09 <+bridge> [ddnet] <chillerdragon> ima\_25f8ed5.jpeg
18:09 <+bridge> [ddnet] <chillerdragon> https://cdn.discordapp.com/attachments/293493549758939136/879397004780924978/ima_25f8ed5.jpeg
18:09 <+bridge> [ddnet] <gerdoe> best
18:09 <+bridge> [ddnet] <gerdoe> XD
18:09 <+bridge> [ddnet] <gerdoe> wtf is that
18:09 <+bridge> [ddnet] <Jupstar ✪> is HiDPI on chiller?
18:10 <+bridge> [ddnet] <Ryozuki> chiller when new vid showing u traveling with a laptop with tw
18:10 <+bridge> [ddnet] <gerdoe> today
18:10 <+bridge> [ddnet] <chillerdragon> Yes
18:10 <+bridge> [ddnet] <gerdoe> ^^
18:10 <+bridge> [ddnet] <Jupstar ✪> wow weird
18:10 <+bridge> [ddnet] <chillerdragon> On
18:10 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=wKV18A1DluU
18:10 <+bridge> [ddnet] <Jupstar ✪> must be the old SDL version too
18:10 <+bridge> [ddnet] <Jupstar ✪> i think TSfreddie had no problems
18:10 <+bridge> [ddnet] <Jupstar ✪> he tested HiDPI and non
18:11 <+bridge> [ddnet] <Jupstar ✪> or broken opengl drivers xD
18:11 <+bridge> [ddnet] <chillerdragon> ima\_4e7a1a3.jpeg
18:11 <+bridge> [ddnet] <chillerdragon> https://cdn.discordapp.com/attachments/293493549758939136/879397338450366564/ima_4e7a1a3.jpeg
18:11 <+bridge> [ddnet] <chillerdragon> Time to get sdlvm
18:11 <+bridge> [ddnet] <fokkonaut> https://github.com/ddnet/ddnet/pull/4084#issuecomment-903225761
18:11 <+bridge> [ddnet] <fokkonaut> 
18:11 <+bridge> [ddnet] <fokkonaut> It is not required to predict players from other teams anyways, so it makes sense to only send one set of switch states per character
18:11 <+bridge> [ddnet] <fokkonaut> @Learath2
18:11 <+bridge> [ddnet] <chillerdragon> Lemme try latest official release to compare
18:11 <+bridge> [ddnet] <Robyt3> I love how drivers just mess everything up anyway
18:11 <+bridge> [ddnet] <Robyt3> like NVIDIA somehow makes it impossible to actually disable anti-aliasing
18:12 <+bridge> [ddnet] <Jupstar ✪> are you in windows @Robyt3 ?
18:12 <+bridge> [ddnet] <Jupstar ✪> OpenGL + windows = true love
18:12 <+bridge> [ddnet] <Robyt3> yes, window
18:12 <+bridge> [ddnet] <Robyt3> yes, windows
18:12 <+bridge> [ddnet] <Jupstar ✪> https://gist.github.com/Jupeyy/ca2ac80fb9765a9c4370bb9a6b88fb32
18:13 <+bridge> [ddnet] <Jupstar ✪> you can try this, it works on intel, nvidia and amd i think
18:13 <+bridge> [ddnet] <Jupstar ✪> they latest version is nice, but you only have like 60% of the native performance
18:13 <+bridge> [ddnet] <chillerdragon> im actually not planning a new one was always meant as a duology
18:13 <+bridge> [ddnet] <chillerdragon> (@Ryozuki)
18:13 <+bridge> [ddnet] <Jupstar ✪> the latest version is nice, but you only have like 60% of the native performance
18:15 <+bridge> [ddnet] <chillerdragon> i also feel like every mac is different \:D
18:15 <+bridge> [ddnet] <chillerdragon> @Jupstar ✪\: ok latest ddnet release looks pretty similar
18:16 <+bridge> [ddnet] <chillerdragon> what differences am i searching for?
18:16 <+bridge> [ddnet] <chillerdragon> what did you try to fix?
18:16 <+bridge> [ddnet] <Jupstar ✪> i just want to know if it starts
18:16 <+bridge> [ddnet] <chillerdragon> ye it starts
18:16 <+bridge> [ddnet] <chillerdragon> \:D
18:16 <+bridge> [ddnet] <Jupstar ✪> so the glew mantainer knows it works, bcs he asked ppl to test his pr
18:17 <+bridge> [ddnet] <chillerdragon> owo
18:17 <+bridge> [ddnet] <chillerdragon> can i comment on the pr?
18:17 <+bridge> [ddnet] <Jupstar ✪> https://github.com/nigels-com/glew/pull/216
18:17 <+bridge> [ddnet] <Jupstar ✪> if you have something to add xD
18:17 <+bridge> [ddnet] <Jupstar ✪> spam his emails so he merges it xD
18:17 <+bridge> [ddnet] <chillerdragon> can i write "developing graphic drivers" on my CV now?
18:17 <+bridge> [ddnet] <Jupstar ✪> glew has no compile time version, thats annoying
18:17 <+bridge> [ddnet] <chillerdragon> i liked ur comment
18:18 <+bridge> [ddnet] <chillerdragon> that should work
18:18 <+bridge> [ddnet] <Jupstar ✪> ez
18:18 <+bridge> [ddnet] <Blade> Anyone know how I can fix this?
18:18 <+bridge> [ddnet] <Blade> https://cdn.discordapp.com/attachments/293493549758939136/879399254077100042/49928c982126b87f99af55b8114650a4.png
18:18 <+bridge> [ddnet] <chillerdragon> i love how i keep getting python crash reports randomly on my mac
18:19 <+bridge> [ddnet] <chillerdragon> someone trys to run python i dont even know who \:D
18:19 <+bridge> [ddnet] <chillerdragon> maybe vim? idk
18:19 <+bridge> [ddnet] <chillerdragon> ah yes its vim \:D
18:20 <+bridge> [ddnet] <Learath2> I'm finally removing `base/tl`, Q: How do you think I should handle `sorted_array`?
18:21 <+bridge> [ddnet] <Learath2> In cases where inserts happen bulk, it's much more efficient to just insert everything and then sort, which is what I did
18:21 <+bridge> [ddnet] <Ryozuki> seems fine
18:21 <+bridge> [ddnet] <Learath2> but for `CUuidManager` inserts can always happen but currently they happen in bulk
18:22 <+bridge> [ddnet] <Learath2> How should I handle that case? Just bite the bullet and do insertion sort?
18:27 <+bridge> [ddnet] <chillerdragon> @Jupstar ✪\: btw ddnet 13.1 works fullscreen
18:27 <+bridge> [ddnet] <Jupstar ✪> nice, then its not the driver
18:27 <+bridge> [ddnet] <Jupstar ✪> maybe turn hidpi off xd
18:27 <+bridge> [ddnet] <chillerdragon> xxd
18:28 <+bridge> [ddnet] <chillerdragon> i love how i get 3 blackscreens
18:28 <+bridge> [ddnet] <chillerdragon> then a red
18:28 <+bridge> [ddnet] <chillerdragon> \:D
18:29 <+bridge> [ddnet] <Jupstar ✪> 4 windows or what?
18:29 <+bridge> [ddnet] <chillerdragon> now it blinks \:D
18:29 <+bridge> [ddnet] <chillerdragon> no\*
18:29 <+bridge> [ddnet] <Blade> Would anyone kindly help me fix the "Windows headers require the default packing option. Changing this can lead to memory corruption. This diagnostic can be disabled by building with WINDOWS_IGNORE_PACKING_MISMATCH defined." issue? I'm not familiar with VS so I'm unsure how to change the build variables
18:29 <+bridge> [ddnet] <Jupstar ✪> define WINDOWS_IGNORE_PACKING_MISMATCH
18:29 <+bridge> [ddnet] <Jupstar ✪> xD
18:30 <+bridge> [ddnet] <Blade> You'd think I just said I didn't know how
18:30 <+bridge> [ddnet] <Jupstar ✪> where did you even change the packaging option
18:30 <+bridge> [ddnet] <Jupstar ✪> did you use pragma pack?
18:30 <+bridge> [ddnet] <Blade> I just did what it said on the git, nothing more, nothing less
18:30 <+bridge> [ddnet] <Jupstar ✪> oh its on ddnet git?
18:30 <+bridge> [ddnet] <Blade> Yes
18:31 <+bridge> [ddnet] <Learath2> Did we forget to pragma pop somewhere?
18:31 <+bridge> [ddnet] <Jupstar ✪> i doubt we use it
18:31 <+bridge> [ddnet] <Jupstar ✪> heinrich killed it, when i used it once xxD
18:32 <+bridge> [ddnet] <Jupstar ✪> just use std::lower_bound or smth
18:32 <+bridge> [ddnet] <Jupstar ✪> but yeah
18:32 <+bridge> [ddnet] <Blade> Is there a stable I can use instead?
18:32 <+bridge> [ddnet] <Jupstar ✪> its still insertion sort
18:33 <+bridge> [ddnet] <Jupstar ✪> update msvc
18:33 <+bridge> [ddnet] <Jupstar ✪> i don't see why this should happening
18:34 <+bridge> [ddnet] <Blade> Updating the build tools should suffice?
18:37 <+bridge> [ddnet] <Jupstar ✪> update everything, delete cmake cache
18:37 <+bridge> [ddnet] <Jupstar ✪> the classic
18:37 <+bridge> [ddnet] <Blade> "The classic" first time working with cmake, I'm used to Bam
18:39 <+bridge> [ddnet] <chillerdragon> bam master race
18:39 <+bridge> [ddnet] <chillerdragon> I use bam btw
18:39 <+bridge> [ddnet] <Jupstar ✪> does bam even support clang?
18:39 <+bridge> [ddnet] <Blade> Is it still possible to build with bam?
18:39 <+bridge> [ddnet] <Jupstar ✪> no
18:39 <+bridge> [ddnet] <chillerdragon> ddnet no
18:39 <+bridge> [ddnet] <Jupstar ✪> and pls dont add it back
18:39 <+bridge> [ddnet] <Blade> Sadge
18:39 <+bridge> [ddnet] <gerdoe> :troll:
18:39 <+bridge> [ddnet] <chillerdragon> petition to add back bam
18:40 <+bridge> [ddnet] <Blade> I'm all for it
18:40 <+bridge> [ddnet] <chillerdragon> and ./configure autgen
18:40 <+bridge> [ddnet] <chillerdragon> and ./configure autogen
18:40 <+bridge> [ddnet] <Jupstar ✪> pls
18:40 <+bridge> [ddnet] <Blade> It was clunky and weird, but it worked
18:40 <+bridge> [ddnet] <Jupstar ✪> cmake works too
18:40 <+bridge> [ddnet] <Jupstar ✪> our CI works with MSVC
18:41 <+bridge> [ddnet] <Jupstar ✪> i dunno, just use cmake-gui
18:41 <+bridge> [ddnet] <Blade> I am
18:41 <+bridge> [ddnet] <Jupstar ✪> does the configure work?
18:41 <+bridge> [ddnet] <Jupstar ✪> no errors
18:41 <+bridge> [ddnet] <Blade> Yeah
18:41 <+bridge> [ddnet] <Blade> Worked flawlessly, just compiling threw that one error
18:41 <+bridge> [ddnet] <Jupstar ✪> well then its a MSVC problem i guess, we don't change packaging i think
18:41 <+bridge> [ddnet] <Jupstar ✪> does it name a file?
18:42 <+bridge> [ddnet] <Jupstar ✪> where the microsoft header is included from
18:42 <+bridge> [ddnet] <Blade> I'm updating msvc right now, hopefully it fixes itselfd
18:42 <+bridge> [ddnet] <Robyt3> anything that includes windows.h would trigger this warning
18:42 <+bridge> [ddnet] <Blade> I'm updating msvc right now, hopefully it fixes itself
18:42 <+bridge> [ddnet] <Blade> What Roby said
18:47 <+bridge> [ddnet] <Blade> Everything updated, same error. Seems to come from winnt.h
18:47 <+bridge> [ddnet] <Blade> Line 2482
18:48 <+bridge> [ddnet] <Jupstar ✪> mhh, also updated the windows sdk?
18:48 <+bridge> [ddnet] <Blade> Windows sdk?
18:48 <+bridge> [ddnet] <Jupstar ✪> its probably an option in the MSVC updater
18:48 <+bridge> [ddnet] <Jupstar ✪> what even is your MSVC version?
18:49 <+bridge> [ddnet] <Blade> 15.9.38
18:49 <+bridge> [ddnet] <Jupstar ✪> "As 1201ProgramAlarm mentioned above, the solution was disabling the /Zp (structure packing) compiler option.
18:49 <+bridge> [ddnet] <Jupstar ✪> 
18:49 <+bridge> [ddnet] <Jupstar ✪> "
18:49 <+bridge> [ddnet] <Jupstar ✪> https://stackoverflow.com/questions/56570681/static-assertion-failed-with-windows-headers-require-the-default-packing-option
18:49 <+bridge> [ddnet] <Jupstar ✪> right click ddnet and search that option
18:52 <+bridge> [ddnet] <Blade> Assuming you mean in CMake, I don't see any Zp option
18:52 <+bridge> [ddnet] <Jupstar ✪> in msvc
18:52 <+bridge> [ddnet] <gerdoe> do you click on ALL_BUILD?
18:53 <+bridge> [ddnet] <Blade> No, I build only DDNet
18:53 <+bridge> [ddnet] <gerdoe> kekw
18:53 <+bridge> [ddnet] <gerdoe> strange thing
18:54 <+bridge> [ddnet] <Jupstar ✪> why dont u use visual studio 2019 btw
18:55 <+bridge> [ddnet] <gerdoe> 2022 incoming xd
18:55 <+bridge> [ddnet] <Jupstar ✪> why dont u use visual studio 2022 btw
18:57 <+bridge> [ddnet] <Blade> https://i.gyazo.com/861268549a906eeb5ce2d00d9e3318ef.png
18:57 <+bridge> [ddnet] <Blade> I have no clue what I'm doing wrong
18:57 <+bridge> [ddnet] <Jupstar ✪> disable
18:57 <+bridge> [ddnet] <Jupstar ✪> maybe default is on
18:58 <+bridge> [ddnet] <Blade> I can't, I can only choose a value or "default"
18:58 <+bridge> [ddnet] <Blade> https://i.gyazo.com/db1e3e9d7b1603429e1df6e348104ada.png
18:58 <+bridge> [ddnet] <Jupstar ✪> mh i dunno then
18:58 <+bridge> [ddnet] <Jupstar ✪> google your problem or use a modern version
18:59 <+bridge> [ddnet] <Learath2> Okay, what kind of crackhead at the standards committee decided that `std::binary_search` should return a boolean?
18:59 <+bridge> [ddnet] <Learath2> It takes a dimwit of monumental stupidness to not return an index or at the very least a damn iterator
19:00 <+bridge> [ddnet] <Learath2> The person who got it in should just quit programming, taking along the people that voted yes to it
19:03 <+bridge> [ddnet] <Blade> Aight, weird. Using VS2019 worked
19:05 <+bridge> [ddnet] <Learath2> I have seriously seen smarter toasters than this person... I'll have to litter the code with `lower_bound` which is far less descriptive now
19:22 <+bridge> [ddnet] <Jupstar ✪> ```
19:22 <+bridge> [ddnet] <Jupstar ✪> Return value
19:22 <+bridge> [ddnet] <Jupstar ✪> true if an element equal to value is found, false otherwise.
19:22 <+bridge> [ddnet] <Jupstar ✪> ```
19:22 <+bridge> [ddnet] <Jupstar ✪> does that not sound reasonable?
19:30 <+bridge> [ddnet] <Learath2> It is correct, I have no problem with that, but it's also useless except for checking if something is already in a vector
19:31 <+bridge> [ddnet] <Learath2> A sane implementation would return an iterator to the found value, and the end iterator if not found
19:31 <+bridge> [ddnet] <Jupstar ✪> ah yeah
19:31 <+bridge> [ddnet] <Jupstar ✪> you are right xxd
19:32 <+bridge> [ddnet] <Jupstar ✪> didnt even notice xxD
19:32 <+bridge> [ddnet] <Learath2> Q: I'm wrapping `std::vector` to get a sorted vector of our own. Should I inherit and delete the methods that can lead to the vector getting unsorted or should I keep the vector as a private member and only expose methods of my own?
19:35 <+bridge> [ddnet] <gerdoe> second i think
19:35 <+bridge> [ddnet] <Robyt3> yep, composition > inheritance
19:37 <+bridge> [ddnet] <Jupstar ✪> inheritance best xd
19:40 <+bridge> [ddnet] <Jupstar ✪> why don't you use boost headers @Learath2 ?
19:40 <+bridge> [ddnet] <Jupstar ✪> most of these template stuff can be used in header only mode
19:42 <+bridge> [ddnet] <gerdoe> replace /base with boost xdd
19:44 <+bridge> [ddnet] <Jupstar ✪> could probably xD, boost has everything
19:44 <+bridge> [ddnet] <Jupstar ✪> but header only are safer, bcs they work everywhere
19:46 <+bridge> [ddnet] <gerdoe> don't we include boost for mysql support?
19:53 <+bridge> [ddnet] <nuborn> looking at the server code, it doesn't look like m_Layer in entity.h is used for much except to check if an entity is in switch. would be ok to remove/refactor out m_Layer, and just use m_Number == 0 when it's not in switch?
20:08 <+bridge> [ddnet] <gerdoe> make an issue or pr
20:08 <+bridge> [ddnet] <gerdoe> this chat is fast af xd
20:09 <+bridge> [ddnet] <Jupstar ✪> yes looks safe to me
20:09 <+bridge> [ddnet] <nuborn> yeah 😛
20:10 <+bridge> [ddnet] <nuborn> the only thing is that reserving Number == 0 is very clean (but not sure if using something like -1 would be better?)
20:10 <+bridge> [ddnet] <nuborn> not very clean*
20:11 <+bridge> [ddnet] <Jupstar ✪> is it even so bad to send the layer?
20:11 <+bridge> [ddnet] <Jupstar ✪> or if its always a switch layer just set it when the packet comes in?
20:12 <+bridge> [ddnet] <nuborn> I don't think so, since this won't be sent often
20:13 <+bridge> [ddnet] <nuborn> but if we are certain that m_Layer will never be used for anything else in the future (and can always be inferred from m_Number) it's perhaps not needed
20:13 <+bridge> [ddnet] <Jupstar ✪> you can never be certain xd
20:14 <+bridge> [ddnet] <Jupstar ✪> if somebody ever creates a new switch layer or smth
20:14 <+bridge> [ddnet] <nuborn> yeah, thats my thought:P
20:16 <+bridge> [ddnet] <Jupstar ✪> then argument like this in the pr, and its fine, either the ppl comment on that give better explaination or it doesn't help xD
20:17 <+bridge> [ddnet] <nuborn> yes, will comment
20:36 <+bridge> [ddnet] <Learath2> Hm, if only we were up to C++20 this would be so much prettier
20:55 <+bridge> [ddnet] <Learath2> @Jupstar ✪ https://github.com/ddnet/ddnet/commit/0e71a4770 why did you use a sorted array here? You only insert unsorted into it and you never sort it
20:56 <+bridge> [ddnet] <gerdoe> xd
20:56 <+bridge> [ddnet] <Jupstar ✪> doesnt it automatically sort?
20:56 <+bridge> [ddnet] <Learath2> Not if you insert unsorted 😛
20:57 <+bridge> [ddnet] <Jupstar ✪> shitty library then xd
20:57 <+bridge> [ddnet] <gerdoe> u
20:58 <+bridge> [ddnet] <Learath2> Ehe? You find a function literally called `add_unsorted` and you expect it to sort somehow? How? by magic? 😄
20:58 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
20:58 <+bridge> [ddnet] <gerdoe> XDD
20:58 <+bridge> [ddnet] <Jupstar ✪> but where is that even called
20:58 <+bridge> [ddnet] <Learath2> Um, since no one ever noticed that these arrays are unsorted I guess they can be replaced by vectors
20:59 <+bridge> [ddnet] <Jupstar ✪> im not so sure
20:59 <+bridge> [ddnet] <Learath2> `menus_settings_assets.cpp:L386` e.g.
20:59 <+bridge> [ddnet] <Jupstar ✪> i insert unsorted FROM a sorted array
20:59 <+bridge> [ddnet] <Learath2> So I can replace it with a simple vector
21:00 <+bridge> [ddnet] <Jupstar ✪> yes if they dont have any call to add then yes
21:01 <+bridge> [ddnet] <Jupstar ✪> and you can also remove static while u at it xdd
21:01 <+bridge> [ddnet] <Jupstar ✪> ok no
21:01 <+bridge> [ddnet] <Jupstar ✪> the temlates to lambdas is too much work
21:01 <+bridge> [ddnet] <Learath2> I think you are by far the biggest used of sorted_array in the entire source 😄
21:01 <+bridge> [ddnet] <Jupstar ✪> its not unuseful xd
21:01 <+bridge> [ddnet] <Jupstar ✪> if std would have flat_set
21:02 <+bridge> [ddnet] <Jupstar ✪> i wouldnt use it xD
21:31 <+bridge> [ddnet] <Learath2> I have a diff so large it hurts my head
21:39 <+bridge> [ddnet] <Learath2> Storing all the indexes as int was a rather large mistake on our part :/
21:41 <+bridge> [ddnet] <Jupstar ✪> instead of size_t or instead of what
21:42 <+bridge> [ddnet] <Learath2> instead of size_t
21:43 <+bridge> [ddnet] <Learath2> I hope everything still works
21:44 <+bridge> [ddnet] <Learath2> It does, wtf
21:44 <+bridge> [ddnet] <Learath2> oh nvm, no such luck `failed to open file. filename='assets/entities/comfort/blockworlds.png'`
21:45 <+bridge> [ddnet] <Jupstar ✪> its ok
21:45 <+bridge> [ddnet] <Jupstar ✪> that is not a bug
21:45 <+bridge> [ddnet] <Jupstar ✪> that just means that comfort asset pack still misses other mods
22:07 <+bridge> [ddnet] <fokkonaut> No, its also for Layer_game and layer_front
22:08 <+bridge> [ddnet] <fokkonaut> we dont need anything to determine this, number 0 is always on and also used for game and front layer
22:08 <+bridge> [ddnet] <fokkonaut> Thats why its num_switchers + 1, because 0 is reserved as always on, for game, front and also switch layer
22:09 <+bridge> [ddnet] <fokkonaut> you only need to send which switches are active for your current team, no need to know about others' switch states, as other teams shouldnt be predicted anyways (using /showothers)
22:09 <+bridge> [ddnet] <fokkonaut> and when you are spectating or in pause, no tees are predicted anyways
22:10 <+bridge> [ddnet] <fokkonaut> So the client also does not need to know any numswitchers, as it always receives every switch state (0-255) anyways
22:10 <+bridge> [ddnet] <gerdoe> huh
22:10 <+bridge> [ddnet] <fokkonaut> and the layer doesnt need to be sent because it doesnt matter, gane and front layer switches are determined by switch number 0, which is always on when sent
22:11 <+bridge> [ddnet] <fokkonaut> (if m_Status[0] is not set to true, it has to be done, thats a server issue then because i think loops start at 1)
22:12 <+bridge> [ddnet] <fokkonaut> I worked a lot with this code in my mod, i think i know it good
22:12 <+bridge> [ddnet] <gerdoe> switches should be refactored... after teams core refactor
22:13 <+bridge> [ddnet] <fokkonaut> Yes, they should, but current system also works fine.
22:13 <+bridge> [ddnet] <fokkonaut> And makes sense to me, after understanding ut
22:13 <+bridge> [ddnet] <fokkonaut> it*
22:13 <+bridge> [ddnet] <gerdoe> its literally spaghetti code
22:14 <+bridge> [ddnet] <gerdoe> yeah its understandable but bruh you should check every line that works with switches
22:15 <+bridge> [ddnet] <nuborn> about the first, entities are currently only added to layer_switch or layer_game (layer_front would currently have no special effect for entities anyway), but this is basically the same as what you say in the next message
22:16 <+bridge> [ddnet] <nuborn> I commented about this on the pr too btw
22:16 <+bridge> [ddnet] <nuborn> (entities as in actual objects in the gameworld, not the tiles)
22:18 <+bridge> [ddnet] <gerdoe> stupid Q: can we get std::bad_alloc while adding all teleouts?
22:19 <+bridge> [ddnet] <fokkonaut> I will make a pr soon, fixing the switchstate server message and i will also look at the client
22:20 <+bridge> [ddnet] <fokkonaut> Dont release a new version with the just added switchstates, new messages should always be checked carefully and well thought, according to heinrich
22:20 <+bridge> [ddnet] <fokkonaut> We dont need more of compability code
22:20 <+bridge> [ddnet] <fokkonaut> Especially in such a case
22:21 <+bridge> [ddnet] <gerdoe> Q: how many bytes does server send about one player with character?
22:21 <+bridge> [ddnet] <gerdoe> to another player
22:26 <+bridge> [ddnet] <Jupstar ✪> just use vanilla as fallback
22:26 <+bridge> [ddnet] <nuborn> that may reduce the network traffic in some cases (when there are many switches). on maps with few switches it might increase it though, especially if switching to dummy or speccing often. (and you'd also want to send this while speccing to allow adding more features on top of it)
22:26 <+bridge> [ddnet] <Jupstar ✪> outdated ddnet = vanilla
22:26 <+bridge> [ddnet] <Jupstar ✪> simple as that xd
22:30 <+bridge> [ddnet] <nuborn> besides to only send it for the characters own team you dont need to change the pr, just add a couple of lines in the server to skip the message unless  character_id == snapping_id
22:31 <+bridge> [ddnet] <fokkonaut> fits better to gamecontroller::snap
22:31 <+bridge> [ddnet] <Saiborg> Hey guys. Ive just started uni and if i translate it to english it would be Computer Engineer. In reality its more of a mix between CE and CS. Since i love this game, i thought id ask if there could be any possibility of me maybe helping out a bit in the future when ive studied a bit more? dont need to be anything huge, but if the opportunity arises i would gladly help a bit. Would give me some RL experience as well 🙂
22:32 <+bridge> [ddnet] <fokkonaut> Yeah okay, sending numswitchers might actually be cool, but i dont think sending all teams is neccessary
22:32 <+bridge> [ddnet] <gerdoe> just read the code + issues
22:33 <+bridge> [ddnet] <nuborn> there is a lot of code:P
22:33 <+bridge> [ddnet] <lynn> accounts
22:33 <+bridge> [ddnet] <lynn> jk but someone wanted animated skins a while ago
22:33 <+bridge> [ddnet] <gerdoe> skip everything unless src/game ahah
22:34 <+bridge> [ddnet] <Saiborg> Ah, yeah that would be a good idea xD Just wanted to know if you guys would be okay with someone helping out a bit.
22:34 <+bridge> [ddnet] <gerdoe> especially src/game/server
22:34 <+bridge> [ddnet] <lynn> maybe ask Learath or TsFreddie if there's any small stuff they want to fix but don't have time for
22:35 <+bridge> [ddnet] <gerdoe> as heinrich said to you
22:35 <+bridge> [ddnet] <gerdoe> "good first issue"
22:35 <+bridge> [ddnet] <gerdoe> i forgot it zd
22:35 <+bridge> [ddnet] <Saiborg> Thanks, i will do that as soon as i feel i have a bit more knowledge... Still too newb at the moment to be of any help 😛
22:36 <+bridge> [ddnet] <gerdoe> just try to do some shit with ddnet code to introduce another features you want to see in a game
22:36 <+bridge> [ddnet] <gerdoe> good train, rly xd
22:37 <+bridge> [ddnet] <Saiborg> I will give it a go 😄
22:38 <+bridge> [ddnet] <Jupstar ✪> true, starting is the hardest 😄
22:39 <+bridge> [ddnet] <lynn> ptsd
22:39 <+bridge> [ddnet] <Jupstar ✪> i think #4104 also fixed picking too huge resolutions
22:39 <+bridge> [ddnet] <Jupstar ✪> i looked in the SDL code and it always checks the resolution requested first
22:39 <+bridge> [ddnet] <DDNet> https://github.com/ddnet/ddnet/pull/4104
22:39 <+bridge> [ddnet] <lynn> i dont know cpp dont talk to me
22:39 <+bridge> [ddnet] <Jupstar ✪> bcs u don't "just" start 😄
22:40 <+bridge> [ddnet] <gerdoe> xd
22:40 <+bridge> [ddnet] <gerdoe> c/c++ da best
22:40 <+bridge> [ddnet] <gerdoe> you can do anything you want
22:40 <+bridge> [ddnet] <lynn> i will in 5 years
22:40 <+bridge> [ddnet] <lynn> irl has been too fucked up
22:40 <+bridge> [ddnet] <Jupstar ✪> yeah you can even hack yourself ez
22:40 <+bridge> [ddnet] <gerdoe> asshack ez
22:41 <+bridge> [ddnet] <gerdoe> or hackass
22:41 <+bridge> [ddnet] <gerdoe> nvm
22:47 <+bridge> [ddnet] <Ryozuki> @Pak dont wait for uni to learn programming
22:47 <+bridge> [ddnet] <Ryozuki> ofc any contribution is welcome
22:47 <+bridge> [ddnet] <Ryozuki> ah i misread u already started
22:49 <+bridge> [ddnet] <Jupstar ✪> would be funny if he already had an pr up
22:55 <+bridge> [ddnet] <Saiborg> Yeah, started today 🙂 I have some basic knowledge in Java from before, but nothing fancy
23:02 <+bridge> [ddnet] <Jupstar ✪> ddnet and being able to read discord
23:02 <+bridge> [ddnet] <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/879470573997133914/unknown.png
23:02 <+bridge> [ddnet] <Jupstar ✪> single monitor real life hacks
23:02 <+bridge> [ddnet] <gerdoe> kekw
23:03 <+bridge> [ddnet] <murpi> ontopreplica?
23:04 <+bridge> [ddnet] <Jupstar ✪> no
23:04 <+bridge> [ddnet] <Jupstar ✪> linux just allows it xD
23:04 <+bridge> [ddnet] <Jupstar ✪> to set the window half transparent
23:04 <+bridge> [ddnet] <Jupstar ✪> SDL_SetWindowOpacity
23:20 <+bridge> [ddnet] <fokkonaut> @nuborn @Ryozuki
23:33 <+bridge> [ddnet] <fokkonaut> also, i dont fully understand what https://github.com/ddnet/ddnet/pull/4108 is for
23:35 <+bridge> [ddnet] <Learath2> it's to associate entities with switches
23:36 <+bridge> [ddnet] <fokkonaut> And how does the client know where its connected to?
23:37 <+bridge> [ddnet] <Learath2> The id field within the netobj, the same way it's done with character netobjs
23:37 <+bridge> [ddnet] <nuborn> I have a pr ready for pickups and projectiles based on this, but it requires this netobj or something similar (also one for laser walls, but will test it a little first)
23:37 <+bridge> [ddnet] <fokkonaut> ah, yea
23:38 <+bridge> [ddnet] <fokkonaut> ty
23:50 <+bridge> [ddnet] <nori> hmm, 2 line diff waiting for 2 years ? :d
23:52 <+bridge> [ddnet] <nuborn> @fokkonaut sending per team seems ok to me. btw I'd replace the block with the "delete"/"new" stuff with just "continue"
23:53 <+bridge> [ddnet] <fokkonaut> no, thats inacceptable :D
23:53 <+bridge> [ddnet] <lynn> https://cdn.discordapp.com/attachments/293493549758939136/879483448857882654/unknown.png
23:53 <+bridge> [ddnet] <lynn> xd
23:53 <+bridge> [ddnet] <fokkonaut> I think it makes sense to do it like this
23:53 <+bridge> [ddnet] <fokkonaut> Really
23:53 <+bridge> [ddnet] <fokkonaut> otherwise 1. mod makers wonder why their stuff isnt working
23:54 <+bridge> [ddnet] <fokkonaut> and 2. it is just a good way, i think, because otherwise memory that is not allocated could be accessed
23:54 <+bridge> [ddnet] <fokkonaut> see how SSwitchers is built in collision.cpp
23:54 <+bridge> [ddnet] <fokkonaut> if it would be a 256 array, it would not be an issue anyways
23:54 <+bridge> [ddnet] <fokkonaut> But like this, i think this is a good way
23:56 <+bridge> [ddnet] <Jupstar ✪> xD
23:56 <+bridge> [ddnet] <fokkonaut> i think #4108 is actually okay like it is
23:56 <+bridge> [ddnet] <DDNet> https://github.com/ddnet/ddnet/pull/4108
