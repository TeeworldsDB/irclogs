00:17 < bridge> <murpi> https://tenor.com/view/imnota-cat-fubuki-gif-18573529
01:14 < bridge> <heinrich5991> should I use underscores or hyphens in crates.io crate names for libtw2: `libtw2-gamenet-ddnet` vs `libtw2_gamenet_ddnet` (https://github.com/heinrich5991/libtw2/issues/53#issuecomment-1930996865)
01:15 < bridge> <Ewan> seems to be inconsistent across existing crates so i would just go with whatever you're using internally
01:19 < bridge> <chillerdragon> I am trying to reach 0 open issues by ChillerDragon on ddnet/ddnet
01:22 < bridge> <chillerdragon> Trolling on gh is underrated. I feel I‚Äôm the only one who uses memes in prs. Even full time employees do that in Vulkan repos.
01:26 < bridge> <chillerdragon> Use the same style you used for libtw2 Huffman release. So if one wants to install something from libtw2 it‚Äôs always the same schema. Also matching the python package
05:41 < ws-client> <ChillerDragon> @robyt3 https://github.com/ddnet/ddnet/pull/7937#discussion_r1480448905 https://zillyhuhn.com/cs/.1707280845.png
05:41 < ws-client> <ChillerDragon> ah you mean gfx_fullscreen and gfx_borderless got it
08:23 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1204688852690935852/kowdmkjsp1hc1.png?ex=65d5a4ec&is=65c32fec&hm=e27ab1568e1df94fd2438a4869f1c9c5806d82e54fe8067f62c9db2715ffaa91&
09:06 < bridge> <Ewan> lmfao
09:08 < ws-client> <ChillerDragon> https://tube.zillyhuhn.com/videos/users/chiller/ddnet_ui_hotreloading.mp4
09:09 < ws-client> <ChillerDragon> finally got some kind of try and error ui setup
09:09 < bridge> <melo∆û> Ahgg i thought youre a terminal enjoyers
09:10 < bridge> <melo∆û> *unfriends*
09:11 < ws-client> <ChillerDragon> the clip contains a terminal no? I have been procrastinating to learn tw ui code for too long already i need to learn how to align fakin buttons in the editor
09:19 < bridge> <Jupstar ‚ú™> Nice, what did u use?
09:20 < bridge> <Jupstar ‚ú™> Or is that just a very fast closing and starting client on ur super fast NASA pc
09:20 < ws-client> <ChillerDragon> no dis ma laptop
09:20 < ws-client> <ChillerDragon> i use dlopen
09:20 < bridge> <Jupstar ‚ú™> Pro
09:21 < ws-client> <ChillerDragon> https://github.com/ChillerDragon/ddnet/commit/95695caadde37c4201c01c5c8d08f2068d3cfd8b
09:21 < ws-client> <ChillerDragon> here da code if some1 cares
09:30 < bridge> <Jupstar ‚ú™> That looks surprisingly easy
09:34 < ws-client> <ChillerDragon> Yes
09:35 < ws-client> <ChillerDragon> come to C @Jupstar ‚ú™ 
09:36 < bridge> <diariesvexar> omg is it live DDNet UI editing ?!
09:36 < ws-client> <ChillerDragon> yes
09:37 < bridge> <diariesvexar> is it public or something ?
09:41 < bridge> <Jupstar ‚ú™> Sadly I'm not as genius as you
09:43 < ws-client> <ChillerDragon> @diariesvexar here u go https://github.com/ChillerDragon/ddnet_hotui
09:44 < bridge> <diariesvexar> ‚ù§Ô∏è ‚ù§Ô∏è ‚ù§Ô∏è
09:54 < bridge> <diariesvexar> ```
09:54 < bridge> <diariesvexar> Run scripts/fix_style.py --dry-run
09:54 < bridge> <diariesvexar> src/engine/client/client.cpp:3894:50: error: code should be clang-formatted [-Wclang-format-violations]
09:54 < bridge> <diariesvexar>         Graphics()->GetCurrentVideoMode(s_aMode, Index); 
09:54 < bridge> <diariesvexar> ```
09:54 < bridge> <diariesvexar> is it because of that little space at end of line right ?
09:54 < ws-client> <ChillerDragon> ``scripts/fix_style.py && git diff``
09:54 < ws-client> <ChillerDragon> tells you what changed
09:55 < bridge> <diariesvexar> scripts/fix_style.py && git diff
09:55 < bridge> <diariesvexar> Found no clang-format 10
10:00 < bridge> <Ewan> gotta install it
10:01 < bridge> <diariesvexar> oh got it
10:03 < ws-client> <ChillerDragon> what distro are you on @diariesvexar ?
10:03 < bridge> <diariesvexar> I noticed that it's not for windows
10:04 < ws-client> <ChillerDragon> oh windows user
10:04 < bridge> <diariesvexar> windows 11 64 bit's distro üòÑ
10:04 < ws-client> <ChillerDragon> then my ui hotreloading does not work for you either i guess
10:04 < bridge> <diariesvexar> yeah i should test that on my ubuntu
10:24 < bridge> <matodor> bro can you rename it to `ddnet_hui` ?
10:26 < ws-client> <ChillerDragon> -.-
10:27 < bridge> <matodor> dont ask why :kek:
10:27 < ws-client> <ChillerDragon> are you hungarian?
10:27 < bridge> <matodor> ru
10:27 < ws-client> <ChillerDragon> ah wait no 
10:27 < ws-client> <ChillerDragon> russian
10:27 < ws-client> <ChillerDragon> confused langs
10:27 < ws-client> <ChillerDragon> thats DICK in russian
10:27 < ws-client> <ChillerDragon> axaxaxax
10:27 < ws-client> <ChillerDragon> idi nahui
10:28 < bridge> <matodor> :lol:
10:28 < ws-client> <ChillerDragon> csgo russian 101
10:28 < ws-client> <ChillerDragon> in hungarian its kuki
10:28 < ws-client> <ChillerDragon> pronounced "cookie"
10:28 < ws-client> <ChillerDragon> also troll
11:26 < bridge> <cyberFighter> chillerspammer
11:29 < bridge> <v1rusniyyy> –∫—É, —Å–µ–≥–æ–¥–Ω—è —Ç–≥ —Ä–∞–∑–¥–∞–µ—Ç Telegram Premium –Ω–∞ 1 –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞–±—Ä–∞—Ç—å –º–æ–∂–µ—à—å –≤ —ç—Ç–æ–º —Ç–≥ –±–æ—Ç–µ: @RussiaThePremium_bot. –ú–æ–∂–µ—à—å –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å)
11:31 < bridge> <cyberFighter> Sus
11:36 < bridge> <Ewan> morning
11:47 < bridge> <heinrich5991> good morning
12:03 < bridge> <fokkonaut> Guten Morgen
12:03 < bridge> <Ewan> one of those days
12:03 < bridge> <fokkonaut> U on phone?
12:03 < bridge> <Ewan> not personally
12:04 < bridge> <fokkonaut> go to mobile discord and answer to a message, dont release the animation but instead go left and right a few times, the arrow will spin :o
12:05 < bridge> <Ewan> android?
12:05 < bridge> <fokkonaut> probably them knowing the animation for replying is pretty cool and when people check it out in detail they wanna let people know "we're watching you"
12:05 < bridge> <fokkonaut> yea but its probably the same on ios
12:05 < bridge> <Ewan> i cant get it to work
12:06 < bridge> <Ewan> unless i misunderstood
12:06 < bridge> <fokkonaut> Just swipe left and right on a message 3 times without releasing
12:07 < bridge> <Ewan> cant do it
12:07 < bridge> <fokkonaut> Apple sux
12:07 < bridge> <Ewan> crying
12:07 < bridge> <fokkonaut> https://tenor.com/view/fart-whatever-bear-vulgar-funny-gif-18107836
12:25 < ws-client> <ChillerDragon> @ryozuki you closed this as completed but linked no pr how do i use the tele tracer? https://github.com/ddnet/ddnet/issues/2415
12:26 < bridge> <ryozuki> so funny
12:26 < ws-client> <ChillerDragon> ?
12:26 < bridge> <ryozuki> its from the merge to discussions
12:26 < ws-client> <ChillerDragon> how should i know that?
12:27 < ws-client> <ChillerDragon> because its locked?
12:27 < bridge> <ryozuki> and before closing a issue had no distinction from done or closed
12:27 < ws-client> <ChillerDragon> is the discussion still open?
12:27 < bridge> <ryozuki> idk
12:27 < bridge> <ryozuki> im busy
12:27 < ws-client> <ChillerDragon> so the feature does not exist?
12:28 < ws-client> <ChillerDragon> So from what i understood i think https://github.com/ddnet/ddnet/issues/2415 should be reopend
13:07 < bridge> <TsFreddie> :heartw:
13:07 < bridge> <TsFreddie> love you guys
13:11 < bridge> <Ewan> love you too fred no homo
13:12 < bridge> <ryozuki> :owo:
13:13 < bridge> <melo∆û> :owo:
13:46 < bridge> <bts._.> :owo:
14:15 < bridge> <Nooback> what happened to my custom things in ddnet??? after the update my custom cursor in menu is not showing nor is my custom hammer sound?
14:18 < bridge> <Jupstar ‚ú™> Did you put then into config directory?
14:18 < bridge> <teero777> Did you replace files@
14:18 < bridge> <Nooback> I replaced the sound and the cursor is in \AppData\Roaming\Teeworlds\assets
14:18 < bridge> <teero777> Did you replace files?
14:19 < bridge> <teero777> Did you select them?
14:19 < bridge> <Jupstar ‚ú™> Then they should still be there
14:19 < bridge> <teero777> Did you select them ingame?
14:19 < bridge> <Nooback> the cursor is default and the sound is back to default
14:20 < bridge> <muuurr> yo for all
14:20 < bridge> <Jupstar ‚ú™> Look if the files are still in appdata
14:20 < bridge> <Nooback> the cursor is still there
14:20 < bridge> <muuurr> who know where my kog?
14:20 < bridge> <muuurr> https://cdn.discordapp.com/attachments/293493549758939136/1204778694112055387/Base_Profile_Screenshot_2024.02.07_-_16.19.14.70.png?ex=65d5f898&is=65c38398&hm=ca362d2027f95f7fa320f3a1d7f0d16892ad0221f52fee1bb01c666bac5a3483&
14:20 < bridge> <Jupstar ‚ú™> Then select it in game
14:20 < bridge> <Jupstar ‚ú™> Next update adds it back
14:20 < bridge> <Jupstar ‚ú™> Then u can have community tabs
14:21 < bridge> <muuurr> like kog was removed?
14:21 < bridge> <Nooback> select it in game?
14:21 < bridge> <Jupstar ‚ú™> In settings assets
14:21 < bridge> <Jupstar ‚ú™> In client
14:21 < bridge> <teero777> Check the filters on the right
14:21 < bridge> <Nooback> should it be in extras?
14:21 < bridge> <muuurr> i try but nothing
14:21 < bridge> <Jupstar ‚ú™> Look at communities on the right side
14:22 < bridge> <Jupstar ‚ú™> In appdata is there a ddnet Dir too?
14:22 < bridge> <bts._.> if you are on steam use the nightly build beta
14:22 < bridge> <Nooback> only teeworlds
14:22 < bridge> <muuurr> yep i used steam
14:23 < bridge> <Jupstar ‚ú™> Then this should be correct. There should be a game directory
14:23 < bridge> <Jupstar ‚ú™> Inside that u put ur cursor game png
14:23 < bridge> <bts._.> right click ddnet in library -> properties -> betas -> select nightly
14:24 < bridge> <Nooback> I'm confused it should not be in assets?
14:24 < bridge> <muuurr> love u
14:24 < bridge> <bts._.> https://cdn.discordapp.com/attachments/293493549758939136/1204779802213617725/image.png?ex=65d5f9a0&is=65c384a0&hm=d7198d88737844d3bdec03ef0c4349dd0815370a818136599aac1d5b2d798781&
14:25 < bridge> <bts._.> then favorite the kog community and it will show up on top again
14:25 < bridge> <Jupstar ‚ú™> Inside assets there is game.
14:25 < bridge> <Jupstar ‚ú™> 
14:25 < bridge> <Jupstar ‚ú™> But do it that way: go on client-> settings-> assets and press on game then press open directory
14:25 < bridge> <Nooback> yes I'm there
14:25 < bridge> <Jupstar ‚ú™> Then the client opens the correct directory for you
14:25 < bridge> <Nooback> https://cdn.discordapp.com/attachments/293493549758939136/1204780040282447932/image.png?ex=65d5f9d9&is=65c384d9&hm=cbb9b0ba8b60e690f95a46486ecae19473e83ca990b1f0f55446a2f0b5dcbf77&
14:26 < bridge> <Jupstar ‚ú™> GUI cursor must not be in assets
14:26 < bridge> <Nooback> so that has changed
14:26 < bridge> <Jupstar ‚ú™> No
14:26 < bridge> <Nooback> then where do I need to put it if not assets? before it was in assets and it worked
14:26 < bridge> <Jupstar ‚ú™> It always has been in config Dir directly
14:27 < bridge> <Jupstar ‚ú™> That's not true
14:27 < bridge> <Jupstar ‚ú™> Then u overwritten the one in data Dir or smth
14:27 < bridge> <Jupstar ‚ú™> Just put in appdata/teeworlss
14:27 < bridge> <Jupstar ‚ú™> Directly
14:27 < bridge> <Nooback> yeah that doesn't work either
14:28 < bridge> <Nooback> or do I need to restart game for it to work?
14:28 < bridge> <Jupstar ‚ú™> Yes
14:28 < bridge> <Jupstar ‚ú™> For GUI cursor yes
14:28 < bridge> <Nooback> what about the sound?
14:28 < bridge> <Jupstar ‚ú™> Sound must be appdata/teeworlds/audio
14:29 < bridge> <Jupstar ‚ú™> Also restart
14:29 < bridge> <Nooback> that may be the problem
14:30 < bridge> <Nooback> there is no audio file
14:33 < bridge> <Nooback> audio file is in steam folder if I move it into appdata it won't get replaced again?
14:48 < bridge> <Jupstar ‚ú™> Yes
15:24 < bridge> <learath2> It's actually seriously annoying that you can't have templates outside headers. How do larger modern C++ projects even handle this? Just mix implementation and interface?
15:25 < bridge> <Jupstar ‚ú™> Yes
15:26 < bridge> <Jupstar ‚ú™> One of the many reasons templates suck xd
15:26 < bridge> <Jupstar ‚ú™> U can also predefine which template types u support
15:26 < bridge> <Jupstar ‚ú™> Then u can't implement them in a cpp file
15:27 < bridge> <learath2> Okay, so the options are still the same as they were since C++03, excellent
15:28 < bridge> <ryozuki> ill keep my mouth shut
15:28 < bridge> <ryozuki> :owo:
15:29 < bridge> <Jupstar ‚ú™> Use modules
15:29 < bridge> <learath2> You should, made Voxel disappear
15:30 < bridge> <learath2> That still mixes the implementation and the interface
15:30 < bridge> <learath2> What a nasty language, the more of it's supposed good features you use the less elegant it becomes
15:30 < bridge> <Jupstar ‚ú™> How it should be
15:31 < bridge> <Jupstar ‚ú™> As*
15:31 < bridge> <learath2> I respectfully disagree but refrain from debating as you get way too heated
15:31 < bridge> <Jupstar ‚ú™> Writing more code sucks
15:32 < bridge> <Jupstar ‚ú™> We see us again after u written a big project
15:32 < bridge> <learath2> No comment
15:32 < bridge> <Jupstar ‚ú™> I have the feeling you heating up right now :lol:
15:32 < bridge> <learath2> No comment
15:33 < bridge> <ryozuki> :ferrisBased:
15:33 < bridge> <ryozuki> just found out these ferris emotes
15:33 < bridge> <learath2> Rust suffers from the same issue of mixing implementation and interface
15:33 < bridge> <ryozuki> :ferrisBigBrain:
15:33 < bridge> <ryozuki> i like it
15:34 < bridge> <ryozuki> c++ headers is double work
15:34 < bridge> <ryozuki> also mismatched sigs give bad compile errors
15:34 < bridge> <learath2> I don't, I won't say my reasons though
15:34 < bridge> <ryozuki> i wanna try more zig
15:34 < bridge> <ryozuki> can be a good lang to take ideas for edlang
15:35 < bridge> <learath2> This is a compiler shortcoming, due to the way C/C++ standards define TUs
15:36 < bridge> <ryozuki> @learath2 tell me a feature u wanna see in edlang
15:36 < bridge> <ryozuki> that is not C style strings
15:36 < bridge> <Jupstar ‚ú™> No global variables
15:36 < bridge> <ryozuki> and if possible reasonably easy xD
15:36 < bridge> <Jupstar ‚ú™> That includes memory allocators
15:36 < bridge> <ryozuki> kek
15:37 < bridge> <teero777> std::future :troll:
15:37 < bridge> <learath2> Hm, reasonably easy kinda shoots down most of what I would want from a language, but I guess Result/Option would be nice to have
15:38 < bridge> <ryozuki> ok tell me it anyway
15:38 < bridge> <Jupstar ‚ú™> Forced hierarchy
15:38 < bridge> <ryozuki> result option is a thing for sure because i will add ADTs
15:38 < bridge> <learath2> Coroutines
15:38 < bridge> <Jupstar ‚ú™> Breaking it requires unsafe
15:38 < bridge> <Jupstar ‚ú™> Const eval
15:38 < bridge> <ryozuki> what does it entail
15:38 < bridge> <ryozuki> tokio? xD
15:38 < bridge> <ryozuki> a runtime in the lang?
15:38 < bridge> <ryozuki> like go?
15:39 < bridge> <learath2> No, keep it simple, let the user handle that part. You just need to provide a pretty interface through which one can suspend and resume execution
15:40 < bridge> <ryozuki> well im too in the start to do coroutines
15:40 < bridge> <Ewan> erorrs in question are just function does not match definition
15:40 < bridge> <ryozuki> i dont even have allocation or strings
15:40 < bridge> <Ewan> pretty straightforward
15:40 < bridge> <Ewan> declaration
15:40 < bridge> <Ewan> aame
15:40 < bridge> <ryozuki> r u drunk?
15:40 < bridge> <learath2> Hm, how about first class functions instead?
15:41 < bridge> <Ewan> function definition signature doesn‚Äôt match its declaration.
15:41 < bridge> <ryozuki> idk man, for some reason i always feel c++ errors are so verbose its insane
15:41 < bridge> <ryozuki> i say this from experience
15:41 < bridge> <ryozuki> my experience
15:41 < bridge> <ryozuki> specially coding in llvm
15:41 < bridge> <learath2> If you wanna see truely insane errors, you need templates
15:41 < bridge> <Ewan> yea u just gotta get used to them
15:41 < bridge> <ryozuki> rust errors are so nicely formatted
15:41 < bridge> <Ewan> it sux when u go to another compiler and it gives u a different error for the same thing tho
15:42 < bridge> <Ewan> msvc will phrase things outlandishly differently
15:42 < bridge> <Ewan> and then ur like oohhhh that‚Äôs what it meant xd
15:43 < bridge> <learath2> ```
15:43 < bridge> <learath2> vk/core.hpp:26:14: note: candidate: ‚Äòtemplate<class R>  requires (range<R>) && (is_convertible_v<typename std::__detail::__iter_traits_impl<typename std::remove_cvref<decltype(std::ranges::__cust_access::__begin((declval<_Container&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__cust_access::__begin((declval<_Container&>)()))>::type> >::__iter_traits<typename std::remove_cvref<decltype(std::range
15:43 < bridge> <learath2>    26 |         bool CheckValidationLayers(R WantedLayers)
15:43 < bridge> <learath2> ```
15:43 < bridge> <learath2> Look at this mess, if only it went back to the original declaration and returned that to me this would be readable
15:43 < bridge> <Ewan> these are the real ones
15:43 < bridge> <ryozuki> xdd
15:43 < bridge> <Ewan> or when it tells you T is ineligible and you actually have to find T across 20 lines of error output
15:43 < bridge> <ryozuki> this is clearly a rust win and u cant tell me otherwise
15:43 < bridge> <learath2> `template <std::ranges::range R> requires(std::is_convertible_v<std::ranges::range_value_t<R>, const char *>)` like this is the real template declaration
15:44 < bridge> <ryozuki> :ferrisAware:
15:44 < bridge> <Ewan> ez lex tbh
15:44 < bridge> <learath2> It just had to remember the pre-evaluation version and return that
15:44 < bridge> <Ewan> cpp is what happens in my brain.
15:44 < bridge> <ryozuki> @learath2 does the standard force to use __ for names?
15:44 < bridge> <ryozuki> even if namespaced?
15:44 < bridge> <Ewan> reserved keywords
15:44 < bridge> <ryozuki> std::__detail
15:44 < bridge> <ryozuki> why __
15:45 < bridge> <ryozuki> it polutes names so much
15:45 < bridge> <learath2> I don't even remember anymore
15:45 < bridge> <ryozuki> std::ranges::__cust_access
15:45 < bridge> <Ewan> implementation details
15:45 < bridge> <Ewan> not api
15:45 < bridge> <ryozuki> it doesnt matter
15:45 < bridge> <ryozuki> oh wait
15:45 < bridge> <ryozuki> i guess u cant hide it nicely like rust pub, pub(crate) ?
15:45 < bridge> <learath2> Back in my day __ guaranteed that no one would overwrite it, but you aren't even supposed to put stuff in the `std::` namespace
15:46 < bridge> <Ewan> not really
15:46 < bridge> <Ewan> just private members and headers for private api
15:46 < bridge> <learath2> I guess it's that yeah, just used as a way to scare people so they don't use the STL internals üòÑ
15:47 < bridge> <ryozuki> yes, thats exactly what pub and pub(crate) do!!
15:47 < bridge> <ryozuki> xd
15:47 < bridge> <Ewan> congratulations
15:48 < bridge> <ryozuki> thanks
15:48 < bridge> <ryozuki> next time dont say "not really"
15:48 < bridge> <ryozuki> if u dont know rust
15:48 < bridge> <Ewan> not really was in agreement with you
15:48 < bridge> <ryozuki> wot
15:48 < bridge> <Ewan> i guess you cant __
15:48 < bridge> <Ewan> not really
15:48 < bridge> <ryozuki> ok double negation sux
15:48 < bridge> <ryozuki> its confusing xd
15:48 < bridge> <Ewan> english L
17:08 < bridge> <teero777> Blockworlds is there. fokko not yet
17:30 < bridge> <avolicious> they already mentioned me üòÑ
17:30 < bridge> <avolicious> they already contacted me üòÑ
17:33 < bridge> <heinrich5991> via state machine transform?
17:34 < bridge> <learath2> yes, not many other ways to handle this anyway
17:34 < bridge> <ryozuki> @learath2 did u search for jobs yet
17:34 < bridge> <learath2> I've been keeping an eye out but honestly nothing really seems to excite me
17:35 < bridge> <ryozuki> come to barcelona and i can recommend u to a rust job maybe
17:35 < bridge> <ryozuki> kek
17:35 < bridge> <Jupstar ‚ú™> let's found a startup
17:36 < bridge> <learath2> `auto AvailableExtensions = UTIL_VK_ENUMERATE_HELPER([](auto c, auto d){ return vkEnumerateInstanceExtensionProperties(nullptr, c, d); }, VkExtensionProperties);`
17:36 < bridge> <learath2> I think there is something in this line that offends every single one of you
17:36 < bridge> <Jupstar ‚ú™> no
17:37 < bridge> <learath2> I guess it lacks nasty nested namespaces everywhere
17:37 < bridge> <Jupstar ‚ú™> i am happy you code vk
17:37 < bridge> <ryozuki> when
17:37 < bridge> <Jupstar ‚ú™> i dunno, today?
17:37 < bridge> <learath2> Reconsider your stance, that's a macro that wraps a template
17:37 < bridge> <ryozuki> the world of startsups is more about charisma than technical skill to secure funding
17:37 < bridge> <Jupstar ‚ú™> mh ok, c macros suck, true
17:37 < bridge> <ryozuki> we all socially inept
17:38 < bridge> <Jupstar ‚ú™> but the fact it's vulkan makes overweights it
17:38 < bridge> <Jupstar ‚ú™> but the fact it's vulkan overweights it
17:38 < bridge> <learath2> I can pretend to not be completely inept for 30 minutes at a time, up to 4 times a day
17:38 < bridge> <ryozuki> i utterly dislike lambdas syntax in c++
17:38 < bridge> <ryozuki> or closures
17:38 < bridge> <ryozuki> whathever u call that
17:38 < bridge> <teero777> kk
17:38 < bridge> <ryozuki> also auto
17:38 < bridge> <Jupstar ‚ú™> well startups are certainly slaves work. but if u have good skill it's probably the only way to work with ppl on a equal level
17:38 < bridge> <ryozuki> i think using auto therei s bad practice
17:39 < bridge> <Jupstar ‚ú™> in companies u always low hierarchy slave
17:39 < bridge> <Jupstar ‚ú™> üòÄ
17:39 < bridge> <ryozuki> it should be used only on left side of assigments of a cast
17:39 < bridge> <Jupstar ‚ú™> üò¨
17:39 < bridge> <ryozuki> imho
17:39 < bridge> <learath2> I did not want to write `std::vector<VkExtensionProperties>` üòõ
17:39 < bridge> <Jupstar ‚ú™> it's the opposite of rust always xd
17:39 < bridge> <Jupstar ‚ú™> explicit binds vs implicit
17:40 < bridge> <learath2> Oh, I could just write `std::vector`
17:40 < bridge> <Jupstar ‚ú™> auto is like `let` in 90% of all cases
17:40 < bridge> <Jupstar ‚ú™> or do u often type the type of the var in rust?
17:40 < bridge> <learath2> I'm a type enjoyer but C++ types get insane :/
17:40 < bridge> <ryozuki> yeah but the auto in the closure hides the arg type
17:40 < bridge> <ryozuki> so idk the arg type
17:41 < bridge> <ryozuki> but i guess ur right idk
17:41 < bridge> <ryozuki> yeah, and somehow they name things extra large
17:41 < bridge> <learath2> don't rust closures also hide this?
17:41 < bridge> <ryozuki> yeah
17:41 < bridge> <Jupstar ‚ú™> well true, in rust u'd not need to write auto in this case
17:41 < bridge> <Jupstar ‚ú™> it would simply know the type from usage of the closure
17:42 < bridge> <ryozuki> hello i got a bump buffer
17:42 < bridge> <ryozuki> 
17:42 < bridge> <ryozuki> c++ hold my beer: `std::pmr::monotonic_buffer_resource`
17:42 < bridge> <Jupstar ‚ú™> auto kinda implies that this closure is a template?
17:42 < bridge> <Jupstar ‚ú™> 
17:42 < bridge> <Jupstar ‚ú™> what happens if u pass two different typed arguments to the same parameter?
17:42 < bridge> <Jupstar ‚ú™> does it create 2 different lambdas?
17:43 < bridge> <Jupstar ‚ú™> or does it simply not compile
17:43 < bridge> <ryozuki> https://tenor.com/view/sepples-cpp-cplusplus-bjarne-stroustrup-gif-25570450
17:44 < bridge> <Jupstar ‚ú™> if it doesnt compile => it's basically like rust
17:44 < bridge> <Jupstar ‚ú™> if it compiles => wtf xD
17:46 < bridge> <ryozuki> @learath2 i want a anime where the MC codes in rust and the evil is a c++ coder
17:46 < bridge> <ryozuki> and the c++ coder uses windows with visual studio
17:46 < bridge> <ryozuki> and promotoes closed source
17:46 < bridge> <ryozuki> it would be a best seller
17:46 < bridge> <ryozuki> the MC uses programming socks
17:47 < bridge> <ryozuki> :justatest:
17:48 < bridge> <learath2> It compiles, it'll create a new lambda
17:49 < bridge> <Jupstar ‚ú™> interesting _D
17:49 < bridge> <Jupstar ‚ú™> interesting üòÑ
17:50 < bridge> <learath2> tis time to pick a physical device
17:50 < bridge> <Jupstar ‚ú™> since when r u even coding vk
17:51 < bridge> <Jupstar ‚ú™> that's beyond epic
17:51 < bridge> <learath2> I started a couple days ago, I was messing around with C++20, and thought what better way to learn modern C++ than to also learn vk with it üòÑ
17:52 < bridge> <Jupstar ‚ú™> do u use the cpp headers?
17:52 < bridge> <Jupstar ‚ú™> ig uess not
17:52 < bridge> <Jupstar ‚ú™> i guess not
17:52 < bridge> <learath2> I'm just using the C API
17:53 < bridge> <heinrich5991> vk has a C++ API?
17:54 < bridge> <learath2> It wraps the C one iirc, but yeah
17:54 < bridge> <Jupstar ‚ú™> it also has a rust api a.k.a ash
17:54 < bridge> <heinrich5991> uh, nice
17:55 < bridge> <heinrich5991> official?
17:55 < bridge> <Jupstar ‚ú™> no
17:55 < bridge> <Jupstar ‚ú™> the cpp headers might be official tho
17:55 < bridge> <Jupstar ‚ú™> i mean what does official mean
17:55 < bridge> <learath2> The cpp ones are official indeed, from Khronos üòÑ
17:55 < bridge> <Jupstar ‚ú™> the spec exists only for c api
17:57 < bridge> <Jupstar ‚ú™> vulkan is royalty free, everyone can create their own headers and call it official xddd
17:57 < bridge> <learath2> I'm veeery roughly following vulkan-tutorial.com
17:57 < bridge> <Jupstar ‚ú™> "namespace vk::raii
17:57 < bridge> <Jupstar ‚ú™> There is an additional header named vulkan_raii.hpp generated. That header holds raii-compliant wrapper classes for the handle types. That is, for e.g. the handle type VkInstance, there's a raii-compliant wrapper vk::raii::Instance. Please have a look at the samples using those classes in the directory RAII_Samples."
17:57 < bridge> <Jupstar ‚ú™> this sounds interesating
17:57 < bridge> <Jupstar ‚ú™> https://github.com/KhronosGroup/Vulkan-Hpp
17:57 < bridge> <Jupstar ‚ú™> i do that too in ddpg, esp for memory management it's nice
17:58 < bridge> <Jupstar ‚ú™> @learath2 https://github.com/KhronosGroup/Vulkan-Hpp?tab=readme-ov-file#designated-initializers
17:58 < bridge> <Jupstar ‚ú™> 
17:58 < bridge> <Jupstar ‚ú™> they even start to use c++20 features
17:58 < bridge> <Jupstar ‚ú™> ez
17:59 < bridge> <learath2> ```cpp
17:59 < bridge> <learath2> VkInstanceCreateInfo CreateInfo{
17:59 < bridge> <learath2>     .sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
17:59 < bridge> <learath2>     .pApplicationInfo = &AppInfo,
17:59 < bridge> <learath2>     .enabledLayerCount = static_cast<uint32_t>(WantedLayers.size()),
17:59 < bridge> <learath2>     .ppEnabledLayerNames = WantedLayers.size() ? WantedLayers.data() : nullptr,
17:59 < bridge> <learath2>     .enabledExtensionCount = GLFWRequiredExtensionCount,
17:59 < bridge> <learath2>     .ppEnabledExtensionNames = GLFWRequiredExtensions,
17:59 < bridge> <learath2> };
17:59 < bridge> <learath2> ```
17:59 < bridge> <learath2> metoo
17:59 < bridge> <Jupstar ‚ú™> ez
18:00 < bridge> <learath2> C had designated initializers since 99 :wechat_cool_guy:
18:01 < bridge> <Jupstar ‚ú™> elitest
18:01 < bridge> <Jupstar ‚ú™> 
18:01 < bridge> <Jupstar ‚ú™> but the `.` before the name kinda sucks xd
18:01 < bridge> <Jupstar ‚ú™> does it collide with other language features else?
18:02 < bridge> <learath2> Yes, otherwise it'd be an assigment expression iirc
18:02 < bridge> <Jupstar ‚ú™> ah i c
18:02 < bridge> <Jupstar ‚ú™> well in rust it's nicer, since u can also leave the assignment away, if the name of the local var matches the one of the struct member
18:02 < bridge> <Jupstar ‚ú™> 
18:02 < bridge> <Jupstar ‚ú™> but in rust u always have to type the name of the struct, that's smth that annoys me too
18:03 < bridge> <Jupstar ‚ú™> typescript wins in this case xd
20:51 < bridge> <ryozuki> https://rustpython.github.io/
20:52 < bridge> <ryozuki> this allows pyson on wasm
20:52 < bridge> <heinrich5991> do they have a story for C extension modules written for cpython?
20:53 < bridge> <ryozuki> it doesnt strive to be compatible with cpython
20:53 < bridge> <ryozuki> >  Full Python 3 environment entirely in Rust (not CPython bindings), with a clean implementation and no compatiblity hacks.
20:53 < bridge> <heinrich5991> most of python's usefulness stems from its wide array of third-party libraries
20:54 < bridge> <heinrich5991> like numpy etc.
20:54 < bridge> <ryozuki> idk tbh
20:54 < bridge> <ryozuki> i just shared the project
20:54 < bridge> <ryozuki> xD
20:54 < bridge> <ryozuki> i never used it
20:54 < bridge> <heinrich5991> ^^
20:54 < bridge> <heinrich5991> pypy got a bigger boost when numpy compatibility was done IIRC
20:55 < bridge> <Jupstar ‚ú™> nice, pysoron interpreter to wasm to have pysthoun plugin system inside wasm inside rust
