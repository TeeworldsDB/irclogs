00:07 <+bridge> [ddnet] <Voxel> so i tried doing this for the menu just to see if i could create a mockup for preview rendering
00:07 <+bridge> [ddnet] <Voxel> turns out this softlocked my computer into fronting the frozen client and i had to restart. was this not a valid shortcut?
00:07 <+bridge> [ddnet] <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/997625473498628116/unknown.png
00:07 <+bridge> [ddnet] <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/997625473825767526/unknown.png
00:08 <+bridge> [ddnet] <Voxel> inb4 im called yanderedev
00:08 <+bridge> [ddnet] <heinrich5991> `IsRifle = false`
00:08 <+bridge> [ddnet] <heinrich5991> is that a single equals?
00:08 <+bridge> [ddnet] <Voxel> oh fuck
00:09 <+bridge> [ddnet] <Voxel> fixed
00:09 <+bridge> [ddnet] <heinrich5991> it looks like you might want to use a different font 😄
00:09 <+bridge> [ddnet] <heinrich5991> it looks hard to distinguish in your font ^^
00:09 <+bridge> [ddnet] <Voxel> i'm using Fira Code
00:10 <+bridge> [ddnet] <deen> Your font is too fancy, it replaces -> with an actual arrow, == with a long =. That looks slightly confusing 😄
00:11 <+bridge> [ddnet] <heinrich5991> I mean the arrow isn't that bad, but the equals apparently leads to problems 😛
00:11 <+bridge> [ddnet] <Voxel> do you have font reccomendations?
00:12 <+bridge> [ddnet] <heinrich5991> no, I mostly use defaults
00:12 <+bridge> [ddnet] <heinrich5991> I think my terminal uses dejavu sans mono or so
00:18 <+bridge> [ddnet] <Voxel> I just disabled ligatures. It's a bit better now.
00:18 <+bridge> [ddnet] <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/997628286555389972/unknown.png
00:19 <+bridge> [ddnet] <Ravie> weird colors
00:21 <+bridge> [ddnet] <Voxel> YES
00:21 <+bridge> [ddnet] <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/997629000388198410/unknown.png
00:23 <+bridge> [ddnet] <Ravie> nice
00:24 <+bridge> [ddnet] <Ravie> little tip, you don't need  `== true` or `== false` on bools
00:30 <+bridge> [ddnet] <Voxel> Ohh. That's useful.
00:40 <+bridge> [ddnet] <estguy> Is there anywhere a concrete list of symbols you can write in chat?
00:40 <+bridge> [ddnet] <heinrich5991> is there any symbol you can't write in chat?
00:41 <+bridge> [ddnet] <estguy> I'm just wondering on what types of emotes you can write or anything for that matter
00:41 <+bridge> [ddnet] <heinrich5991> ah
00:42 <+bridge> [ddnet] <heinrich5991> idk, you'd probably have to look at the font for that
00:44 <+bridge> [ddnet] <estguy> what's the font?
00:46 <+bridge> [ddnet] <Chairn> much better 😉
00:46 <+bridge> [ddnet] <Ravie> dejavu sans I think
00:47 <+bridge> [ddnet] <Chairn> DejaVuSans.ttf
00:47 <+bridge> [ddnet] <Chairn> there's also Icons.otf, but i don't know what it contains
00:48 <+bridge> [ddnet] <Ravie> there's also some fallback font for asian languages
00:52 <+bridge> [ddnet] <Voxel> how to I make the two weapons stack and not overlap?
00:52 <+bridge> [ddnet] <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/997636723506937896/unknown.png
00:59 <+bridge> [ddnet] <Ravie> do another HSplitTop I think
01:00 <+bridge> [ddnet] <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/997638852359499846/unknown.png
01:01 <+bridge> [ddnet] <Voxel> Nowhere near close to the final product, but this is a solid head start for what I want the idea to head to.
01:18 <+bridge> [ddnet] <Voxel> @Zim progress
01:22 <+bridge> [ddnet] <Chairn> which code do you prefer ?
01:22 <+bridge> [ddnet] <Chairn> ```c++
01:22 <+bridge> [ddnet] <Chairn>     new(pDemoHeader) std::remove_pointer<decltype(pDemoHeader)>::type;
01:22 <+bridge> [ddnet] <Chairn>     new(pTimelineMarkers) CTimelineMarkers;
01:22 <+bridge> [ddnet] <Chairn> ```
01:22 <+bridge> [ddnet] <Chairn> first line ensure type is safe but is more verbose
01:23 <+bridge> [ddnet] <Chairn> second line makes no guarentee on the type if pTimelineMarkers type is changed, new will override neighboring memory or not initialize enough (with the wrong parameters)
01:25 <+bridge> [ddnet] <heinrich5991> can't you do `decltype(*pDemoHeader)` in the first case?
01:28 <+bridge> [ddnet] <Chairn> no, 😦
01:28 <+bridge> [ddnet] <Chairn> <https://stackoverflow.com/questions/25309356/using-new-with-decltype> and <https://stackoverflow.com/questions/17241614/what-expressions-yield-a-reference-type-when-decltype-is-applied-to-them/17242295#17242295> for why
01:29 <+bridge> [ddnet] <Chairn> `error: new cannot be applied to a reference type`
01:30 <+bridge> [ddnet] <Chairn> roughly, `decltype(*pDemoHeader)` returns a reference to a class (here `CDemoHeader&`) which cannot be passed to `new`...
01:34 <+bridge> [ddnet] <heinrich5991> ah, unlucky
01:35 <+bridge> [ddnet] <Learath2> The hard quit shortcut ctrl+shift+q should always work iirc
01:37 <+bridge> [ddnet] <Ravie> didn't that shortcut get removed because of trolling?
01:38 <+bridge> [ddnet] <Learath2> Hm, if it did then you are stuck, which is annoying
01:38 <+bridge> [ddnet] <Learath2> Maybe we should add it back with a `#ifdef DEBUG` it's so useful in debug builds
01:39 <+bridge> [ddnet] <Ravie> yeah closing the game is annoying when you're in fullscreen and get an exception
01:40 <+bridge> [ddnet] <Chairn> looks like it got removed
01:40 <+bridge> [ddnet] <Chairn> it has no effect on latest master
01:40 <+bridge> [ddnet] <Learath2> Should definitely get it back in for debug builds, it saved my ass so many times while debugging SDL issues on macOS
01:41 <+bridge> [ddnet] <Chairn> first form also works for array which is nice 🙂
01:41 <+bridge> [ddnet] <Learath2> Literally the only way out is that hard bind
01:41 <+bridge> [ddnet] <Ravie> alt f4 is always a thing
01:41 <+bridge> [ddnet] <Learath2> I like the first one, but the second one is definitely prettier
01:41 <+bridge> [ddnet] <Chairn> df82d24ff (deen/pr-ctrl-shift-q) Remove panic quit button (1 year, 11 months ago)
01:42 <+bridge> [ddnet] <Learath2> when messing with things like SDL you can cause that event to get eaten aswell accidentally
01:42 <+bridge> [ddnet] <Chairn> <https://github.com/ddnet/ddnet/pull/2650>
01:42 <+bridge> [ddnet] <Chairn> ahahahha, you accepted the PR @Learath2
01:42 <+bridge> [ddnet] <Learath2> heh, I guess the alt+f4 argument convinced me back in the day 😄
01:43 <+bridge> [ddnet] <Chairn> why would it not work anyway?
01:43 <+bridge> [ddnet] <Chairn> if main loop is running, it should work?
01:44 <+bridge> [ddnet] <Learath2> well on mac once I was messing around with raw input, I ended up in a state where I was stealing all the inputs
01:45 <+bridge> [ddnet] <Chairn> ddnet as keylogger, nice one 😄
01:45 <+bridge> [ddnet] <Chairn> did you manage to steal your own password 😛 ?
01:45 <+bridge> [ddnet] <Learath2> 😄
01:45 <+bridge> [ddnet] <Learath2> It was more to try to get the mouse to capture, but even with raw input it didn't look very good so I gave up on that
01:46 <+bridge> [ddnet] <Learath2> Another weird issue on mac again is real fullscreen, if you launch the game in real fullscreen it'll launch just a blackscreen with a non-running appdelegate, so all your cmd+q are going nowhere
01:47 <+bridge> [ddnet] <Learath2> But yeah, outside of mac weirdness I guess the WMs kill shortcut should just work
01:48 <+bridge> [ddnet] <Learath2> on linux even if that doesn't work you can drop down to a tty, on windows I think ctrl+alt+del doesn't even go through the WM, the kernel is catching it iirc
03:41 <+bridge> [ddnet] <Kujire> wowow looks so cool cant wait
03:42 <+bridge> [ddnet] <bluesky> nice
03:42 <+bridge> [ddnet] <bluesky> hm?
03:42 <+bridge> [ddnet] <Voxel> i was linking you to the photo
10:43 <+bridge> [ddnet] <deen> I prefer `std::make_unique`
11:20 <+bridge> [ddnet] <Tater> I'm getting lots of these in the console
11:20 <+bridge> [ddnet] <Tater> https://cdn.discordapp.com/attachments/293493549758939136/997794873765802027/unknown.png
11:21 <+bridge> [ddnet] <Tater> I can't find any references to the numbers in steam documentation idk what they mean
12:08 <+ChillerDragon> stem
12:31 <+bridge> [ddnet] <Chairn> This is not the same, im using placement new to initialize objects rather than mem_zero. Im not allocating memory
12:33 <+bridge> [ddnet] <Jupstar> why even use new
12:33 <+bridge> [ddnet] <Jupstar> *pPtr = CClass()
12:34 <+bridge> [ddnet] <Chairn> you can do that?
12:34 <+bridge> [ddnet] <Chairn> i never tried 😄
12:35 <+bridge> [ddnet] <Jupstar> does new(buffer) CClass even call the destructor?
12:35 <+bridge> [ddnet] <Jupstar> sounds rather dangerous to experiment with such things if you not sure what u doing
12:35 <+bridge> [ddnet] <Chairn> placement new just call the constructor on the given address
12:35 <+bridge> [ddnet] <Jupstar> so the old object stays active?
12:35 <+bridge> [ddnet] <Jupstar> or is not properly destructed
12:35 <+bridge> [ddnet] <Chairn> old object is overridden
12:35 <+bridge> [ddnet] <Jupstar> *
12:36 <+bridge> [ddnet] <Chairn> so not properly destructed which was already the case before with mem_zero
12:36 <+bridge> [ddnet] <Jupstar> so its no improvement over mem_zero
12:36 <+bridge> [ddnet] <Jupstar> u just make it just as bad xD
12:37 <+bridge> [ddnet] <Chairn> well, they don't have destructor anyway, but i can still call it before if you want 🙂
12:39 <+bridge> [ddnet] <Chairn> looks like i can't call constructor:
12:39 <+bridge> [ddnet] <Chairn> ` error: invalid use of ‘CNetConsole::CNetConsole’
12:39 <+bridge> [ddnet] <Chairn>    11 |         this->CNetConsole()`
12:41 <+bridge> [ddnet] <Chairn> this create new object on the stack rather than reinitializing old object, so not the same behavior
12:41 <+bridge> [ddnet] <Chairn> and the object is definitely destructed at the end of the function but it should leave longer
12:41 <+bridge> [ddnet] <Ryozuki> Use smart pointers everywhere
12:41 <+bridge> [ddnet] <Ryozuki> :PES4_MadGe:
12:41 <+bridge> [ddnet] <Chairn> and the object is definitely destructed at the end of the function but it should live longer
12:42 <+bridge> [ddnet] <Jupstar> ?
12:42 <+bridge> [ddnet] <Jupstar> where is the stack variable?
12:43 <+bridge> [ddnet] <Chairn> CClass() is stack variable
12:43 <+bridge> [ddnet] <Jupstar> but there is an asignment
12:43 <+bridge> [ddnet] <Jupstar> =
12:43 <+bridge> [ddnet] <Ryozuki> Whats this new() thing as the type
12:43 <+bridge> [ddnet] <Chairn> oh
12:43 <+bridge> [ddnet] <Chairn> stupid me
12:43 <+bridge> [ddnet] <Jupstar> also its not a variable, its a pure r value
12:44 <+bridge> [ddnet] <Chairn> lel, assignment much better 🙂
12:44 <+bridge> [ddnet] <Ryozuki> Ah places an object into allocated memory
12:44 <+bridge> [ddnet] <Chairn> i don't understand your question
12:44 <+bridge> [ddnet] <Ryozuki> The placement new thing
12:44 <+bridge> [ddnet] <Ryozuki> Never heard of it till today xd
12:45 <+bridge> [ddnet] <Chairn> @Not Keks what would you do for array of objects?
12:45 <+bridge> [ddnet] <Chairn> placement new can init array but assignment requires loop
12:45 <+bridge> [ddnet] <Jupstar> it will also loop internally
12:46 <+bridge> [ddnet] <Jupstar> bcs all objects will call constructor
12:46 <+bridge> [ddnet] <Chairn> i know, im just lazy to type the loop
12:46 <+bridge> [ddnet] <Jupstar> dunno use foreach or smth
17:42 <+bridge> [ddnet] <cauldron> so you are done with that? or is it just the menu yet, where you can define every color in its own preview function?
17:46 <+bridge> [ddnet] <cauldron> other question: any good alternatives to electron, cross plattform guis?
17:47 <+bridge> [ddnet] <cauldron> other question: any good alternatives to electron, but it should be a cross plattform gui?
18:42 <+bridge> [ddnet] <Chairn> well, clang does not know loop and gcc kinda store variable per variable:
18:42 <+bridge> [ddnet] <Chairn> https://godbolt.org/z/6d17Teq6W
18:42 <+bridge> [ddnet] <Chairn> <https://godbolt.org/z/6d17Teq6W>
19:03 <+bridge> [ddnet] <⁄(⁄ ⁄•⁄-⁄•⁄ ⁄)⁄> I do not update the list of servers (there is an eternal update), but only on windows 8.1, before that was windows 7 and everything worked fine, and before windows 7 was windows 8.1 and it also does not update, I think the problem is somehow connected with the system
19:03 <+bridge> [ddnet] <⁄(⁄ ⁄•⁄-⁄•⁄ ⁄)⁄> 🤔
20:11 <+bridge> [ddnet] <bluesky> "xd sure chillerbot.png is lyfe"  lol
21:43 <+bridge> [ddnet] <Patiga> @Tater damn before I went away a week ago I opened your shadertoy page. now that I'm back that was the first page I have open and I'm absolutely amazed :D
21:48 <+bridge> [ddnet] <Voxel> its just the menu
21:51 <+bridge> [ddnet] <Chairn> i hate the fact that `std::size` cannot be used in a constexpr when the array is stored in a struct in a vector...
22:15 <+bridge> [ddnet] <Learath2> hm, why?
22:15 <+bridge> [ddnet] <Jupstar> show code or did not happen
22:17 <+bridge> [ddnet] <Chairn> ```c++
22:17 <+bridge> [ddnet] <Chairn> constexpr int ArraySize = std::size(Container.m_vQuads[0].m_aVertices); // operator[] is not constexpr so compilation fails
22:17 <+bridge> [ddnet] <Chairn> constexpr int ArraySize = sizeof(Container.m_vQuads[0].m_aVertices)/sizeof(Container.m_vQuads[0].m_aVertices[0]); // ok
22:17 <+bridge> [ddnet] <Chairn> ```
22:18 <+bridge> [ddnet] <Learath2> Ah, I see what you mean
22:18 <+bridge> [ddnet] <Jupstar> so its not about std::size or structs, but only about accessing an array 😄
22:18 <+bridge> [ddnet] <Chairn> i tried everything
22:18 <+bridge> [ddnet] <Chairn> you cant use `::` on non static member
22:19 <+bridge> [ddnet] <Jupstar> constexpr reference operator[]( size_type pos );
22:19 <+bridge> [ddnet] <Jupstar> (since C++20)
22:19 <+bridge> [ddnet] <Chairn> so i had to resort to the good old sizeof
22:19 <+bridge> [ddnet] <Jupstar> c++20 bro
22:19 <+bridge> [ddnet] <Chairn> i wish we used c++ 20, i need auto generated `operator==`
22:19 <+bridge> [ddnet] <Jupstar> all versions before c++20 just suck no joke xD
22:19 <+bridge> [ddnet] <Jupstar> and in 1 year i say the same with c++23
22:20 <+bridge> [ddnet] <Chairn> i wonder what c++ will look like in 20 years
22:20 <+bridge> [ddnet] <Jupstar> in 20years KIs are coding what we want
22:20 <+bridge> [ddnet] <Jupstar> we just type in the idea
22:20 <+bridge> [ddnet] <Chairn> finally they will have implemented everything that people needed since 2000 ;:D
22:20 <+bridge> [ddnet] <Chairn> finally they will have implemented everything that people needed since 2000 :D
22:20 <+bridge> [ddnet] <Chairn> ki?
22:20 <+bridge> [ddnet] <Jupstar> AI
22:21 <+bridge> [ddnet] <Chairn> what kind of keyboard do you have?
22:21 <+bridge> [ddnet] <Chairn> a and k are opposite side
22:21 <+bridge> [ddnet] <Jupstar> its the german shortcut
22:21 <+bridge> [ddnet] <Chairn> ah
22:21 <+bridge> [ddnet] <Jupstar> i am just used to call it KI xD
22:21 <+bridge> [ddnet] <Chairn> artificial = kartificial?
22:21 <+bridge> [ddnet] <Jupstar> künstliche
22:21 <+bridge> [ddnet] <Chairn> in french its even worse, we use IA instead of AI
22:22 <+bridge> [ddnet] <Chairn> so i always mix them up
22:22 <+bridge> [ddnet] <Learath2> @Chairn `constexpr auto k = std::tuple_size<decltype(decltype(v_vec)::value_type::m_arr)>::value;` maybe? 😄
22:22 <+bridge> [ddnet] <Chairn> yeah i saw that, but i thought that sizeof should be enough
22:23 <+bridge> [ddnet] <Chairn> uh, the stackoverflow i saw had only one decltype
22:23 <+bridge> [ddnet] <Jupstar> use sizeof, put a comment TODO: c++20 u nobos
22:23 <+bridge> [ddnet] <Jupstar> and its fine
22:23 <+bridge> [ddnet] <Learath2> I'm not sure if this is even fine in C++20 actually
22:24 <+bridge> [ddnet] <Learath2> Isn't that constexpr operator only available if the vector itself is constexpr?
22:24 <+bridge> [ddnet] <Jupstar> possible, but he uses it in a constexpr, so i assume it is?
22:25 <+bridge> [ddnet] <Jupstar> or why is his function constexpr in first place
22:25 <+bridge> [ddnet] <bluesky> people will still code like its C
22:26 <+bridge> [ddnet] <Learath2> The size of the array inside the struct inside the vector is constant at compile time, the vector doesn't have to be constexpr for that
22:27 <+bridge> [ddnet] <Learath2> I wonder why `std::array::size()` can't be static aswell actually, that would solve this and be sane
22:27 <+bridge> [ddnet] <Jupstar> well but he is clearly accessing stuff, if he wants the size of the array, he can just constexpr the size of it
22:28 <+bridge> [ddnet] <Learath2> hm, it wasn't that clear to me atleast
22:29 <+bridge> [ddnet] <Jupstar> yeah actually nvm
22:29 <+bridge> [ddnet] <Jupstar> just dont do std::size here, just declare the array size
22:29 <+bridge> [ddnet] <Jupstar> can put a constexpr inside the struct probs?
22:29 <+bridge> [ddnet] <Jupstar> so he can access it
22:30 <+bridge> [ddnet] <Learath2> `constexpr  auto k = decltype(decltype(v_vec)::value_type::m_arr)::size();` if this was the case, that'd be so nice
22:30 <+bridge> [ddnet] <Learath2> Hm, that could work actually
22:31 <+bridge> [ddnet] <Jupstar> mh no doesnt 😄
22:31 <+bridge> [ddnet] <Learath2> anyway, the sizeof works too, so whatever
22:34 <+bridge> [ddnet] <Jupstar> @Learath2 @Chairn ez pz no problem
22:34 <+bridge> [ddnet] <Jupstar> ```c++
22:34 <+bridge> [ddnet] <Jupstar> 
22:34 <+bridge> [ddnet] <Jupstar> struct s{
22:34 <+bridge> [ddnet] <Jupstar>     std::array<int, 100> a;
22:35 <+bridge> [ddnet] <Jupstar>   
22:35 <+bridge> [ddnet] <Jupstar> 
22:35 <+bridge> [ddnet] <Jupstar> static constexpr std::size_t t = std::size(decltype(a)());
22:35 <+bridge> [ddnet] <Jupstar> };
22:35 <+bridge> [ddnet] <Jupstar> ```
22:35 <+bridge> [ddnet] <Learath2> do you actually need the static too?
22:35 <+bridge> [ddnet] <Jupstar> inside the struct yes
22:35 <+bridge> [ddnet] <Jupstar> but should work outside of the struct too
22:40 <+bridge> [ddnet] <Chairn> uh that doesn't work? Can't use a temporary inside std::size, that's what it told me when i tried
22:40 <+bridge> [ddnet] <Jupstar> if its a constexpr why not
22:40 <+bridge> [ddnet] <Jupstar> std::array constructor should be constexpr, but maybe only c++20 again xd
22:41 <+bridge> [ddnet] <Jupstar> ah you probs using it on a datatype
22:41 <+bridge> [ddnet] <Jupstar> maybe that datatype needs constexpr constructor too
22:41 <+bridge> [ddnet] <Chairn> `error: temporary of non-literal type 'CGraphics_Threaded::SQuadContainer::SQuad' in a constant expression`
22:43 <+bridge> [ddnet] <Jupstar> yeah
22:43 <+bridge> [ddnet] <Jupstar> SQuad constexpr constructor
22:43 <+bridge> [ddnet] <Jupstar> gogog
22:44 <+bridge> [ddnet] <Chairn> this branch is becoming a huge mess 😄
22:44 <+bridge> [ddnet] <Jupstar> ^^
22:44 <+bridge> [ddnet] <Chairn> i should split commits like Robyt does
22:44 <+bridge> [ddnet] <Chairn> i guess we're both extreme
22:44 <+bridge> [ddnet] <Voxel> what is this branch doing exactly :o
22:45 <+bridge> [ddnet] <Chairn> i bundle everything in a single commit, he breaks his pr in multiple small commits
22:45 <+bridge> [ddnet] <Tater> Thanks :D
22:45 <+bridge> [ddnet] <Chairn> initialize everything everywhere
22:46 <+bridge> [ddnet] <Chairn> but it breaks the code right now (and im not sure, but im afraid it breaks protocol also...)
22:46 <+bridge> [ddnet] <Jupstar> is that even good btw?
22:46 <+bridge> [ddnet] <Jupstar> that prevents catching logic errors that are caused if you didnt want a default 0 initialization
22:47 <+bridge> [ddnet] <Chairn> some part of the code are literally waiting to be broken to be honest
22:47 <+bridge> [ddnet] <Voxel> i imagine faster loading time
22:47 <+bridge> [ddnet] <Jupstar> yes but i wouldnt just blindly say initializzing everything to default is a MUST be good
22:47 <+bridge> [ddnet] <Chairn> should actually be slower, but in my preliminous tests, it was actually faster, i dont know why and how
22:47 <+bridge> [ddnet] <Chairn> yeah i agree
22:48 <+bridge> [ddnet] <Chairn> im kinda in machine mode, not thinking
22:48 <+bridge> [ddnet] <Chairn> should actually be slower, but in my preliminary tests, it was actually faster, i dont know why and how
22:48 <+bridge> [ddnet] <Jupstar> but anyway future coders could simply initialize values where its declared
22:48 <+bridge> [ddnet] <Jupstar> struct a{
22:48 <+bridge> [ddnet] <Jupstar> int i = 2
22:48 <+bridge> [ddnet] <Jupstar> }
22:48 <+bridge> [ddnet] <Jupstar> less error prone
22:48 <+bridge> [ddnet] <Jupstar> ;D
22:48 <+bridge> [ddnet] <Chairn> not even possible 🙂
22:49 <+bridge> [ddnet] <Jupstar> but currently we also have constructors, oninit, onconsoleinit, onchillerdragonsmodneedssomeinitinit
22:49 <+bridge> [ddnet] <Chairn> because this auto declares constructor and can turn some classes into virtual...
22:49 <+bridge> [ddnet] <Chairn> which breaks all the mem_zero calls
22:49 <+bridge> [ddnet] <Chairn> i think i will revert all init and just fix the mem_zero, mem_copy and mem_comp calls
23:05 <+bridge> [ddnet] <cauldron> servelist is refreshing, when you switch tabs, but not when you come from ingome to server browser. is it worth to add a refresh there?
23:05 <+bridge> [ddnet] <cauldron> https://cdn.discordapp.com/attachments/293493549758939136/997972174147166248/refresh_serverlist.mp4
23:08 <+bridge> [ddnet] <cauldron> at least that's what i meant, that's the behavior for me, i'd expect to be the browser always up to date, when i focus it
23:09 <+bridge> [ddnet] <cauldron> coming from ingame, ingame, opening ingame browser, switching tabs, starting ddnet client, maybe even refreshing after a certain amount of time, when leaving the server browser open while afk or doing stuff
23:10 <+bridge> [ddnet] <cauldron> coming from ingame, opening ingame browser, switching tabs, starting ddnet client, maybe even refreshing after a certain amount of time, when leaving the server browser open while afk or doing stuff
23:16 <+bridge> [ddnet] <heinrich5991> ``sizeof(*(int *)nullptr)` isn't UB, right?
23:16 <+bridge> [ddnet] <heinrich5991> `sizeof(*(int *)nullptr)` isn't UB, right?
23:17 <+bridge> [ddnet] <Chairn> no idea, but i'd say it compiles and runs fine?
23:18 <+bridge> [ddnet] <Chairn> or does the standard require compiler to evaluate the expression inside sizeof, in which case it would segfault ?
23:18 <+bridge> [ddnet] <Chairn> or does the standard require compiler to evaluate the expression inside sizeof, in that/ case it would segfault ?
23:18 <+bridge> [ddnet] <Chairn> or does the standard require compiler to evaluate the expression inside sizeof, in that case it would segfault ?
23:25 <+bridge> [ddnet] <bluesky> hey all
23:25 <+bridge> [ddnet] <bluesky> i wanna understand why some parts get generated with a python script
23:26 <+bridge> [ddnet] <bluesky> for example why does protcol.h gets generated with network.py?
23:26 <+bridge> [ddnet] <bluesky> for example why does protocol.h gets generated with network.py?
23:26 <+bridge> [ddnet] <bluesky> Why cant protocol.h cant be just a static file
23:26 <+bridge> [ddnet] <bluesky> Why cant protocol.h just be a static file
23:28 <+bridge> [ddnet] <Learath2> shouldn't be, evaluating that stmt is UB, but sizeof doesn't evaluate it's operand
23:28 <+bridge> [ddnet] <Learath2> well expression, not statement
