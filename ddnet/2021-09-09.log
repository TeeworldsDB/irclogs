00:00 <+bridge> [ddnet] <chillerdragon> Yea itâ€™s on my todo forever
00:00 <+bridge> [ddnet] <Patiga> uh isnt that on every client or server start ever?
00:00 <+bridge> [ddnet] <Jupstar âœª> if you can reproduce it ez, you could do it now
00:00 <+bridge> [ddnet] <Patiga> not sure which one though
00:00 <+bridge> [ddnet] <chillerdragon> Itâ€™s kinda a reminder for me cuz itâ€™s late again already
00:00 <+bridge> [ddnet] <chillerdragon> Yes every client close
00:00 <+bridge> [ddnet] <chillerdragon> On quit I get it
00:01 <+bridge> [ddnet] <chillerdragon> No now I sleep
00:01 <+bridge> [ddnet] <chillerdragon> \:p
00:01 <+bridge> [ddnet] <Jupstar âœª> i sadly dont get it
00:01 <+bridge> [ddnet] <chillerdragon> Buy Linux
00:01 <+bridge> [ddnet] <Jupstar âœª> if you always get it, see what calls it
00:01 <+bridge> [ddnet] <Patiga> hm no I'm also not getting it rn, but I remember getting it very often so I didn't worry about it ^^
00:01 <+bridge> [ddnet] <Jupstar âœª> has nothing todo with linux
00:02 <+bridge> [ddnet] <chillerdragon> No?
00:02 <+bridge> [ddnet] <chillerdragon> Hm
00:02 <+bridge> [ddnet] <Jupstar âœª> i use linux as you probably know xd
00:02 <+bridge> [ddnet] <chillerdragon> Yea anyways if I donâ€™t forget Iâ€™ll look into it
00:02 <+bridge> [ddnet] <chillerdragon> Soon
00:02 <+bridge> [ddnet] <Jupstar âœª> if @Patiga also gets it, he can also do it
00:02 <+bridge> [ddnet] <chillerdragon> No in my mind you are windows maximalist
00:03 <+bridge> [ddnet] <chillerdragon> Idk why
00:03 <+bridge> [ddnet] <chillerdragon> You should say â€žI use  BTWâ€œ more often
00:03 <+bridge> [ddnet] <Jupstar âœª> i rarely use windows xD
00:03 <+bridge> [ddnet] <chillerdragon> Wow did it strip my \<
00:27 <+bridge> [ddnet] <heinrich5991> I think it was just a harmless `rmdir()`
09:12 <+bridge> [ddnet] <chillerdragon> https://github.com/ddnet/ddnet/blob/b216b6744ab2ad4aa2efa03f7b4385424f97f6d2/src/engine/client/client.cpp#L838
09:12 <+bridge> [ddnet] <chillerdragon> that boi throws the remove error
09:12 <+bridge> [ddnet] <chillerdragon> So replays need to be on
09:18 <+bridge> [ddnet] <Nagi01 {LAN}> true
09:30 <+bridge> [ddnet] <Ryozuki> omaigat
09:31 <+bridge> [ddnet] <Ryozuki> can a docker container with a more modern kernel run on a older host kernel?
09:31 <+bridge> [ddnet] <Ryozuki> never rly went into this docker stuff
09:47 <+bridge> [ddnet] <ReiTW> docker containers doesn't have a kernel
09:47 <+bridge> [ddnet] <ReiTW> the point of a container is to share the kernel with the host
09:52 <+bridge> [ddnet] <ReiTW> ah understood the question now, should work fine
09:55 <+bridge> [ddnet] <ReiTW> there might be some containers that wouldn't work properly on way older kernel versions such as cilium but in general should be fine
09:57 <+bridge> [ddnet] <ReiTW> there might be some containers that wouldn't work properly on way older kernel versions such as cilium but in general should be fine, everything just depend on what u're doing on it
11:49 <+bridge> [ddnet] <Jupstar âœª> ah ty chillerdragon.
11:49 <+bridge> [ddnet] <Jupstar âœª> Looks harmless but would be nice if still be fixed
12:39 <+bridge> [ddnet] <Tsæ‡’æ•£> chillerdragon: can you fix my heart.
12:39 <+bridge> [ddnet] <chillerdragon> huh?
12:40 <+bridge> [ddnet] <Tsæ‡’æ•£> emm, nvm
12:40 <+bridge> [ddnet] <chillerdragon> wat u mean @TsFreddie
12:40 <+bridge> [ddnet] <chillerdragon> watfaka
12:40 <+bridge> [ddnet] <chillerdragon> @Jupstar âœª\: how to make nulled gfx backends with interfaces for headless client?
12:41 <+bridge> [ddnet] <Jupstar âœª> overload igraphics_backend and the processors
12:41 <+bridge> [ddnet] <uwu> Watafaka mazafaka
12:41 <+bridge> [ddnet] <chillerdragon> yea thats what i thought
12:41 <+bridge> [ddnet] <chillerdragon> im a bit stuck on the details
12:41 <+bridge> [ddnet] <chillerdragon> do we have a overload somewhere else in thew code that i can look at?
12:41 <+bridge> [ddnet] <uwu> https://youtu.be/9nyE1jn57rg
12:42 <+bridge> [ddnet] <Jupstar âœª> quite alot yeah
12:42 <+bridge> [ddnet] <Jupstar âœª> pretty much every I class
12:42 <+bridge> [ddnet] <chillerdragon> xd
12:42 <+bridge> [ddnet] <chillerdragon> so graphics too?
12:43 <+bridge> [ddnet] <Jupstar âœª> yes
12:43 <+bridge> [ddnet] <chillerdragon> class CGraphics\_Threaded \: public IEngineGraphics
12:43 <+bridge> [ddnet] <chillerdragon> like this?
12:43 <+bridge> [ddnet] <chillerdragon> wait thats basic inheritance
12:43 <+bridge> [ddnet] <chillerdragon> isnt it
12:45 <+bridge> [ddnet] <Jupstar âœª> yes
12:45 <+bridge> [ddnet] <chillerdragon> ```
12:45 <+bridge> [ddnet] <chillerdragon> class CGraphics_ThreadedNull : public IEngineGraphics
12:45 <+bridge> [ddnet] <chillerdragon> {
12:45 <+bridge> [ddnet] <chillerdragon> 	
12:45 <+bridge> [ddnet] <chillerdragon> }
12:45 <+bridge> [ddnet] <chillerdragon> 
12:45 <+bridge> [ddnet] <chillerdragon> class CGraphics_Threaded : public IEngineGraphics
12:45 <+bridge> [ddnet] <chillerdragon> {
12:45 <+bridge> [ddnet] <chillerdragon> 	enu
12:45 <+bridge> [ddnet] <chillerdragon> ```
12:45 <+bridge> [ddnet] <chillerdragon> then add all methods with empty bodies?
12:46 <+bridge> [ddnet] <Jupstar âœª> i'd also write a null processor
12:46 <+bridge> [ddnet] <chillerdragon> watafaka is dat
12:46 <+bridge> [ddnet] <Jupstar âœª> e.g. textures are sent as pointers and deleted on the backend side
12:46 <+bridge> [ddnet] <Jupstar âœª> look into backend_opengl.h or backend_sdl.h
12:46 <+bridge> [ddnet] <Jupstar âœª> they should have all classes
12:47 <+bridge> [ddnet] <chillerdragon> i wanna start with one thing to understand the nulling concept
12:48 <+bridge> [ddnet] <Jupstar âœª> yeah you just make empty bodies basically
12:48 <+bridge> [ddnet] <chillerdragon> ```c
12:48 <+bridge> [ddnet] <chillerdragon> #ifdef CONF_HEADLESS
12:48 <+bridge> [ddnet] <chillerdragon> extern IEngineGraphics *CreateEngineGraphicsThreaded() { return new CGraphics_ThreadedNull(); }
12:48 <+bridge> [ddnet] <chillerdragon> #else
12:48 <+bridge> [ddnet] <chillerdragon> extern IEngineGraphics *CreateEngineGraphicsThreaded() { return new CGraphics_Threaded(); }
12:48 <+bridge> [ddnet] <chillerdragon> #endif
12:48 <+bridge> [ddnet] <chillerdragon> ```
12:48 <+bridge> [ddnet] <chillerdragon> and then this?
12:49 <+bridge> [ddnet] <Jupstar âœª> yeah or conditionally compile with one .cpp file or the other
12:49 <+bridge> [ddnet] <chillerdragon> so you recommend a graphics\_null.cpp
12:49 <+bridge> [ddnet] <Jupstar âœª> i guess u dont want to add all this stuff into the existing files do you?
12:49 <+bridge> [ddnet] <Jupstar âœª> yes
12:49 <+bridge> [ddnet] <chillerdragon> oke
12:49 <+bridge> [ddnet] <chillerdragon> so we dupe most of the gfx files?
12:49 <+bridge> [ddnet] <chillerdragon> headers plus c++
12:50 <+bridge> [ddnet] <chillerdragon> ah wait
12:50 <+bridge> [ddnet] <chillerdragon> empty bodies are okay in headers i guess
13:12 <+bridge> [ddnet] <chillerdragon> no way lul that worked faster and better than expected
13:12 <+bridge> [ddnet] <chillerdragon> i only nulled CGraphics\_Threaded and it compiles and launches in non graphical environment
13:30 <+bridge> [ddnet] <Jupstar âœª> yes but remember the memory leaks
13:31 <+bridge> [ddnet] <Jupstar âœª> ah i see, you nulled that graphics ðŸ˜„
13:31 <+bridge> [ddnet] <Jupstar âœª> not the backend
13:32 <+bridge> [ddnet] <chillerdragon> troll @TsFreddie
13:32 <+bridge> [ddnet] <chillerdragon> @Jupstar âœª\:  ok i published a working example i did not understand what you mean by nullprocessor tho and why i need to null other classes too. Could you have a look at https://github.com/ddnet/ddnet/pull/4147 and check for flaws pls?
13:33 <+bridge> [ddnet] <chillerdragon> ye memory leaks
13:33 <+bridge> [ddnet] <chillerdragon> thats what i ask you to look at you know much more about the gfx code
13:36 <+bridge> [ddnet] <Jupstar âœª> i assume it can just work like that
13:36 <+bridge> [ddnet] <chillerdragon> as far as i can see the graphics\_threaded.cpp deletes memory that it also allocated there
13:36 <+bridge> [ddnet] <chillerdragon> so i hope no other class allocates memory and expects CGraphics\_Threaded to delete it
13:36 <+bridge> [ddnet] <chillerdragon> yea it works suprsingly well
13:37 <+bridge> [ddnet] <chillerdragon> its so odd to have a terminal application with sounds \:D
13:37 <+bridge> [ddnet] <Jupstar âœª> yeah i assume it shouldn't do that, backend mostly deletes textues and some buffers
13:38 <+bridge> [ddnet] <chillerdragon> oh i get a few valgrind errors
13:38 <+bridge> [ddnet] <chillerdragon> lemme compare with headless off
13:38 <+bridge> [ddnet] <Jupstar âœª> but since the class reports all `Is*BufferingEnabled` as false, it shouldnt even create those buffers, and textures seem to be alloced by that class
13:38 <+bridge> [ddnet] <chillerdragon> yea one has to fiddle around a bit wat returns false and what true
13:39 <+bridge> [ddnet] <Jupstar âœª> btw you can remove all non override functions
13:39 <+bridge> [ddnet] <chillerdragon> i just fixed a bug in my strip\_gfx.py script this morning that would false and 0 everything but then the components OnRender() wouldnt get called anymore
13:39 <+bridge> [ddnet] <chillerdragon> ah ye sounds good
13:40 <+bridge> [ddnet] <chillerdragon> oh okay so the valrgind warnings i see come from the headless \:/
13:40 <+bridge> [ddnet] <Jupstar âœª> show backtrace xxd
13:40 <+bridge> [ddnet] <chillerdragon> yea
13:41 <+bridge> [ddnet] <chillerdragon> ```
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    at 0x1DDF7E: float maximum<float>(float, float) (math.h:103)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x1E3CE5: CTextRender::TextEx(CTextCursor*, char const*, int) (text.cpp:1064)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x1E28F7: CTextRender::Text(void*, float, float, float, char const*, float) (text.cpp:797)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x303F3E: CUI::DoLabel(CUIRect const*, char const*, float, int, float, int) (ui.cpp:462)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x2595C7: CMenus::RenderLoading() (menus.cpp:1141)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x2C2DF1: CSoundLoading::Run() (sounds.cpp:32)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x2C321A: CSounds::OnInit() (sounds.cpp:85)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x2CEC57: CGameClient::OnInit() (gameclient.cpp:248)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x17B04A: CClient::Run() (client.cpp:3115)
13:41 <+bridge> [ddnet] <chillerdragon> ==84133==    by 0x182310: main (client.cpp:4453)
13:41 <+bridge> [ddnet] <chillerdragon> 
13:41 <+bridge> [ddnet] <chillerdragon> ```
13:42 <+bridge> [ddnet] <chillerdragon> ```
13:42 <+bridge> [ddnet] <chillerdragon> 					pCursor->m_MaxCharacterHeight = maximum(pCursor->m_MaxCharacterHeight, CharHeight + BearingY);
13:42 <+bridge> [ddnet] <chillerdragon> ```
13:42 <+bridge> [ddnet] <Jupstar âœª> in maximum?
13:42 <+bridge> [ddnet] <Jupstar âœª> what even is the error?
13:42 <+bridge> [ddnet] <Jupstar âœª> maximum shouldnt allocate memory xD
13:42 <+bridge> [ddnet] <chillerdragon> thats odd huh
13:43 <+bridge> [ddnet] <chillerdragon> i assume its the line that calls maximum
13:43 <+bridge> [ddnet] <chillerdragon> maybe pCursor
13:44 <+bridge> [ddnet] <chillerdragon> ```
13:44 <+bridge> [ddnet] <chillerdragon> 		CTextCursor Cursor;
13:44 <+bridge> [ddnet] <chillerdragon> 		SetCursor(&Cursor, x, y, Size, TEXTFLAG_RENDER);
13:44 <+bridge> [ddnet] <chillerdragon> 		Cursor.m_LineWidth = LineWidth;
13:44 <+bridge> [ddnet] <chillerdragon> 		int OldRenderFlags = m_RenderFlags;
13:44 <+bridge> [ddnet] <chillerdragon> 		if(LineWidth <= 0)
13:44 <+bridge> [ddnet] <chillerdragon> 			SetRenderFlags(OldRenderFlags | ETextRenderFlags::TEXT_RENDER_FLAG_NO_FIRST_CHARACTER_X_BEARING | ETextRenderFlags::TEXT_RENDER_FLAG_NO_LAST_CHARACTER_ADVANCE);
13:44 <+bridge> [ddnet] <chillerdragon> 		TextEx(&Cursor, pText, -1);
13:44 <+bridge> [ddnet] <chillerdragon> ```
13:44 <+bridge> [ddnet] <chillerdragon> ah btw valgrind says "Conditional jump or move depends on uninitialised value(s)"
13:44 <+bridge> [ddnet] <Jupstar âœª> ah
13:44 <+bridge> [ddnet] <chillerdragon> yea i kinda swallowed that sry
13:44 <+bridge> [ddnet] <chillerdragon> but that looks initialized to me
13:45 <+bridge> [ddnet] <Jupstar âœª> i'd make sure u have a fake screen
13:45 <+bridge> [ddnet] <Jupstar âœª> GetScreen
13:45 <+bridge> [ddnet] <Jupstar âœª> MapScreen
13:45 <+bridge> [ddnet] <Jupstar âœª> ScreenWidth
13:46 <+bridge> [ddnet] <chillerdragon> ah ye
13:46 <+bridge> [ddnet] <chillerdragon> i wasnt sure about that
13:46 <+bridge> [ddnet] <chillerdragon> because then other code might do gfx stuff and allocate shit if it finds a screen
13:47 <+bridge> [ddnet] <Jupstar âœª> i'd say if its null, we devide by null somewhere ðŸ˜„
13:47 <+bridge> [ddnet] <chillerdragon> yas
13:47 <+bridge> [ddnet] <Jupstar âœª> i doubt our impl is that safe, it just assumes a working screen
13:47 <+bridge> [ddnet] <chillerdragon> i had that issue in vanilla
13:50 <+bridge> [ddnet] <chillerdragon> wait uhm what exactly would u do?
13:50 <+bridge> [ddnet] <Jupstar âœª> initialize m_screenwidth and desktop widht with like 800 and height with 600
13:50 <+bridge> [ddnet] <Jupstar âœª> and return something at getscreen
13:51 <+bridge> [ddnet] <chillerdragon> getscreen is a void
13:51 <+bridge> [ddnet] <Jupstar âœª> it takes them as parameter
13:51 <+bridge> [ddnet] <chillerdragon> u mean fill the pointers given?
13:51 <+bridge> [ddnet] <chillerdragon> ya
13:51 <+bridge> [ddnet] <Jupstar âœª> ```
13:51 <+bridge> [ddnet] <Jupstar âœª> 
13:52 <+bridge> [ddnet] <Jupstar âœª>     *pTopLeftX = 0;
13:52 <+bridge> [ddnet] <Jupstar âœª>     *pTopLeftY =0;
13:52 <+bridge> [ddnet] <Jupstar âœª>     *pBottomRightX = 800;
13:52 <+bridge> [ddnet] <Jupstar âœª>     *pBottomRightY = 600;
13:52 <+bridge> [ddnet] <Jupstar âœª> ```
13:52 <+bridge> [ddnet] <Jupstar âœª> smth like this
13:52 <+bridge> [ddnet] <chillerdragon> i take that
13:52 <+bridge> [ddnet] <chillerdragon> 4\:3 ? \:D
13:52 <+bridge> [ddnet] <chillerdragon> 1920 1080 masterrace
13:52 <+bridge> [ddnet] <Jupstar âœª> you can also just save what comes in mapscreen
13:52 <+bridge> [ddnet] <Jupstar âœª> bcs that's what the client calls anyway
13:53 <+bridge> [ddnet] <chillerdragon> valgrind warnings still there
13:53 <+bridge> [ddnet] <chillerdragon> i only added GetScreen tho
13:54 <+bridge> [ddnet] <Jupstar âœª> and GetScreenWidht()?
13:54 <+bridge> [ddnet] <chillerdragon> thats a different class isnt it\`?
13:54 <+bridge> [ddnet] <Jupstar âœª> initialize everything from IGraphics
13:54 <+bridge> [ddnet] <Jupstar âœª> with valid stuff
13:54 <+bridge> [ddnet] <Jupstar âœª> thats the base class
13:54 <+bridge> [ddnet] <Jupstar âœª> ```
13:54 <+bridge> [ddnet] <Jupstar âœª> 
13:54 <+bridge> [ddnet] <Jupstar âœª>     int m_ScreenWidth;
13:55 <+bridge> [ddnet] <Jupstar âœª>     int m_ScreenHeight;
13:55 <+bridge> [ddnet] <Jupstar âœª>     int m_ScreenRefreshRate;
13:55 <+bridge> [ddnet] <Jupstar âœª>     float m_ScreenHiDPIScale;
13:55 <+bridge> [ddnet] <Jupstar âœª> ```
14:01 <+bridge> [ddnet] <chillerdragon> wats high dpi scale
14:01 <+bridge> [ddnet] <chillerdragon> wats a sane headless value for that
14:02 <+bridge> [ddnet] <chillerdragon> yay the unconditional jump is gone
14:02 <+bridge> [ddnet] <chillerdragon> i can connect to servers without a single additional valgrind warning
14:02 <+bridge> [ddnet] <chillerdragon> poggers
14:02 <+bridge> [ddnet] <chillerdragon> definitely lost\: 0 bytes in 0 blocks
14:02 <+bridge> [ddnet] <chillerdragon> indirectly lost\: 0 bytes in 0 blocks
14:03 <+bridge> [ddnet] <Jupstar âœª> 1
14:04 <+bridge> [ddnet] <Jupstar âœª> except you want a headless hdpi client xd
14:04 <+bridge> [ddnet] <chillerdragon> yas!
14:04 <+bridge> [ddnet] <chillerdragon> i have big screen
14:04 <+bridge> [ddnet] <chillerdragon> big dpi
14:04 <+bridge> [ddnet] <chillerdragon> yaaaaa
14:04 <+bridge> [ddnet] <chillerdragon> xxxD
14:08 <+bridge> [ddnet] <chillerdragon> next step is a fully functional ncurses client \:)
17:49 <+bridge> [ddnet] <Learath2> @heinrich5991 I wanted to write a program using libtw2, noticed itâ€™s teehistorian support doesnâ€™t know about the server_version field of the header
17:51 <+bridge> [ddnet] <Learath2> I ended up having to just skip the magic and use serde_json to read the json. (Kinda annoying since serde_json will by default error on trailing bytes)
17:53 <+bridge> [ddnet] <Learath2> Still better than my earlier ugly solution of looking for `}\x00` ðŸ˜›
18:36 <+bridge> [ddnet] <Learath2> have any of you used NoSQL databases? I'm trying to think of good uses for it
18:47 <+bridge> [ddnet] <Ryozuki> none
18:47 <+bridge> [ddnet] <Ryozuki> i prefer structured data
18:47 <+bridge> [ddnet] <Ryozuki> i tried mongodb
18:47 <+bridge> [ddnet] <Ryozuki> imho postgres is rly good
18:47 <+bridge> [ddnet] <Ryozuki> it supports lot of stuff
18:48 <+bridge> [ddnet] <Patiga> @Learath2 for teehistorian there is also the alternative parser from Zwelf, not sure how they compare https://gitlab.com/zwelf/teehistorian
18:48 <+bridge> [ddnet] <Ryozuki> included json
18:49 <+bridge> [ddnet] <Learath2> I prefer structured data aswell, which is why I never looked much into nosql stuff. It seems to be fairly popular amongst the web 69.420 crowd so I wanted to know if there were some good example uses for it
18:50 <+bridge> [ddnet] <Ryozuki> https://www.geeksforgeeks.org/use-of-nosql-in-industry/
18:50 <+bridge> [ddnet] <Ryozuki> it doesnt convince me
18:50 <+bridge> [ddnet] <Ryozuki> any of those arguments tho
18:51 <+bridge> [ddnet] <Ryozuki> kek
18:51 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/885568206062899290/unknown.png
18:53 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=b2F-DItXtZs&t=19s
18:53 <+bridge> [ddnet] <Ryozuki> lmao
18:53 <+bridge> [ddnet] <Ryozuki> the internet is beautiful
18:54 <+bridge> [ddnet] <Ryozuki> xdd "mongo db is web scale"
18:54 <+bridge> [ddnet] <Ryozuki> this video is gold
18:54 <+bridge> [ddnet] <Ryozuki> actually educational too
18:55 <+bridge> [ddnet] <Learath2> MongoDB seems like a very easy way to make a working-ish product extremely quick. The only benefit I see from it is the extreme scalability (which is due to having on ACID guarantees at all, how desirable that is is at best questionable)
18:55 <+bridge> [ddnet] <Ryozuki> due to not*
18:55 <+bridge> [ddnet] <Ryozuki> u mean right?
18:56 <+bridge> [ddnet] <Learath2> I meant s\/on/no/
18:57 <+bridge> [ddnet] <Ryozuki> listen to the video xd
18:59 <+bridge> [ddnet] <Learath2> "Relational dbs don't scale"
18:59 <+bridge> [ddnet] <Learath2> This video is 10/10
19:00 <+bridge> [ddnet] <Ryozuki> ye
19:00 <+bridge> [ddnet] <Ryozuki> its a series btw
19:00 <+bridge> [ddnet] <Ryozuki> xd
19:00 <+bridge> [ddnet] <Ryozuki> it gets even better at the end
19:19 <+bridge> [ddnet] <Learath2> When is having a non-reliable database even desirable?
19:29 <+bridge> [ddnet] <gerdoe> when you hadn't structured your data xd
19:30 <+bridge> [ddnet] <gerdoe> there are two way to use any nosql solution:
19:30 <+bridge> [ddnet] <gerdoe> you have no brain
19:30 <+bridge> [ddnet] <gerdoe> your deadline is really near or your project manager has no brain
19:34 <+bridge> [ddnet] <Learath2> Actually now that I think about it when do you ever have data that's not at all relational in an application?
19:35 <+bridge> [ddnet] <Learath2> If the data has no relation to anything in your application, why are you storing it?
19:39 <+bridge> [ddnet] <Learath2> Ah, you know where it could be useful? Search engines, it could be more efficient to store text as a blob of non-structured data if you want to search through it and don't care at what point a match occurs
20:06 <+bridge> [ddnet] <Comrade> when your service becomes really big, you have no other choice probably
20:06 <+bridge> [ddnet] <Comrade> even Discord uses Cassandra
20:06 <+bridge> [ddnet] <Comrade> https://blog.discord.com/how-discord-stores-billions-of-messages-7fa6ec7ee4c7
20:09 <+bridge> [ddnet] <Ryozuki> if u are that big maybe
20:09 <+bridge> [ddnet] <Ryozuki> but u probs wont ever need it
20:12 <+bridge> [ddnet] <Comrade> luckily ðŸ˜„
20:12 <+bridge> [ddnet] <Comrade> it's written in Java
20:22 <+bridge> [ddnet] <Learath2> I don't see why you can't use a rdbms to store things like discord messages that are pretty structured, you can even tack on an elasticsearch index to get good searching on it
20:22 <+bridge> [ddnet] <gerdoe> rdbms?
20:23 <+bridge> [ddnet] <gerdoe> ah got it
20:23 <+bridge> [ddnet] <gerdoe> maybe they don't want to migrate whole database or something
20:23 <+bridge> [ddnet] <gerdoe> or just lazy
20:23 <+bridge> [ddnet] <gerdoe> discord team is really lazy it seems
20:24 <+bridge> [ddnet] <Learath2> Oh surely if you are going from mongodb to some other solution it makes sense to go for a document based one, much easier. I just don't see how it's beneficial to give up reliability in order to get scalability, when e.g. postgres can shard just fine and not give it up
20:25 <+bridge> [ddnet] <Learath2> so why would you ever go "oh mongodb is perfect for my application"?
20:25 <+bridge> [ddnet] <gerdoe> i don't think they decided to use mongo with such phrase
20:25 <+bridge> [ddnet] <gerdoe> it was like "lol cool technology lets use it"
20:25 <+bridge> [ddnet] <gerdoe> "anyway its small app that will die in near future"
20:26 <+bridge> [ddnet] <gerdoe> who knows
20:26 <+bridge> [ddnet] <Ryozuki> because mongodb made a rly strong marketing campaign
20:29 <+bridge> [ddnet] <gerdoe> actually we can ask same shit for electron
20:29 <+bridge> [ddnet] <gerdoe> why discord team decided to use it - fast scalable cross-platform
20:30 <+bridge> [ddnet] <gerdoe> why discord team decided to use mongodb - scalable as mongo said xd
20:30 <+bridge> [ddnet] <Learath2> https://en.wikipedia.org/wiki/CAP_theorem hm, apparently if you don't give up consistency you can't have availability
20:31 <+bridge> [ddnet] <Learath2> Now is availability actually desirable? When is stale information acceptable?
20:33 <+bridge> [ddnet] <Ryozuki> now that we talking about scalign and stuff
20:33 <+bridge> [ddnet] <Ryozuki> https://mangadex.dev/mangadex-v5-infrastructure-overview/
20:33 <+bridge> [ddnet] <Ryozuki> this is a rly good blog post
20:33 <+bridge> [ddnet] <Ryozuki> (tldr how to handle shitload of users with a low budget)
20:33 <+bridge> [ddnet] <Ryozuki> its interesting
