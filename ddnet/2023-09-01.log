05:38 < bridge_> <Ewan> why do i have the urge to buy 64GB of ram
05:38 < bridge_> <Ewan> those 2 slots are looking at me with hungry eyes
05:38 < bridge_> <Ewan> 64 more*
08:33 < bridge_> <matodor> pascal?
08:33 < bridge_> <learath2> RUST
08:33 < bridge_> <Jupstar ‚ú™> It's rust. But rust is indeed similar in few things
08:34 < bridge_> <Jupstar ‚ú™> I had pascal in school xdd
08:34 < bridge_> <ryozuki> Fortran
08:34 < bridge_> <ryozuki> Lisp
08:34 < bridge_> <learath2> COBOL
08:34 < bridge_> <ryozuki> Cobol
08:34 < bridge_> <ryozuki> Xd
08:34 < bridge_> <Jupstar ‚ú™> üò¨
08:34 < bridge_> <ryozuki> Scheme
08:34 < bridge_> <Jupstar ‚ú™> FFR
08:35 < bridge_> <ryozuki> Perl
08:35 < bridge_> <Jupstar ‚ú™> :brownbear:
08:35 < bridge_> <ryozuki> True ffr
08:35 < bridge_> <ryozuki> But I'm at gym rn
08:35 < bridge_> <ryozuki> Wait till 11
08:35 < bridge_> <Jupstar ‚ú™> I always forget my questions xd
08:35 < bridge_> <ryozuki> Xd
08:35 < bridge_> <Jupstar ‚ú™> Yesterday i had one
08:35 < bridge_> <chillerdragon> No. It was too unexpected and random. Did you write that by hand? :D
08:36 < bridge_> <Jupstar ‚ú™> Yes
08:36 < bridge_> <chillerdragon> Wow
08:36 < bridge_> <matodor> prolog?
08:36 < bridge_> <chillerdragon> Such effort
08:36 < bridge_> <Jupstar ‚ú™> I hoped you start a new programming language
08:36 < bridge_> <chillerdragon> I got the rust part
08:36 < bridge_> <chillerdragon> yes
08:37 < bridge_> <Jupstar ‚ú™> Do u don't have time for other stuff
08:37 < bridge_> <Jupstar ‚ú™> If you know what i mean üòè
08:39 < bridge_> <ryozuki> I'm trying
08:39 < bridge_> <ryozuki> edlang
08:39 < bridge_> <ryozuki> @jupeyy_keks do u use variable shadowing a lot in rust
08:40 < bridge_> <ryozuki> I do and I think it's even idiomatic
08:40 < bridge_> <ryozuki> It falls in place clean
08:40 < bridge_> <chillerdragon> Can‚Äôt stop me now!
08:41 < bridge_> <chillerdragon> Im basically finished
08:41 < bridge_> <chillerdragon> Just polish is left
08:42 < bridge_> <chillerdragon> Isn‚Äôt shadowing encouraged in the rust book? I thought it‚Äôs is idiomatic.
08:42 < bridge_> <chillerdragon> Ah red wrong
08:43 < bridge_> <chillerdragon> Yes it‚Äôs idiomatic :D
08:43 < bridge_> <chillerdragon> Shawoing is poor man‚Äôs mutable variables :P
08:45 < bridge_> <ryozuki> Nah it's mutating a variable type
08:46 < bridge_> <chillerdragon> :D
08:50 < bridge_> <Jupstar ‚ú™> It's definitely different to other languages. I often do it when unwrapping or pattern matching
10:37 < ChillerDragon> pheww fakin fonts robsti
10:38 < ChillerDragon> i wanted to do 0.7ing today -.-
10:38 < ChillerDragon> didnt know the streamer pr would be such a hazzle
10:38 < bridge_> <ryozuki> good job robsti
10:38 < ChillerDragon> -.-
10:38 < bridge_> <ryozuki> what streamer pr?
10:38 < ChillerDragon> #7087
10:38 < chillerbot1> https://github.com/ddnet/ddnet/issues/7087
10:43 < ChillerDragon> royowo u like the pr?
10:43 < bridge_> <ryozuki> chiller
10:43 < ChillerDragon> da
10:44 < bridge_> <ryozuki> do u know if u can do a freeze jump in a 5 tile freeze
10:44 < bridge_> <ryozuki> freeze jump is only in 1 tile right
10:44 < ChillerDragon> maybe
10:44 < ChillerDragon> i think i saw 2tile
10:44 < ChillerDragon> physics
10:44 < bridge_> <ryozuki> https://wiki.ddnet.org/index.php?title=Freeze&curid=305&diff=26480&oldid=19777&diffmode=source
10:44 < bridge_> <ryozuki> i reverted this cuz
10:44 < ChillerDragon> you just gotta be really fast
10:44 < bridge_> <ryozuki> i dont think u can freeze jump 5 deep freeze tiles
10:45 < ChillerDragon> who added 5 tiles?
10:45 < bridge_> <learath2> I think the rule is that you need to have enough speed to touch the ground before the freeze tile gets processed
10:45 < ChillerDragon> yea question is can you be that fast?
10:45 < bridge_> <learath2> So maybe it is possible? Idk
10:45 < ChillerDragon> but its weird 1 tile freeze jump you can do while being slow ass
10:45 < ChillerDragon> and 2 tile doesnt work even if you super fast
10:46 < bridge_> <learath2> There might be some other thing at play too. I'm only thinking of the simplest way it could work
10:46 < ChillerDragon> rng
10:47 < bridge_> <learath2> Unlikely üòÑ
10:47 < ChillerDragon> im curious who added the 5 tiles maybe that person has some epic demo
10:47 < ChillerDragon> it also depends on your coordinates
10:47 < ChillerDragon> i remember im corneum had to move a part around the map to make a freeze jump 10/10 consistent xd
10:47 < ChillerDragon> and im not talking about far lands
10:48 < ChillerDragon> just a few hounderd tiles away from spawn
10:48 < ChillerDragon> where if you hit the ceiling to get the exact same speed you can freeze jump 10/10 in one place but if that part is moved a bit it does not work anymore
10:49 < ChillerDragon> i can already see heinrich drafting his next physics change where freezejumps will work 10/10 everywhere haha
10:53 < ChillerDragon> @ryozuki wait i got another angle! What if that person meant the freeze is 1 tile high but the jump from the floor is 5 jumps high?
10:53 < ChillerDragon> nah it should be 7 right?
10:53 < ChillerDragon> its a full jump
10:53 < ChillerDragon> nah the sentence is pretty unambigious
10:53 < ChillerDragon> im telling you this dood found the magic coordinates for the 5 tile bungee jump
10:58 < bridge_> <ryozuki> that person is a web3 entuthiast
10:58 < bridge_> <ryozuki> sorry i couldnt help but read his discord bio xd
10:59 < bridge_> <snailx3> https://cdn.discordapp.com/attachments/293493549758939136/1147093248976891974/IMG_6435.png
10:59 < bridge_> <ryozuki> nice meme snail
10:59 < bridge_> <ryozuki> ur a dev now
10:59 < bridge_> <snailx3> siu
11:01 < ChillerDragon> xd
11:01 < ChillerDragon> whos bio?
11:01 < ChillerDragon> wot web3
11:01 < bridge_> <ryozuki> nothing xd
11:02 < ChillerDragon> omagawd
11:02 < bridge_> <ryozuki> the discord user description
11:02 < bridge_> <ryozuki> it said web3 moderator
11:02 < bridge_> <ryozuki> i just found it funny
11:02 < ChillerDragon> 2nd coffe and havent even open vscode yet xd
11:02 < ChillerDragon> which user?
11:06 < bridge_> <ryozuki> jurai
11:06 < bridge_> <ryozuki> btw i also had 2nd coffee
11:06 < bridge_> <ryozuki> one before gym and one after
11:06 < bridge_> <ryozuki> becoming a ddnet chad
11:07 < bridge_> <learath2> Gym??? What's next, will you tell me you touch grass?????
11:07 < bridge_> <learath2> Blasphemy
11:07 < bridge_> <ryozuki> u already knew i go to gym
11:07 < bridge_> <ryozuki> but i havent touched grass yet
11:08 < bridge_> <learath2> Ëçâ
11:09 < bridge_> <ryozuki> @jupeyy_keks where is ur rust question
11:09 < bridge_> <learath2> Can coke be used to clean rust?
11:09 < bridge_> <ryozuki> never tried
11:10 < bridge_> <ryozuki> https://this-week-in-rust.org/blog/2023/08/30/this-week-in-rust-510/
11:11 < ChillerDragon> xd
11:11 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1147096430373240832/image.png
11:11 < bridge_> <ryozuki> daily gentoo emerge
11:11 < bridge_> <ryozuki> with coffee in hand
11:11 < bridge_> <ryozuki> admiring the beauty of computing
11:12 < bridge_> <ryozuki> :BASED:
11:13 < bridge_> <ryozuki> @jupeyy_keks https://andreabergia.com/blog/2023/08/a-jvm-in-rust-part-5-executing-instructions/
11:13 < ChillerDragon> java pog
11:14 < ChillerDragon> the jvm is so old and heavily optimized i doubt any new implementation will stand a chance
11:15 < bridge_> <ryozuki> not everything is made for the sake of competing
11:15 < bridge_> <ryozuki> its fun to do it for the sake of doing it
11:20 < bridge_> <Jupstar ‚ú™> Mhh, dunno.
11:20 < bridge_> <Jupstar ‚ú™> What is the most exotic, yet useful feature you can think of
11:20 < bridge_> <learath2> Isn't there already 2 that perform well? HotSpot and OpenJ9
11:21 < bridge_> <Jupstar ‚ú™> I'm always impressed when i remember chiller is a Java developer
11:21 < bridge_> <ryozuki> oh
11:21 < bridge_> <Jupstar ‚ú™> Imagine I'm secretly a python dev xd
11:21 < bridge_> <ryozuki> i find this rly interesting https://doc.rust-lang.org/std/ptr/index.html#strict-provenance
11:22 < bridge_> <ryozuki> pointer provenance
11:22 < bridge_> <ryozuki> its still a nightly feature
11:22 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1147099130854912010/image.png
11:22 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1147099138505314314/image.png
11:23 < bridge_> <Jupstar ‚ú™> Interesting. Have to read xd
11:23 < bridge_> <ryozuki> ye go read it
11:23 < bridge_> <ryozuki> its the future
11:23 < bridge_> <ryozuki> https://github.com/rust-lang/rust/issues/95228
11:23 < bridge_> <ryozuki> > This is an unofficial experiment to see How Bad it would be if Rust had extremely strict pointer provenance rules that require you to always dynamically preserve provenance information. Which is to say if you ever want to treat something as a Real Pointer that can be Offset and Dereferenced, there must be an unbroken chain of custody from that pointer to the original allocation you are trying to access using only pointer->pointer operations. If 
11:25 < bridge_> <ryozuki> > A secondary goal of this project is to try to disambiguate the many meanings of ptr as usize, in the hopes that it might make it plausible/tolerable to allow usize to be redefined to be an address-sized integer instead of a pointer-sized integer. This would allow for Rust to more natively support platforms where sizeof(size_t) < sizeof(intptr_t), and effectively redefine usize from intptr_t to size_t/ptrdiff_t/ptraddr_t (it would still generally
11:25 < bridge_> <ryozuki> > 
11:25 < bridge_> <ryozuki> > A tertiary goal of this project is to more clearly answer the question "hey what's the deal with Rust on architectures that are pretty harvard-y like AVR and WASM (platforms which treat function pointers and data pointers non-uniformly)". There is... weirdness in the language because it's difficult to talk about "some" function pointer generically/opaquely and that encourages you to turn them into data pointers and then maybe that does Wrong Thi
11:25 < bridge_> <ryozuki> > 
11:25 < bridge_> <ryozuki> > The mission statement of this experiment is: assume it will and must work, try to make code conform to it, smash face-first into really nasty problems that need special consideration, and try to actually figure out how to handle those situations. We want the evil shit you do with pointers to work but the current situation leads to incredibly broken results, so something has to give.
11:26 < ChillerDragon> im not a java developer -.-
11:28 < bridge_> <ryozuki> https://www.ralfj.de/blog/2020/12/14/provenance.html
11:28 < bridge_> <Jupstar ‚ú™> Yes you are
11:28 < bridge_> <ryozuki> chiller is the declared ddnet  java dev
11:28 < bridge_> <Jupstar ‚ú™> True
11:29 < bridge_> <Jupstar ‚ú™> Chiller java
11:29 < bridge_> <Jupstar ‚ú™> Heinrich Python
11:29 < bridge_> <Jupstar ‚ú™> Ryo rust
11:29 < bridge_> <Jupstar ‚ú™> Me shading language
11:29 < bridge_> <Jupstar ‚ú™> Learath c
11:29 < bridge_> <ryozuki> heinrich python xd
11:30 < bridge_> <ryozuki> he also knows lot of rust
11:30 < bridge_> <ryozuki> maybe more
11:30 < bridge_> <ryozuki> probs  more
11:30 < bridge_> <ryozuki> im a nobo
11:30 < bridge_> <Jupstar ‚ú™> Yes, but he ain't showing his hype so much xd
11:31 < bridge_> <Jupstar ‚ú™> And he protects Python xddd
11:38 < bridge_> <fokkonaut> Hello math heads, what's the best way to calculate a percentage between 0-100% from a few numbers? I want to show how much those numbers agree with each other, for example [2,2,2,2] = 100%, [0, 100] = 50% or 0%?
11:39 < bridge_> <fokkonaut> The standard deviation doesnt seem to be it
11:39 < bridge_> <ryozuki> https://en.wikipedia.org/wiki/Levenshtein_distance
11:40 < bridge_> <fokkonaut> Heard of that before... I'll look into it
11:40 < bridge_> <Jupstar ‚ú™> Ryo had that tab open xdd
11:41 < bridge_> <ryozuki> xd
11:42 < ChillerDragon> xd
11:42 < bridge_> <fokkonaut> xd
11:42 < bridge_> <ryozuki> quick google
11:42 < bridge_> <ryozuki> https://www.geeksforgeeks.org/python-percentage-similarity-of-lists/
11:42 < bridge_> <ryozuki> but apparently
11:42 < bridge_> <ryozuki> its pretty subjective
11:42 < bridge_> <ryozuki> to what u consider similar
11:43 < bridge_> <ryozuki> https://en.wikipedia.org/wiki/String_metric
11:46 < bridge_> <Jupstar ‚ú™> @ryozuki would you rather use sha3 keccak
11:46 < bridge_> <Jupstar ‚ú™> Or blake2
11:46 < bridge_> <fokkonaut> But that's for strings, not for lists of numbers
11:46 < bridge_> <ryozuki> strings are numbers
11:47 < bridge_> <fokkonaut> fair
11:47 < bridge_> <ryozuki> blake2 is faster i think
11:47 < bridge_> <ryozuki> NIST created a competition for SHA-3, and it was Keccak that was crowned the champion. Since then, SHA-3 has received good adoption levels, but you'll also see BLAKE2 ‚Äî one of the finalists ‚Äî being used in many applications. Keccak won because it was fast, and where BLAKE2 was submitted too late to compete against it.
11:47 < bridge_> <Jupstar ‚ú™> Yep, but sha3 is told to be more secure. Even tho even sha2 is still secure xd
11:48 < bridge_> <ryozuki> this is not for passwords right xd
11:48 < bridge_> <Jupstar ‚ú™> It's for file hashes
11:48 < bridge_> <ryozuki> ah
11:48 < bridge_> <ryozuki> gentoo uses blake2
11:48 < bridge_> <ryozuki> so blake2
11:48 < bridge_> <Jupstar ‚ú™> Xd ok
11:50 < bridge_> <fokkonaut> @ryozuki i dont understand how i would adapt this to use a list of integers
11:50 < bridge_> <ryozuki> me neither
11:50 < bridge_> <ryozuki> xd
11:51 < bridge_> <ryozuki> i think u need to explain what u want
11:51 < bridge_> <ryozuki> in reality
11:51 < bridge_> <fokkonaut> .
11:51 < bridge_> <ryozuki> https://xyproblem.info/
11:51 < bridge_> <ryozuki> i mean the reason why u want to do that
11:51 < bridge_> <Jupstar ‚ú™> Sha3 might get acceleration support tho. Bcs its standard
11:52 < bridge_> <ryozuki> isnt sha2 accelerated
11:52 < bridge_> <ryozuki> its secure enough and its files
11:52 < bridge_> <fokkonaut> thats basically what i said, i have a list of numbers, so for example it could be a vote, and everyone votes a number, and then i just want to calculate an agreement @ryozuki
11:53 < bridge_> <ryozuki> oh
11:53 < bridge_> <ryozuki> explain more the vote thing
11:53 < bridge_> <ryozuki> thats what i mean
11:53 < bridge_> <fokkonaut> between 0 and 100%
11:53 < bridge_> <ryozuki> u simply count the votes on each number?
11:54 < bridge_> <ryozuki> if people vote a number between 0 and 100 simply do the median or smth
11:54 < bridge_> <fokkonaut> the numbers are between 0 and 15
11:55 < bridge_> <fokkonaut> and if the numbers are [2,2,3,1] the average is 2, but the agreement should look like 90% or whatever
11:56 < bridge_> <ryozuki> hmm
11:59 < bridge_> <ryozuki> im not a data scientist so
11:59 < bridge_> <ryozuki> but maybe this helps https://en.wikipedia.org/wiki/Median_absolute_deviation
11:59 < bridge_> <ryozuki> xd
12:02 < ChillerDragon> foko wat u doin
12:06 < bridge_> <fokkonaut> hax
12:13 < ChillerDragon> sus
12:17 < bridge_> <fokkonaut> sadly no
12:28 < bridge_> <Mr.Gh0s7> I would first normalize the numbers. So if the the max is 3 I would divide everything by 3 so max would be one (haven't thought any further yet)
12:37 < bridge_> <Mr.Gh0s7> btw do you want the agreement to be based on 15 or to be relative?
12:38 < bridge_> <Mr.Gh0s7> Like if it's `2, 2, 2, 2` it's 100% agreement but that's without taking into acount that it could be `15, 15, 15, 15` which would aslo be 100% agreement
12:42 < bridge_> <fokkonaut> ye
12:42 < bridge_> <fokkonaut> same numbers always 100%
12:43 < bridge_> <Mr.Gh0s7> ok
13:02 < bridge_> <heinrich5991> just use sha256, it's supported everywhere
13:09 < bridge_> <Jupstar ‚ú™> Nah, i want the future
13:17 < ChillerDragon> I was too lazy too open my bloated gui video editor so i spend 20 minutes on stackoverflow to manage my task with ffmpeg xd
13:19 < ChillerDragon> jopsti can you pls build a easy to use blazingly fast curses video editor that does all the simple tasks and has a nice search and cool defaults
13:19 < ChillerDragon> which can crop and cut videos remove sound add a sound track etc
13:22 < bridge_> <Jupstar ‚ú™> Is kdenlive bloated?
13:28 < bridge_> <Mr.Gh0s7> I'm on to smt dunno how correct it is though üòú
13:32 < bridge_> <heinrich5991> ```py
13:32 < bridge_> <heinrich5991> >>> def deviation(x):
13:32 < bridge_> <heinrich5991> ...     return np.exp(np.sum(-np.abs(np.log(x / np.median(x)))) / len(x))
13:32 < bridge_> <heinrich5991> ... 
13:32 < bridge_> <heinrich5991> >>> deviation([2,2,2,2])
13:32 < bridge_> <heinrich5991> 1.0
13:32 < bridge_> <heinrich5991> >>> deviation([2,2,3,1])
13:32 < bridge_> <heinrich5991> 0.7598356856515925
13:32 < bridge_> <heinrich5991> >>> deviation([2,2,3,2])
13:32 < bridge_> <heinrich5991> 0.9036020036098449
13:32 < bridge_> <heinrich5991> ```
13:47 < ChillerDragon> @Jupstar ‚ú™ unless im hired by fucking netflix to cut an entire movie it feels overkill to launch this kdenbloat
13:48 < bridge_> <heinrich5991> how long does it take to start?
13:48 < ChillerDragon> its a nice editor but not fun for super little tasks when operating on one clip
13:48 < ChillerDragon> it takes about 1 second to start on my lapotp
13:48 < ChillerDragon> it takes as long to start as ffmpeg takes to render the whole thing
13:49 < ChillerDragon> and its full of gui where i have to use the mouse and click through menus to render a fakin video
13:50 < bridge_> <heinrich5991> did you factor in the amount of time to find the correct invocationn? üòâ
13:50 < ChillerDragon> no
13:50 < ChillerDragon> that was the joke
13:50 < ChillerDragon> i waste so much time on ffmpeg and i never remember the shit no matter how often i do it
13:50 < ChillerDragon> thats why i need a ffmpeg wrapper where i can search human friendly terms such as "crop" "compress" "cut" and then use some sliders and input fields to adjust
13:52 < bridge_> <heinrich5991> it sounds like chatgpt might perform well on this task
13:54 < bridge_> <robyt3> Time to write a paper about it
13:55 < bridge_> <Jupstar ‚ú™> Well chiller, dunno what exactly you do. But if Video editors are bloat to edit a video. Then at least also say videos itself are bloat
13:56 < bridge_> <Jupstar ‚ú™> Video is latin for i see xdd
13:56 < bridge_> <robyt3> For programming related questions it's basically a coin-toss right now whether ChatGPT is correct or not: https://arxiv.org/abs/2308.02312
13:57 < bridge_> <heinrich5991> I would expect it to have a good performance on "how to cut in ffmpeg"-type questions
13:58 < bridge_> <robyt3> Yeah, I think it works pretty good for making small command line scripts or writing individual commands
13:58 < bridge_> <heinrich5991> which is what chillerdragon wants to do
13:58 < bridge_> <Jupstar ‚ú™> It's good in predicting the next word. So yeah. The more often these types of questions are asked or the task is mentioned in text form. The better it is
13:58 < bridge_> <Jupstar ‚ú™> That's also why it's much better in js and python than rust
14:02 < ChillerDragon> @heinrich5991 i rather spin up kdenlive than use fakin ai
14:03 < bridge_> <robyt3> Maybe kdenlive internally uses ChatGPT to generate its ffmpeg invocations? üòè
14:03 < bridge_> <ryozuki> rust is more complex too
14:04 < bridge_> <heinrich5991> ChillerDragon: why not spin up AI to learn something?
14:05 < bridge_> <ryozuki> chiller where were ur docs about packets
14:05 < bridge_> <ryozuki> ?
14:05 < ChillerDragon> @fokkonaut check matrix
14:06 < ChillerDragon> ryo version?
14:06 < ChillerDragon> https://chillerdragon.github.io/teeworlds-protocol/06/packet_layout.html
14:06 < ChillerDragon> 0.6 i assume xd
14:07 < bridge_> <Jupstar ‚ú™> But also if u don't know anything about logic? Xd
14:07 < ChillerDragon> @heinrich5991 i am waiting for libre ai that doesnt need phone num or has quotas and is pay2win. Also i somehow prefer stackoverlfow and docs over hallucinating AI.
14:07 < ChillerDragon> i just dislike it smh a lot
14:07 < bridge_> <ryozuki> buy 100 gpus
14:08 < ChillerDragon> ryo wat u doin with packets?
14:08 < bridge_> <ryozuki> i wanna do a packet library in rust
14:08 < ChillerDragon> og
14:08 < ChillerDragon> pog
14:08 < bridge_> <ryozuki> also ill try to fix huffman
14:08 < bridge_> <ryozuki> i have teeint
14:08 < ChillerDragon> btw if you duckduckgo "teeworlds packet" its the first hit for me
14:08 < bridge_> <ryozuki> ill change rustyman to teehuff
14:08 < bridge_> <ryozuki> then teenet
14:09 < bridge_> <heinrich5991> I can recommend https://github.com/heinrich5991/libtw2/blob/044597a89faa5afaaa01e6cb2fa100d94c806738/gamenet/generate/spec/ddnet-16.7.2.json as a spec for the protocol
14:09 < bridge_> <heinrich5991> ChillerDragon: could you link my packet spec jsons btw?
14:09 < ChillerDragon> yea they are good
14:09 < bridge_> <ryozuki> oh epic
14:10 < ChillerDragon> idk where to link them
14:10 < ChillerDragon> maybe on the main page
14:10 < bridge_> <Mr.Gh0s7> https://www.desmos.com/calculator/kqv6ez4cwu I am too nobo to code it :(
14:10 < bridge_> <ryozuki> @heinrich5991 is it autogenerated?
14:10 < bridge_> <ryozuki> can u generate latest
14:10 < bridge_> <heinrich5991> @ryozuki yes
14:11 < bridge_> <heinrich5991> I can generate latest if you want
14:11 < bridge_> <heinrich5991> do you?
14:11 < bridge_> <ryozuki> ye
14:11 < bridge_> <ryozuki> i like shiny new stuff
14:11 < bridge_> <heinrich5991> sec
14:11 < bridge_> <heinrich5991> this automatically updates the wireshark dissector and the gamenet crate as well
14:14 < bridge_> <ryozuki> do u have a rust code generator already?
14:16 < bridge_> <heinrich5991> yes
14:16 < bridge_> <heinrich5991> I have a rust crate
14:16 < bridge_> <heinrich5991> gamenet
14:16 < bridge_> <heinrich5991> it supports ddnet, teeworlds 0.6 and teeworlds 0.7 IIRC
14:17 < bridge_> <ryozuki> ok well if it exists
14:17 < bridge_> <ryozuki> i lost motivation now xd
14:17 < bridge_> <heinrich5991> off
14:17 < bridge_> <heinrich5991> oof
14:17 < ChillerDragon> yea ryo dont reinvent the weel
14:17 < ChillerDragon> just pr some to libtw2
14:17 < ChillerDragon> for example docs -.-
14:18 < bridge_> <ryozuki> libtw2 is awesome
14:18 < bridge_> <ryozuki> but the code style just doesnt match with me xd
14:19 < ChillerDragon> bruv
14:19 < bridge_> <ryozuki> well i looked at it years ago
14:19 < bridge_> <ryozuki> also there is fun in making ur own stuff
14:19 < bridge_> <ryozuki> im gonna try to fix my rustyman tho
14:20 < bridge_> <ryozuki> @heinrich5991 why u never published to crates.io?
14:20 < bridge_> <heinrich5991> because I didn't want to make stability guarantees
14:20 < bridge_> <ryozuki> https://gitlab.com/ddnet-rs/twgame
14:20 < bridge_> <heinrich5991> I'll probably publish to crates.io at some point
14:22 < bridge_> <heinrich5991> there's an issue for it, too
14:22 < bridge_> <heinrich5991> https://github.com/heinrich5991/libtw2/issues/53
14:22 < bridge_> <ryozuki> https://wiki.ddnet.org/wiki/Resources#Tool_and_libraries
14:22 < bridge_> <ryozuki> anything u see here missing
14:23 < bridge_> <ryozuki> maybe just publish the libraries u think help most others
14:23 < bridge_> <ryozuki> the problem with git deps is u cant publish to crates with git deps
14:25 < bridge_> <heinrich5991> what's the reason you want to publish to crates.io? ^^
14:25 < bridge_> <heinrich5991> I guess forever free hosting is nice
14:26 < bridge_> <ryozuki> cargo add ddnet-map-gen
14:26 < bridge_> <ryozuki> and ye
14:26 < bridge_> <ryozuki> more places
14:26 < bridge_> <ryozuki> more visibility
14:26 < bridge_> <ryozuki> cargo install ddnet-map-gen
14:26 < bridge_> <heinrich5991> cargo install works with git urls as well
14:27 < bridge_> <ryozuki> i knew u would say that xd
14:27 < bridge_> <heinrich5991> afaik
14:27 < bridge_> <heinrich5991> I don't like the flat namespace of crates.io ^^
14:27 < bridge_> <ryozuki> --git
14:27 < bridge_> <ryozuki> u mean u would like it like github
14:27 < bridge_> <heinrich5991> yes, e.g.
14:27 < bridge_> <ryozuki> ye i also think it would be nice
14:28 < bridge_> <ryozuki> it makes name squatting more meaningless too
14:29 < bridge_> <heinrich5991> e.g. this protocol update
14:29 < bridge_> <heinrich5991> is unfortunately a breaking change for the rust crate
14:30 < bridge_> <heinrich5991> https://github.com/heinrich5991/libtw2/commit/602156e4cb787f3d2c4afeb267706233741aea9c
14:33 < bridge_> <ryozuki> hm true
14:33 < bridge_> <ryozuki> maybe make a version per ddnet version
14:33 < bridge_> <ryozuki> altho probs ddnet is not the whole scope
14:33 < bridge_> <heinrich5991> the ddnet protocol crate is separate
14:33 < bridge_> <heinrich5991> so that's probably fine
14:34 < bridge_> <ryozuki> i looked at gamenet
14:34 < bridge_> <ryozuki> its awesome
14:34 < bridge_> <ryozuki> just idk what to build with it xd
14:35 < bridge_> <heinrich5991> the PoC teeworlds server and the map downloader are built with it
14:35 < bridge_> <heinrich5991> apropos downloader
14:36 < bridge_> <heinrich5991> someone told me it broke
14:38 < bridge_> <ryozuki> oh damn some code is 9y old
14:43 < bridge_> <Voxel> are we talking about ddnet 2.0?
14:45 < ChillerDragon> no libtw2
14:45 < bridge_> <heinrich5991> works on my machine‚Ñ¢
14:45 < bridge_> <heinrich5991> no
14:45 < ChillerDragon> not to be confused with ddnet2
14:45 < ChillerDragon> both rust
14:45 < ChillerDragon> both 2
14:45 < ChillerDragon> but different
14:49 < bridge_> <ryozuki> ```rust
14:49 < bridge_> <ryozuki> pub fn lookup_host(domain: &str, port: u16) -> io::Result<Option<Addr>> {
14:49 < bridge_> <ryozuki>     for socket_addr in (domain, port).to_socket_addrs()? {
14:49 < bridge_> <ryozuki>         return Ok(Some(Addr::from_socket_addr(socket_addr)));
14:49 < bridge_> <ryozuki>     }
14:49 < bridge_> <ryozuki>     Ok(None)
14:49 < bridge_> <ryozuki> }
14:49 < bridge_> <ryozuki> ```
14:49 < bridge_> <ryozuki> clippy says this never loops
14:52 < bridge_> <heinrich5991> yea, looks like it
14:52 < bridge_> <heinrich5991> could be an `if let` with `.next()`
14:52 < bridge_> <ryozuki> https://github.com/heinrich5991/libtw2/blob/602156e4cb787f3d2c4afeb267706233741aea9c/net/src/protocol.rs#L607-L615
14:52 < bridge_> <ryozuki> is write() intended?
14:53 < bridge_> <ryozuki> write doesnt ensure a full write like write_all
14:53 < bridge_> <ryozuki> it may do a partial write
14:53 < bridge_> <heinrich5991> arrayvec's write always does complete writes
14:54 < bridge_> <ryozuki> > This function will attempt to write the entire contents of buf, but the entire write might not succeed, or the write may also generate an error. Typically, a call to write represents one attempt to write to any wrapped object.
14:54 < bridge_> <ryozuki> i see
14:54 < bridge_> <ryozuki> > the entire write might not succeed
14:54 < bridge_> <ryozuki> whathever this means
14:54 < bridge_> <ryozuki> > It is not considered an error if the entire buffer could not be written to this writer.
14:54 < bridge_> <ryozuki> > 
14:54 < bridge_> <ryozuki> > An error of the ErrorKind::Interrupted kind is non-fatal and the write operation should be retried if there is nothing else to do.
14:54 < bridge_> <heinrich5991> on a tcp connection, the buffer might be full
14:54 < bridge_> <ryozuki> docs on the method
14:54 < bridge_> <fokkonaut> wow, that looks promising. Thanks a lot!!
14:55 < bridge_> <heinrich5991> note: this only works with positive numbers. it treats [2,2,3] as having more deviation than [2,2,2,3]
14:56 < bridge_> <fokkonaut> does it work with 0's?
14:56 < bridge_> <heinrich5991> a `0` will always cause a 0% match
14:56 < bridge_> <ryozuki> did MaybeUninit exist 9 years ago?
14:56 < bridge_> <heinrich5991> lol no üòÑ
14:56 < bridge_> <fokkonaut> Hmm.
14:57 < bridge_> <ryozuki> ```rust
14:57 < bridge_> <ryozuki> error: calling `set_len()` immediately after reserving a buffer creates uninitialized values
14:57 < bridge_> <ryozuki>    --> zlib_minimal/src/lib.rsüíØ5
14:57 < bridge_> <ryozuki>     |
14:57 < bridge_> <ryozuki> 100 |     let mut dest = Vec::with_capacity(upper_bound);
14:57 < bridge_> <ryozuki>     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14:57 < bridge_> <ryozuki> ...
14:57 < bridge_> <ryozuki> 104 |         dest.set_len(upper_bound);
14:57 < bridge_> <ryozuki> ```
14:57 < bridge_> <fokkonaut> Is there a way to add a special case for `0`?
14:58 < bridge_> <heinrich5991> https://doc.rust-lang.org/std/mem/union.MaybeUninit.html 1.36.0 was released in july 2019, according to https://www.wikidata.org/wiki/Q575650
14:58 < bridge_> <fokkonaut> maybe if i shift everything + 1 and later back -1 ?
14:58 < bridge_> <heinrich5991> I can make it depend on absolute difference instead of ratio
14:58 < bridge_> <heinrich5991> does 8-9 have a different distance from 1-2?
14:58 < bridge_> <fokkonaut> that would be perfect, as `0` is a valid number to enter
14:59 < bridge_> <heinrich5991> i.e. does [1,2] have a different mismatch than [8,9]?
14:59 < bridge_> <ryozuki> > Vec clearly states that you must initialize the first len elements before calling set_len. Failing to do so breaks Vec's safety guarantees and gives Vec permission to invoke UB.
14:59 < bridge_> <fokkonaut> true
15:00 < bridge_> <heinrich5991> that was a question from my side ^^
15:00 < bridge_> <heinrich5991> so that I can accurately represent it in the function
15:00 < bridge_> <fokkonaut> oh
15:00 < bridge_> <fokkonaut> ehm
15:01 < bridge_> <fokkonaut> i think no? xd
15:01 < bridge_> <fokkonaut> idk
15:01 < bridge_> <heinrich5991> yea, there are some things that should probably be fixed up with the new models of rust UB
15:01 < bridge_> <heinrich5991> I haven't noticed any miscompilations so far though
15:02 < bridge_> <ryozuki> i dont like thinking like that xd
15:02 < bridge_> <ryozuki> i tried adding a test and running miri but it wont work cuz the c dep
15:02 < bridge_> <heinrich5991> you don't like thinking that it should be fixed? ^^
15:02 < bridge_> <ryozuki> i mean this
15:02 < bridge_> <heinrich5991> this is just an observation
15:02 < bridge_> <ryozuki> ah ok
15:02 < bridge_> <heinrich5991> it's not an opinion
15:03 < bridge_> <heinrich5991> what should the function output for [1,2]?
15:03 < bridge_> <ryozuki> ```rust
15:03 < bridge_> <ryozuki> test test::test_compress ... error: unsupported operation: can't call foreign function `compressBound` on OS `linux`
15:03 < bridge_> <ryozuki>    --> zlib_minimal/src/lib.rs:95:15
15:03 < bridge_> <ryozuki>     |
15:03 < bridge_> <ryozuki> 95  |     (unsafe { raw::compressBound(source_len as c_ulong) }) as usize
15:03 < bridge_> <ryozuki>     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function `compressBound` on OS `linux`
15:03 < bridge_> <ryozuki> ```
15:03 < bridge_> <ryozuki> sad miri noises
15:03 < bridge_> <heinrich5991> should [1,1,2] be less mismatch than [1,2]?
15:03 < bridge_> <fokkonaut> probably the same as for [8,9], i believe. it's just a voting agreement display
15:04 < bridge_> <heinrich5991> yes, but what approximate number?
15:04 < bridge_> <fokkonaut> 1,2 is probably 50/50, and 1,1,2 is more than that
15:04 < bridge_> <heinrich5991> ok
15:04 < bridge_> <fokkonaut> i think
15:04 < bridge_> <fokkonaut> not so sure xD
15:04 < bridge_> <ryozuki> heinrich today job is mathematician xD
15:04 < bridge_> <fokkonaut> he pro tho
15:04 < bridge_> <ryozuki> ye
15:04 < bridge_> <ryozuki> my maths are bad
15:05 < bridge_> <fokkonaut> i had maths in my final exams, i mean i was always quite good at maths but the level heinrich is on is smth different
15:05 < bridge_> <heinrich5991> `[8,9]` is also 50% then?
15:05 < bridge_> <fokkonaut> ah wait
15:06 < bridge_> <fokkonaut> no, [8,9] should be around 80% or smth, approxiamtely
15:06 < bridge_> <fokkonaut> it should just be slightly under 100%
15:06 < bridge_> <heinrich5991> but [1,2] should be 50%?
15:06 < bridge_> <fokkonaut> no, sorry, i was dumb
15:06 < bridge_> <heinrich5991> that should also be 80%ish?
15:06 < bridge_> <fokkonaut> yea
15:07 < bridge_> <fokkonaut> just imagine we wanna agree on one specific number, and x people can contribute to that
15:07 < bridge_> <fokkonaut> and this % should display the level of agreement
15:08 < bridge_> <fokkonaut> so, [2,2,2,2,3] should be around 90% i believe, and [2,2,2,2,8] should be less than 90
15:09 < bridge_> <heinrich5991> `closeness = lambda x: 0.64 ** (np.sum(np.abs(x - np.median(x))) / len(x))`
15:10 < bridge_> <heinrich5991> ```py
15:10 < bridge_> <heinrich5991> >>> closeness = lambda x: 0.64 ** (np.sum(np.abs(x - np.median(x))) / len(x))
15:10 < bridge_> <heinrich5991> >>> closeness([2,2,2,2,3])
15:10 < bridge_> <heinrich5991> 0.9146101038546527
15:10 < bridge_> <heinrich5991> >>> closeness([2,2,2,2,8])
15:10 < bridge_> <heinrich5991> 0.5853504664669777
15:10 < bridge_> <heinrich5991> >>> closeness([1,2])
15:10 < bridge_> <heinrich5991> 0.8
15:10 < bridge_> <heinrich5991> >>> closeness([8,9])
15:10 < bridge_> <heinrich5991> 0.8
15:10 < bridge_> <heinrich5991> ```
15:10 < bridge_> <ryozuki> magic number cooked by AI
15:10 < bridge_> <ryozuki> jkjk
15:10 < bridge_> <fokkonaut> 0.64 magic
15:10 < bridge_> <fokkonaut> ? xd
15:10 < bridge_> <heinrich5991> 0.64 is the square root of 0.8
15:10 < bridge_> <heinrich5991> ah no, it's the square
15:10 < bridge_> <fokkonaut> mh
15:11 < bridge_> <fokkonaut> i think its too harsh
15:11 < bridge_> <fokkonaut> closeness([2,2,2,2,8]) should probably be a little more than 60% i have the feeling
15:11 < bridge_> <fokkonaut> i dunno
15:11 < bridge_> <fokkonaut> the first (without magic numbers) looked more promising
15:11 < bridge_> <heinrich5991> it has about 60% ^^
15:11 < bridge_> <heinrich5991> the first was relative
15:11 < bridge_> <heinrich5991> it treated 8,9 different from 1,2
15:12 < bridge_> <fokkonaut> ah
15:12 < bridge_> <heinrich5991> if you want to remove the magic number, you'll have to put 0.5 where the 0.64 is
15:12 < bridge_> <heinrich5991> but this is just a scaling factor
15:12 < bridge_> <fokkonaut> what happens wth 0.5?
15:12 < bridge_> <heinrich5991> the percentages drop
15:13 < bridge_> <ryozuki> ChillerDragon: https://codeberg.org/gothub/gothub
15:13 < bridge_> <fokkonaut> hm... which approach would you personally take, including 0's as a voting option @heinrich5991
15:14 < bridge_> <fokkonaut> what is the best representation of the chosen numbers?
15:14 < bridge_> <heinrich5991> I like the latter better
15:14 < bridge_> <heinrich5991> because of this
15:14 < bridge_> <fokkonaut> ye
15:14 < bridge_> <h.kaan> anyone know how can i make a bot in ddnet? just saw a guys using chat commands to control it and stuff
15:15 < bridge_> <fokkonaut> and would you increase 0.64 even more, or do you think its perfect?
15:15 < bridge_> <Jupstar ‚ú™> :banhammer:
15:15 < ChillerDragon> @ryozuki thats cool!
15:15 < ChillerDragon> i wanted to build literally that once
15:15 < ChillerDragon> but too lazy
15:15 < bridge_> <ryozuki> u mean a chat bot
15:15 < bridge_> <ryozuki> or a client bot
15:15 < bridge_> <ryozuki> client bots are forbidden
15:15 < bridge_> <ryozuki> idk the stance on chat bots xd
15:15 < ChillerDragon> use ruby :D 
15:15 < bridge_> <ryozuki> probs the stance is: dont be annoying
15:15 < ChillerDragon> chat bots also illegal
15:15 < ChillerDragon> i got many bans for it
15:16 < bridge_> <ryozuki> nice
15:16 < bridge_> <Iza> did i hear bot client
15:16 < bridge_> <h.kaan> the guy wrote !bot say blabla etc
15:16 < ChillerDragon> yes
15:16 < ChillerDragon> i can send you ruby code 
15:16 < bridge_> <h.kaan> !bot leave leaves for example
15:16 < bridge_> <YADDB> Command not found!
15:16 < bridge_> <ryozuki> xd
15:16 < bridge_> <h.kaan> joins like a player
15:16 < ChillerDragon> https://github.com/ChillerDragon/teeworlds_network/tree/9230f32c6a9dbbe3bd0bfc17f89fd38a34016b48#sample
15:17 < bridge_> <heinrich5991> that's purely up to you. use one that feels right with the percentages
15:17 < ChillerDragon> or js
15:17 < bridge_> <heinrich5991> I don't know what percentages you have in mind
15:17 < ChillerDragon> https://gitlab.com/swarfey/teeworlds-client/-/blob/888716d52bcfa43c5acec235dd3e6773e6d393e2/docs/examples/chat_bot.js
15:17 < bridge_> <ryozuki> ```
15:17 < bridge_> <ryozuki> # I JUST REALIZED I ALREADY USED .scan(/../)
15:17 < bridge_> <ryozuki> # TO GET .groups_of(2)
15:17 < bridge_> <ryozuki> # AND DUUUUH .scan() IS BASICALLY ALREADY
15:17 < bridge_> <ryozuki> # .groups_of()
15:17 < bridge_> <ryozuki> # TODO: get rid of it?!
15:17 < bridge_> <ryozuki> # update: no
15:17 < bridge_> <ryozuki> # .scan(/../) works on strings and groups_of works on arrays
15:17 < bridge_> <ryozuki> # so it has its purpose
15:17 < bridge_> <ryozuki> ```
15:17 < bridge_> <ryozuki> nice comments chiller
15:17 < bridge_> <h.kaan> js better thank you
15:17 < ChillerDragon> ohno xd
15:17 < bridge_> <fokkonaut> i dont wanna fake my own study, so i'd go with what is mathematically the best representation
15:17 < bridge_> <Voxel> what r we talking about
15:17 < bridge_> <ryozuki> just publish ur math in the study
15:18 < bridge_> <heinrich5991> this is underdefined, there is no faking. there's no mathematically "correct" interpretation of closeness
15:18 < bridge_> <heinrich5991> wait
15:18 < bridge_> <heinrich5991> is this something serious? ^^
15:18 < bridge_> <fokkonaut> no, its not
15:18 < bridge_> <heinrich5991> or just some visual representation somewhere
15:18 < bridge_> <fokkonaut> yes
15:18 < bridge_> <heinrich5991> then just pick numbers that suit what you feel is best
15:18 < bridge_> <fokkonaut> xDDD
15:18 < bridge_> <heinrich5991> that's what I'd do
15:18 < bridge_> <fokkonaut> alright
15:19 < bridge_> <fokkonaut> now i just need to get this code into avascript
15:19 < bridge_> <fokkonaut> now i just need to get this code into javascript
15:19 < bridge_> <fokkonaut> ```var closeness;
15:19 < bridge_> <fokkonaut> 
15:19 < bridge_> <fokkonaut> closeness = x => {
15:19 < bridge_> <fokkonaut>   return Math.pow(0.64, np.sum(np.abs(x - np.median(x))) / x.length);
15:19 < bridge_> <fokkonaut> };```
15:19 < bridge_> <fokkonaut> ez
15:19 < bridge_> <fokkonaut> i hope
15:19 < bridge_> <heinrich5991> sum is the sum of the array
15:20 < bridge_> <heinrich5991> abs takes the absolute value of each value in the array
15:20 < bridge_> <fokkonaut> i hope (converter_)
15:20 < bridge_> <heinrich5991> median takes the (len(array)/2)-th element of the sorted array
15:20 < bridge_> <ryozuki> ```js
15:20 < bridge_> <ryozuki> const sum = [1, 2, 3].reduce((partialSum, a) => partialSum + a, 0);
15:20 < bridge_> <ryozuki> console.log(sum); // 6
15:20 < bridge_> <ryozuki> ```
15:21 < bridge_> <fokkonaut> thanks heinrich, i might get back to you on monday when everything explodes around me trying to make this work
15:24 < bridge_> <heinrich5991> you're welcome üôÇ
15:27 < bridge_> <Jupstar ‚ú™> louis was ahead of his time xd
15:27 < bridge_> <Jupstar ‚ú™> https://discord.com/channels/252358080522747904/293493549758939136/822891602451628073
15:37 < bridge_> <h.kaan> i did it thank you. is this illegal?
15:46 < ChillerDragon> automated chat bots might get you banned on some servers yes
15:47 < ChillerDragon> but its one of the lesser enforced ones
15:47 < ChillerDragon> jopsti wat msg did you reference?
15:48 < bridge_> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1147166015277506650/image.png
15:48 < ChillerDragon> ty
15:48 < ChillerDragon> xd
16:05 < bridge_> <ryozuki> @robyt3
16:05 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1147170409452679188/image.png
16:05 < bridge_> <ryozuki> what format did u use?
16:05 < bridge_> <ryozuki> oh
16:05 < bridge_> <robyt3> Try reloading the page, sometimes it also does that for me
16:05 < bridge_> <ryozuki> reloading fixed it
16:05 < bridge_> <ryozuki> xd
16:06 < bridge_> <robyt3> I just use Handbrake for encoding
16:06 < bridge_> <ryozuki> that pixelated style gives off retro game vibes
16:06 < bridge_> <robyt3> (which calls ffmpeg I assume)
16:06 < bridge_> <ryozuki> yr
16:06 < bridge_> <ryozuki> ye
16:07 < bridge_> <robyt3> It looks smooth if you use FSAA, but I assume nobody uses it because it can cause delay
16:08 < bridge_> <ryozuki> @heinrich5991 i see crates.io fails sometimes in CI, are the deps not cached? what about vendoring for CI
16:08 < bridge_> <ryozuki> [ 33%] Built target rust-bridge-shared
16:08 < bridge_> <ryozuki> warning: spurious network error (2 tries remaining): [28] Timeout was reached (Operation too slow. Less than 10 bytes/sec transferred the last 30 seconds)
16:08 < bridge_> <ryozuki> warning: spurious network error (1 tries remaining): [28] Timeout was reached (Operation too slow. Less than 10 bytes/sec transferred the last 30 seconds)
16:08 < bridge_> <ryozuki> error: failed to get `syn` as a dependency of package `cxxbridge-macro v1.0.71`
16:08 < bridge_> <ryozuki> https://github.com/rust-lang/cargo/issues/6513
16:09 < bridge_> <Jupstar ‚ú™> firefox issues xd
16:09 < bridge_> <heinrich5991> link?
16:09 < bridge_> <ryozuki> https://github.com/ddnet/ddnet/actions/runs/6042446365/job/16397568468?pr=7119
16:10 < bridge_> <robyt3> > ... Restoring cache ...
16:10 < bridge_> <robyt3> > No cache found.
16:10 < bridge_> <ryozuki> xd
16:10 < bridge_> <heinrich5991> that seems to be the problem ^^
16:11 < bridge_> <heinrich5991> probably needs to cachee the build folder instead
16:11 < bridge_> <ryozuki> Caused by:
16:11 < bridge_> <ryozuki>   failed to query replaced source registry `crates-io`
16:11 < bridge_> <ryozuki> ohh
16:11 < bridge_> <ryozuki> the cache actually replaced the source registry?
16:11 < bridge_> <ryozuki> or idk
16:11 < bridge_> <ryozuki> weird wording
16:11 < bridge_> <heinrich5991> probably not
16:15 < bridge_> <heinrich5991> maybe github replaced it with their own mirror(?)
16:16 < bridge_> <heinrich5991> doesn't even suport viewing issues AFAICT
16:17 < bridge_> <ryozuki> rly?
16:18 < bridge_> <heinrich5991> I think they do that for ubuntu packages
16:18 < bridge_> <heinrich5991> no, it doesn't replace it for crates.io
16:19 < bridge_> <heinrich5991> hmm hmm
16:19 < bridge_> <heinrich5991> maybe the cache isn't available for pull requests?
16:20 < bridge_> <heinrich5991> no, other jobs have a cache
16:28 < bridge_> <ryozuki> @jupeyy_keks or @heinrich5991 do u have a link to the factorio blog where they did a rendering optimization
16:28 < bridge_> <ryozuki> i cant recall which
16:29 < bridge_> <heinrich5991> https://factorio.com/blog/post/fff-333 ?
16:30 < bridge_> <ryozuki> ye
16:37 < bridge_> <Jupstar ‚ú™> implement for ddnet
16:37 < bridge_> <Jupstar ‚ú™> so i can say. see i told ya
16:39 < bridge_> <Jupstar ‚ú™> omg future humans will have 500 TB VRAM and simply render the whole map into memory
16:39 < bridge_> <Jupstar ‚ú™> 
16:39 < bridge_> <Jupstar ‚ú™> these luckers
16:43 < ChillerDragon> or future humans cant game anymore at all due to some world crisis
16:44 < bridge_> <Jupstar ‚ú™> that's not the future but present
16:52 < bridge_> <heinrich5991> I think @patiga implemented it for his renderer and it wasn't beneficial
16:53 < bridge_> <patiga> yea for me it didn't work out, didn't test long though
17:11 < bridge_> <ryozuki> maybe ddnet maps arent big/complex enough
17:11 < bridge_> <ryozuki> also this opt is more for integrated gpus
17:24 < bridge_> <Jupstar ‚ú™> we'll never know
17:26 < bridge_> <Jupstar ‚ú™> would be interesting to run the whatever they had before this renderer and this renderer on rtx 4090 xdd
18:05 < bridge_> <Anime.pdf> chillerdragon: are you still using 'wired'?
18:06 < bridge_> <Anime.pdf> chillerdragon: are you still using 'wire'?
18:44 < bridge_> <chillerdragon> Yes
18:48 < bridge_> <hamidreza6> Does DDNet Client support 128 player scoreboard?
18:50 < bridge_> <ryozuki> https://stackdiary.com/x-can-now-use-posts-for-ai-training-as-per-terms-of-service/
18:51 < bridge_> <Voxel> i cant wait for everyone to start posting literally just random letters so the ai model gets confused as fuck
18:51 < bridge_> <Voxel> also bro "x/twitter"
18:52 < bridge_> <Voxel> objectively worse than calling it just "x" but oh well
18:52 < bridge_> <ryozuki> its seo
18:52 < bridge_> <heinrich5991> the social network formerly known as twitter
18:53 < bridge_> <heinrich5991> https://groups.google.com/a/mozilla.org/g/dev-platform/c/uv7PNrHUagA
18:53 < bridge_> <heinrich5991> mozilla plans to enable ech, sounds very cool üôÇ
18:53 < bridge_> <ryozuki> Summary:
18:53 < bridge_> <ryozuki> ECH enhances the privacy of TLS connections made by the browser by encrypting the initial packet sent at the start of the TLS connection which contains sensitive information. ECH requires server-side support in order to be effective. If ECH support is not available, then a GREASE extension containing random data is added to the TLS Client Hello which is ignored by the server.
18:53 < bridge_> <heinrich5991> it encrypts the remaining cleartext bits of the tls handshake in a way that is hopefully not blockable by china
18:53 < bridge_> <heinrich5991> or other middleware vendors
18:54 < bridge_> <ryozuki> epic
18:55 < bridge_> <Voxel> did chatgpt write this
18:55 < bridge_> <ryozuki> no
18:55 < bridge_> <Voxel> oh wait its IN  the email
18:55 < bridge_> <Voxel> ok
18:55 < bridge_> <Voxel> i thought you summarized it or smth
18:55 < bridge_> <Voxel> i thought you had gpt summarized it or smth
18:55 < bridge_> <ryozuki> not gonna lie i only used chatgpt 1 day
18:57 < bridge_> <heinrich5991> I tried using it a couple of times
18:57 < bridge_> <heinrich5991> I know someone who really likes to use copilot for programming üôÇ
18:58 < bridge_> <teero777> gpt3 mostly gives sht when asking complex things
18:58 < bridge_> <heinrich5991> can you give an example?
18:59 < bridge_> <teero777> ask it if it can make a function that takes in an integer and returns a string with the trinary representation of that integer
18:59 < bridge_> <heinrich5991> that's not an actual question I had so far, I like real-life examples better
18:59 < bridge_> <heinrich5991> or was this something you needed to do?
18:59 < bridge_> <teero777> yea
19:00 < bridge_> <heinrich5991> ah
19:00 < bridge_> <teero777> bruteforcing some things for a game. but it was only for visuals so it wasnt much of an issue. did it later myself anyways
19:02 < bridge_> <teero777> or ask it to optimize a piece of code using SIMD instructions or smth.
19:02 < bridge_> <teero777> or try finding possible spots for memory corruption in your code.
19:02 < bridge_> <heinrich5991> I got
19:02 < bridge_> <heinrich5991> ```py
19:02 < bridge_> <heinrich5991> def int_to_ternary(n):
19:02 < bridge_> <heinrich5991>     if n == 0:
19:02 < bridge_> <heinrich5991>         return '0'
19:02 < bridge_> <heinrich5991> 
19:02 < bridge_> <heinrich5991>     ternary = ''
19:02 < bridge_> <heinrich5991>     while n > 0:
19:02 < bridge_> <heinrich5991>         remainder = n % 3
19:02 < bridge_> <heinrich5991>         ternary = str(remainder) + ternary
19:02 < bridge_> <heinrich5991>         n = n // 3
19:03 < bridge_> <heinrich5991> 
19:03 < bridge_> <heinrich5991>     return ternary
19:03 < bridge_> <heinrich5991> 
19:03 < bridge_> <heinrich5991> # Example usage:
19:03 < bridge_> <heinrich5991> number = 42
19:03 < bridge_> <heinrich5991> ternary_representation = int_to_ternary(number)
19:03 < bridge_> <heinrich5991> print(f'Ternary representation of {number} is: {ternary_representation}')
19:03 < bridge_> <heinrich5991> ```
19:03 < bridge_> <teero777> looks like it works for python
19:03 < bridge_> <heinrich5991> looks good to me
19:03 < bridge_> <teero777> tried in c++  and it gave me multiple wrong answers
19:03 < bridge_> <heinrich5991> what language did you want to have?
19:03 < bridge_> <heinrich5991> ah
19:03 < bridge_> <ryozuki> python is like pseudocode nayway
19:04 < bridge_> <ryozuki> how often u find simd optimization opportunities?
19:04 < bridge_> <heinrich5991> ```c++
19:04 < bridge_> <heinrich5991> #include <iostream>
19:04 < bridge_> <heinrich5991> #include <string>
19:04 < bridge_> <heinrich5991> 
19:04 < bridge_> <heinrich5991> std::string toTernary(int n) {
19:04 < bridge_> <heinrich5991>     if (n == 0) {
19:04 < bridge_> <heinrich5991>         return "0";
19:04 < bridge_> <heinrich5991>     }
19:04 < bridge_> <heinrich5991> 
19:04 < bridge_> <heinrich5991>     std::string result = "";
19:04 < bridge_> <heinrich5991>     while (n != 0) {
19:04 < bridge_> <heinrich5991>         int remainder = n % 3;
19:04 < bridge_> <heinrich5991>         result = std::to_string(remainder) + result;
19:04 < bridge_> <heinrich5991>         n /= 3;
19:04 < bridge_> <heinrich5991>     }
19:04 < bridge_> <heinrich5991> 
19:04 < bridge_> <heinrich5991>     return result;
19:04 < bridge_> <heinrich5991> }
19:04 < bridge_> <heinrich5991> 
19:04 < bridge_> <heinrich5991> int main() {
19:04 < bridge_> <heinrich5991>     int number;
19:04 < bridge_> <heinrich5991>     std::cout << "Enter an integer: ";
19:05 < bridge_> <heinrich5991>     std::cin >> number;
19:05 < bridge_> <heinrich5991> 
19:05 < bridge_> <heinrich5991>     std::string ternaryRepresentation = toTernary(number);
19:05 < bridge_> <heinrich5991>     std::cout << "Ternary representation: " << ternaryRepresentation << std::endl;
19:05 < bridge_> <heinrich5991> 
19:05 < bridge_> <heinrich5991>     return 0;
19:05 < bridge_> <heinrich5991> }
19:05 < bridge_> <heinrich5991> ```
19:05 < bridge_> <heinrich5991> looks good to me as well
19:05 < bridge_> <teero777> i dont really use it that often thats why i asked gpt
19:05 < bridge_> <ryozuki> well its not something u can "ask"
19:05 < bridge_> <ryozuki> cuz u need to recognize a pattern in ur code
19:05 < bridge_> <heinrich5991> my question was "Make a C++ function that takes an integer and returns a string with the ternary representation of that integer." btw
19:05 < bridge_> <ryozuki> to know if it may be good
19:05 < bridge_> <ryozuki> i think
19:07 < bridge_> <heinrich5991> both functions fail for negative integers, that's annoying
19:16 < bridge_> <teero777> thats what gpt is good for right?
19:17 < bridge_> <ryozuki> idk
19:18 < bridge_> <ryozuki> u need to give all code maybe xd
19:19 < bridge_> <teero777> yea if i give it 500 lines of code it just says what i could do and with the next prompt somehow it thinks that the code was in python and wanted to implement a space shuttle on windows
19:19 < bridge_> <teero777> yea if i give it 500 lines of code it just says what i could do to find the issue and with the next prompt somehow it thinks that the code was in python and wanted to implement a space shuttle on windows
19:26 < bridge_> <Voxel> if we let ai make a ddnet update how dogwater would it be
19:26 < bridge_> <teero777> https://tenor.com/view/resume-shred-gif-13992096
19:26 < bridge_> <cyberFighter> - added zoom to the ingame browser
19:27 < bridge_> <teero777> - added microwave
19:28 < bridge_> <teero777> i once asked gpt about kog. it said it knows kog and it means King of Gold and you have to kill other tees and collect gold
19:28 < bridge_> <teero777> brilliant gamemode
19:36 < bridge_> <teero777> ```#include <iostream>
19:36 < bridge_> <teero777> #include <memory>
19:36 < bridge_> <teero777> #include <string>
19:36 < bridge_> <teero777> 
19:36 < bridge_> <teero777> struct {
19:36 < bridge_> <teero777>     unsigned char e, o, f;
19:36 < bridge_> <teero777>     char llp[8], lla[16], llq[32];
19:36 < bridge_> <teero777> } typedef AR;
19:36 < bridge_> <teero777> 
19:36 < bridge_> <teero777> class UI {
19:36 < bridge_> <teero777>     std::string m_ModuleName;
19:36 < bridge_> <teero777>     std::shared_ptr<AR> m_spAR[4];
19:36 < bridge_> <teero777>     float gravity;
19:36 < bridge_> <teero777> 
19:36 < bridge_> <teero777>    public:
19:36 < bridge_> <teero777>     AR* getAR(int index) { return m_spAR[index].get(); }
19:36 < bridge_> <teero777> };
19:36 < bridge_> <teero777> 
19:36 < bridge_> <teero777> int main() {
19:36 < bridge_> <teero777>     UI* pUI = new UI();
19:36 < bridge_> <teero777>     for (int i = 0; i < 4; ++i) {
19:36 < bridge_> <teero777>         AR* pAR = pUI->getAR(i);
19:36 < bridge_> <teero777>         for (int j = 0; j < sizeof(pAR->llq) / sizeof(pAR->llp[0]); ++j) {
19:36 < bridge_> <teero777>             pAR->llp[j] = 0;
19:36 < bridge_> <teero777>         }
19:36 < bridge_> <teero777>         for (int j = 0; j < sizeof(pAR->lla) / sizeof(pAR->lla[0]); ++i) {
19:36 < bridge_> <teero777>             pAR->lla[j] = -127;
19:36 < bridge_> <teero777>         }
19:36 < bridge_> <teero777>         for (int j = 0; j < sizeof(pAR->llq) / sizeof(pAR->llq[0]); ++j) {
19:36 < bridge_> <teero777>             pAR->llq[j] = 127;
19:36 < bridge_> <teero777>         }
19:36 < bridge_> <Voxel> - increased the bug count from 500 to 700
19:37 < bridge_> <teero777> if this were a bigger example then a mis-access from an array probably wouldnt even cause a segfaults but just corrupt memory and is a pain in the ass to fix
19:37 < bridge_> <teero777> if this were a bigger example then a mis-access from an array probably wouldnt even cause a segfault but just corrupt memory and is a pain in the ass to fix
19:38 < bridge_> <teero777> if this were a bigger example then a out of bound access on an array probably wouldnt even cause a segfault but just corrupt memory and is a pain in the ass to fix
19:39 < bridge_> <Jupstar ‚ú™> https://github.com/Anuken/Mindustry/issues
19:39 < bridge_> <Jupstar ‚ú™> 
19:39 < bridge_> <Jupstar ‚ú™> he's probs the most consequent person i know xDD
19:39 < bridge_> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1147224298923237456/image.png
19:39 < bridge_> <ryozuki> https://crates.io/crates/pretty_assertions_sorted
19:40 < bridge_> <heinrich5991> https://old.reddit.com/r/rust/comments/1677ar8/why_is_rust_println_slower_than_java_println/
19:40 < bridge_> <heinrich5991> annoying to read this kind of thread, people keep telling the person that they're holding it wrong
19:41 < bridge_> <heinrich5991> instead of conceding that this a problem with rust and one that will probably get fixed at some point
19:41 < bridge_> <Jupstar ‚ú™> yeah indeed very sad
19:42 < bridge_> <ryozuki> hm
19:42 < bridge_> <ryozuki> the problem is that usually the guys making this posts just want to say "ha, rust wasnt fast after all"
19:42 < bridge_> <heinrich5991> well, it isn't in this case
19:42 < bridge_> <heinrich5991> which is a problem, and should be fixed
19:43 < bridge_> <ryozuki> https://doc.rust-lang.org/src/std/io/stdio.rs.html#535-540
19:43 < bridge_> <ryozuki> they seem to know about it
19:43 < bridge_> <ryozuki> u can contribute to rust
19:43 < bridge_> <heinrich5991> yes
19:43 < bridge_> <heinrich5991> I wanted to do it at some point
19:43 < bridge_> <heinrich5991> which is why the commenters that tell me that this is by design make me sad
19:43 < bridge_> <heinrich5991> "you're just incompetent at using rust"
19:43 < bridge_> <heinrich5991> no!
19:43 < bridge_> <heinrich5991> rust has a problem and it should be fixed
19:43 < bridge_> <heinrich5991> here's a workaround
19:43 < bridge_> <Voxel> based
19:44 < bridge_> <ryozuki> well internet is big and ppl say what they want
19:44 < bridge_> <heinrich5991> this is /r/rust
19:44 < bridge_> <ryozuki> and if they dont insult then yeah thats that xd
19:44 < bridge_> <heinrich5991> not "the internet"
19:44 < bridge_> <ryozuki> its literally the internet
19:44 < bridge_> <Jupstar ‚ú™> bro when it's slower than pyson, then it's serious problem
19:44 < bridge_> <ryozuki> its slower than python on debug i think
19:44 < bridge_> <heinrich5991> if you say this, then this will become a non-statement
19:45 < bridge_> <heinrich5991> because everything is the internet
19:45 < bridge_> <heinrich5991> yet not everything on the internet is this kind of stuff
19:45 < bridge_> <heinrich5991> there are better communities than this
19:45 < bridge_> <ryozuki> well reddit is very close to the internet
19:45 < bridge_> <ryozuki> if u said its rust zulip
19:45 < bridge_> <ryozuki> i would understand
19:45 < bridge_> <heinrich5991> it's being moderated by people close to the rust project
19:45 < bridge_> <heinrich5991> I think it's sad to see this in any rust community space
19:45 < bridge_> <heinrich5991> this is one of rust's community spaces
19:46 < bridge_> <ryozuki> well the top comment has a comment on it by someone saying what u say
19:46 < bridge_> <heinrich5991> > It aint that difficult. There is something called buffering, that Rust‚Äôs println! macro doesn‚Äôt do by default. Mostly because it would be a problem on its own. But Python, JS, etc do it by default.
19:46 < bridge_> <heinrich5991> no
19:46 < bridge_> <heinrich5991> it says that rust buffering would be a problem
19:46 < bridge_> <ryozuki> i dont mean this one
19:46 < bridge_> <ryozuki> the comment to this one
19:47 < bridge_> <heinrich5991> I see
19:47 < bridge_> <heinrich5991> not the top comment, obviously, and still, it's not that there's a good comment
19:47 < bridge_> <heinrich5991> it's that there are 20 bad ones
19:47 < bridge_> <ryozuki> also reading more i think its because its complex cuz race conditions and rly OS dependant stuff
19:47 < bridge_> <heinrich5991> yes, that's what the comments say
19:47 < bridge_> <heinrich5991> but that's not why it is the way it is
19:47 < bridge_> <heinrich5991> it's just handwaving the problem that rust has
19:47 < bridge_> <heinrich5991> trying to find a good reason for it
19:47 < bridge_> <ryozuki> @heinrich5991 tbh i would assume good faith here on the others, they simply think thats the way and havent rly thought further
19:48 < bridge_> <heinrich5991> yes. if you haven't done that, you shouldn't be like "you're holding it wrong, rust is right"
19:48 < bridge_> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1147226469714645144/image.png
19:48 < bridge_> <heinrich5991> that's evangelism and reflects badly on you
19:48 < bridge_> <Jupstar ‚ú™> i blame global variables
19:48 < bridge_> <heinrich5991> I don't think they're actinig in bad faith
19:48 < bridge_> <heinrich5991> I still think the behaviour is bad
19:49 < bridge_> <teero777> so its the basically the difference between `std::cout << "hello" << std::endl;` and `std::cout << "hello\n";`?
19:49 < bridge_> <Jupstar ‚ú™> AH, i knew u'd secretly search for rust projects
19:49 < bridge_> <Jupstar ‚ú™> on your linux pc
19:49 < bridge_> <heinrich5991> yes, roughly
19:49 < bridge_> <Voxel> jupstar i am going to dribble you like a basketball
19:49 < bridge_> <Jupstar ‚ú™> well sounds like some action
19:51 < bridge_> <teero777> rust has found its way into my for you page too
19:51 < bridge_> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1147227287993978991/image.png
19:54 < bridge_> <Voxel> soon it will be ddnet
19:55 < bridge_> <teero777> one of my everyday fears
19:55 < bridge_> <Voxel> and when its ddnet i will suffer because rust is a hard language to learn for me and i bet if i ask for help everyone will go "read the manual"
19:57 < bridge_> <ryozuki> rust already is in ddnet
19:57 < bridge_> <Voxel> yeah but i mean in like
19:57 < bridge_> <Voxel> anything that doesnt take a big brain to make updates for
19:57 < bridge_> <Jupstar ‚ú™> i dont think rust is hard to learn generally speaking
19:57 < bridge_> <Jupstar ‚ú™> 
19:57 < bridge_> <Jupstar ‚ú™> it depends on what your goals are
19:57 < bridge_> <ryozuki> but yeah rust has problems it would be nice if they fix the stdout buffering
19:57 < bridge_> <ryozuki> it would also be nice if polonius got more push
19:57 < bridge_> <teero777> want to learn rust but kinda dont want to bcs i have no reason
19:58 < bridge_> <ryozuki> and strict provenance
19:58 < bridge_> <Jupstar ‚ú™> i just miss the nightly features
19:58 < bridge_> <ryozuki> the reason is u will learn more than just a language
19:58 < bridge_> <Jupstar ‚ú™> collect_into
19:58 < bridge_> <ryozuki> it may teach things u thought were safe that arent
19:58 < bridge_> <Jupstar ‚ú™> get_multiple_mut
19:58 < bridge_> <ryozuki> it can make u a better c++ dev
19:58 < bridge_> <ryozuki> also the tooling is just awesome
19:58 < bridge_> <ryozuki> cmake is my pains
19:58 < bridge_> <Jupstar ‚ú™> üò≠
19:58 < bridge_> <ryozuki> üò≠
19:58 < bridge_> <ryozuki> look at ddnet cmake
19:58 < bridge_> <ryozuki> its gigantic
19:59 < bridge_> <Jupstar ‚ú™> static linking best xd
19:59 < bridge_> <ryozuki> üò≠
19:59 < bridge_> <ryozuki> lto thic
19:59 < bridge_> <teero777> ddnet cmake is hell xd
19:59 < bridge_> <teero777> and idk why
19:59 < bridge_> <Jupstar ‚ú™> true.. as of rn, i don't even have a build.rs
19:59 < bridge_> <Jupstar ‚ú™> so no build script at all
19:59 < bridge_> <ryozuki> TIL you can cargo clean -p <dependency>
19:59 < bridge_> <ryozuki> to only cargo clean a specific dep
20:00 < bridge_> <Voxel> i guess that makes sense
20:01 < bridge_> <teero777> hey does anyone know if nerdfonts are possible in tty?
20:01 < bridge_> <ryozuki> ofc
20:01 < bridge_> <ryozuki> i use nerdfonts
20:01 < bridge_> <ryozuki> jetbrains nerd
20:01 < bridge_> <ryozuki> my terminal is alacritty
20:01 < bridge_> <ryozuki> made in rust
20:01 < bridge_> <ryozuki> opengl accel
20:01 < bridge_> <ryozuki> i3wm
20:01 < bridge_> <ryozuki> gentoo
20:01 < bridge_> <ryozuki> i recommend u switch over fast
20:01 < bridge_> <ryozuki> leave the closed sourceness
20:02 < bridge_> <Jupstar ‚ú™> opengl
20:02 < bridge_> <Jupstar ‚ú™> that's so 1991
20:02 < bridge_> <ryozuki> yeah
20:02 < bridge_> <ryozuki> i wonder when they add vulkan
20:02 < bridge_> <ryozuki> https://github.com/alacritty/alacritty/issues/183
20:02 < bridge_> <ryozuki> > Closing because this is a non-goal. If someone ever bothers to write a Vulkan renderer feel free to send a patch, but currently we already have two different OpenGL renderers and that strikes a very good balance between GPU support and performance. Writing a Vulkan renderer would neither improve performance nor support much.
20:02 < bridge_> <teero777> yea i use alacritty too but i mean in your tty
20:02 < bridge_> <Jupstar ‚ú™> past human
20:02 < bridge_> <ryozuki> yeah
20:03 < bridge_> <teero777> gui is non-existent there
20:04 < bridge_> <ryozuki> ah u mean
20:04 < bridge_> <ryozuki> tty
20:04 < bridge_> <ryozuki> i see
20:04 < bridge_> <teero777> yea
20:04 < bridge_> <ryozuki> hmm
20:04 < bridge_> <teero777> nvm it doesnt work:
20:04 < bridge_> <teero777> https://unix.stackexchange.com/questions/735514/how-to-enable-true-color-support-and-nerd-fonts-in-arch-linux-console
20:04 < bridge_> <ryozuki> yeah
20:05 < bridge_> <ryozuki> https://packages.gentoo.org/packages/media-fonts/terminus-font
20:05 < bridge_> <ryozuki> use this
20:05 < bridge_> <ryozuki> https://wiki.gentoo.org/wiki/Fonts
20:05 < bridge_> <ryozuki> wait idk if these docs are for tty even
20:06 < bridge_> <ryozuki> or is it
20:06 < bridge_> <teero777> yea the terminus fonts are preinstalled i think.
20:06 < bridge_> <teero777> sadly no special cool icons for nvim in tty ig.
20:06 < bridge_> <ryozuki> well tty is pretty limited
20:06 < bridge_> <ryozuki> i suggest a tiling wm
20:06 < bridge_> <ryozuki> its rly rly lightweight
20:06 < bridge_> <teero777> i use bspwm
20:06 < bridge_> <ryozuki> nice
20:07 < bridge_> <ryozuki> do u use pulseaudio or pipewire
20:07 < bridge_> <teero777> pulse
20:07 < bridge_> <ryozuki> what distro
20:07 < bridge_> <teero777> arch
20:07 < bridge_> <teero777> BTW
20:07 < bridge_> <ryozuki> smh
20:07 < bridge_> <ryozuki> i use gentoo btw
20:07 < bridge_> <ryozuki> :BASEDHALT:
20:07 < bridge_> <teero777> i have no cpu cycles to spare. no thank you
20:07 < bridge_> <ryozuki> (one of the reasons i switched from arch to gentoo was for this precious moments)
20:08 < bridge_> <ryozuki> (where i met another arch user)
20:08 < bridge_> <ryozuki> :BASEDDEPT:
20:08 < bridge_> <teero777> the giga flex i see
20:08 < bridge_> <ryozuki> also its fun
20:08 < bridge_> <ryozuki> openrc is fun too
20:08 < bridge_> <ryozuki> when u compile u can think about ur life
20:08 < bridge_> <teero777> yea gentoo is good for reallife interactions
20:09 < bridge_> <ryozuki> ye
20:09 < bridge_> <ryozuki> i only rly have  to wait when compiling llvm, nodejs or firefox tho
20:09 < bridge_> <teero777> since you only go to your pc for using your package manager and hitting enter xdd
20:09 < bridge_> <ryozuki> kek
20:09 < bridge_> <ryozuki> i saw it
20:10 < bridge_> <milkeeycat> i tried to install firefox on wm once
20:10 < bridge_> <milkeeycat> and it didnt compile nodejs in 3 hours :feelsbadman:
20:11 < bridge_> <milkeeycat> and then i realized i dont need browser
20:11 < bridge_> <learath2> skill issue
20:21 < bridge_> <heinrich5991> you can use `extend` instead
20:22 < bridge_> <Jupstar ‚ú™> .extend(...map(||{}) ?
20:22 < bridge_> <heinrich5991> yes
20:22 < bridge_> <Jupstar ‚ú™> and that does not create any heap alloc?
20:22 < bridge_> <heinrich5991> not more than `collect_into`
20:22 < bridge_> <Jupstar ‚ú™> ok
20:22 < bridge_> <Jupstar ‚ú™> thx
20:23 < bridge_> <heinrich5991> in fact, that's its implementation: https://github.com/rust-lang/rust/blob/361f8ba847af0288b1beb3b84f6b7b4d3850bb43/library/core/src/iter/traits/iterator.rs#L2206
20:24 < bridge_> <Jupstar ‚ú™> i c
20:24 < bridge_> <Jupstar ‚ú™> guess this wasn't intuitive for me üòÑ
20:27 < bridge_> <Jupstar ‚ú™> oh yeah it takes an iterator, well that makes stuff easier^^
20:32 < bridge_> <heinrich5991> can you elaborate where you need this?
20:33 < bridge_> <Jupstar ‚ú™> can't remember, but i simply used multiple split_mut then
20:33 < bridge_> <heinrich5991> ah yea, that works but is annoying
21:39 < bridge_> <hamidreza6> ?
21:39 < bridge_> <heinrich5991> I don't know
21:39 < bridge_> <heinrich5991> in the serverbrowser, yes, I think
21:40 < bridge_> <hamidreza6> In-game
21:47 < bridge_> <hamidreza6> I mean being able to see all players in the scoreboard
21:58 < bridge_> <Jupstar ‚ú™> no it's not possible
21:58 < bridge_> <Jupstar ‚ú™> it's also not easy to do in a clean way
22:07 < bridge_> <Ewan> I am pretty sure F-Client does it actually
22:17 < bridge_> <hamidreza6> Really? I remember using that client but I didnt notice that. Maybe it didnt exist at that time
22:27 < bridge_> <Jupstar ‚ú™> can u screenshot? i wonder how it looks, to me 64 is already flood of text xd
22:27 < bridge_> <Jupstar ‚ú™> 
22:27 < bridge_> <Jupstar ‚ú™> maybe on 16:9 with 2 more panels
22:38 < bridge_> <teero777> just add a slider ig?
22:38 < bridge_> <teero777> so you press your scoreboard key and scroll?
22:40 < bridge_> <Jupstar ‚ú™> and that's a clean solution?
22:41 < bridge_> <Jupstar ‚ú™> i find it rather annoying to have to do extra stuff to find ppl in scoreboard xd
22:41 < bridge_> <Jupstar ‚ú™> i dunno what a good solution could look like
22:53 < bridge_> <hamidreza6> Just make a button and make it two pages
22:54 < bridge_> <hamidreza6> Ig this is the easiest solution (if possible)
23:02 < bridge_> <Jupstar ‚ú™> that would also imply adding mouse support for scoreboard
23:02 < bridge_> <Jupstar ‚ú™> not impossible, but also not trivial
23:03 < bridge_> <Jupstar ‚ú™> if someone wants to code it with a chance it not being merged, it could help to see if the feature is useful enough
