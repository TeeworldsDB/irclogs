01:13 <+bridge> <kio> make a post request with params from http library
01:14 <+bridge> <kio> and save the response like this
01:14 <+bridge> <kio> m_pDDNetInfoTask = HttpGetFile(aUrl, Storage(), m_aDDNetInfoTmp, IStorage::TYPE_SAVE);
01:14 <+bridge> <kio>     m_pDDNetInfoTask->Timeout(CTimeout{10000, 0, 500, 10});
01:14 <+bridge> <kio>     m_pDDNetInfoTask->IpResolve(IPRESOLVE::V4);
01:14 <+bridge> <kio>     Engine()->AddJob(m_pDDNetInfoTask);
01:16 <+bridge> <Learath2> Looks about right to me, what's wrong?
01:38 <+bridge> <heinrich5991> tell me what you want to do and I might be able to give you some example code
07:04 <+bridge> <kio> Mi must do a POST request on a link and save the returned json
07:13 <+bridge> <kio> I must do a POST request on a link and save the returned json
07:13 <+bridge> <Voxel> What's this used for?
07:13 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106449002855149678/image.png
07:17 <+bridge> <kio> Use POST and pass Json param s
07:17 <+bridge> <kio> Use POST and pass Json params
07:23 <+bridge> <Voxel> anyways: this is the hypothetical i was talking about:
07:23 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106451507748028446/image.png
07:28 <+bridge> <Jupstar ✪> Would be cleaner yeah
07:28 <+bridge> <Jupstar ✪> Just look in the source. I doubt it's used in-game
07:28 <+bridge> <Jupstar ✪> Maybe in 07
07:29 <+bridge> <Voxel> Yeah it's unused. 
07:29 <+bridge> <Voxel> And omg the png would look so much cleaner without it,
07:29 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106453038291492894/image.png
07:30 <+bridge> <Voxel> wait whats that blue bar for
07:30 <+bridge> <Voxel> was it for the old ninja timer?
07:30 <+bridge> <Jupstar ✪> Yes
07:30 <+bridge> <Jupstar ✪> But not old
07:30 <+bridge> <Jupstar ✪> 07
07:30 <+bridge> <Voxel> okay wait, let me sort everything out really quickly. some of these are UI elements, not map items
07:40 <+bridge> <Voxel> Updated:
07:40 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106455717969399828/image.png
07:43 <+bridge> <Voxel> Take 2 on HUD: much more optimized, less blank space
07:43 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106456556846972988/image.png
07:43 <+bridge> <fokkonaut> You should leave empty space
07:43 <+bridge> <Ryozuki> actually this may be doable, if we make a script to convert old type pngs to the new lauout
07:43 <+bridge> <Ryozuki> layout
07:44 <+bridge> <Voxel> ok fine old one is used then
07:44 <+bridge> <fokkonaut> Probably even mkre
07:44 <+bridge> <fokkonaut> because
07:45 <+bridge> <fokkonaut> if new icons are added, it would fuck up old pngs and it would also require the client to be modified to support the larger image
07:45 <+bridge> <Ryozuki> expanding the image down or right and supporting it is not hard
07:45 <+bridge> <fokkonaut> Thats true
07:45 <+bridge> <fokkonaut> But backward compatibility
07:46 <+bridge> <Voxel> is this better?
07:46 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106457372597170216/image.png
07:46 <+bridge> <fokkonaut> (@backwardserich5991)
07:46 <+bridge> <Ryozuki> @Voxel make the same pngs but with the grid info
07:47 <+bridge> <Ryozuki> and i make a rust script
07:47 <+bridge> <Ryozuki> :gigachad:
07:47 <+bridge> <Voxel> works for me
07:47 <+bridge> <fokkonaut> @Ryozuki rust fast?
07:47 <+bridge> <Ryozuki> ye
07:47 <+bridge> <Ryozuki> fastest
07:47 <+bridge> <fokkonaut> woaw
07:47 <+bridge> <Voxel> i want to make sure everything is finalized before i make coords
07:47 <+bridge> <Ryozuki> 500gb/s
07:49 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106458222631583764/image.png
07:51 <+bridge> <Voxel> wait are all the ninja dash streaks the same side in code? (checking right now)
07:53 <+bridge> <Voxel> yeah they are
07:55 <+bridge> <Voxel> idk what happened but when i split the image theres this weird ending trail thats cut off in one of the ninja muzzles
07:55 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106459597276975124/image.png
07:59 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106460569038491728/image.png
07:59 <+bridge> <Voxel> this is walward
07:59 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106460582216998972/image.png
07:59 <+bridge> <Voxel> this is awkward
07:59 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106460582216998972/image.png
08:00 <+bridge> <Ryozuki> bug
08:00 <+bridge> <Voxel> same case goes for another one, which also has a cut off piece
08:01 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106460998912708759/image.png
08:01 <+bridge> <Ryozuki> trigger warning
08:02 <+bridge> <Voxel> its ok, we can fix it when the svg gets accepted into the  database ^^
08:10 <+bridge> <Voxel> Should I wait until we get more opinions before I make coords?
08:10 <+bridge> <Voxel> And would the coords have to be formatted like in content.py?
08:10 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106463277820682240/image.png
08:12 <+bridge> <Ewan> you can’t fix it without changing the code. it looks for that resource in that place, the coordinates have to be in the same relative position
08:13 <+bridge> <Ewan> all the svg scripts do is export at a larger size
08:20 <+bridge> <Voxel> extras, game, hud, particles, strong_weak > hud, map_items, particles, weapons
08:26 <+bridge> <Voxel> ok im starting to see what you mean
08:27 <+bridge> <Voxel> theres a ton of empty space in the original images
08:32 <+bridge> <Jupstar ✪> What resolution do they have btw
08:33 <+bridge> <Ryozuki> lets make it 4k
08:33 <+bridge> <Ryozuki> who needs to support potatoes
08:35 <+bridge> <Jupstar ✪> It's even worse, I'm asking BCS i want to know if they are power of two textures
08:35 <+bridge> <Jupstar ✪> So actual potatoes xdd
08:36 <+bridge> <Jupstar ✪> 1995 gang xddd
08:41 <+bridge> <Ryozuki> oh tru
08:41 <+bridge> <Ryozuki> @Voxel tex needs to be 2**x
08:42 <+bridge> <Ryozuki> size
08:42 <+bridge> <Ryozuki> 128,256,512,1024
08:43 <+bridge> <Voxel> yeah yea
08:43 <+bridge> <Voxel> everything is on a 32x32 grid
08:44 <+bridge> <Ryozuki> the total image size i mean
08:44 <+bridge> <Souly> are you trying to trace vanilla gameskin?
08:45 <+bridge> <Voxel> one second
08:45 <+bridge> <Voxel> rearranging
08:46 <+bridge> <Jupstar ✪> Power of two, not multiply of two
08:46 <+bridge> <Souly> @Voxel what for lmao
08:46 <+bridge> <Jupstar ✪> 2^x
08:48 <+bridge> <Voxel> one seconnndd im getting the image sizes for everything
08:49 <+bridge> <Ryozuki> 2**5
08:55 <+bridge> <Voxel> weapons.png : 704 x 448
08:55 <+bridge> <Voxel> particles.png : 348 x 512
08:55 <+bridge> <Voxel> map_items.png : 256 x 384
08:55 <+bridge> <Voxel> hud.png : 384 x 384
08:55 <+bridge> <Voxel> game.png kind of sucks right now
09:01 <+bridge> <Jupstar ✪> Well might not matter anyway. Forgot we split them anyway
09:01 <+bridge> <Jupstar ✪> For pixel perfection xd
10:10 <+bridge> <Souly> ye i kinda get the point
10:12 <+bridge> <Souly> what annoys me the most is the fact that you need to update the whole gameskin even if you just want to change one single thing
10:16 <+bridge> <Jupstar ✪> Yep, I'd not use an texture atlas again for most stuff
10:16 <+bridge> <Jupstar ✪> Even at the cost of sightly higher load time
10:23 <+bridge> <Cellegen | RiH> This was like that since I've made the templates for gameskin
10:24 <+bridge> <Voxel> yeah
10:25 <+bridge> <Cellegen | RiH> Once it is done (and hopefully Nexus comes back), we'll progressively accept SVGs to teeskins
10:25 <+bridge> <Souly> would be cool if we could maybe overwrite some gameskin part with additional file or something
10:26 <+bridge> <Cellegen | RiH> like making your own template?
10:26 <+bridge> <Souly> like if u have laser.png  next to game.png it would show the laser from the second file or something
10:26 <+bridge> <Cellegen | RiH> If there would be a text file which you can read the size of each weapon and paste it into the game with the appropriate size and position, it would be possible
10:27 <+bridge> <Voxel> i think this is a huge benefit for when we want to add more things
10:27 <+bridge> <Voxel> like map items or particles
10:27 <+bridge> <Voxel> it's healthily set up in a way where you can add more to the right or bottom
10:27 <+bridge> <Cellegen | RiH> oh
10:27 <+bridge> <Souly> i mean its not a big issue for me personally because i can use things like gimp
10:27 <+bridge> <Souly> but it would make it easier for sure
10:27 <+bridge> <Voxel> of course i'll add a bit of whitespace but other than that i feel like this would be a game changer
10:28 <+bridge> <Cellegen | RiH> Easier to manage storing Assets on databases too, as in we can just use an online editor API to edit SVGs (like color, size and outline) and let them implement their own
10:28 <+bridge> <Cellegen | RiH> Damn I wish I knew typescript so that I can help Nexus
10:28 <+bridge> <Cellegen | RiH> xd
10:29 <+bridge> <Cellegen | RiH> Problem would be having other client migrate to that version, but I think it's for the better
10:30 <+bridge> <Cellegen | RiH> It opens an opportunity to implement many things which would've made older / other clients broken
10:30 <+bridge> <Souly> probably would require some asset loading priority
10:30 <+bridge> <Souly> so it would support both
10:30 <+bridge> <Souly> but load the new one over the old
10:31 <+bridge> <Cellegen | RiH> It would need to recreate the old Assets from the new ones and load it into memory, so that other clients can see what Assets they use
10:31 <+bridge> <Cellegen | RiH> Other than that, It should be fine
10:33 <+bridge> <Cellegen | RiH> But this is what I'm getting at right now, because of other clients that don't depend on the newer versions of DDNet, it's made in a limited or restricted way. DDNet cannot expand as is right now
10:34 <+bridge> <Voxel> HUD is now updated so that we don't have to rearrange everything, just add more things into it
10:34 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106499580977221632/image.png
10:37 <+bridge> <Jupstar ✪> Please also nice the weapon Shields there
10:37 <+bridge> <Ewan> yes, please nice them
10:37 <+bridge> <Jupstar ✪> I still don't understand why they are in game png
10:38 <+bridge> <Robyt3> They are not HUD so why should they be in hud.png? They are part of the game like health pickups
10:39 <+bridge> <Voxel> I mean, aren't these rendered onto the map? Like the flags?
10:39 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106500824848412732/image.png
10:39 <+bridge> <Cellegen | RiH> Arent entities' hearts for floating hearts?
10:39 <+bridge> <Cellegen | RiH> same for shields?
10:39 <+bridge> <Jupstar ✪> The. Extras png
10:40 <+bridge> <Jupstar ✪> But not game png. They are entities on the map
10:40 <+bridge> <Voxel> when we make this update i highly doubt we need an extras.png
10:40 <+bridge> <Voxel> if we make this update i highly doubt we need an extras.png
10:40 <+bridge> <Voxel> i doubt this will ever see the light but extras is the most useless thing ever
10:40 <+bridge> <Voxel> i doubt this will ever see the light of day but extras is the most useless thing ever
10:41 <+bridge> <Jupstar ✪> Tbh just stop using texture atlasses all along
10:41 <+bridge> <Jupstar ✪> They make customization impossible
10:41 <+bridge> <Jupstar ✪> Tomorrow someone adds a new map item and all customized map item png get incslid
10:42 <+bridge> <Jupstar ✪> Invalid
10:42 <+bridge> <Cellegen | RiH> why not just yoink the 0.7 asset system :kek:
10:42 <+bridge> <Voxel> So what? Are you saying make each and every thing seperate?
10:42 <+bridge> <Jupstar ✪> Yes
10:42 <+bridge> <Jupstar ✪> Later in the client we do this anyway
10:42 <+bridge> <Cellegen | RiH> Yeah why not, only load things which need to be loaded
10:42 <+bridge> <Voxel> Can't argue with that
10:43 <+bridge> <Voxel> I wanted to seperate weapons into their own things anyways
10:43 <+bridge> <Voxel> So I guess this is the only logical step after that
10:44 <+bridge> <Cellegen | RiH> After what I experience in Teeworlds Data, changing one weapons and calling it a complete set, while the original is almost identical... It really makes you think that you can save a loooot of VRAM if we just separate weapons into their own category
10:44 <+bridge> <Ryozuki> cant we make the atlast at runtime, or is it worthless at that point
10:44 <+bridge> <Jupstar ✪> Then also change the structure a bit. Weapons in weapons directory. Map items in Map items etc
10:44 <+bridge> <Jupstar ✪> We currently do the opposite xd
10:44 <+bridge> <Cellegen | RiH> ye would be nice
10:45 <+bridge> <Jupstar ✪> We split them to render pixel perfect
10:45 <+bridge> <Ryozuki> @Jupeyy_Keks i mean the point is to load just 1 texture so it uses less ram, and reuse parts of it for the weapons etc right
10:45 <+bridge> <Ryozuki> oh
10:45 <+bridge> <Cellegen | RiH> ahm no
10:45 <+bridge> <Ryozuki> so u end up loading it as multiple images?
10:46 <+bridge> <Voxel> This also makes it easier to add more useless things! Like seperate explosion graphics for seperate objects!
10:46 <+bridge> <Voxel> (This is a joke)
10:46 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106502602734190592/image.png
10:46 <+bridge> <Cellegen | RiH> ye, and good thing is, most duplicate texture parts in Assets would not need to be loaded at all, saving resources
10:46 <+bridge> <Ryozuki> aka u upload 6 textures instead of 1
10:46 <+bridge> <Ryozuki> to gpu
10:47 <+bridge> <Cellegen | RiH> f.e: if you load 100 Assets which 30 has the same hook, then separating them will make you load only 1 hook and any other original asset parts will be loaded
10:48 <+bridge> <Ryozuki> why not
10:48 <+ChillerDragon> @heinrich5991 if i edit libtw2s gamenet loader.py how do i generate the json files? 
10:48 <+ChillerDragon> ./generate_all didnt do anything
10:48 <+bridge> <Voxel> because people would be nosy about it again
10:48 <+bridge> <Voxel> like it'd be a fun detail but is it *really* nessicary?
10:48 <+bridge> <Ryozuki> ignroe it
10:48 <+bridge> <Cellegen | RiH> depends on the community :justatest:
10:48 <+bridge> <Ryozuki> @Jupeyy_Keks i get a vulkang segfault on closing client
10:49 <+bridge> <Ryozuki> ```
10:49 <+bridge> <Ryozuki> [Switching to Thread 0x7fffed90e6c0 (LWP 7581)]
10:49 <+bridge> <Ryozuki> 0x00007ffff4f0fc70 in _XSend () from /usr/lib64/libX11.so.6
10:49 <+bridge> <Ryozuki> (gdb) bt
10:49 <+bridge> <Ryozuki> #0  0x00007ffff4f0fc70 in _XSend () at /usr/lib64/libX11.so.6
10:49 <+bridge> <Ryozuki> #1  0x00007ffff4f0600a in XQueryExtension () at /usr/lib64/libX11.so.6
10:49 <+bridge> <Ryozuki> #2  0x00007ffff4ef96f2 in XInitExtension () at /usr/lib64/libX11.so.6
10:49 <+bridge> <Ryozuki> #3  0x00007ffff4ec536d in XextAddDisplay () at /usr/lib64/libXext.so.6
10:49 <+bridge> <Ryozuki> #4  0x00007fffedfc9e6f in  () at /usr/lib64/libGLX_nvidia.so.0
10:49 <+bridge> <Ryozuki> #5  0x00007fffedfeb665 in  () at /usr/lib64/libGLX_nvidia.so.0
10:49 <+bridge> <Ryozuki> #6  0x00007fffded4d499 in  () at /usr/lib64/libnvidia-glcore.so.525.116.03
10:49 <+bridge> <Ryozuki> #7  0x00007fffded4b86c in  () at /usr/lib64/libnvidia-glcore.so.525.116.03
10:49 <+bridge> <Ryozuki> #8  0x00007fffded4cf9f in  () at /usr/lib64/libnvidia-glcore.so.525.116.03
10:49 <+bridge> <Ryozuki> #9  0x00007fffded3f7fc in  () at /usr/lib64/libnvidia-glcore.so.525.116.03
10:49 <+bridge> <Ryozuki> #10 0x00007fffded3fdfe in  () at /usr/lib64/libnvidia-glcore.so.525.116.03
10:49 <+bridge> <Ryozuki> #11 0x00007fffded3ffc1 in  () at /usr/lib64/libnvidia-glcore.so.525.116.03
10:49 <+bridge> <Ryozuki> #12 0x00007fffedfea7bc in  () at /usr/lib64/libGLX_nvidia.so.0
10:49 <+bridge> <Ryozuki> #13 0x00005555557490b5 in CCommandProcessorFragment_Vulkan::DestroySwapChain(bool) (ForceDestroy=true, this=0x555555c7a630) at /home/edgar/data/ddnet/src/engine/client/backend/vulkan/backend_vulkan.cpp:4224
10:49 <+bridge> <Ryozuki> #14 CCommandProcessorFragment_Vulkan::DestroySwapChain(bool) (ForceDestroy=true, this=0x555555c7a630) at /home/edgar/data/ddnet/src/engine/client/backend/vulkan/backend_vulkan.cpp:4220
10:49 <+bridge> <Ryozuki> #15 CCommandProcessorFragment_Vulkan::CleanupVulkanSwapChain(bool) (this=0x555555c7a630, ForceSwapChainDestruct=ForceSwapChainDestruct@entry=true)
10:49 <+bridge> <Ryozuki>     at /home/edgar/data/ddnet/src/engine/client/backend/vulkan/backend_vulkan.cpp:5451
10:49 <+bridge> <Ryozuki> #16 0x000055555574eb64 in CCommandProcessorFragment_Vulkan::CleanupVulkan<true>() (this=0x555555c7a630) at /home/edgar/data/ddnet/src/engine/client/backend/vulkan/backend_vulkan.cpp:5462
10:49 <+bridge> <Ryozuki> #17 0x000055555575ee90 in CCommandProcessorFragment_Vulkan::Cmd_Shutdown(CCommandProcessorFragment_GLBase::SCommand_Shutdown const*) (pCommand=0x555556850f50, this=0x555555c7a630)
10:49 <+bridge> <Ryozuki>     at /home/edgar/data/ddnet/src/engine/client/backend/vulkan/backend_vulkan.cpp:6649
10:49 <+bridge> <Ryozuki> #18 CCommandProcessorFragment_Vulkan::RunCommand(CCommandBuffer::SCommand const*) (this=0x555555c7a630, pBaseCommand=0x555556850f50)
10:49 <+bridge> <Ryozuki>     at /home/edgar/data/ddnet/src/engine/client/backend/vulkan/backend_vulkan.cpp:6529
10:49 <+bridge> <Ryozuki> #19 0x00005555557672d6 in CCommandProcessor_SDL_GL::RunBuffer(CCommandBuffer*) (this=0x555555c7c580, pBuffer=<optimized out>) at /home/edgar/data/ddnet/src/engine/client/backend_sdl.cpp:335
10:50 <+bridge> <Ryozuki> #20 0x0000555555763186 in CGraphicsBackend_Threaded::ThreadFunc(void*) (pUser=pUser@entry=0x555555ad02a0) at /home/edgar/data/ddnet/src/engine/client/backend_sdl.cpp:63
10:50 <+bridge> <Ryozuki> #21 0x00005555556f4de7 in thread_run(void*) (user=<optimized out>) at /home/edgar/data/ddnet/src/base/system.cpp:764
10:50 <+bridge> <Ryozuki> #22 0x00007ffff53efaa3 in  () at /lib64/libc.so.6
10:50 <+bridge> <Ryozuki> #23 0x00007ffff5471b5c in  () at /lib64/libc.so.6
10:50 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106503511384002570/image.png
10:50 <+bridge> <Cellegen | RiH> we have nvidia-driver-530 yk
10:50 <+bridge> <Ryozuki> colors better xd
10:50 <+bridge> <Robyt3> If we end up splitting all the game images and reordering them in folders, then we should just do this with all images once to get a better structure (including stuff like file icons, demo buttons, emoticons, etc.)
10:50 <+bridge> <Ryozuki> yeah the rewor needs to be done in 1 go
10:50 <+bridge> <Ryozuki> for everything
10:50 <+bridge> <Ryozuki> with scripts to convert old pngs to new
10:50 <+bridge> <Ryozuki> so custom assets are kept
10:50 <+bridge> <Cellegen | RiH> or the other way around for compatibility
10:50 <+bridge> <Ryozuki> idc about backwards compat
10:50 <+bridge> <Cellegen | RiH> me too :gigachad:
10:51 <+bridge> <Ryozuki> then why u say that
10:51 <+bridge> <Ryozuki> xd
10:51 <+bridge> <Cellegen | RiH> idk, I had a brain damage for this moment
10:51 <+bridge> <Cellegen | RiH> latest rls gang
10:51 <+bridge> <Cellegen | RiH> :gigachad:
10:51 <+bridge> <Jupstar ✪> It won't necessarily use less ram. Also more textures don't mean more bandwidth. However it might mean using memory less effectively BCS it's in different locations
10:51 <+ChillerDragon> got it @heinrich5991 ``python3 serialize.py --version 0.7 raw/teeworlds-0.7.5.py > spec/teeworlds-0.7.5.json``
10:51 <+bridge> <Ryozuki> nobo chiller
10:52 <+bridge> <Ryozuki> nobody cares about 0.7
10:52 <+bridge> <Ryozuki> @Jupeyy_Keks any hint on why the segfault happens?
10:52 <+bridge> <Voxel> Wait, so how would it work when you want to actually **customize** it?
10:52 <+bridge> <Voxel> What would this look like?
10:52 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1106504178936840232/image.png
10:52 <+bridge> <Jupstar ✪> Enable Vulkan layers. Can't imagine why it crashes
10:52 <+bridge> <Voxel> crap forgot to untag robyt
10:53 <+bridge> <Ryozuki> @Jupeyy_Keks odd, my ddnet from gentoo ebuild doesnt crash
10:53 <+bridge> <Cellegen | RiH> It would need a window rework :pepekek:
10:53 <+bridge> <Ryozuki> ```
10:53 <+bridge> <Ryozuki> rm -rf build/*
10:53 <+bridge> <Ryozuki> 
10:53 <+bridge> <Ryozuki> env CXXFLAGS='-march=native -mtune=native' cmake -S . -B build/ \
10:53 <+bridge> <Ryozuki>     -DCMAKE_BUILD_TYPE=RelWithDebInfo \
10:53 <+bridge> <Ryozuki>     -GNinja \
10:53 <+bridge> <Ryozuki>     -DDEV=ON \
10:53 <+bridge> <Ryozuki>     -DVULKAN=ON \
10:53 <+bridge> <Ryozuki>     -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
10:53 <+bridge> <Ryozuki> 
10:53 <+bridge> <Ryozuki> ln -f -s build/compile_commands.json compile_commands.json
10:53 <+bridge> <Ryozuki> ```
10:53 <+bridge> <Ryozuki> it uses mold by default, thats pog
10:53 <+bridge> <Robyt3> Maybe provide shortcut buttons that select entire sets that have the same name
10:53 <+bridge> <Ryozuki> how to do that
10:54 <+bridge> <Jupstar ✪> Start with dbg_gfx 4
10:55 <+bridge> <Jupstar ✪> For a start we could use the directory name.. e.g. default is weapons/default/*.png
10:55 <+bridge> <Jupstar ✪> 
10:55 <+bridge> <Jupstar ✪> We can display them similar to here in a group
10:55 <+bridge> <Jupstar ✪> That's also how entities do it btw
10:55 <+bridge> <Robyt3> yeah, just show them the same as before grouped, so you can select all of them at the same time
10:55 <+bridge> <Ryozuki> 2023-05-12 10:55:48 I vulkan: deallocated chunk of memory with size: 196608 for frame 1 (buffer)
10:55 <+bridge> <Ryozuki> 2023-05-12 10:55:48 I vulkan: deallocated chunk of memory with size: 196608 for frame 1 (buffer)
10:55 <+bridge> <Ryozuki> Segmentation fault
10:56 <+bridge> <Jupstar ✪> It must be Vulkan error if it's a detection by a VK layer
10:56 <+bridge> <Jupstar ✪> Also u need to install them
10:56 <+bridge> <Jupstar ✪> Dunno if they exist for Nvidia
10:56 <+bridge> <Ryozuki> i got vulkan-layers
10:57 <+bridge> <Voxel> Oh man, you know what would be great? I don't think this will be optimal for real time gameplay but what if you could choose random weapons for each tee for demo rendering/playback?
10:57 <+bridge> <Voxel> i had this idea before
10:58 <+bridge> <Jupstar ✪> Yes it's a long time suggestion
10:58 <+bridge> <Jupstar ✪> Like with everything our network code sucks
10:58 <+bridge> <Jupstar ✪> Before someone won't convince Heinrich to finally break with it it will create bloat
10:59 <+bridge> <Jupstar ✪> I mean for non random
10:59 <+bridge> <Jupstar ✪> E.g. a player sends his selection
10:59 <+bridge> <Jupstar ✪> Random is weird xd
10:59 <+bridge> <Jupstar ✪> But i like the idea of customization
11:00 <+bridge> <Ryozuki> yeah
11:00 <+bridge> <Ryozuki> i need to add new netobjs for damage indicator, spawn particles, etc so i can apply opacity correctly
11:02 <+bridge> <Voxel> imagine you can send over particles too
11:02 <+bridge> <Voxel> custom grenade explosions
11:02 <+bridge> <Voxel> 🔥
11:03 <+bridge> <Ryozuki> @Jupeyy_Keks ok, it segfaults on master, but not on 16.9 tag
11:03 <+bridge> <Ryozuki> im gonna find the commit
11:04 <+bridge> <Jupstar ✪> I don't want to go into detail but i talked to Heinrich. It's not that he dislike suchs ideas. It's simply that he wants such features always be downward compatible. So nice dreams but probably not maintainable. Esp. Since most contributions are not high quality and/or not highly tested
11:04 <+bridge> <Ryozuki> yeah he wantsb ackwards compat
11:04 <+bridge> <Ryozuki> idk why so much
11:04 <+bridge> <Ryozuki> we could make so much improvements
11:04 <+bridge> <Ryozuki> way more modularity
11:04 <+bridge> <Ryozuki> no ugly code
11:04 <+bridge> <Jupstar ✪> Oh weird indeed
11:04 <+bridge> <Ryozuki> https://github.com/ddnet/ddnet/pull/6560
11:13 <+bridge> <Learath2> Why do you want to split game.png anyway?
11:14 <+bridge> <Ryozuki> ```bash
11:14 <+bridge> <Ryozuki> ❯ git bisect bad
11:14 <+bridge> <Ryozuki> c8b69dd8156a4a36656d0467845ca9b02d20fc18 is the first bad commit
11:14 <+bridge> <Ryozuki> commit c8b69dd8156a4a36656d0467845ca9b02d20fc18
11:14 <+bridge> <Ryozuki> Author: Robert Müller <robytemueller@gmail.com>
11:14 <+bridge> <Ryozuki> Date:   Wed May 10 20:51:25 2023 +0200
11:14 <+bridge> <Ryozuki> 
11:14 <+bridge> <Ryozuki>     Properly uninitialize all client components
11:14 <+bridge> <Ryozuki> 
11:14 <+bridge> <Ryozuki>     Track stack of cleaner functions that destruct client components so exactly the correct cleanup is performed in the reverse order of initialization.
11:14 <+bridge> <Ryozuki> 
11:14 <+bridge> <Ryozuki>     This allows performing the cleanup also in the early-return cases without introducing duplicate code.
11:14 <+bridge> <Ryozuki> 
11:14 <+bridge> <Ryozuki>  src/engine/client/client.cpp | 61 +++++++++++++++++++++++++++-----------------
11:14 <+bridge> <Ryozuki>  1 file changed, 38 insertions(+), 23 deletions(-)
11:14 <+bridge> <Ryozuki> ```
11:14 <+bridge> <Ryozuki> @Jupeyy_Keks found it
11:14 <+bridge> <Ryozuki> its this
11:14 <+bridge> <Ryozuki> causes segfault
11:14 <+bridge> <Ryozuki> @Robyt3 !!
11:14 <+ChillerDragon> ```bash xd
11:15 <+bridge> <Voxel> because its trash + incompatable and hard to update
11:16 <+bridge> <Ryozuki> added the trace  there
11:16 <+bridge> <Ryozuki> xd
11:16 <+bridge> <Robyt3> I'll take a look later
11:17 <+bridge> <Ryozuki> ok thx
11:17 <+bridge> <Learath2> Trash is hard to define. Incompatible with what? Why is 5 different images easier to update than 1? To me it seems that the steps would be about the same
11:17 <+bridge> <Ryozuki> diferent images allows more custom options tho
11:17 <+bridge> <Voxel> did you read the whole convo
11:18 <+bridge> <Ryozuki> ye read backlog
11:19 <+bridge> <Learath2> Mostly skimmed through it where you were talking about how you can add cool new graphics and how it’d break backwards compatibility. Neither are very convincing reasons to do it
11:20 <+bridge> <Ryozuki> @Learath2 do u know why gdb says warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
11:21 <+bridge> <Learath2> This is about the only benefit I can think of
11:21 <+bridge> <Learath2> Nope, sorry boss
11:21 <+bridge> <Learath2> Sounds unimportant
11:22 <+bridge> <Ryozuki> @Learath2 any fancy plugin scripts for gdb u use?
11:22 <+bridge> <Ryozuki> i wanna make my gdb powerful
11:22 <+bridge> <Ryozuki> or is lldb better
11:22 <+bridge> <Learath2> I use GEF while reverse engineering
11:23 <+bridge> <Ryozuki> oh
11:23 <+bridge> <Ryozuki> lldb shows column too
11:23 <+bridge> <Ryozuki> not just line
11:23 <+bridge> <Learath2> It’s not as useful when debugging software you have the source to
11:23 <+bridge> <Jupstar ✪> What are u reverse engineering?
11:23 <+bridge> <Ryozuki> ```lldb
11:23 <+bridge> <Ryozuki> * thread #5, name = 'DDNet', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)
11:23 <+bridge> <Ryozuki>     frame #0: 0x00007ffff4f0fc70 libX11.so.6`_XSend + 48
11:23 <+bridge> <Ryozuki> libX11.so.6`_XSend:
11:23 <+bridge> <Ryozuki> ->  0x7ffff4f0fc70 <+48>: movq   (%rax), %rsi
11:23 <+bridge> <Ryozuki>     0x7ffff4f0fc73 <+51>: andl   $0x1, %edx
11:23 <+bridge> <Ryozuki>     0x7ffff4f0fc76 <+54>: movq   %rsi, (%rsp)
11:23 <+bridge> <Ryozuki>     0x7ffff4f0fc7a <+58>: jne    0x7ffff4f0fdb9            ; <+377>
11:23 <+bridge> <Ryozuki> (lldb) bt
11:23 <+bridge> <Ryozuki> * thread #5, name = 'DDNet', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)
11:23 <+bridge> <Ryozuki>   * frame #0: 0x00007ffff4f0fc70 libX11.so.6`_XSend + 48
11:23 <+bridge> <Ryozuki>     frame #1: 0x00007ffff4f0600a libX11.so.6`XQueryExtension + 170
11:24 <+bridge> <Ryozuki>     frame #2: 0x00007ffff4ef96f2 libX11.so.6`XInitExtension + 50
11:24 <+bridge> <Ryozuki>     frame #3: 0x00007ffff4ec536d libXext.so.6`XextAddDisplay + 77
11:24 <+bridge> <Ryozuki>     frame #4: 0x00007fffedfc9e6f libGLX_nvidia.so.0`___lldb_unnamed_symbol3788 + 239
11:24 <+bridge> <Ryozuki>     frame #5: 0x00007fffedfeb665 libGLX_nvidia.so.0`___lldb_unnamed_symbol4144 + 69
11:24 <+bridge> <Ryozuki>     frame #6: 0x00007fffded4d499 libnvidia-glcore.so.525.116.03`___lldb_unnamed_symbol75337 + 313
11:24 <+bridge> <Ryozuki>     frame #7: 0x00007fffded4b86c libnvidia-glcore.so.525.116.03`___lldb_unnamed_symbol75283 + 124
11:24 <+bridge> <Ryozuki>     frame #8: 0x00007fffded4cf9f libnvidia-glcore.so.525.116.03`___lldb_unnamed_symbol75329 + 31
11:24 <+bridge> <Ryozuki>     frame #9: 0x00007fffded3f7fc libnvidia-glcore.so.525.116.03`___lldb_unnamed_symbol75086 + 316
11:24 <+bridge> <Ryozuki>     frame #10: 0x00007fffded3fdfe libnvidia-glcore.so.525.116.03`___lldb_unnamed_symbol75094 + 110
11:24 <+bridge> <Ryozuki>     frame #11: 0x00007fffded3ffc1 libnvidia-glcore.so.525.116.03`___lldb_unnamed_symbol75095 + 17
11:24 <+bridge> <Ryozuki>     frame #12: 0x00007fffedfea7bc libGLX_nvidia.so.0`___lldb_unnamed_symbol4127 + 60
11:24 <+bridge> <Ryozuki>     frame #13: 0x00005555558379ee DDNet`CCommandProcessorFragment_Vulkan::DestroySwapChain(this=0x0000555555f99f60, ForceDestroy=true) at backend_vulkan.cpp:4224:25
11:24 <+bridge> <Ryozuki>     frame #14: 0x000055555583bfda DDNet`CCommandProcessorFragment_Vulkan::CleanupVulkanSwapChain(this=0x0000555555f99f60, ForceSwapChainDestruct=true) at backend_vulkan.cpp:5451:19
11:24 <+bridge> <Ryozuki>     frame #15: 0x0000555555857c60 DDNet`void CCommandProcessorFragment_Vulkan::CleanupVulkan<true>(this=0x0000555555f99f60) at backend_vulkan.cpp:5462:27
11:24 <+bridge> <Ryozuki>     frame #16: 0x000055555583fd56 DDNet`CCommandProcessorFragment_Vulkan::Cmd_Shutdown(this=0x0000555555f99f60, pCommand=0x0000555557150d10) at backend_vulkan.cpp:6649:22
11:24 <+bridge> <Ryozuki>     frame #17: 0x000055555583f613 DDNet`CCommandProcessorFragment_Vulkan::RunCommand(this=0x0000555555f99f60, pBaseCommand=0x0000555557150d10) at backend_vulkan.cpp:6529:20
11:24 <+bridge> <Ryozuki>     frame #18: 0x00005555558d0a63 DDNet`CCommandProcessor_SDL_GL::RunBuffer(this=0x0000555555f8f6c0, pBuffer=0x00007fffffffd390) at backend_sdl.cpp:335:38
11:24 <+bridge> <Ryozuki>     frame #19: 0x00005555558cf7bb DDNet`CGraphicsBackend_Threaded::ThreadFunc(pUser=0x0000555555de32a0) at backend_sdl.cpp:63:34
11:24 <+bridge> <Ryozuki>     frame #20: 0x00005555557ceae7 DDNet`::thread_run(user=0x0000555555edd8d0) at system.cpp:764:12
11:24 <+bridge> <Learath2> Mh, gdb I find easier to use, but they are about the same in capability
11:24 <+bridge> <Ryozuki> lldb shows more info for me
11:24 <+bridge> <Ryozuki> i think u can tell clang to make lldb optimized debug info
11:24 <+bridge> <Ryozuki> atleast thats a thing in llvm iirc
11:25 <+bridge> <Learath2> Oh I remember one feature in lldb that’s nice, it has full support for c++ syntax. So you can do method calls in expressions easily
11:26 <+bridge> <Learath2> Mostly ctfs, though it’s been a while since I had time to do one
11:27 <+bridge> <Ryozuki> can someone review https://github.com/ddnet/ddnet/pull/6560 too
11:27 <+bridge> <Ryozuki> i want this merged
11:28 <+bridge> <Ryozuki> i noticed we got 33prs there
11:28 <+bridge> <Ryozuki> starting to look like tw xd
11:29 <+bridge> <Ryozuki> and also my pr thanks <https://github.com/ddnet/ddnet/pull/6580>
11:30 <+bridge> <Learath2> Yeah :AnyaSob:
11:31 <+bridge> <Learath2> Maybe I’ll do a review day tomorrow
11:31 <+bridge> <Ryozuki> i would merge stuff, but im not confident in havent missed stuff
11:31 <+bridge> <Ryozuki> having not*
11:31 <+bridge> <Ryozuki> english broke
11:44 <+bridge> <Learath2> https://youtu.be/IfCRHSIg6zo
11:45 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106517547156766801/image.png
11:45 <+bridge> <Ryozuki> why does clang doesnt find it
11:45 <+bridge> <Ryozuki> its annoying sometimes
11:46 <+bridge> <Ryozuki> clangd*
11:46 <+bridge> <Learath2> Do you have your compile_commands set properly? Does clangd even use them?
11:47 <+bridge> <Ryozuki> same thing happens in vscode
11:47 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106517911352389663/image.png
11:47 <+bridge> <Ryozuki> i have  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
11:47 <+bridge> <Ryozuki> and it knwos the type of functions
11:47 <+bridge> <Ryozuki> if i hover on em
11:47 <+bridge> <Ryozuki> so its like partially knows
11:51 <+bridge> <Ryozuki> idk
11:51 <+bridge> <Ryozuki> oh
11:51 <+bridge> <Ryozuki> it onl happens in .h files
11:51 <+bridge> <Ryozuki> > The error occuring in an .h but not in a .cpp file may indicate that clangd is treating the .h file as a C header rather than a C++ header.
11:51 <+bridge> <Jupstar ✪> Maybe it's actually not included. I had such things too after the header include refactor
11:53 <+bridge> <Ryozuki> ok it already treats it as c++ header
11:53 <+ChillerDragon> !rust wot a function without body?
11:53 < chillerbot4> @Ryozuki
11:53 <+ChillerDragon> https://github.com/heinrich5991/libtw2/blob/0352e6f2f23e01e17c6212701f8faa166c524522/wireshark-dissector/sys/src/lib.rs#L2902-L2908
11:53 <+ChillerDragon> how does that work
11:54 <+bridge> <Ryozuki> dude its a extern fn
11:54 <+ChillerDragon> ``pub fn create_dissector_handle() -> dissector_handle_t;``
11:54 <+bridge> <Ryozuki> its just inside and extern block
11:54 <+ChillerDragon> so its a c func?
11:54 <+bridge> <Ryozuki> same as pub extern fn
11:54 <+bridge> <Ryozuki> ye
11:54 <+ChillerDragon> hm
11:54 <+bridge> <Ryozuki> linked
11:54 <+bridge> <Ryozuki> libtw2 uses old rust
11:54 <+bridge> <Ryozuki> for lot of stuff
11:54 <+bridge> <Ryozuki> and also heinrich style
11:54 <+ChillerDragon> ye libtw is old
11:54 <+bridge> <Ryozuki> i dont like it much
11:54 <+ChillerDragon> hater
11:54 <+ChillerDragon> we know
11:54 <+bridge> <Ryozuki> xd
11:55 <+ChillerDragon> stop bully heinrich
11:55 <+ChillerDragon> i his fan
11:56 <+bridge> <Learath2> https://tenor.com/view/clippy-microsoft-office-word-publisher-gif-5630386
11:56 <+bridge> <Ryozuki> xd
11:57 <+bridge> <Ryozuki> it it compiles it means vec2 ends up there right
11:57 <+bridge> <Ryozuki> but why clangd doesnt find it
11:57 <+bridge> <Ryozuki> smh
11:57 <+bridge> <Ryozuki> rust-analyzer best
11:57 <+ChillerDragon> once again im stuck at hello world in rust fml
11:59 <+bridge> <Learath2> Try including the base vmath thing there and see if that helps?
12:00 <+bridge> <Learath2> Idk how these tools resolve things when they aren't included in this file but the previous one includes both
12:02 <+bridge> <Ryozuki> it helps
12:02 <+bridge> <Ryozuki> but heinrich will say its a useless include
12:03 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106522010923839599/image.png
12:03 <+bridge> <Ryozuki> same happens in otherp laces
12:03 <+bridge> <Ryozuki> sux
12:03 <+bridge> <Ryozuki> c++ tooling bad
12:03 <+ChillerDragon> skill issue
12:04 <+ChillerDragon> have you tried using eclipse c++ instead of vim?
12:05 <+ChillerDragon> @Ryozuki "i noticed we got 33prs there" where?
12:05 <+bridge> <Learath2> Is it really? I think it's fine, the include guard will stop it from being included and it's only strictly correct with the include no?
12:05 <+bridge> <Jupstar ✪> Do you happen to know if there is any possibility inside a .rs file to hide the keyword unsafe from a user?
12:05 <+bridge> <Jupstar ✪> 
12:05 <+bridge> <Jupstar ✪> E.g. in c it's simply #define notunsafe unsafe
12:05 <+ChillerDragon> trol
12:06 <+bridge> <Jupstar ✪> This is a serious question if u mean me
12:06 <+ChillerDragon> i mean u
12:06 <+bridge> <Ryozuki> but this happens in many header files
12:06 <+ChillerDragon> > If you are looking for an alternative to C's #define, there is nothing that will allow arbitrary words to be used as keywords (which is probably a good thing).
12:06 <+bridge> <Ryozuki> cant we just use c++20 modules
12:06 <+bridge> <Ryozuki> or 22
12:06 <+bridge> <Ryozuki> i forgot
12:06 <+bridge> <Learath2> Don't know if it helps here
12:06 <+ChillerDragon> ryo where we got 33prs?
12:06 <+bridge> <Learath2> I'd bet the tooling is even worse for those
12:07 <+bridge> <Ryozuki> c++ headers are one of the hardest things to parse on earth
12:07 <+bridge> <Ryozuki> in ddnet chiller
12:07 <+bridge> <Learath2> I'd go so far to say that they are unparseable
12:07 <+ChillerDragon> who is we? xd
12:07 <+ChillerDragon> ah u mean open?
12:07 <+bridge> <Ryozuki> ye dumbo
12:07 <+ChillerDragon> fakof
12:07 <+ChillerDragon> !jup maybe a macro can hide it away
12:07 < chillerbot4> @Jupstar ✪
12:07 <+bridge> <Learath2> Reported for being rude. You'll be banished to the shadow realm
12:08 <+ChillerDragon> !jup cargo add custom-unsafe-macro then call that and slap ur code in
12:08 < chillerbot4> @Jupstar ✪
12:08 <+bridge> <Ryozuki> i added a o to not be rude
12:08 <+ChillerDragon> i added a fakof to not sound serious
12:08 <+bridge> <Learath2> I bet it was just a typo
12:09 <+bridge> <Ryozuki> dumbo is the elephant
12:09 <+ChillerDragon> lol
12:09 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106523461238652989/9k.png
12:09 <+bridge> <Ryozuki> im safe
12:09 <+bridge> <Learath2> I'll ban you to be safe
12:09 <+bridge> <Jupstar ✪> ChillerDragon mh yeah thought about that. Shit xddd
12:09 <+ChillerDragon> u tryna detect unsafe rust?
12:09 <+bridge> <Ryozuki> there is with macros
12:09 <+bridge> <Ryozuki> but u can add a  forbid unsafe_code in the top level
12:10 <+bridge> <Cellegen | RiH> unsafe rust? from ryo?
12:10 <+bridge> <Cellegen | RiH> impossible
12:10 <+ChillerDragon> also there is generated code that can introduce unsafe code
12:10 <+bridge> <Ryozuki> i do it everyday at work
12:10 <+bridge> <Cellegen | RiH> :justatest:
12:10 <+ChillerDragon> im sure rust macros could generate could that gets added to compilation
12:10 <+ChillerDragon> code*
12:10 <+bridge> <Jupstar ✪> I am thinking about a way to make sure unsafe is not used at all for an API. Maybe I should simply disallow extern creates
12:10 <+bridge> <Ryozuki> rust macros can do anything
12:10 <+bridge> <Ryozuki> in sqlx they verify a sql query is valid
12:10 <+bridge> <Ryozuki> by checking with the db
12:10 <+bridge> <Ryozuki> at compile itme
12:10 <+bridge> <Ryozuki> time
12:10 <+bridge> <Jupstar ✪> Yeah, they are a problem
12:11 <+bridge> <Jupstar ✪> Can u disable them xd
12:11 <+bridge> <Ryozuki> well the ones that can do anything are the procdural macros
12:11 <+ChillerDragon> yea so i can write a rust macro that generates rust code and includes it in the compiled end result using the unsafe keyword without using the string "unsafe"
12:11 <+bridge> <Jupstar ✪> Yep
12:11 <+bridge> <Ryozuki> i mean u cant avoid this
12:11 <+bridge> <Ryozuki> for example another attack vector is build.rs
12:11 <+bridge> <Learath2> Just don't expose any unsafe functions?
12:11 <+bridge> <Ryozuki> it executes on build time
12:12 <+bridge> <Ryozuki> forbid unsafe is the best bet
12:12 <+bridge> <Jupstar ✪> I cannot control the code directly
12:12 <+bridge> <Ryozuki> u mean a dependency?
12:12 <+bridge> <Jupstar ✪> I can only analyse it
12:12 <+bridge> <Ryozuki> safe rust can be evil too
12:12 <+bridge> <Jupstar ✪> But i could compile it. So maybe inject forbid unsafe... But how safe would that be
12:12 <+bridge> <Jupstar ✪> The user could simply allow it again
12:13 <+bridge> <Learath2> Who would lie to you about being unsafe anyway?
12:13 <+ChillerDragon> there are hacky macros to check for panics maybe there is something for unsafe too
12:13 <+bridge> <Ryozuki> forbid unsafe checks the current library has no unsafe usage
12:13 <+bridge> <Jupstar ✪> Someone who executes code on my computer
12:13 <+bridge> <Ryozuki> it works for macros too
12:13 <+bridge> <Ryozuki> it detects everything
12:13 <+bridge> <Ryozuki> but only for ur crate
12:13 <+bridge> <Learath2> You can execute evil code without unsafe too
12:13 <+bridge> <Ryozuki> yeah
12:13 <+bridge> <Ryozuki> safe rust is not sandboxed
12:13 <+bridge> <Jupstar ✪> It has no access to system api
12:14 <+bridge> <Jupstar ✪> Yeah it's sandboxed
12:14 <+bridge> <Ryozuki> @Jupeyy_Keks use this https://github.com/rhaiscript/rhai
12:14 <+bridge> <Learath2> You can open files in safe rust. You mean no unsafe anywhere in any call chain?
12:14 <+bridge> <Jupstar ✪> I need good performance
12:15 <+bridge> <Ryozuki> it should have good perf
12:15 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106525023423975504/image.png
12:15 <+bridge> <Jupstar ✪> I actually have code that is sandboxed completely except for a specific API. And all I need here is memory safety
12:15 <+bridge> <Jupstar ✪> The API must be robust anyway
12:15 <+ChillerDragon> !jup https://crates.io/crates/no-panic
12:15 < chillerbot4> @Jupstar ✪
12:16 <+ChillerDragon> its not unsafe related but panic
12:16 <+ChillerDragon> > A Rust attribute macro to require that the compiler prove a function can't ever panic.
12:16 <+bridge> <Ryozuki> the panic case is hard
12:16 <+bridge> <Jupstar ✪> Panic is not a problem
12:16 <+ChillerDragon> maybe unsafe gets caught by that too
12:16 <+bridge> <Jupstar ✪> I can control abortion
12:16 <+bridge> <Ryozuki> panic is not unsafe
12:16 <+bridge> <Ryozuki> nobo
12:16 <+ChillerDragon> but is unsafe panic?
12:17 <+bridge> <Ryozuki> unsafe needs to deal with panics
12:17 <+bridge> <Ryozuki> but not the other way around
12:17 <+bridge> <Ryozuki> a panic is safe
12:17 <+bridge> <Ryozuki> unsafe  needs to deal with panics in the way of assuming stuff
12:17 <+ChillerDragon> yes but can a unsafe not panic?
12:17 <+bridge> <Ryozuki> unsafe can panic
12:17 <+bridge> <Ryozuki> safe c an panic
12:17 <+ChillerDragon> will it always?
12:17 <+bridge> <Ryozuki> ????
12:18 <+bridge> <Learath2> So you get a piece of code to execute in a sandbox. You already limited the api to the outside. Just disallow external crates and std in the 'sandboxed' code?
12:18 <+ChillerDragon> i mean the no-panic crate ensures that your program wont compile if you have the possibility to panic. if unsafe introduces that possibility then you catch those as well
12:18 <+bridge> <Jupstar ✪> Yeah but e.g. using a vec should be allowed again xD
12:18 <+bridge> <Ryozuki> related to unsafe and panick (unwinds): https://doc.rust-lang.org/nomicon/unwinding.html
12:18 <+bridge> <Ryozuki> > Rust has a tiered error-handling scheme:
12:18 <+bridge> <Ryozuki> > 
12:19 <+bridge> <Ryozuki> >     If something might reasonably be absent, Option is used.
12:19 <+bridge> <Ryozuki> >     If something goes wrong and can reasonably be handled, Result is used.
12:19 <+bridge> <Ryozuki> >     If something goes wrong and cannot reasonably be handled, the thread panics.
12:19 <+bridge> <Ryozuki> >     If something catastrophic happens, the program aborts.
12:19 <+bridge> <Ryozuki> xd
12:19 <+bridge> <Jupstar ✪> I just need to make sure the vec is not nullptr for example once the API gets this vec
12:19 <+bridge> <Learath2> Mh expose vecs through your api
12:20 <+bridge> <Learath2> You can't let them use std, if they can use std they can do anything
12:20 <+bridge> <Jupstar ✪> Mhh I dunno
12:20 <+bridge> <deen> And if you get an our of memory then throw your hands up in the air since there is nothing you can do in Rust
12:21 <+bridge> <Learath2> Fwiw I think you should use something like wasm, it's performant enough nowadays
12:21 <+bridge> <Jupstar ✪> I guess the sandbox itself needs support for checking memory safety here :/
12:21 <+bridge> <Ryozuki> there is try_ stuff getting in
12:21 <+bridge> <Ryozuki> but yeah
12:21 <+bridge> <Jupstar ✪> Yes. But if I want the wasm module to call host functions
12:21 <+bridge> <Ryozuki> https://rust-lang.github.io/rfcs/2116-alloc-me-maybe.html
12:21 <+bridge> <Ryozuki> https://docs.rs/fallible_collections/latest/fallible_collections/
12:21 <+bridge> <Ryozuki> @deen
12:22 <+bridge> <Ryozuki> this got a push thanks to linux
12:23 <+bridge> <Learath2> You can export host functions to wasm. Just need to be selective with what you expose. No direct file opening mechanisms
12:24 <+bridge> <Jupstar ✪> And how does it handle data types?
12:25 <+bridge> <Ryozuki> @Jupeyy_Keks https://docs.wasmtime.dev/lang-rust.html#importing-host-functionality
12:25 <+bridge> <Learath2> In a very ugly manner 😄
12:26 <+bridge> <Jupstar ✪> Well this is with simple data types
12:26 <+bridge> <Jupstar ✪> Is there also a complex example?
12:26 <+bridge> <Ryozuki> u probs need to make them repr C
12:26 <+bridge> <Ryozuki> but idk
12:26 <+bridge> <Ryozuki> i never used this
12:26 <+bridge> <Learath2> Forget passing complex types, you have something like an array, something like a dict, bools, ints, doubles iirc
12:27 <+bridge> <Jupstar ✪> A dictionary? So a hashmap?
12:28 <+bridge> <Jupstar ✪> Mh ok anyway, guess have to think what exactly i want
12:30 <+bridge> <Learath2> I think they called them tables tho I'm not a web assembly expert
12:30 <+bridge> <Ryozuki> https://github.com/OfekShilon/optview2
12:30 <+bridge> <Jupstar ✪> Guess I need to use json strings 😂😂 javascript kiddos
12:31 <+bridge> <Ryozuki> utf-16 ftw
12:31 <+bridge> <Ryozuki> ah i read js
12:31 <+bridge> <Ryozuki> xd
12:33 <+bridge> <Ryozuki> @Learath2 how do u prevent oom or do something if a alloc fails in c++?
12:33 <+bridge> <Ryozuki> ah i guess malloc simply returns a nullptr? xd
12:33 <+bridge> <Learath2> Yes
12:34 <+bridge> <Ryozuki> but i bet 99% of ppl dont check nullptr on malloc
12:34 <+bridge> <Ryozuki> we certainly dont
12:34 <+bridge> <Learath2> And in C++ it's either nullptr or new throws
12:34 <+bridge> <Learath2> I always check mine religiously
12:34 <+bridge> <Ryozuki> xd
12:34 <+bridge> <Ryozuki> but malloc is tricky right
12:34 <+bridge> <Ryozuki> cuz overcommit
12:34 <+bridge> <Ryozuki> in linux
12:34 <+bridge> <Ryozuki> it can give u all u want
12:35 <+bridge> <Chairn> guys... already 500+ messages and it's not even noon...
12:35 <+bridge> <Ryozuki> well nobody forces u to read em kek
12:35 <+bridge> <Ryozuki> mainly a discussion about images and my segfault
12:35 <+bridge> <Ryozuki> which wouldnt happen in rust (probs)
12:39 <+bridge> <Jupstar ✪> But Friday
12:41 <+bridge> <Learath2> Yep, return of malloc doesnt mean much nowadays 😛
12:42 <+bridge> <Chairn> same here 🙂
12:42 <+bridge> <Ryozuki> merge my pr it will be fine
12:42 <+bridge> <Ryozuki> :kek:
12:43 <+bridge> <Robyt3> I'll merge it later
12:44 <+bridge> <Chairn> on the image thing, i don't think it's a good idea to split to small files
12:45 <+bridge> <Ryozuki> https://www.twitch.tv/videos/1817384336
12:45 <+bridge> <Ryozuki> i did the fixes of the pr yesterday, it took me 1h cuz i forgot abotu the stupid m_Teams, im certainly rusty
12:45 <+bridge> <Chairn> we would lose thematic games doing so, but we can maybe split them in software and allow a lot more option directly in game (like a split game icons option)
12:45 <+bridge> <Ryozuki> the video has no voice btw xd
12:45 <+bridge> <Jupstar ✪> We lost what?
12:46 <+bridge> <Jupstar ✪> U mean that it will not look fitting design wise?
12:46 <+bridge> <Chairn> sorry, im working hard on friday too 😄
12:46 <+bridge> <Chairn> yes, like thematic game.png, such as Pipou's
12:46 <+bridge> <Jupstar ✪> Why would we loose it
12:46 <+bridge> <Jupstar ✪> He can create a game bundle just like now
12:47 <+bridge> <Ryozuki> we  need  to ask the resident designer ravie
12:47 <+bridge> <Jupstar ✪> Boring
12:47 <+bridge> <Chairn> im not sure it's more practical, gotta ask graphics people @Pipou @Voxel
12:47 <+bridge> <Ryozuki> i know, hence the title
12:47 <+bridge> <Jupstar ✪> He always has opposite opinion to mine
12:47 <+bridge> <Chairn> 10 minutes before my 2nd audition 🙂
12:47 <+bridge> <Jupstar ✪> Very simple xd
12:47 <+bridge> <Ryozuki> xd
12:48 <+bridge> <Ryozuki> audition for?
12:48 <+bridge> <Chairn> @Ravie
12:48 <+bridge> <Chairn> associate professor position
12:48 <+bridge> <Ryozuki> ohh
12:48 <+bridge> <Ryozuki> idk what that means but nice, or my condolences
12:48 <+bridge> <Ryozuki> (insert meme here)
12:49 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106533508832317440/fetchimage.png
12:49 <+bridge> <Ryozuki> xd
12:49 <+bridge> <Jupstar ✪> Xd
12:49 <+bridge> <Jupstar ✪> Are u then rich enough to buy win10?
12:50 <+bridge> <Chairn> my mind is not poor enough to do that
12:50 <+bridge> <Ryozuki> just use linux
12:50 <+bridge> <Ryozuki> if my teacher told me he uses windows
12:50 <+bridge> <Chairn> soon(tm)
12:50 <+bridge> <Ryozuki> i would respect him less
12:50 <+bridge> <Jupstar ✪> XD
12:50 <+bridge> <Ryozuki> :justatest:
12:50 <+bridge> <Chairn> i use linux for almost everything
12:50 <+bridge> <Chairn> except games
12:50 <+bridge> <Ryozuki> same
12:50 <+bridge> <Ryozuki> sadly
12:50 <+bridge> <Jupstar ✪> I use it for everything
12:50 <+bridge> <Ryozuki> pog
12:51 <+bridge> <Chairn> i teach RISC-V on linux
12:51 <+bridge> <Jupstar ✪> Games that don't work are not worth it from the start
12:51 <+bridge> <Chairn> we really need #dev-offtopic
12:51 <+bridge> <Ryozuki> true
12:51 <+bridge> <Ryozuki> but sometimes i wanna try those aaa games
12:51 <+bridge> <Chairn> to not pollute this channel 😄
12:51 <+bridge> <Jupstar ✪> 😎
12:51 <+bridge> <Ryozuki> and make use of my 3080
12:51 <+bridge> <Jupstar ✪> Steal 4090 from sis
12:52 <+bridge> <Ryozuki> @Jupeyy_Keks i went to her house and installed the 4090 vertically
12:52 <+bridge> <Ryozuki> it was like usual before, b ut we couldnt close the case
12:52 <+bridge> <Ryozuki> this time it worked
12:52 <+bridge> <Ryozuki> its a massive brick
12:52 <+bridge> <Ryozuki> vertical i mean like this
12:52 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106534441796518020/maxresdefault.png
12:53 <+bridge> <Ryozuki> @Jupeyy_Keks 190 fps on cyberpunk with the new rtx mode
12:53 <+bridge> <Ryozuki> and the fans barely spinning
12:53 <+bridge> <Ryozuki> 55c iirc
12:53 <+bridge> <Ryozuki> she has a slow ram i told her to change tho
12:53 <+bridge> <Jupstar ✪> Xd
12:54 <+bridge> <Ryozuki> xd
12:54 <+bridge> <Ryozuki> i hope nvidia releases a new gpu
12:54 <+bridge> <Ryozuki> so i can get this 4090
12:54 <+bridge> <Ryozuki> kek
12:54 <+bridge> <Learath2> But genshin has waifus
12:54 <+bridge> <Ryozuki> do u rly play genshin
12:54 <+bridge> <Ryozuki> i got bored in 10 mins
12:55 <+bridge> <Ryozuki> but genshin is played by all egirl weebs
12:55 <+bridge> <Ryozuki> well most egirls play valoran
12:55 <+bridge> <Ryozuki> xdd
12:55 <+bridge> <Ryozuki> valorant
12:55 <+bridge> <Ryozuki> boring game too
12:55 <+bridge> <Ryozuki> csgo is better
12:55 <+bridge> <Learath2> Ofc, the music is amazing and the story is pretty interesting
12:55 <+bridge> <Ryozuki> oh it has story
12:55 <+bridge> <Learath2> And it has waifus, it's good enough for me
13:00 <+bridge> <Learath2> @Patiga have you been writing an essay for the last hour or is mobile discord glitching? 😄
13:01 <+bridge> <Patiga> scrolling through the chat, I blame discord :bluekitty:
13:03 <+bridge> <Patiga> @Jupeyy_Keks btw what was your reasoning to drop the texture atlas? most of them do not have pixels at the borders of each segment. for example skin, emote, (most?) of game
13:03 <+bridge> <Jupstar ✪> That still scales them a bit
13:04 <+bridge> <Patiga> what scales them?
13:04 <+bridge> <Jupstar ✪> Because u have to remove texeloffset
13:04 <+bridge> <Jupstar ✪> From the texture coordinates
13:04 <+bridge> <Jupstar ✪> If u don't do this, it will bleed
13:05 <+bridge> <Patiga> ow what is a texel-offset?
13:05 <+bridge> <Patiga> if the textures within the atlas don't touch the border, it shouldn't be a problem, right?
13:05 <+bridge> <Jupstar ✪> If ur IMG is 1024*1024 it's 1/1024
13:05 <+bridge> <Jupstar ✪> But then it's luck
13:05 <+bridge> <Jupstar ✪> It only works under this circumstance
13:06 <+bridge> <Patiga> afaik we don't have anti-aliasing on guns and tees, right?
13:07 <+bridge> <Jupstar ✪> We don't do multi sampling for individual render calls
13:07 <+bridge> <Jupstar ✪> Only full screen
13:08 <+bridge> <Jupstar ✪> Or only framebuffer
13:08 <+bridge> <Jupstar ✪> Would be more correct
13:08 <+bridge> <Patiga> I'm confused. multi-sampling != mip-maps, right? did I falsely believe that ddnet uses mip-maps?
13:09 <+bridge> <Jupstar ✪> Ddnet uses mipmap
13:10 <+bridge> <Patiga> alongside multi-sampling, or are they used in different places?
13:10 <+bridge> <Ravie> yeah?
13:11 <+bridge> <Jupstar ✪> We only use multi sampling on the global framebuffer
13:11 <+bridge> <Jupstar ✪> We don't implement any other kind of anti aliasing
13:12 <+bridge> <Patiga> so we render a larger image and then multi-sample it down?
13:12 <+bridge> <deen> Doesn't matter much for a game. For some DBMSes I consider it essential not to crash on OoM, but to handle it better
13:14 <+bridge> <Jupstar ✪> I'm a bit confused rn. Why larger image
13:15 <+bridge> <Jupstar ✪> Ssaa, super sampling, does that afaik
13:15 <+bridge> <Jupstar ✪> Multi sample averages between neighbors pixels. Or is the name ambiguous?
13:16 <+bridge> <Patiga> > We only use multi sampling on the global framebuffer
13:16 <+bridge> <Patiga> I didn't understand this. is the global framebuffer the frame that gets presented, or one step before that?
13:17 <+bridge> <Jupstar ✪> That's a hard question. It's actually multiple framebuffer images that combine into one in the last step xD
13:17 <+bridge> <Ewan> i'm sure this has been answered recently enough but i can't find it
13:17 <+bridge> <Ewan> how do you get the check mark on your server? i see kog also has it so i know it's not ddnet exclusive, what hoops do you have to jump through to get "verified"
13:17 <+bridge> <Jupstar ✪> So u could say it's after the fragment shader but before written to the output image i think
13:18 <+bridge> <Jupstar ✪> @Patiga i feel like we drifting away, what was the original question?
13:18 <+bridge> <Jupstar ✪> Why I do pixel perfect
13:19 <+bridge> <Jupstar ✪> BCS without Texel offsets we can bleed
13:19 <+bridge> <Jupstar ✪> Even if just hypothetically
13:19 <+bridge> <Jupstar ✪> At least the hook would bleed
13:19 <+bridge> <Jupstar ✪> Since the chain hits the edge
13:20 <+bridge> <Patiga> true, I currently handle the hook differently because it has to be rendered alongside the tee
13:21 <+ChillerDragon> Still not too sure on how to read rust docs how do i create a CStr that is not nul terminated? https://doc.rust-lang.org/core/ffi/struct.CStr.html
13:21 <+bridge> <Patiga> so you have a texture for each atlas segment if I understand correctly, does that mean you have one draw call for each body part of each tee?
13:22 <+ChillerDragon> ah this should do ``CStr::from_bytes_until_nul()`` sorry for rubberducking in this channel
13:22 <+bridge> <Ryozuki> cstr is null terminated
13:22 <+bridge> <Ryozuki> a str or string isnt
13:22 <+bridge> <Patiga> ChillerDragon: is there context to your message in the chatlog? I don't think you are supposed to have a CStr without a nul byte
13:23 <+ChillerDragon> no context no brain
13:23 <+ChillerDragon> i probably do it wrong xd
13:23 <+bridge> <Ryozuki> what r u doing
13:23 <+bridge> <Ryozuki> cstr is only useful for ffi
13:23 <+ChillerDragon> trying to print a message in rust xd
13:23 <+bridge> <Ewan> why using cstr
13:23 <+bridge> <Ryozuki> check the example code
13:23 <+bridge> <Ewan> usnafe
13:23 <+ChillerDragon> im segfaulting since 1h on hello world
13:23 <+bridge> <Ryozuki> cstr is safe
13:23 <+bridge> <Jupstar ✪> Yes
13:24 <+bridge> <Ewan> does it guarantee termination
13:24 <+bridge> <Ryozuki> define termination
13:24 <+bridge> <Ewan> \0 at the end
13:24 <+bridge> <Ryozuki> cstr guarantees the str has a nul byte
13:24 <+bridge> <Ryozuki> its the stupid C requirement
13:24 <+bridge> <Patiga> also for each single particle? seems not that trivial to group them @Jupeyy_Keks
13:24 <+bridge> <Ryozuki> in rust code itself u should use str though, its more optimized
13:24 <+bridge> <Ewan> to be fair the only other way was to keep track of string lengths directly which would be even more of a pain
13:24 <+bridge> <Jupstar ✪> No
13:24 <+bridge> <Ewan> but yes i hate c string termination too
13:25 <+bridge> <Ewan> anyone know
13:25 <+bridge> <Jupstar ✪> It gets grouped as much as possible
13:25 <+bridge> <Jupstar ✪> But the particle groups are new draw calls indeed
13:25 <+bridge> <Ryozuki> chiller check rust_version.rs
13:26 <+ChillerDragon> ah no ryo in tw codebase im rust wizzard dont worry
13:27 <+ChillerDragon> im trying to log to console in libtw2 wireshark dissector
13:27 <+ChillerDragon> i kinda manage but it segfaults or doesnt print at all
13:27 <+bridge> <Jupstar ✪> But since u ask I'd only allow squares for particles here and use a texture array rather than atlas
13:27 <+ChillerDragon> https://zillyhuhn.com/cs/.1683890856.png
13:27 <+ChillerDragon> F
13:28 <+bridge> <Ryozuki> in ffi u have to be careful on the rust side
13:28 <+bridge> <Ryozuki> if u pass a object to cpp
13:28 <+bridge> <Ryozuki> cuz rust drops
13:28 <+bridge> <Ryozuki> use leak to give ownership to cpp side
13:28 <+ChillerDragon> if i def it in place?
13:28 <+bridge> <Ryozuki> mem forget
13:28 <+ChillerDragon> hm k
13:28 <+bridge> <Ryozuki> drop happens at the end of scope
13:28 <+bridge> <Ryozuki> https://doc.rust-lang.org/std/mem/fn.forget.html
13:29 <+ChillerDragon> ye got it
13:29 <+ChillerDragon> thanks
13:29 <+ChillerDragon> ima try
13:30 <+bridge> <Ryozuki> u can also use https://doc.rust-lang.org/std/mem/struct.ManuallyDrop.html
13:30 <+bridge> <Ryozuki> https://doc.rust-lang.org/std/mem/fn.forget.html#relationship-with-manuallydrop
13:30 <+bridge> <Patiga> ah do you actually group the entire particles png together in an texture-array, or only the same-sized ones? if you do actually group the entire thing together, would you consider also grouping the entire game.png together?
13:31 <+ChillerDragon> still abort ._.
13:32 <+ChillerDragon> maybe its wireshark commiting suicide because i use fatal log level
13:32 <+bridge> <Ryozuki> try debug level
13:33 <+bridge> <Jupstar ✪> Currently it's not done at all. I don't think that our particle system is build in a intelligent way anyway
13:33 <+bridge> <Jupstar ✪> 
13:33 <+bridge> <Jupstar ✪> I think we already talked about pros and cons
13:33 <+bridge> <Jupstar ✪> 
13:33 <+bridge> <Jupstar ✪> 
13:33 <+bridge> <Jupstar ✪> Generally batching is obv better of the runtime. However it also means that u either need own sampling as for texture atlasses. Or u need texture arrays with equally sized images. Game PNG is simply too diverse for that
13:33 <+bridge> <Jupstar ✪> If we wouldn't care about ogl1.x I'd do the first
13:34 <+ChillerDragon> ok got it finally it was be not being able to rtfm https://zillyhuhn.com/cs/.1683891254.png
13:34 <+bridge> <Learath2> Mh the checkmark thing was supposed to be ddnet only. But then people started aggressively ddosing the masters, so we had to add some 3rd party servers to info.json, those ended up also getting the checkmark
13:35 <+ChillerDragon> @heinricj5991 did you code ur dissector without print driven debugging? xd
13:35 <+bridge> <Learath2> So there is no process for it since it's not even intended as far as I know
13:35 <+bridge> <Patiga> I do realize we were here before, but we do come from the direction off ddnet this time ^^. well if you would choose batching, would you go the texture atlas or texture array path? :)
13:35 <+bridge> <Jupstar ✪> @Patiga u can also do multi texturing if u write a pipeline for all game elements anyway
13:35 <+bridge> <Jupstar ✪> U should have a guarantee of 16 images per shader
13:36 <+bridge> <Jupstar ✪> Maybe in fact I'd do that
13:37 <+bridge> <Patiga> hm that does seem a bit extreme, even to me :p. The different images do seem mostly separated in a sensible way (except that game png and skin png mix during tee rendering)
13:38 <+bridge> <Jupstar ✪> What is extrem?
13:38 <+bridge> <Patiga> well I feel like I try to batch together much more stuff than ddnet currently does
13:38 <+bridge> <Patiga> (and at times am struggling coz of this a little ^^)
13:39 <+bridge> <Jupstar ✪> The only downside is that it doesn't lay in continuous memory which might hurt the cache a tiny bit
13:39 <+bridge> <Patiga> and throwing literally everything into the same shader goes quite extreme in that direction
13:39 <+bridge> <Jupstar ✪> And how does multi texturing prevent that
13:39 <+bridge> <Ewan> how did KOG and noby's get it?
13:40 <+bridge> <Jupstar ✪> Mh thinking of it, maybe only newer ogl versions allow index accessing a shader array tho
13:40 <+bridge> <Patiga> with multiple images attached you do get the problem of not being able to use the simple textureSample, because it isn't safe to use when in the same execution unit you might need to sample different textures (in wgpu its called non-uniform control flow)
13:40 <+bridge> <Jupstar ✪> Sampler array*
13:41 <+bridge> <Jupstar ✪> Even for indexing?
13:41 <+bridge> <Learath2> The second sentence. During the big ddos incident the masters were completely unusable, so we had to put some people in the ddnet list
13:42 <+bridge> <Learath2> (the ddnet list used to be over http even before the http masters)
13:42 <+bridge> <Ewan> I don't get it. Were they ddossing based on the check mark?
13:43 <+bridge> <Patiga> no, not for indexing. I thought you wanted to have multiple textures in your bind group and choose dynamically which one to sample (your number 16, led me to believe that somehow)
13:43 <+bridge> <heinrich5991> please do not lazily diminish other people's work
13:44 <+bridge> <Learath2> Servers inside ddnet-info.json get the checkmark. When the master servers were down, people could only play on ddnet servers. People asked us to add other servers to our list so they can show up aswell even when the masters are down. We add servers to the list, they get the checkmark as a side-effect
13:44 <+bridge> <Ewan> Oh I see
13:45 <+bridge> <Jupstar ✪> Yes I want that over an index xd
13:45 <+bridge> <Patiga> xd
13:45 <+bridge> <Patiga> I don't think that is a thing
13:45 <+bridge> <Jupstar ✪> I dunno
13:45 <+bridge> <Jupstar ✪> I am sure desktop GPUs should support it
13:45 <+bridge> <Ewan> Is there a way to get put into ddnet-info.json or do we just have to deal with being unavailable when the masters are down (and showing up lower in the server browser :/)
13:45 <+bridge> <Ryozuki> https://www.merriam-webster.com/dictionary/banter
13:45 <+bridge> <Patiga> and if it was, the problem with the normal texture-sampling function should still be tehre
13:46 <+bridge> <Jupstar ✪> Why
13:47 <+bridge> <heinrich5991> why do you add default params if you pass it all the time anyway?
13:47 <+bridge> <Ryozuki> cuz robyt asked
13:47 <+bridge> <Learath2> This was back in the day when the masters weren't http, current masters proved pretty resilient so there isn't need for that anymore. We have an issue somewhere github on how to revamp the internet tab #6506
13:47 <+bridge> <Ewan> it's good practice
13:47 <+bridge> <DDNet> https://github.com/ddnet/ddnet/issues/6506
13:47 <+bridge> <Ryozuki> no
13:47 <+bridge> <Ryozuki> default params are bad
13:47 <+bridge> <Ewan> is that ahot take
13:47 <+bridge> <Ryozuki> i can remove em if u want @heinrich5991
13:47 <+bridge> <Ryozuki> no its as cold as ice
13:47 <+bridge> <Learath2> Fwiw the checkmark has nothing to do with sorting in the server browser
13:48 <+bridge> <Jupstar ✪> I'd use structs to do what default parameters do
13:48 <+bridge> <Jupstar ✪> That at least doesn't lead to typing the default value all the time
13:48 <+bridge> <Learath2> Oh actually it's #5654
13:48 <+bridge> <DDNet> https://github.com/ddnet/ddnet/issues/5654
13:48 <+bridge> <Robyt3> I'd also would preferred not passing the value explicitly if it's equal to the default. Default parameters there would mean that forks don't need to change as much when merging this
13:48 <+bridge> <heinrich5991> open `/proc/self/mem`
13:49 <+bridge> <Patiga> ah you seem to correct with the vulkan feature `SampledImageArrayNonUniformIndexing`
13:49 <+bridge> <Patiga> hmm wait I should look further first
13:49 <+bridge> <Ewan> funny this is actually exactly what i'm asking about
13:49 <+bridge> <Ryozuki> the places where alpha is epxlicitly and equal to default are mostly because we dont have the mechanisms to get whether our tee and the other differs in team, etc
13:49 <+bridge> <Ewan> for unique servers
13:49 <+bridge> <Ryozuki> less the ones for ur own effects
13:49 <+bridge> <Jupstar ✪> Oh so an extension?
13:50 <+bridge> <Patiga> yeah I think so
13:50 <+bridge> <Ewan> i think the registration system is the best bet
13:50 <+bridge> <Jupstar ✪> But yeah I think that would be the coolest solution
13:50 <+bridge> <heinrich5991> ChillerDragon: to log to the console, use `println!`? ^^
13:51 <+bridge> <Jupstar ✪> But since extension not practical for us xd
13:51 <+bridge> <Learath2> I agree the current situation is less than ideal but there are 2 issues:
13:51 <+bridge> <Learath2> 1) Figuring out what the new internet tab should look like
13:51 <+bridge> <Learath2> 2) Finding a developer that has the time
13:51 <+bridge> <Ewan> why can't internet tab be everyone
13:51 <+bridge> <heinrich5991> probably not needed if you just call a function. it only needs to live as long as teh function call
13:51 <+bridge> <Ewan> let trustworthy parties have the checkmark, don't change how it appears
13:51 <+bridge> <Ewan> would work fine
13:51 <+bridge> <Jupstar ✪> @Patiga the simplest solution would be if textureOffset would also have a parameter for size
13:52 <+bridge> <Jupstar ✪> So textureoffsetanssize
13:52 <+bridge> <Ewan> so just servers in peoples' closets and fakes won't have the check
13:52 <+bridge> <Ryozuki> yeah, but i said if you want to give ownership :p
13:52 <+bridge> <Jupstar ✪> Then atlasses would be useful in an easy way
13:52 <+bridge> <heinrich5991> this is unclear from the outside. people see people bashing others for doing 0.7 work. this doesn't set a good tone for this chat. please stop doing that, even if it's "just a joke"
13:52 <+bridge> <Ryozuki> god
13:52 <+bridge> <Ryozuki> xd
13:52 <+bridge> <Ryozuki> :Pray:
13:52 <+bridge> <Learath2> It's hard to gauge who is trustworthy, it's very subjective. I'm pretty sure @Ryozuki wouldn't like it if his issue was resolved by me sitting here and handing out checkmarks to people I trust 😄
13:53 <+bridge> <Ewan> well it wouldn't just be you
13:53 <+bridge> <Ewan> you elect mods that way don't you?
13:53 <+bridge> <Ewan> clean track record and has been around
13:53 <+bridge> <Ewan> do the same for servers
13:53 <+bridge> <Jupstar ✪> Ok NVM it would cause problems with mipmaps anyway
13:54 <+bridge> <Ryozuki> CEO Learath gives blue checkmarks out
13:54 <+bridge> <heinrich5991> perhaps we can just get rid of the tabs altogether
13:54 <+bridge> <Ewan> oh i like that idea
13:54 <+bridge> <Ryozuki> i would say the outside is empty, i doubt anyone works for 0.7 at this point, just chiller
13:55 <+bridge> <heinrich5991> there are a lot of people watching this chat
13:55 <+bridge> <Ryozuki> we should break compatibility, with 0.7, and with old clients
13:55 <+bridge> <heinrich5991> they see that it's apparently okay to be lazily negative
13:55 <+bridge> <Ryozuki> and rework
13:55 <+bridge> <heinrich5991> (and what I see is not just banter here)
13:55 <+bridge> <Ryozuki> well i said banter to chiller
13:55 <+bridge> <Ryozuki> im not bantering with u
13:56 <+bridge> <Ryozuki> one can say smth as a joke and still hold it in a serious discussion
13:56 <+bridge> <Jupstar ✪> Chiller don't be sad, honey
13:56 <+bridge> <Ryozuki> or smth like that
13:56 <+bridge> <heinrich5991> what I mean is that you actually argue your point; i.e. now it seems like you actually meant it when you said that to chillerdragon
13:56 <+bridge> <Ryozuki> well i meant
13:56 <+bridge> <Ryozuki> it
13:56 <+bridge> <Ryozuki> nothing wrong with it?
13:56 <+bridge> <heinrich5991> yea, anyway. stop bantering in this chat
13:56 <+bridge> <Ryozuki> yep lets be robots
13:56 <+bridge> <Ewan> i don't understand why it's that serious, 0.7 is objectively a much less popular version of the game, therefore in comparison, nearly nobody cares about it
13:56 <+bridge> <Ryozuki> speak formally
13:57 <+bridge> <Patiga> yeah so I would still be interested if you yourself would go with a 1. texture atlas, 2. texture array and stretching all segments to the same size, 3. texture array and some only take up a part of the texture size ^^
13:57 <+bridge> <Ryozuki> daring today arent we
13:57 <+bridge> <Ewan> i've never touched it. i have no bias for or against it
13:57 <+bridge> <Ewan> i'm just saying
13:57 <+bridge> <Jupstar ✪> I think u just have to write it like this @Ryozuki . 0.7 is not interesting for the future of our project in the current state
13:57 <+bridge> <Ryozuki> 0.7 is not interesting for the future of our project in the current state
13:57 <+bridge> <Ewan> lmfao
13:57 <+bridge> <heinrich5991> lol no
13:57 <+bridge> <Learath2> This is what I would do. Remove kog tab (maybe keep ddnet? we do have some extra functionality that idk how to expose to others, like finishes and region filtering), let everyone pass a "group_name", "group_key" in their server info, master server sends sha256(group_key) in the info, client groups by sha256(group_key) under name "group_name"
13:58 <+bridge> <heinrich5991> if we remove kog tab, we remove the ddnet tab IMO
13:58 <+bridge> <Learath2> The only issue is people faking entire networks, for which idk what to do
13:58 <+bridge> <Ryozuki> the way to go is using the http master, enable advanced filter options
13:58 <+bridge> <Ryozuki> like ddnet has
13:58 <+bridge> <Ryozuki> for everyone
13:58 <+bridge> <Learath2> I guess we could let all servers send region, so we can do the region filtering for everyone, the finishes idk how to do
13:58 <+bridge> <heinrich5991> you can say that you're not interested in 0.7 stuff, and you can say that you think it's holding us back
13:58 <+bridge> <heinrich5991> why would you use such corporate speak? it just looks like lies
13:58 <+bridge> <Ryozuki> i say both
13:59 <+bridge> <Ryozuki> well u dont want banter
13:59 <+bridge> <Ryozuki> u rly make it seem like we should be corporate speakers
13:59 <+bridge> <heinrich5991> no
13:59 <+bridge> <heinrich5991> no. I don't want to do that
13:59 <+bridge> <heinrich5991> you're allowed to say negative things
13:59 <+bridge> <heinrich5991> just not lazily
13:59 <+bridge> <Ryozuki> whathever lazily means here
13:59 <+bridge> <Ryozuki> i have put lot of effort into ddnet
13:59 <+bridge> <Ryozuki> where is the laziness
14:00 <+bridge> <Ewan> did you work on 0.7 heinrich
14:00 <+bridge> <Jupstar ✪> I'm honestly struggling with an answer rn. E.g. if u'd write it I'd probably benchmarking it against using more draw calls. For particles it's defs interesting. But for tees that max at like 64 it might not be worth it. But generally spoken I'd probably then accept the badness of texture atlasses and write the sampling itself even if it's harder generally. Texture arrays are simply only interesting for similar sized stuff.. or split the draw ca
14:00 <+bridge> <heinrich5991> lazy means "not putting work into the criticism"
14:00 <+bridge> <Ryozuki> being emotionally invested in ddnet, and seeing work on something that most likely, in my honest opinion, will end up not relevant or unused, is a bit sad
14:00 <+bridge> <Learath2> I guess "your work is shit" vs "your work is shit because you failed to do x, y and z"
14:00 <+bridge> <Ryozuki> we can just improve ddnet more
14:01 <+bridge> <Ewan> he's not even saying it's shit. just that people don't care about it
14:01 <+bridge> <Ryozuki> true, i originally said nobody cares about it
14:01 <+bridge> <Ryozuki> which is not a total lie
14:01 <+bridge> <Ryozuki> nobody is exaggerated, there will always be 1  like chiller
14:01 <+bridge> <Ryozuki> its a way of speaking
14:02 <+bridge> <heinrich5991> for civility, it doesn't really matter whether something is true or not
14:02 <+bridge> <heinrich5991> the way it's said matters
14:02 <+bridge> <heinrich5991> people are free to invest their time into whatever they want. time spent on 0.7 is not necessarily time lost for ddnet
14:02 <+bridge> <heinrich5991> it might just be time lost for playing some game
14:02 <+ChillerDragon> @heinrich5991 "<heinrich5991> ChillerDragon: to log to the console, use `println!`? ^^"
14:02 <+bridge> <Ryozuki> he is free to do whathever he wants yes
14:02 <+ChillerDragon> OMG YES I JUST FIGURED OUT
14:02 <+bridge> <Ryozuki> and me to say that
14:02 <+bridge> <Learath2> Anyway, I need to do real world stuff like doing the dishes. @Ewan Green if you have any ideas about merging all lists put it in the issue, I think the desirables are -> some sort of trust structure -> some way to group servers -> some way to allow advanced filtering for all
14:02 <+bridge> <Ewan> awesome Chiller
14:03 <+ChillerDragon> i fuckin reimplemented all wireshark loggy all day to realize println! wasnt priting because the code was not even compiled xd
14:03 <+bridge> <Ryozuki> wat
14:03 <+bridge> <Ryozuki> how can println not be compiled
14:03 <+bridge> <heinrich5991> he didn't recompile his code
14:03 <+bridge> <Ryozuki> ah
14:03 <+bridge> <heinrich5991> and didn't sanity-check it
14:03 <+bridge> <heinrich5991> always try to check whether your changes are actually there 😉
14:04 <+bridge> <heinrich5991> maybe try to crash at the earliest possible opportunity
14:04 <+bridge> <Patiga> thanks for answering so many questions even forcing an answer to a very opinionated question unprepared :heartw:
14:04 <+bridge> <Patiga> I should probably try to understand the ddnet rendering code some time and not only small extracts of it :happy:
14:04 <+bridge> <Jupstar ✪> How does that work btw. Is that something the rust compiler offers?
14:04 <+bridge> <heinrich5991> no, the linux kernel
14:04 <+bridge> <heinrich5991> you can simply edit your own memory using that file
14:04 <+bridge> <Learath2> https://github.com/ddnet/ddnet/issues/5654#issuecomment-1198010235 I think I like this here, maybe we can make a milestone or something so someone can start implementing it?
14:04 <+bridge> <heinrich5991> and easily do unsafe code
14:04 <+bridge> <Ryozuki> with root right?
14:05 <+bridge> <Jupstar ✪> Ah yeah I see
14:05 <+bridge> <heinrich5991> no, for your own program
14:05 <+bridge> <Ryozuki> why is that allowed tho
14:05 <+bridge> <Jupstar ✪> I think I read that before
14:05 <+bridge> <Learath2> Why not?
14:05 <+bridge> <Jupstar ✪> Ub in safe rust xd
14:05 <+bridge> <heinrich5991> why not? the program can already do it via pointers
14:05 <+bridge> <Ewan> i think the checkmark's presence should be based on some kind of vote, whether a server is verified or not be determined by what the master server says & not any local file. if the server is more robust now then i see no issue in this. as for advanced sorting, idk what that entails so i have no comment for now
14:05 <+bridge> <Ryozuki> i guess
14:06 <+ChillerDragon> now that i built the logger would you be interested heinrich?
14:06 <+bridge> <Jupstar ✪> Couldn't the rust Api prevent it xd
14:06 <+ChillerDragon> https://zillyhuhn.com/cs/.1683893168.png
14:06 <+bridge> <Jupstar ✪> The standard impl
14:06 <+bridge> <heinrich5991> ChillerDragon: if you integrate it with the rust logging system, yes
14:06 <+ChillerDragon> wot is rust logging system
14:06 <+bridge> <Learath2> If you want to expose fs to your user, you need to make your api forbid these things
14:06 <+bridge> <Ryozuki> check tracing
14:06 <+bridge> <Ryozuki> https://docs.rs/tracing/latest/tracing/
14:06 <+bridge> <heinrich5991> I'd probably go with `log` here, but they're interoperable
14:07 <+bridge> <Ryozuki> log is old news
14:07 <+bridge> <Ryozuki> tracing is the future
14:07 <+bridge> <Ewan> log is math
14:07 <+bridge> <heinrich5991> https://docs.rs/log/latest/log/
14:07 <+ChillerDragon> idk what u guys talk about
14:07 <+bridge> <Ryozuki> chiller u know what a logging facade is
14:07 <+bridge> <Ewan> my client just crashed when tabbing into your server ChillerDragon
14:07 <+ChillerDragon> whats the crash log
14:07 <+ChillerDragon> what server?
14:07 <+bridge> <heinrich5991> you basically can't
14:07 <+ChillerDragon> my coding skill is a facade ryo
14:07 <+bridge> <heinrich5991> symlinks will fuck up your day
14:08 <+bridge> <Ryozuki> dont be rude to urself chiller
14:08 <+ChillerDragon> will i get in trouble with heinrich for being rude?
14:08 <+bridge> <Ewan> nvm i'm silly
14:08 <+bridge> <Ryozuki> idk
14:08 <+bridge> <Ewan> i mistook one of these ki-o ones for one of urs
14:08 <+bridge> <Jupstar ✪> I'd not allow any Io directly
14:08 <+ChillerDragon> anyways heinrich here is what i have what u said sounds like work i will leave it here https://github.com/heinrich5991/libtw2/compare/master...ChillerDragon:libtw2:pr_add_ws_log
14:09 <+ChillerDragon> yo @heinrich5991 you got motivation to help me debug https://github.com/heinrich5991/libtw2/pull/78 ?
14:10 <+ChillerDragon> it doesnt show up in the dissector somehow ;_;
14:10 <+bridge> <heinrich5991> ChillerDragon: you only need to do this: https://docs.rs/log/latest/log/#implementing-a-logger
14:10 <+bridge> <heinrich5991> you'll learn a bit about rust 😉
14:10 <+ChillerDragon> i rust pro no need to learn
14:10 <+bridge> <Voxel> inkscape allows you to export in batches
14:11 <+bridge> <Ryozuki> i would also make dbg_log a safe wrapper, somehow
14:11 <+ChillerDragon> @heinrich5991 i dislike learning i am a result driven developer i only try to unserstand or learn something if I REALLY have to. otherwise its try and error until i get my gaming moment results
14:11 <+bridge> <heinrich5991> I see
14:12 <+bridge> <Jupstar ✪> @Patiga do u still use texture arrays for tee rendering? That's a part where I'd say it's more complex, and I'd love to see the performance cost of updating the array ^^
14:12 <+bridge> <heinrich5991> permalink btw: https://github.com/heinrich5991/libtw2/compare/heinrich5991:0352e6f...ChillerDragon:c35fe8c
14:12 <+bridge> <Jupstar ✪> E.g. downloaded skins
14:12 <+ChillerDragon> ye the link i sent is totally scuffed xd
14:12 <+bridge> <Ryozuki> u can use <> to not embed btw
14:12 <+bridge> <heinrich5991> yea… unfortunately it changes the message I send to IRC
14:13 <+bridge> <Ryozuki> but irc should have  no problems tho
14:13 <+bridge> <Ryozuki> hmm now i wonder
14:13 <+ChillerDragon> so wen i compile the dissector shouldnt it also compile gamenet/*/src/msg/connless.rs ?
14:13 <+bridge> <Ryozuki> alacritty highlights the link correctly for me
14:13 <+bridge> <Ryozuki> no <> in the url
14:14 <+bridge> <heinrich5991> that's not where the dissector gets its data from
14:14 <+bridge> <heinrich5991> it gets it from the json
14:15 <+bridge> <heinrich5991> https://github.com/heinrich5991/libtw2/blob/0352e6f2f23e01e17c6212701f8faa166c524522/wireshark-dissector/src/tw7.rs#L24
14:15 <+bridge> <Chairn> read log !! it's about deleting images atlas and splitting it into n files with one doodle per file
14:15 <+ChillerDragon> yes but i generated the json too
14:16 <+bridge> <heinrich5991> I'd say we should put it into a zip file then
14:16 <+bridge> <heinrich5991> so it can still be shared as a whole
14:16 <+bridge> <Ravie> so like splitting game.png into gun.png, bullet.png, grenade.png, hook.png... ?
14:16 <+bridge> <Learath2> refuse to follow any symlinks 😄
14:17 <+bridge> <Ryozuki> symlinks are a security hazard
14:17 <+bridge> <heinrich5991> `/home/user/linktoprocself/mem`
14:17 <+bridge> <Voxel> @Ravie start from here
14:17 <+bridge> <heinrich5991> can you ask the linux kernel not to follow this?
14:18 <+bridge> <Learath2> eeeh idk if linux has a way to avoid TOCTOU there but you can stat it first to see if any path component is a symlink
14:18 <+bridge> <Learath2> but I guess then hardlinks fuck up your day
14:19 <+bridge> <Learath2> (though I think in this case the person who writes the potentially malicious code has access to the underlying system, so no need to worry about symlinks if you don't allow them to create them)
14:19 <+bridge> <heinrich5991> can't hardlink directories
14:20 <+bridge> <Jupstar ✪> How does java prevent it?
14:20 <+bridge> <heinrich5991> it doesn't
14:20 <+bridge> <Jupstar ✪> Mh ok
14:20 <+bridge> <Jupstar ✪> Why does Linux offer it at all xd
14:20 <+bridge> <heinrich5991> probably useful for crashdumps or so
14:21 <+bridge> <Learath2> As said before, if you can access proc mem self you can also just use pointers
14:21 <+bridge> <heinrich5991> or any kind of meta functionality
14:21 <+bridge> <Jupstar ✪> Yeah but java is meant to run in a VM for a reason xD
14:21 <+bridge> <heinrich5991> @Learath2 assuming no symlinks, how do you detect whether the file being opened is something like /proc/self/mem?
14:21 <+bridge> <Learath2> Oh, actually why not run it in a jail?
14:21 <+bridge> <heinrich5991> you can also call native code in java
14:22 <+bridge> <Chairn> exactly
14:22 <+bridge> <Jupstar ✪> Yeah but that's easy to prevent
14:22 <+bridge> <Ryozuki> u can also call java code from rust
14:22 <+bridge> <Jupstar ✪> I'd say
14:22 <+bridge> <Learath2> I can think of one silly way, but it's just a thought experiment. Just generate a pattern in memory at runtime, then scan whatever you opened for it
14:22 <+bridge> <heinrich5991> heh, nice 😄
14:23 <+bridge> <Patiga> yup still on it :D
14:23 <+bridge> <Ryozuki> i read recently valve tracked memory access at places where it was never meant to access to detect cheats
14:23 <+bridge> <Ravie> but why tho? it would break all existing skins and make new ones an even bigger pain to create
14:23 <+bridge> <Ryozuki> script to port
14:23 <+bridge> <Ryozuki> since skins are  structured its easy
14:24 <+bridge> <Ravie> yeah ok
14:24 <+bridge> <Ravie> but also if you make a gameskin then you have to hope that people install all your files and not turn it into some disgusting mix with parts from other ones
14:25 <+bridge> <Ryozuki> why?
14:25 <+bridge> <Ryozuki> do u care what others do
14:25 <+bridge> <Voxel> zip files:
14:25 <+bridge> <Jupstar ✪> Xd
14:25 <+bridge> <heinrich5991> I think this could be handles by zip files
14:25 <+bridge> <Ryozuki> but why limit
14:25 <+bridge> <Ryozuki> the idea is customization
14:25 <+bridge> <Jupstar ✪> U remove Atlas to use zip
14:25 <+bridge> <Jupstar ✪> Lmao
14:25 <+bridge> <Ryozuki> ah u mean for shipping
14:25 <+bridge> <heinrich5991> this way we can name the parts and add/remove them without backcompat
14:26 <+bridge> <heinrich5991> this way we can name the parts and add/remove them without backcompat problems
14:26 <+bridge> <Voxel> we all had the same idea but different ways of saying it
14:26 <+bridge> <Ryozuki> backcompat again :justatest:
14:26 <+bridge> <Jupstar ✪> FBI
14:26 <+bridge> <heinrich5991> without *future* backcompat problems
14:26 <+bridge> <Ryozuki> open up!
14:26 <+bridge> <Jupstar ✪> XD
14:26 <+bridge> <heinrich5991> it does make it a little more annoying to share skins though
14:26 <+bridge> <heinrich5991> it's no longer a single picture
14:26 <+bridge> <heinrich5991> like in #📬submit-skins
14:27 <+bridge> <Ryozuki> make a vote
14:27 <+bridge> <Ryozuki> separated skins + more customizatio or single file skins and status quo
14:27 <+bridge> <Voxel> i guess but at the same time, its muuuch easier to organize and add new items
14:27 <+bridge> <Learath2> remove atlas so you can upload more textures in hopes of breaking older computers :bigbrain:
14:27 <+bridge> <Ryozuki> (stating that old skins are not lost)
14:27 <+bridge> <Ryozuki> the way
14:28 <+bridge> <Ravie> let's be honest, "more customization" will just make people turn their game into an even bigger visual cacophony
14:28 <+bridge> <heinrich5991> is it even more customization?
14:28 <+bridge> <heinrich5991> people can edit a skin file today
14:28 <+bridge> <Ryozuki> u can mix parts easily in the client
14:28 <+bridge> <Learath2> it is easier customization, not more
14:28 <+bridge> <heinrich5991> yea
14:29 <+bridge> <heinrich5991> ah, that's a different thing you're asking for though
14:29 <+bridge> <Voxel> i think thats what ravie is arguing against
14:29 <+bridge> <heinrich5991> we don't need to change the file format for this
14:29 <+bridge> <Ryozuki> yeah but why not
14:29 <+bridge> <heinrich5991> "why not" is not a reason to change something in my book
14:30 <+bridge> <heinrich5991> especially user-facing
14:30 <+bridge> <Ryozuki> my book is the holy bible so it must be respected
14:30 <+bridge> <heinrich5991> for things that are not user-facing, maybe…
14:30 <+bridge> <Learath2> Yeah, change for changes sake isn't that great of an argument
14:30 <+bridge> <Ryozuki> well i think its better organized
14:30 <+bridge> <Ryozuki> i forgot what other reasons are there
14:30 <+bridge> <Learath2> It is better UX if people want to mix and match assets all the time
14:30 <+bridge> <Learath2> but I'm not sure that is a common demand even
14:31 <+bridge> <Ewan> people already mix & match
14:31 <+bridge> <Ravie> mix & ~~match~~
14:31 <+bridge> <Voxel> if anything i just wanted to remove useless pngs
14:31 <+bridge> <Ryozuki> kind of odd to limit others on how they wanna mix the skins
14:32 <+bridge> <Ryozuki> why do u care
14:32 <+bridge> <Voxel> deep
14:32 <+bridge> <heinrich5991> depends on whether this shows on other people's screens
14:32 <+bridge> <Voxel> hes a perfectionist
14:32 <+bridge> <heinrich5991> I care about the fact that people opening the default installation of the game see something like tees
14:32 <+bridge> <heinrich5991> when joining a server
14:32 <+bridge> <Voxel> walking hammers
14:33 <+bridge> <Ryozuki> yeah but default will look the same
14:33 <+bridge> <heinrich5991> well, it depends whether you want to propagate your visuals to other players
14:33 <+bridge> <heinrich5991> it sounds like you want to?
14:33 <+bridge> <heinrich5991> i.e. that everyone sees how you mixed your skins?
14:34 <+bridge> <Ryozuki> by skins i was talking about hud elements
14:34 <+bridge> <Ryozuki> too
14:34 <+bridge> <Ryozuki> but yeah for skins that would happen
14:34 <+bridge> <Ryozuki> for example mixing laser from x and grenade fro my
14:34 <+bridge> <Ryozuki> from y
14:34 <+bridge> <Ravie> cause I think changing the look of the game in thematic batches is better than pure chaos, you can already do it if you edit the png's but the game isn't actively supporting and encouraging you to do it
14:34 <+bridge> <heinrich5991> yea, I don't really care how people view the game oneself
14:34 <+bridge> <Ryozuki> i was mainly talking about that
14:34 <+bridge> <Ryozuki> didnt think about skins
14:35 <+bridge> <Ryozuki> tees
14:38 <+bridge> <Ravie> people who make custom assets do, you don't make it with the purpose of being split for parts and mixed in weird ways that don't look good, it defeats the purpose of even making a set
14:39 <+bridge> <heinrich5991> let's say "you do"?
14:40 <+bridge> <heinrich5991> that's fine, I think we should take that into account before changing anything, since you're obviously one of the people creating custom assets
14:41 <+bridge> <Ravie> yeah I know it's a minority but you should still consider what the purpose of making custom assets really is
14:41 <+bridge> <Ryozuki> i disagree with the statement but meh
14:41 <+bridge> <Ryozuki> its like saying i coded X in a way, and it has a permissive  license, but i dislike you doing Y with it
14:42 <+bridge> <Ryozuki> its for users to use them in whathever way they want
14:42 <+bridge> <Ryozuki> in my opinion
14:43 <+bridge> <Jupstar ✪> Btw we do that anyway internally ^^
14:43 <+bridge> <Learath2> Good good, now we need to find a way to up the vram usage
14:44 <+bridge> <Jupstar ✪> True. 1gb on my 16gb limit is not enough
14:44 <+bridge> <Jupstar ✪> That's less than two tabs of Firefox xd
14:44 <+bridge> <Ravie> well for me personally if my work isn't gonna be used how I intended then there's no point in even making or sharing it
14:45 <+bridge> <Ryozuki> we differ then
14:45 <+bridge> <Ryozuki> for me the amazing thing is how people find ways to use stuff in unexpected or never thought of ways, such as making a programming language
14:45 <+bridge> <Ravie> also it's up to the creator how he licenses his work and what he wants users to do or not do with it
14:45 <+bridge> <Ryozuki> insert alan turing quote here
14:46 <+bridge> <Ravie> programming is much less subjective than art
14:46 <+bridge> <Jupstar ✪> @Learath2 i just want to make one thing clear. I am not wasting memory, it has a purpose.
14:46 <+bridge> <Jupstar ✪> 
14:46 <+bridge> <Jupstar ✪> GC languages that want to be fast kinda have to waste memory by design
14:48 <+bridge> <Jupstar ✪> so i'm new hardwarephil, because it offers more opportunities for better software design and more performance besides the performance increase by the generational improvement that comes anyway
14:48 <+bridge> <Jupstar ✪> isn't that awesome
14:48 <+bridge> <Ryozuki> imho if more memory usage leads to more perf, its not that wasted memory is it
14:49 <+bridge> <heinrich5991> that's awesome — as long as we don't push users away from their old hardware IMO
14:49 <+bridge> <heinrich5991> depends on whether the increased perf has a positive effect or is just neutral
14:50 <+bridge> <Ryozuki> but the art here is used in a program 🤓
14:50 <+bridge> <heinrich5991> for me personally, it probably doesn't matter, because I don't run the game on a lot of FPS. for others, it does matter because they want to have very high FPS
14:50 <+bridge> <Ryozuki> anyway art benefits a lot from what i said too, derivative  works and such
14:50 <+bridge> <Ryozuki> fanart
14:51 <+bridge> <Ryozuki> mix match xd
14:51 <+bridge> <Ryozuki> hardwarephil is not a word sadly
14:52 <+bridge> <Jupstar ✪> but e.g. m1 is a good example, more energy efficient than your laptop, while still having more fps, more RAM etc.
14:52 <+bridge> <Jupstar ✪> 
14:52 <+bridge> <Jupstar ✪> just that apple sucks
14:52 <+bridge> <Jupstar ✪> and their drivers xD
14:52 <+bridge> <Jupstar ✪> the word would also have to be new_hardwarephil xd
14:52 <+bridge> <Jupstar ✪> bcs the new is important
14:52 <+bridge> <Ryozuki> new_safe_hardwarephil
14:53 <+bridge> <Ravie> I have yet to see a "derivative work" that comes anywhere close to the original in our community :justatest:
14:53 <+bridge> <Ryozuki> maybe we idealize teeworlds original art too much
14:53 <+bridge> <Ryozuki> cuz nostalgia or smth
14:53 <+bridge> <Ryozuki> its just a ball
14:53 <+bridge> <heinrich5991> most tee skins are derivative works of the original tee
14:54 <+bridge> <Ravie> I don't mean just original teeworlds art, I often see people mixing skins from Miper, Whis or Demix and it always looks terrible
14:55 <+bridge> <Ryozuki> well its hard to please u, but i understand, just like i find windows terrible
14:56 <+bridge> <Ryozuki> @Learath2 r u still interested in https://github.com/ddnet/ddnet/pull/2754
14:57 <+bridge> <Ryozuki> @heinrich5991 https://github.com/ddnet/ddnet/pull/1264#issuecomment-1408523015
14:57 <+bridge> <Ryozuki> the evening is lasting long xd
14:58 <+bridge> <Ravie> just speaking from the perspective of a huge perfectionist, and I can understand how much work other artists also put into making every pixel look just right, and then it gets twisted by some kid with gimp
14:58 <+bridge> <Ryozuki> dont insult my gimp
14:58 <+bridge> <Ryozuki> :BASEDDEPT:
14:58 <+bridge> <Ravie> I love gimp
14:58 <+bridge> <Ravie> I use all the open source alternatives to adobe products :gigachad:
14:59 <+bridge> <Ryozuki> chad
14:59 <+bridge> <Ryozuki> but u use windows?
14:59 <+bridge> <Ryozuki> :frozen:
14:59 <+bridge> <Ravie> yes but not 11
14:59 <+bridge> <Ravie> when they discontinue win10 I go the linux way:saddo:
15:00 <+bridge> <Learath2> I'm not sure. I don't like how storage works at all. I have a feeling this will break some setups because of how we find data directories
15:00 <+bridge> <Ryozuki> i forgot, does realloc zero memory?
15:00 <+bridge> <Jupstar ✪> every sewcond windows is unusable
15:00 <+bridge> <Learath2> Glow skins lets go
15:00 <+bridge> <Jupstar ✪> even more unusable than it already is xd
15:00 <+bridge> <Learath2> No
15:00 <+bridge> <Ryozuki> ok
15:01 <+bridge> <Ryozuki> i guess i need to get memzero in too
15:01 <+ChillerDragon> true designers use adobeOS over windows
15:01 <+bridge> <Ryozuki> wait libc has memzero?
15:01 <+bridge> <heinrich5991> memset(a, 0, sizeof(a))
15:01 <+bridge> <Ryozuki> ah ok
15:01 <+bridge> <heinrich5991> note the funny parameter order
15:02 <+bridge> <Jupstar ✪> note that it "has" to use int as parameter
15:02 <+bridge> <Jupstar ✪> even tho we talk about bytes
15:02 <+bridge> <Learath2> (dst, src, dst_size) isn't it like this for all mem functions?
15:03 <+bridge> <heinrich5991> I'd have thought it's the src_size
15:03 <+bridge> <Ryozuki> why are memory functions in string.h?
15:03 <+bridge> <Ryozuki> xd
15:03 <+bridge> <Ryozuki> anyway the header doesnt matter cuz im on llvm ir
15:03 <+bridge> <Learath2> Shhhhhh
15:03 <+bridge> <heinrich5991> because strings are just arrays of bytes
15:03 <+bridge> <heinrich5991> mem* functions operate on strings that are not zero-terminated
15:03 <+bridge> <Learath2> Doesn't llvm have a way to set some memory without calling into libc?
15:04 <+bridge> <heinrich5991> str* functions operate on strings that are zero-terminated
15:04 <+bridge> <Ryozuki> to set memory allocated by malloc?
15:04 <+bridge> <Ryozuki> maybe there is a intrinsic
15:04 <+bridge> <Learath2> Memory allocated by malloc isn't any different to any other memory
15:05 <+bridge> <Ryozuki> https://llvm.org/docs/LangRef.html#llvm-memset-inline-intrinsic
15:05 <+bridge> <Ryozuki> oh pog
15:05 <+bridge> <Learath2> Perfect
15:05 <+bridge> <Jupstar ✪> @Ryozuki name ur wrapper
15:05 <+bridge> <Jupstar ✪> 
15:05 <+bridge> <Jupstar ✪> crealloc
15:06 <+bridge> <Ryozuki> its ok
15:06 <+bridge> <Ryozuki> just need to get my open addressed linear probing hashmap done
15:06 <+bridge> <Jupstar ✪> recalloc
15:06 <+bridge> <Jupstar ✪> sounds funny too
15:06 <+bridge> <Ryozuki> i recall freeing this memory
15:06 <+bridge> <Ryozuki> said every c dev
15:08 <+bridge> <Ewan> but i'll do it again just to be safe
15:09 <+bridge> <Ewan> ✅
15:09 <+bridge> <Ryozuki> ```
15:09 <+bridge> <Ryozuki> declare void @llvm.memset.p0.i64(ptr <dest>, i8 <val>,
15:09 <+bridge> <Ryozuki>                                  i64 <len>, i1 <isvolatile>)
15:09 <+bridge> <Ryozuki> ```
15:09 <+bridge> <Ryozuki> seeing this signature reminded me
15:09 <+bridge> <Ryozuki> why memset accepts a int (32 bits)
15:09 <+bridge> <Jupstar ✪> ```c
15:09 <+bridge> <Jupstar ✪> free(malloc(0)); // you are free now, c is freedom
15:09 <+bridge> <Jupstar ✪> ```
15:10 <+bridge> <Ryozuki> and not a char
15:10 <+bridge> <Ewan> it does? >_>
15:10 <+bridge> <Ryozuki> ```
15:10 <+bridge> <Ryozuki> #include <string.h>
15:10 <+bridge> <Ryozuki> void *memset(void *s, int c, size_t n);
15:10 <+bridge> <Ryozuki> ```
15:10 <+bridge> <Ewan> yea why thoe
15:11 <+bridge> <Ewan> share with the class
15:11 <+bridge> <Ewan> i thought it was char
15:11 <+bridge> <Ryozuki> idk thats why am askin
15:11 <+bridge> <Ewan> oh
15:11 <+bridge> <Ewan> i thought it was a statement lol
15:11 <+bridge> <Ewan> mayeb just for filling a pattern
15:11 <+bridge> <Jupstar ✪> not unsigned char u meant xd
15:11 <+bridge> <Ryozuki> ye
15:11 <+bridge> <Ryozuki> i forget about C char stuff
15:11 <+bridge> <zogtib> It couldn't be a `char` it would be a `unsigned char`
15:11 <+bridge> <Jupstar ✪> xd
15:12 <+bridge> <Ewan> correct but signedness is not the question here
15:12 <+bridge> <Jupstar ✪> there are many questions to which there aren't answers
15:13 <+bridge> <Ewan> it seems char literals are actually ints in plain C
15:13 <+bridge> <Ravie> @Ryozuki what's worse, a C program that generates rust code or a rust program that generates C code?
15:13 <+bridge> <Ewan> maybe saves a cast
15:13 <+bridge> <Ryozuki> rust program that generates c
15:14 <+bridge> <Ryozuki> cuz the rust program is safe (if no unsafe)
15:14 <+bridge> <Jupstar ✪> "memset predates (by quite a bit) the addition of function prototypes to C. Without a prototype, you can't pass a char to a function -- when/if you try, it'll be promoted to int when you pass it, and what the function receives is an int."
15:14 <+bridge> <Ewan> it may also be a speed thing. sometimes smaller data is slower to access
15:14 <+bridge> <Ewan> eg why some bools used to also be ints
15:14 <+bridge> <Ewan> despite only needing 1 bit
15:14 <+bridge> <Ravie> but what about the program that it generated
15:15 <+bridge> <Ewan> i think it depends man
15:15 <+bridge> <Jupstar ✪> "prototypes were added during the C89 standardization. Before that, there were only function declarations, which specified the return type, but not the number or type(s) of parameter(s). "
15:15 <+bridge> <Jupstar ✪> ez
15:15 <+bridge> <Ewan> a rust program that generates c could realistically describe any of these new programming languages
15:16 <+bridge> <Ewan> x new lang is like zig in the fact that it makes c, but it's written in rust
15:16 <+bridge> <Ewan> could happen any second...
15:16 <+bridge> <zogtib> What are the quotes for? is that GiPiTed?
15:16 <+bridge> <Jupstar ✪> i teach ryo some awesomeness of c
15:16 <+bridge> <Ryozuki> idk
15:16 <+bridge> <Jupstar ✪> by copying stackoverflow answers
15:16 <+bridge> <Ewan> i think you google it xd
15:16 <+bridge> <Ryozuki> the thing is in llvm ir, you can have a data type of arbitrary bits
15:17 <+bridge> <Ryozuki> and llvm can use that to optimize better
15:17 <+bridge> <Ryozuki> i6 is valid
15:17 <+bridge> <Ewan> yeah
15:17 <+bridge> <Ryozuki> llvm also have infinite registers
15:17 <+bridge> <Ewan> bit packing is done under the hood
15:17 <+bridge> <Ryozuki> its the perfect machine
15:17 <+bridge> <Ryozuki> xd
15:17 <+bridge> <Ewan> std bitset is similar
15:17 <+bridge> <Ewan> a non 8*x bitfield
15:17 <+bridge> <heinrich5991> does it actually do that or do the non-register widths perform worse?
15:18 <+bridge> <Ewan> im sure they perform worse usually
15:18 <+bridge> <Ewan> but it can make optimizations to non 8*x size ints that it couldn't to 8*x ints because they're already optimized...
15:18 <+bridge> <Ewan> but it can make optimizations to non 8\*x size ints that it couldn't to 8*x ints because they're already optimized...
15:18 <+bridge> <Ewan> but it can make optimizations to non 8\*x size ints that it couldn't to 8*x ints because they're already 'optimized'...
15:19 <+bridge> <Jupstar ✪> bitset performs worse or the inifinite registers?
15:19 <+bridge> <Ryozuki> i would say it probs treats the underlying data as register widths, but it can make assumptions about the contents (?) and do optimizatiosn thanks to that
15:19 <+bridge> <Ryozuki> but dont quote on me
15:19 <+bridge> <Ryozuki> i dont know for sure
15:19 <+bridge> <Ewan> i6
15:19 <+bridge> <Jupstar ✪> ah
15:21 <+bridge> <Jupstar ✪> here ryo more c awesomeness
15:21 <+bridge> <Jupstar ✪> struct whatever {
15:21 <+bridge> <Jupstar ✪> char a:3;
15:21 <+bridge> <Jupstar ✪> char b:4;
15:21 <+bridge> <Jupstar ✪> char c:1;
15:21 <+bridge> <Jupstar ✪> };
15:21 <+bridge> <Ewan> like im sure in an application where you're only using 6 bits, using an i8 would still be faster but i6 would be the better candidate because under the hood bit packing can be done to reduce memory footprint
15:21 <+bridge> <Ryozuki> ye i know xd
15:21 <+bridge> <Ewan> but i'm not sure because then pointers become impossible
15:22 <+bridge> <Ryozuki> i4 is used a lot in machine learning iirc
15:22 <+bridge> <Ewan> machine learning has gpu usually
15:22 <+bridge> <Ewan> idk how those work too well
15:23 <+bridge> <Ewan> magic devices
15:23 <+bridge> <Ryozuki> well llvm targets gpus too
15:23 <+bridge> <Ewan> yea
15:23 <+bridge> <Ewan> i have cpu bound brain
15:24 <+bridge> <Jupstar ✪> i wouldn't count on it xd
15:25 <+bridge> <Ewan> i can't see how it would be faster even theoretically
15:25 <+bridge> <Ewan> i can't see how i6 would be faster even theoretically
15:25 <+bridge> <Jupstar ✪> well theoretically it surely can bcs of the memory footprint, but practically u are probably right in almost all cases
15:26 <+bridge> <Jupstar ✪> but somewhere someone finds one case where its not the case
15:26 <+bridge> <Jupstar ✪> 
15:26 <+bridge> <Jupstar ✪> also depends if u mean that it uses less memory in total
15:26 <+bridge> <Jupstar ✪> else ofc not xd
15:26 <+bridge> <Ewan> alignment is the thing here
15:26 <+bridge> <Ewan> we are speaking in bits
15:27 <+bridge> <Jupstar ✪> yeah thats the question did u mean packing multiple data efficiently
15:27 <+bridge> <Jupstar ✪> or only a single i6
15:27 <+bridge> <Ewan> multiple
15:27 <+bridge> <Jupstar ✪> then hard to say, probably its slower, but maybe there is some edge case
15:27 <+bridge> <Ewan> single wouldn’t really make a different usually because it would probably just be given those extra 2 bits
15:27 <+bridge> <Ewan> cuz you cant pack the next data
15:28 <+bridge> <Jupstar ✪> similar to if loading a zip and uncompress it might be faster than loading the whole file as is
15:28 <+bridge> <Jupstar ✪> but the calculations with it would be a problem
15:28 <+bridge> <Ewan> in practice accessing a non-multiple of 8 piece of data is slower because the cpu will have to first read that data then derive from it the relevant bits
15:29 <+bridge> <Jupstar ✪> but that mostly happens on the cpu
15:29 <+bridge> <Jupstar ✪> with registers
15:29 <+bridge> <Learath2> Ancient signature, probably from back before c89 even, so it'd be promoted to int by default
15:30 <+bridge> <Jupstar ✪> anyway before this leads to useless discussions i dunno, but would be interested with some benchmarks for some weird edge cases i cant think of rn
15:30 <+bridge> <Learath2> Fwiw "char" literals are just ints aswell for the same ancient reasons
15:30 <+bridge> <heinrich5991> in C++
15:30 <+bridge> <heinrich5991> in C
15:30 <+bridge> <heinrich5991> not in C++
15:30 <+bridge> <Ewan> ^
15:31 <+bridge> <heinrich5991> `int is_cxx = sizeof(char) == sizeof('C');`
15:31 <+bridge> <Ewan> lol
15:32 <+bridge> <Ryozuki> xd
15:33 <+bridge> <Learath2> `sizeof (char)` is defined to be 1 anyway
15:33 <+bridge> <Ryozuki> i understand  unsigned char is akin to "bytes" in sane languages
15:33 <+bridge> <Ryozuki> signed char for the numeric type, and char?
15:33 <+bridge> <Learath2> So might aswell check `sizeof 'c' == 1`
15:33 <+bridge> <Ryozuki> char for text? xd
15:33 <+bridge> <Jupstar ✪> char is randomly signed or unsigned xdd
15:33 <+bridge> <Jupstar ✪> they roll some dices
15:33 <+bridge> <Learath2> Eeeeeeeeeh
15:33 <+bridge> <Ryozuki> bytes being u8
15:33 <+bridge> <Jupstar ✪> arm got unsigned
15:33 <+bridge> <Jupstar ✪> x86 got signed
15:34 <+bridge> <Ryozuki> &[u8] rusty bytes
15:34 <+bridge> <Learath2> unsigned char is for bytes. char is for text. Try not to think too much of how it's handled internally 😄
15:35 <+bridge> <Jupstar ✪> char_t is for utf8
15:35 <+bridge> <Ryozuki> i love my &str
15:35 <+bridge> <Jupstar ✪> char8_t is for utf8
15:35 <+bridge> <Jupstar ✪> xd
15:35 <+bridge> <heinrich5991> `char` is neither the same as `signed char` nor `unsigned char`
15:35 <+bridge> <Ryozuki> char8_t doesnt ensure its valid utf8 tho
15:35 <+bridge> <Ryozuki> the epic thing in rust is str is valid utf8 always
15:35 <+bridge> <Ryozuki> or ub
15:35 <+bridge> <heinrich5991> plus this fact
15:36 <+bridge> <Ryozuki> utf8 supremacy
15:36 <+bridge> <Jupstar ✪> in a perfect world, there wouldnt be any utf
15:36 <+bridge> <zogtib> plus `char/signed char/unsigned char` could be non 8-bits
15:37 <+bridge> <Jupstar ✪> was there ever a CPU without 8 bits per byte?
15:37 <+bridge> <Jupstar ✪> probably
15:37 <+bridge> <Jupstar ✪> back in the ages
15:37 <+bridge> <Jupstar ✪> 194x
15:37 <+bridge> <Ewan> i remember hearing such a thing
15:37 <+bridge> <Ryozuki> why does memset return the passed pointer?
15:37 <+bridge> <Ryozuki> should i use the new pointer
15:37 <+bridge> <Ewan> it's the same
15:37 <+bridge> <Learath2> The issue isn't the cpu, I think the issue was how the data was to be encoded in transmission
15:38 <+bridge> <Ryozuki> whats wchar_t
15:38 <+bridge> <Ewan> wide char
15:38 <+bridge> <Ewan> 2 byte
15:38 <+bridge> <Ewan> for non ascii
15:38 <+bridge> <Ryozuki> > The wchar_t type is an implementation-defined wide character type. In the Microsoft compiler, it represents a 16-bit wide character used to store Unicode encoded as UTF-16LE, the native character type on Windows operating systems
15:38 <+bridge> <Ryozuki> oh god
15:38 <+bridge> <Jupstar ✪> xD
15:38 <+bridge> <Ewan> oh my god have u never messed with this
15:38 <+bridge> <Ryozuki> i know windows api loves it
15:38 <+bridge> <Robyt3> maybe for chaining or something, like `char *p = memset(alloc(...), ...)`
15:38 <+bridge> <Ewan> try fucking specifying DoShitW on every win32 function ever
15:38 <+bridge> <Ryozuki> and thats why i never touched it
15:38 <+bridge> <Ewan> yea
15:38 <+bridge> <Ewan> painful
15:38 <+bridge> <Learath2> Just use utf8
15:39 <+bridge> <Ryozuki> makes sense
15:39 <+bridge> <Learath2> New winapi can mostly handle it too
15:39 <+bridge> <Ewan> wdym
15:39 <+bridge> <Robyt3> if we only wanted to support Windows 10 and newer then we could also just use UTF-8 with the Windows API
15:39 <+bridge> <Jupstar ✪> LETS GO
15:39 <+bridge> <Robyt3> without converting between `char` and `wchar_t` for every function
15:40 <+bridge> <Ewan> this is how they want you to do it
15:40 <+bridge> <Ewan> ```cpp
15:40 <+bridge> <Ewan> #ifndef UNICODE
15:40 <+bridge> <Ewan> #define UNICODE
15:40 <+bridge> <Ewan> #endif
15:40 <+bridge> <Ewan> 
15:40 <+bridge> <Ewan> DoSomething(); // is a macro; resolves to DoSomethingW, a function
15:40 <+bridge> <Ewan> ```
15:40 <+bridge> <Ewan> ```
15:40 <+bridge> <Ewan> #ifdef UNICODE
15:40 <+bridge> <Ewan> #undef UNICODE
15:40 <+bridge> <Ewan> #endif
15:40 <+bridge> <Ewan> 
15:40 <+bridge> <Ewan> DoSomething(); // is a macro; resolves to DoSomethingA, a function
15:40 <+bridge> <Ewan> ```
15:40 <+bridge> <Ewan> this is how they want you to do it
15:40 <+bridge> <Ewan> ```cpp
15:40 <+bridge> <Ewan> #ifndef UNICODE
15:40 <+bridge> <Ewan> #define UNICODE
15:40 <+bridge> <Ewan> #endif
15:40 <+bridge> <Ewan> 
15:40 <+bridge> <Ewan> DoSomething(); // is a macro; resolves to DoSomethingW, a function
15:40 <+bridge> <Ewan> ```
15:40 <+bridge> <Ewan> ```cpp
15:40 <+bridge> <Ewan> #ifdef UNICODE
15:41 <+bridge> <Ewan> #undef UNICODE
15:41 <+bridge> <Ewan> #endif
15:41 <+bridge> <Ewan> 
15:41 <+bridge> <Ewan> DoSomething(); // is a macro; resolves to DoSomethingA, a function
15:41 <+bridge> <Ewan> ```
15:41 <+bridge> <heinrich5991> the conversion happens on the other side then, no performance on
15:41 <+bridge> <Ryozuki> wmemset ftw
15:41 <+bridge> <Ryozuki> wchar_t *wmemset(wchar_t *wcs, wchar_t wc, size_t n);
15:41 <+bridge> <Ryozuki> `wchar_t *wmemset(wchar_t *wcs, wchar_t wc, size_t n);`
15:41 <+bridge> <Ewan> pain
15:41 <+bridge> <heinrich5991> you  can also (and maybe should) just call `DoSomethingW` directly
15:41 <+bridge> <Ewan> memset w/ sizeof type * count
15:41 <+bridge> <Ewan> depends
15:41 <+bridge> <Learath2> This is one thing I like about newer languages. Proper unicode support
15:41 <+bridge> <Robyt3> yeah, we always call the `W` variant explicity even though we define `UNICODE` and `_UNICODE`
15:41 <+bridge> <Ryozuki> yep yep
15:41 <+bridge> <Ryozuki> @Learath2 but some chose to go the evil way and use utf 16
15:41 <+bridge> <Ewan> yeah this is good the only time this'll bite you in the ass is if using a system that somehow doesn't support unicode (old)
15:42 <+bridge> <Learath2> Windows doesn't even use utf16 technically. They use UCS2
15:42 <+bridge> <Jupstar ✪> u know whats funny?
15:42 <+bridge> <Jupstar ✪> 
15:42 <+bridge> <Jupstar ✪> str functions accept the number of characters istead of the buff size
15:42 <+bridge> <Jupstar ✪> 
15:42 <+bridge> <Jupstar ✪> so
15:42 <+bridge> <Jupstar ✪> wchar_t a[10];
15:42 <+bridge> <Jupstar ✪>  wsprintf(a, std::size(a), L"test %s", L"test"); would be correct while with sizeof(a) would be wrong
15:42 <+bridge> <heinrich5991> lol, that's win98?
15:42 <+bridge> <Ewan> yea
15:42 <+bridge> <Ewan> note `somehow` and `(old)`
15:42 <+bridge> <heinrich5991> no, not UCS-2. they use possible-invalid UTF-16
15:42 <+bridge> <Learath2> When migrating to utf16 they left some bizarre quirks that make using winapi pain
15:43 <+bridge> <Jupstar ✪> i blame c++20
15:43 <+bridge> <Jupstar ✪> why didnt they take the chance with char8_t and extend the std::filesystem to allow utf8 characters
15:43 <+bridge> <Jupstar ✪> and what happens under the hood is not our problem
15:43 <+bridge> <Ryozuki> utf8_t
15:44 <+bridge> <Ryozuki> c# calls it Rune
15:44 <+bridge> <Learath2> https://devblogs.microsoft.com/commandline/windows-command-line-unicode-and-utf-8-output-text-buffer/ I probably sent this blog post a while back but until like 2018 the console was extremely bizarre
15:44 <+bridge> <Ryozuki> https://learn.microsoft.com/en-us/dotnet/api/system.text.rune?view=net-7.0
15:45 <+ChillerDragon> @heinrich5991 sori for all the oopsie daisys you probably could have done it twice in the time you spent reviewing my mess
15:45 <+bridge> <Ewan> std::filesystem is the worst
15:45 <+bridge> <Ewan> because it works pretty much only in theoreticals
15:45 <+bridge> <Ewan> that's probably the one thing i genuinely prefer doing the C way
15:46 <+bridge> <Jupstar ✪> what r u even working for?
15:46 <+bridge> <Jupstar ✪> 
15:46 <+bridge> <Jupstar ✪> r u some secret microsoft dev? xd
15:46 <+bridge> <Learath2> I never used std::filesystem. What's wrong with it?
15:46 <+bridge> <Ewan> it's just strings
15:46 <+bridge> <Ryozuki> TIL about https://linux.die.net/man/3/iob_new
15:46 <+bridge> <Jupstar ✪> @Ewan Green are u playing ddnet?
15:46 <+bridge> <Jupstar ✪> or just chilln here
15:47 <+ChillerDragon> everyone with less than 1k ddnet points should be read only in this channel
15:47 <+bridge> <Ryozuki> xdd
15:47 <+bridge> <Jupstar ✪> xDD
15:47 <+ChillerDragon> i dont wanna hear this rando robyt talk about a game he doesnt play
15:47 <+bridge> <Ryozuki> im trying to play more lately, but i got 7k points anyway
15:48 <+bridge> <Ryozuki> lmao
15:48 <+bridge> <Learath2> Ooh, I hadn't seen this before
15:48 <+bridge> <Ryozuki> robyt is our saviour
15:48 <+ChillerDragon> !rob its a joke ofc we all love you <3
15:48 <+ChillerDragon> !robstr
15:48 <+ChillerDragon> !robster
15:48 <+ChillerDragon> omg xdf 
15:48 <+ChillerDragon> !roby
15:48 <+ChillerDragon> fuck
15:48 <+bridge> <Robyt3> bot is dead
15:48 <+ChillerDragon> how to ping roby
15:48 <+ChillerDragon> !ping
15:48 < chillerbot4> pong
15:48 <+bridge> <Jupstar ✪> good question
15:48 <+bridge> <Jupstar ✪> !robstar
15:49 <+bridge> <Ryozuki> !bugfixer
15:49 <+bridge> <Jupstar ✪> !roberster
15:49 <+bridge> <Ryozuki> weeb pfp = good dev
15:49 <+bridge> <Ryozuki> @Jupeyy_Keks get a vulkan waifu pfp
15:49 <+ChillerDragon> !robster
15:49 <+ChillerDragon> WTRF
15:49 <+bridge> <Ryozuki> u dont even know ur bot
15:49 <+bridge> <Jupstar ✪> give me midjourney access
15:49 <+bridge> <Jupstar ✪> and i generate one
15:49 <+bridge> <Jupstar ✪> !robster
15:50 <+bridge> <Ryozuki> ok wait
15:50 <+bridge> <Jupstar ✪> !jup
15:50 < chillerbot4> @Jupstar ✪
15:50 <+ChillerDragon> https://github.com/ChillerDragon/ddnet-ircbot/blob/adfc747e1eb186fce903fa977939e6d50386b5ac/ping_pong.csv#L9
15:50 <+ChillerDragon> it says here ffs
15:50 <+bridge> <Ryozuki> stable diffusion tho
15:50 <+bridge> <Jupstar ✪> chiller forgot to reload?
15:50 <+ChillerDragon> maybe
15:50 <+ChillerDragon> lemme rebuild docker image
15:50 <+ChillerDragon> docker moment
15:50 <+bridge> <Jupstar ✪> sadly its too bad :/
15:50 <+bridge> <heinrich5991> we don't have anything in the source code to build JSON, we always build it manually using `str_format`
15:50 <+bridge> <Jupstar ✪> it gets better and beter
15:50 <+bridge> <Jupstar ✪> but still too bad
15:50 <+bridge> <Ewan> oh jesus really?
15:51 <+bridge> <Ewan> they should use the lib then
15:51 <+bridge> <Robyt3> I still need to port the `CJsonWriter` from upstream
15:51 <+bridge> <heinrich5991> @kio other than that, there's code in src/engine/server/register.cpp that uses HTTP to post some json. search that file for `Json`
15:51 <+bridge> <Learath2> Yeah, I wanted to do a json builder too for a while now
15:51 <+bridge> <kio> yes but the problem was do it with post
15:51 <+bridge> <kio> oh nice
15:51 <+bridge> <kio> https://cdn.discordapp.com/attachments/293493549758939136/1106579475514261504/image.png
15:51 <+bridge> <kio> i did this work around ahah
15:52 <+ChillerDragon> !rob i added upstream json writer in #5660
15:52 < chillerbot> https://github.com/ddnet/ddnet/issues/5660
15:52 < chillerbot> @Robyt3
15:52 <+ChillerDragon> EZ
15:52 <+bridge> <Jupstar ✪> what does the json writer do?
15:52 <+bridge> <Jupstar ✪> does it use rtti or what
15:52 <+bridge> <Ewan> it probably just formats
15:52 <+bridge> <Ewan> using variant union thing
15:52 <+bridge> <Ryozuki> oh shit nvm, it requires python 3.10 but i removed it on gentoo
15:53 <+ChillerDragon> it does ``system("jq %s > %s")``
15:53 <+bridge> <heinrich5991> ChillerDragon: I'm not sure if the constants `SERVERINFO_LEVEL_MIN`/`SERVERINFO_LEVEL_MAX` add something. I'd either remove them or make them into an enum that names the variants, I think
15:53 <+bridge> <heinrich5991> ChillerDragon: after this is resolved (e.g. by discussing it), could you squash your PR?
15:53 <+bridge> <Jupstar ✪> u can use it on huggingface for free
15:53 <+bridge> <Robyt3> ChillerDragon: nice. if you have the time, extract just the json writer in another PR already, so we can merge it separately
15:53 <+ChillerDragon> constants is the first thing i found to name ranges
15:53 <+bridge> <Jupstar ✪> its sadly even faster than my PC XD
15:54 <+bridge> <heinrich5991> why do you want a name though? it's 0-2 and cannot be changed
15:54 <+ChillerDragon> idk i thought its good style
15:54 <+ChillerDragon> but the info got lost in the rendered json anyways so we can also get rid of it
15:54 <+bridge> <heinrich5991> then let's get rid of it
15:54 <+ChillerDragon> oke sir
15:54 <+bridge> <Ryozuki> OMG
15:54 <+bridge> <Ryozuki> we need to embrace this
15:54 <+bridge> <Ryozuki> https://linux.die.net/man/3/bstring
15:55 <+bridge> <Chairn> i wouldn't call that intrinsic, it's still target dependent. Real intrinsic would be 0 page on DRAM directly
15:55 <+ChillerDragon> squash into one commit with generated code?
15:55 <+bridge> <Ryozuki> its a llvm intrinsic, it handles the target dependent thing for u
15:55 <+bridge> <heinrich5991> also known as mem*
15:56 <+bridge> <Pipou> Does anyone know if it's possible to edit the data of a demo ?
15:56 <+bridge> <Ryozuki> it also allows u to mark volatile
15:56 <+ChillerDragon> it took me so long to get the constants working :( but ye i see ur point
15:56 <+ChillerDragon> waste of time
15:56 <+bridge> <heinrich5991> you can also put it into an enum, if you want names, ChillerDragon
15:56 <+bridge> <Chairn> biggest troll ever, already got beaten by that several times
15:56 <+ChillerDragon> its also not obvious when looking at the json where the number comes from tho right?
15:57 <+bridge> <Chairn> first intel CPU were 4 bits iirc
15:57 <+bridge> <heinrich5991> it's really good fun. sometimes you have to say `< 0` and sometimes you have to say `> 127` to check for ascii
15:57 <+bridge> <Pipou> I have a problem where I see teams that I don't want to see in the rendered video
15:57 <+bridge> <heinrich5991> ChillerDragon: the JSON tries to be machine readable. so it will resolve any constants
15:57 <+bridge> <Chairn> btw, lots of circuits are also 1 bit technically but very fast
15:57 <+ChillerDragon> yea
15:57 <+ChillerDragon> so lets get rid of it
15:57 <+ChillerDragon> otherwise it has no readibility improvements anyways
15:57 <+ChillerDragon> nobody looks into loader.py
15:57 <+bridge> <heinrich5991> okay 🙂
15:58 <+bridge> <heinrich5991> > The memfrob() function encrypts the first n bytes of the memory area s by exclusive-ORing each character with the number 42. The effect can be reversed by using memfrob() on the encrypted memory area.
15:58 <+bridge> <heinrich5991> > 
15:58 <+bridge> <heinrich5991> > Note that this function is not a proper encryption routine as the XOR constant is fixed, and is only suitable for hiding strings.
15:58 <+bridge> <Jupstar ✪> its not impossible but there isnt such demo. if u lucky replace the game tee skins with transparent skins
15:58 <+bridge> <heinrich5991> how did this function get into libc?
15:58 <+bridge> <Jupstar ✪> its not impossible but there isnt such tool. if u lucky replace the game tee skins with transparent skins
15:59 <+bridge> <Jupstar ✪> no way xD
15:59 <+ChillerDragon> @Robyt3 i wanted to do that at first to make step by step stuff easier and less git conflicty but thought nobody would merge a unused upstream feature
15:59 <+bridge> <Learath2> This is not standard C, right??
15:59 <+bridge> <Pipou> That sounds like a clever solution, will do (can't get rid of other players' particles but it should be good enough already)
15:59 <+bridge> <Chairn> does /specteam works in demo?
16:00 <+bridge> <heinrich5991> no, just a libc function
16:00 <+bridge> <heinrich5991> glibc, probably
16:00 <+bridge> <Learath2> Seems like gnu c yeah
16:01 <+bridge> <Chairn> maybe create an issue about this as new idea/feature
16:01 <+bridge> <Pipou> Nope, I can't even see the team
16:01 <+bridge> <Pipou> Both are currently in team
16:01 <+bridge> <Pipou> https://cdn.discordapp.com/attachments/293493549758939136/1106582033389604954/image.png
16:02 <+bridge> <Jupstar ✪> yeah
16:02 <+bridge> <Jupstar ✪> the network code is weird
16:02 <+bridge> <Jupstar ✪> it only sometimes sends the information
16:02 <+bridge> <Ryozuki> xd
16:02 <+bridge> <Pipou> Ah
16:02 <+ChillerDragon> did someone say network code?
16:02 <+ChillerDragon> i became actual tw netcode enjoyer
16:02 <+bridge> <Jupstar ✪> no
16:03 <+bridge> <Jupstar ✪> i think its overcomplex
16:03 <+bridge> <Ryozuki> it is
16:03 <+bridge> <Ryozuki> demo code is all over place
16:03 <+ChillerDragon> ye xd
16:04 <+bridge> <heinrich5991> ChillerDragon: wait. you learned the netcode without any immediate benefit. I thought you did not like learning 🤔
16:05 <+ChillerDragon> i had to learn tw netcode which was a very long and frustrating process to get my desired outcome of uniting all tw playerbases 0.6 and 0.7 and be able to play ctf again with a client that allows me to control the mouse
16:08 <+bridge> <Learath2> I think it might have been easier to fix whatever mouse trouble you have with ddnet
16:08 <+ChillerDragon> teeworlds*
16:08 <+ChillerDragon> i need ddnet client to work on 0.7 to play ctf with OG ctf players
16:08 <+ChillerDragon> because teeworlds client is weird
16:08 <+bridge> <heinrich5991> does your server not support both 0.6 and 0.7?
16:09 <+ChillerDragon> some of my servers yes
16:09 <+ChillerDragon> but no ctf server
16:09 <+bridge> <heinrich5991> I see
16:09 <+ChillerDragon> especially not vanilla ctf servers
16:09 <+ChillerDragon> and also i think it makes a lot of sense to not split the game into ddnet and teeworlds
16:10 <+ChillerDragon> i dont wanna miss out on whats happening in 0.7 or switch clients
16:57 <+bridge> <Ryozuki> ```mlir
16:57 <+bridge> <Ryozuki>     %3 = llvm.mlir.constant(296 : i64) : i64
16:57 <+bridge> <Ryozuki>     %4 = llvm.mlir.null : !llvm.ptr
16:57 <+bridge> <Ryozuki>     %5 = llvm.call @realloc(%4, %3) : (!llvm.ptr, i64) -> !llvm.ptr
16:57 <+bridge> <Ryozuki>     %6 = llvm.mlir.constant(0 : i32) : i32
16:57 <+bridge> <Ryozuki>     %7 = llvm.call @memset(%5, %6, %3) : (!llvm.ptr, i32, i64) -> !llvm.ptr
16:57 <+bridge> <Ryozuki> ```
16:57 <+bridge> <Ryozuki> ez
16:58 <+bridge> <Ryozuki> ```llvm
16:58 <+bridge> <Ryozuki>     %3 = llvm.mlir.constant(296 : i64) : i64
16:58 <+bridge> <Ryozuki>     %4 = llvm.mlir.null : !llvm.ptr
16:58 <+bridge> <Ryozuki>     %5 = llvm.call @realloc(%4, %3) : (!llvm.ptr, i64) -> !llvm.ptr
16:58 <+bridge> <Ryozuki>     %6 = llvm.mlir.constant(0 : i32) : i32
16:58 <+bridge> <Ryozuki>     %7 = llvm.call @memset(%5, %6, %3) : (!llvm.ptr, i32, i64) -> !llvm.ptr
16:58 <+bridge> <Ryozuki> ```
16:58 <+bridge> <Ryozuki> ez
17:31 <+bridge> <Ryozuki> 3 people carrying ddnet :gigachad:
17:31 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106604627295735839/image.png
18:27 <+bridge> <Ryozuki> @deen i think for <https://github.com/ddnet/ddnet/issues/6450> we need you to enable  smth in steam
18:27 <+bridge> <Ryozuki> im looking for something ez  to do next xd
18:33 <+bridge> <Robyt3> I already did that 😄
18:33 <+bridge> <Robyt3> (implement it)
18:34 <+bridge> <Ryozuki> oh nice xd
18:35 <+bridge> <Robyt3> I usually use the github search `is:issue sort:updated-desc is:open -label:needs-discussion -label:to-reproduce -label:incomplete -label:"3rd party" -label:discussion` (with a bookmark) to find the issues to fix
18:35 <+bridge> <Ryozuki> oh nice
18:35 <+bridge> <Ryozuki> issue fix speedrun xD
18:36 <+bridge> <Robyt3> But I think this issue is not solvable anyway, as I explained in the issue "You probably need to select each individual language that the game supports, so unsupported languages don't appear in the list. However this could mean that if a user has Steam configured with a language that's not supported by the Steam API, then the GetCurrentGameLanguage API might default to English, so we cannot use the Steam API to first determine the language, as this 
18:37 <+bridge> <heinrich5991> I can't find this setting in the steam settings
18:37 <+bridge> <heinrich5991> the latter part could be fixed by setting the language to "autoselected" instead of setting it to a concrete thing
18:38 <+bridge> <Robyt3> maybe we can just use the UI language instead of the configured game language
18:38 <+bridge> <Robyt3> the docs say you usually want the game language and not the UI language, but I think it makes more sense here
18:38 <+bridge> <Robyt3> because we don't change the language in the client later, after the game language is changed in the steam settings
18:39 <+bridge> <heinrich5991> but that could be fixed by marking the language as autoselected
18:39 <+bridge> <heinrich5991> also, the game language is the same as the UI language by default, I think
18:40 <+bridge> <Robyt3> yeah, game language just uses the UI language if it's not set specifically for that game
18:40 <+bridge> <Robyt3> what is "autoselected" though?
18:40 <+bridge> <Robyt3> is that a setting you can use?
18:40 <+bridge> <heinrich5991> ye
18:40 <+bridge> <heinrich5991> basically like the nickname
18:41 <+bridge> <heinrich5991> if you don't set one explicitly, it's updated every time you change your steam nick
18:41 <+bridge> <heinrich5991> but if you set it explciitly, it'll no longer be updated
18:49 <+bridge> <Ryozuki> https://github.com/ddnet/ddnet/issues/6139
18:49 <+bridge> <Ryozuki> i dont understand this issue
18:49 <+bridge> <Ryozuki> > First tee joins /team 1 and use /practice
18:49 <+bridge> <Ryozuki> > Second tee joins /team 1 and is stuck there because of practice
18:49 <+bridge> <Ryozuki> > 
18:49 <+bridge> <Ryozuki> > Practice should probably act as if the team started
18:49 <+bridge> <Ryozuki> what does it mean stuck
18:49 <+bridge> <Ryozuki> i tested it and i dont see anything wrong
18:53 <+bridge> <heinrich5991> https://github.com/rust-lang/rust/pull/111111
18:53 <+bridge> <heinrich5991> big numbers
18:53 <+bridge> <Ryozuki> xd
18:54 <+bridge> <heinrich5991> I think this complains about the fact that it *is* currently possible to join a /practice team
18:54 <+bridge> <heinrich5991> because you can't leave a /practice team without dying
18:54 <+bridge> <heinrich5991> not sure if making /practice teams unjoinable is really the best way to solve this
19:01 <+bridge> <Ryozuki> @heinrich5991 awaiting ur input https://github.com/ddnet/ddnet/issues/2762
19:02 <+bridge> <Jupstar ✪> ryo tryhard mode
19:02 <+bridge> <Ryozuki> ye
19:03 <+bridge> <Ryozuki> somebody has to do the dirty work
19:03 <+bridge> <Ryozuki> :kekCapture:
19:03 <+bridge> <Ryozuki> (joke i do nothing)
19:03 <+bridge> <Ryozuki> https://github.com/ddnet/ddnet/issues/3922
19:03 <+bridge> <Ryozuki> wh ocares about centos
19:03 <+bridge> <Ryozuki> close this
19:03 <+bridge> <Ryozuki> :gigachad:
19:03 <+bridge> <Ryozuki> right @Jupeyy_Keks
19:04 <+bridge> <Jupstar ✪> tru
19:05 <+bridge> <Ryozuki> @Jupeyy_Keks <https://github.com/ddnet/ddnet/issues/5699>
19:05 <+bridge> <Ryozuki> is this true
19:05 <+bridge> <Jupstar ✪> i dont think it can cause such insane lags
19:05 <+bridge> <Jupstar ✪> but indeed its not the most efficient implementation
19:06 <+bridge> <Ryozuki> @Jupeyy_Keks https://github.com/ddnet/ddnet/issues/6134
19:06 <+bridge> <Ryozuki> can we render the tune zone config text in place?
19:06 <+bridge> <Ryozuki> xddd
19:07 <+bridge> <Jupstar ✪> mhh sounds hard to do nicely
19:08 <+bridge> <Ryozuki> also rly niche
19:09 <+bridge> <Robyt3> the question is where do you even render the text exactly? would be distracting if it keeps moving while the tee moves
19:09 <+bridge> <Jupstar ✪> yeah^^
19:10 <+bridge> <Ryozuki> close as wontfix?
19:10 <+bridge> <Ryozuki> xd
19:10 <+bridge> <Ryozuki> i vote+ 1
19:10 <+bridge> <Ryozuki> +1
19:10 <+bridge> <Ryozuki> god i cant type
19:10 <+bridge> <Jupstar ✪> we can close 90% as wont fix xDDDD
19:10 <+bridge> <Ryozuki> xdd
19:11 <+bridge> <Ryozuki> i got a idea for a feature
19:11 <+bridge> <Ryozuki> but maybe its too ddnet centric
19:11 <+bridge> <Ryozuki> a tab to show info about ur name, since we can query the json api
19:11 <+bridge> <Ryozuki> points etc
20:28 <+bridge> <Learath2> Do any of you use MATLAB?
20:31 <+bridge> <Ryozuki> why do u ask if we use non-free propietary software
20:31 <+bridge> <Learath2> Because we atleast have one academic here and academics love matlab
20:31 <+bridge> <Patiga> only when I'm forced by university st(u|a)ff
20:31 <+bridge> <Learath2> and there may be people using octave 😄
20:32 <+bridge> <Learath2> Anyway, any idea proprietary software enjoyers?
20:32 <+bridge> <Learath2> https://cdn.discordapp.com/attachments/293493549758939136/1106650060562911333/matlab.png
20:32 <+bridge> <Ryozuki> ask chatgpt
20:33 <+bridge> <Learath2> actually not a bad idea
20:34 <+bridge> <Ryozuki> its sad u cant take a academic course  and not be bombarded by propietary non free software
20:34 <+bridge> <Ryozuki> public teachings ought to be free as in freedom
20:34 <+bridge> <Ryozuki> i had a teacher who was very into pushing this
20:34 <+bridge> <Ryozuki> he wanted to make my high school change all windows into linux
20:34 <+bridge> <Ryozuki> and replace all the programs
20:34 <+bridge> <Ryozuki> gigachad
20:35 <+bridge> <Ryozuki> he was nearing the retarement age too xd
20:35 <+bridge> <Ryozuki> retirement
20:36 <+bridge> <Learath2> they are trying to upgrade the curriculum here but the professors are a bit resistant
20:36 <+bridge> <Learath2> circuit theory moved to python but they still use proprietary spice instead of ngspice
20:37 <+bridge> <Ryozuki> @Learath2 if gov made a law to only use fsf licensed software
20:37 <+bridge> <Ryozuki> it would push and motivate to make better
20:37 <+bridge> <Learath2> linear algebra is moving to python next year I think
20:38 <+bridge> <Patiga> not sure if I parse correctly, are you trying to zip the two cell arrays together?
20:39 <+bridge> <Learath2> Yes, I want to end up with one 2x2 cell array of 1x2 cell arrays
20:40 <+bridge> <Learath2> I think this control theory class will forever be in matlab tho. They use so many proprietary things, I can't imagine it existing without simulink and matlab
20:43 <+bridge> <Patiga> https://stackoverflow.com/questions/26165932/how-do-i-zip-multiple-cell-arrays-together while I don't know enough matlab to understand the solution, this looks good
20:52 <+bridge> <Voxel> i bet it crashes daily and has like a thousand memory leak issues
21:02 <+bridge> <Jennifer Glamann> https://us05web.zoom.us/j/3715679378?pwd=N2VFVzJTV0xUQ3ZyeG02eFZiSVkxUT09
21:02 <+bridge> <Voxel> ew
21:02 <+bridge> <Learath2> Someone on the matlab discord found me something better `cellfun(@(x, y) {x, y}, n, d, 'UniformOutput', false)`
22:12 <+DkrTremos> sera all
23:31 <+bridge> <kio> @Learath2 @Jupeyy_Keks @heinrich5991 my heros i need help
23:33 <+bridge> <Voxel> dont ask to ask
23:33 <+bridge> <kio> 😦
23:33 <+bridge> <kio> crazy
23:33 <+bridge> <Voxel> xd
23:33 <+bridge> <kio> i need to share an object
23:33 <+bridge> <kio> no  wait
23:37 <+bridge> <kio> so, let me explain better, I have my own class, and from there I want to manage everything, be able to hook, send messages in chat, move, jump, disconnect from the server, ... (these are random examples that came to my mind ) but I don't understand how to make my class globally shared in other classes or have access to other classes directly from mine, because I guess I can't reinstantiate a character or player or client object or whatever, I guess I n
23:52 <+bridge> <Anime.pdf> friend classes i suppose
23:53 <+bridge> <kio> how it works
23:58 <+bridge> <Patiga> in c++ you can access your friends privates 😏
23:58 <+bridge> <Patiga> or so I heard
23:58 <+bridge> <kio> xd
23:58 <+bridge> <kio> oke but i never saw a similar thing in other languages
23:59 <+bridge> <Learath2> it's in every oop language you can think of
23:59 <+bridge> <kio> for example, this fucking m_pClient where can i find it without pass that from fucntion params
23:59 <+bridge> <kio> have another name?
23:59 <+bridge> <Learath2> it's called `friend` in every language I can think of
