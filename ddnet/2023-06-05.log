01:33 <+bridge> <Mr.Gh0s7> I'll continue working on it tommorow.
01:33 <+bridge> <Mr.Gh0s7> https://cdn.discordapp.com/attachments/293493549758939136/1115060830921306253/live_map_preview_in_editor.mp4
01:46 <+bridge> <Voxel> imagine having a huge ass map only to have to load it to preview so you can load it to edit
01:47 <+bridge> <louis> oh rly nice feature
01:47 <+bridge> <louis> im a map hoarder so that would be helpful for me
01:53 <+bridge> <Voxel> @Ravie we need an executice decision
02:02 <+bridge> <Ravie> strange feature, takes a lot of space also
02:03 <+bridge> <Ewan> i like it
02:14 <+bridge> <louis> its unused space
02:15 <+bridge> <louis> why not have a [x] Preview checkbox at the bottom
02:17 <+bridge> <Mr.Gh0s7> :pepeH: ye that's a good idea
02:32 <+bridge> <Voxel> heinrich doesnt like toggable features tho
02:32 <+bridge> <Voxel> heinrich doesnt like togglable features tho
02:39 <+bridge> <Mr.Gh0s7> I don't think that adding a toggle function for this adds burden for maintaining
02:46 <+bridge> <Mr.Gh0s7> becuase both the preview and normal would be maintained anyway if that is to be added
03:15 <+bridge> <Ewan> ```cpp
03:15 <+bridge> <Ewan> CMassFileLoader FileLoader(client->m_pStorage, IMassFileLoader::LOAD_FLAGS_ABSOLUTE_PATH);
03:15 <+bridge> <Ewan> FileLoader.SetOperationFailedCallback([](IMassFileLoader::LOAD_ERROR Error, const void *pUser) -> bool {
03:15 <+bridge> <Ewan>     char Message[64];
03:15 <+bridge> <Ewan>     switch(Error)
03:16 <+bridge> <Ewan>     {
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_NOT_INIT:
03:16 <+bridge> <Ewan>         strcpy(Message, "Not init");
03:16 <+bridge> <Ewan>         break;
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_PATH:
03:16 <+bridge> <Ewan>         strcpy(Message, "Invalid path");
03:16 <+bridge> <Ewan>         break;
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_DIRECTORY_UNREADABLE:
03:16 <+bridge> <Ewan>         strcpy(Message, "Directory unreadable");
03:16 <+bridge> <Ewan>         break;
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNWANTED_SYMLINK:
03:16 <+bridge> <Ewan>         strcpy(Message, "Unwanted symlink");
03:16 <+bridge> <Ewan>         break;
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_UNREADABLE:
03:16 <+bridge> <Ewan>         strcpy(Message, "File unreadable");
03:16 <+bridge> <Ewan>         break;
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_TOO_LARGE:
03:16 <+bridge> <Ewan>         strcpy(Message, "File too large");
03:16 <+bridge> <Ewan>         break;
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_REGEX:
03:16 <+bridge> <Ewan>         strcpy(Message, "Invalid regex");
03:16 <+bridge> <Ewan>         break;
03:16 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNKNOWN:
03:16 <+bridge> <Ewan>         [[fallthrough]];
03:16 <+bridge> <Ewan>     default:
03:16 <+bridge> <Ewan>         strcpy(Message, "Unknown error");
03:16 <+bridge> <Ewan> ```
03:16 <+bridge> <Ewan> 2023-06-04 19:12:36 I test: Skin found, 1517 bytes; 'license.txt'
03:16 <+bridge> <Ewan> 2023-06-04 19:12:36 I test: Skin found, 2 bytes; 'test.txt'
03:16 <+bridge> <Ewan> ```
03:16 <+bridge> <Ewan> nice, it's working
03:17 <+bridge> <Ewan> ```cpp
03:17 <+bridge> <Ewan> CMassFileLoader FileLoader(client->m_pStorage, IMassFileLoader::LOAD_FLAGS_ABSOLUTE_PATH);
03:17 <+bridge> <Ewan> FileLoader.SetOperationFailedCallback([](IMassFileLoader::LOAD_ERROR Error, const void *pUser) -> bool {
03:17 <+bridge> <Ewan>     char Message[64];
03:17 <+bridge> <Ewan>     switch(Error)
03:17 <+bridge> <Ewan>     {
03:17 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_NOT_INIT:
03:17 <+bridge> <Ewan>         strcpy(Message, "Not init");
03:17 <+bridge> <Ewan>         break;
03:17 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_PATH:
03:17 <+bridge> <Ewan>         strcpy(Message, "Invalid path");
03:17 <+bridge> <Ewan>         break;
03:17 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_DIRECTORY_UNREADABLE:
03:17 <+bridge> <Ewan>         strcpy(Message, "Directory unreadable");
03:18 <+bridge> <Ewan>         break;
03:18 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNWANTED_SYMLINK:
03:18 <+bridge> <Ewan>         strcpy(Message, "Unwanted symlink");
03:18 <+bridge> <Ewan>         break;
03:18 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_UNREADABLE:
03:18 <+bridge> <Ewan>         strcpy(Message, "File unreadable");
03:18 <+bridge> <Ewan>         break;
03:18 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_TOO_LARGE:
03:18 <+bridge> <Ewan>         strcpy(Message, "File too large");
03:18 <+bridge> <Ewan>         break;
03:18 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_REGEX:
03:18 <+bridge> <Ewan>         strcpy(Message, "Invalid regex");
03:18 <+bridge> <Ewan>         break;
03:18 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNKNOWN:
03:18 <+bridge> <Ewan>         [[fallthrough]];
03:18 <+bridge> <Ewan>     default:
03:18 <+bridge> <Ewan>         strcpy(Message, "Unknown error");
03:18 <+bridge> <Ewan> this is the threaded implementation, i finish this and replace the existing mechanisms
03:18 <+bridge> <Ewan> then i make the async and replace that
03:19 <+bridge> <Ewan> this is the synchronous implementation, i finish this and replace the existing mechanisms
03:19 <+bridge> <Ewan> ```cpp
03:19 <+bridge> <Ewan> CMassFileLoader FileLoader(client->m_pStorage, IMassFileLoader::LOAD_FLAGS_ABSOLUTE_PATH);
03:19 <+bridge> <Ewan> FileLoader.SetOperationFailedCallback([](IMassFileLoader::LOAD_ERROR Error, const void *pUser) -> bool {
03:19 <+bridge> <Ewan>     char Message[64];
03:19 <+bridge> <Ewan>     switch(Error)
03:19 <+bridge> <Ewan>     {
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_NOT_INIT:
03:20 <+bridge> <Ewan>         strcpy(Message, "Not init");
03:20 <+bridge> <Ewan>         break;
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_PATH:
03:20 <+bridge> <Ewan>         strcpy(Message, "Invalid path");
03:20 <+bridge> <Ewan>         break;
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_DIRECTORY_UNREADABLE:
03:20 <+bridge> <Ewan>         strcpy(Message, "Directory unreadable");
03:20 <+bridge> <Ewan>         break;
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNWANTED_SYMLINK:
03:20 <+bridge> <Ewan>         strcpy(Message, "Unwanted symlink");
03:20 <+bridge> <Ewan>         break;
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_UNREADABLE:
03:20 <+bridge> <Ewan>         strcpy(Message, "File unreadable");
03:20 <+bridge> <Ewan>         break;
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_TOO_LARGE:
03:20 <+bridge> <Ewan>         strcpy(Message, "File too large");
03:20 <+bridge> <Ewan>         break;
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_REGEX:
03:20 <+bridge> <Ewan>         strcpy(Message, "Invalid regex");
03:20 <+bridge> <Ewan>         break;
03:20 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNKNOWN:
03:20 <+bridge> <Ewan>         [[fallthrough]];
03:20 <+bridge> <Ewan>     default:
03:20 <+bridge> <Ewan>         strcpy(Message, "Unknown error");
03:20 <+bridge> <Ewan> ```
03:20 <+bridge> <Ewan> 2023-06-04 19:12:36 I test: text file found, 1517 bytes; 'license.txt'
03:20 <+bridge> <Ewan> 2023-06-04 19:12:36 I test: text file found, 2 bytes; 'test.txt'
03:20 <+bridge> <Ewan> ```
03:26 <+bridge> <Ewan> ```cpp
03:26 <+bridge> <Ewan> CMassFileLoader FileLoader(client->m_pStorage, IMassFileLoader::LOAD_FLAGS_ABSOLUTE_PATH);
03:26 <+bridge> <Ewan> FileLoader.SetOperationFailedCallback([](IMassFileLoader::LOAD_ERROR Error, const void *pUser) -> bool {
03:26 <+bridge> <Ewan>     char Message[64];
03:26 <+bridge> <Ewan>     switch(Error)
03:26 <+bridge> <Ewan>     {
03:26 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_NOT_INIT:
03:26 <+bridge> <Ewan>         strcpy(Message, "Not init");
03:26 <+bridge> <Ewan>         break;
03:26 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_PATH:
03:26 <+bridge> <Ewan>         strcpy(Message, "Invalid path");
03:26 <+bridge> <Ewan>         break;
03:26 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_DIRECTORY_UNREADABLE:
03:26 <+bridge> <Ewan>         strcpy(Message, "Directory unreadable");
03:26 <+bridge> <Ewan>         break;
03:26 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNWANTED_SYMLINK:
03:26 <+bridge> <Ewan>         strcpy(Message, "Unwanted symlink");
03:26 <+bridge> <Ewan>         break;
03:26 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_UNREADABLE:
03:26 <+bridge> <Ewan>         strcpy(Message, "File unreadable");
03:26 <+bridge> <Ewan>         break;
03:26 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_TOO_LARGE:
03:26 <+bridge> <Ewan>         strcpy(Message, "File too large");
03:27 <+bridge> <Ewan>         break;
03:27 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_REGEX:
03:27 <+bridge> <Ewan>         strcpy(Message, "Invalid regex");
03:27 <+bridge> <Ewan>         break;
03:27 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNKNOWN:
03:27 <+bridge> <Ewan>         [[fallthrough]];
03:27 <+bridge> <Ewan>     default:
03:27 <+bridge> <Ewan>         strcpy(Message, "Unknown error");
03:27 <+bridge> <Ewan> ```cpp
03:27 <+bridge> <Ewan> CMassFileLoader FileLoader(client->m_pStorage, IMassFileLoader::LOAD_FLAGS_ABSOLUTE_PATH);
03:27 <+bridge> <Ewan> FileLoader.SetOperationFailedCallback([](IMassFileLoader::LOAD_ERROR Error, const void *pUser) -> bool {
03:27 <+bridge> <Ewan>     char Message[64];
03:27 <+bridge> <Ewan>     switch(Error)
03:27 <+bridge> <Ewan>     {
03:27 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_NOT_INIT:
03:27 <+bridge> <Ewan> ```cpp
03:27 <+bridge> <Ewan> CMassFileLoader FileLoader(client->m_pStorage, IMassFileLoader::LOAD_FLAGS_ABSOLUTE_PATH);
03:27 <+bridge> <Ewan> FileLoader.SetOperationFailedCallback([](IMassFileLoader::LOAD_ERROR Error, const void *pUser) -> bool {
03:27 <+bridge> <Ewan>     char Message[64];
03:27 <+bridge> <Ewan>     switch(Error)
03:27 <+bridge> <Ewan>     {
03:27 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_NOT_INIT:
03:27 <+bridge> <Ewan>         strcpy(Message, "Not init");
03:27 <+bridge> <Ewan>         break;
03:27 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_PATH:
03:27 <+bridge> <Ewan>         strcpy(Message, "Invalid path");
03:27 <+bridge> <Ewan>         break;
03:27 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_DIRECTORY_UNREADABLE:
03:27 <+bridge> <Ewan>         strcpy(Message, "Directory unreadable");
03:28 <+bridge> <Ewan>         break;
03:28 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNWANTED_SYMLINK:
03:28 <+bridge> <Ewan>         strcpy(Message, "Unwanted symlink");
03:28 <+bridge> <Ewan>         break;
03:28 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_UNREADABLE:
03:28 <+bridge> <Ewan>         strcpy(Message, "File unreadable");
03:28 <+bridge> <Ewan>         break;
03:28 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_FILE_TOO_LARGE:
03:28 <+bridge> <Ewan>         strcpy(Message, "File too large");
03:28 <+bridge> <Ewan>         break;
03:28 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_INVALID_REGEX:
03:28 <+bridge> <Ewan>         strcpy(Message, "Invalid regex");
03:28 <+bridge> <Ewan>         break;
03:28 <+bridge> <Ewan>     case IMassFileLoader::LOAD_ERROR_UNKNOWN:
03:28 <+bridge> <Ewan>         [[fallthrough]];
03:28 <+bridge> <Ewan>     default:
03:28 <+bridge> <Ewan>         strcpy(Message, "Unknown error");
04:02 <+bridge> <Ewan> i can't find a way to intelligently figure out which storage type a path is without manually specifying, and that's kind of cheeks to do for every path
04:02 <+bridge> <Ewan> so i think i will ask that `STORAGETYPE_BASIC` paths are prepended with `:` and `STORAGETYPE_CLIENT` paths aren't
04:02 <+bridge> <Ewan> or some other special character. not too important
04:03 <+bridge> <Ewan> this is how it's done in Qt anyway more or less
06:46 <+bridge> <chillerdragon> F
06:46 <+bridge> <chillerdragon> (@Jupeyy_Keks)
14:25 <+bridge> <heinrich5991> what's `STORAGETYPE_BASIC` vs `STORAGETYPE_CLIENT`?
14:25 <+bridge> <Ewan> can’t figure out the purpose
14:26 <+bridge> <Ewan> but when i use any of the normal values (TYPE_ALL, etc) ListDirectory from storage fails
14:26 <+bridge> <heinrich5991> ah
14:26 <+bridge> <Ewan> basic seems to do paths in the data dirs, client does absolute paths
14:26 <+bridge> <heinrich5991> I think it's the opposite(?)
14:26 <+bridge> <Ewan> could be, don’t remember
14:26 <+bridge> <Ewan> not at pc
14:26 <+bridge> <heinrich5991> `BASIC` is used for tools, it seems
14:26 <+bridge> <heinrich5991> and `CLIENT` for the client
14:27 <+bridge> <Ewan> interesting
14:27 <+bridge> <Ewan> im hoping to make this thing pretty versatile so breaking a boundary like that doesn’t bother me
14:28 <+bridge> <heinrich5991> the idea is that tools take absolute paths
14:28 <+bridge> <heinrich5991> because you call them from the command line
14:28 <+bridge> <heinrich5991> and the client takes relative paths because it wants to load its data
14:28 <+bridge> <Ewan> yea
14:29 <+bridge> <Ewan> i could also just make you specify the storage type at the time you add the paths to search through
14:29 <+bridge> <Ewan> though that’s a bit sloppier syntactically
14:30 <+bridge> <Ewan> “:skins”, “/some/absolute/path” turns into {“skins”, STORAGETYPE_CLIENT}, {“/some/absolute/path, STORAGETYPE_BASIC}
14:30 <+bridge> <Ewan> “:skins”, “/some/absolute/path” turns into {“skins”, STORAGETYPE_CLIENT}, {“/some/absolute/path”, STORAGETYPE_BASIC}
14:31 <+bridge> <Mr.Gh0s7> it was slow cause I loaded the map every time the preview render was called and not if the selected map filename was changed :kek:
14:32 <+bridge> <Ewan> Jesus
16:44 <+bridge> <Patiga> https://ddnet.org/ -> one of three outcomes:
16:44 <+bridge> <Patiga> 1. SSL handshake failed
16:44 <+bridge> <Patiga> 2. Cloudflare banner
16:44 <+bridge> <Patiga> > This website ddnet.org/ is currently offline. Cloudflare's Always Online™ shows a snapshot of this web page from the Internet Archive's Wayback Machine. To check for the live version, click Refresh.
16:44 <+bridge> <Patiga> 3. Site loads normally
16:46 <+bridge> <Patiga> for me it switches between the 3 outcomes when I do cache override reload (ctrl + shift + r in firefox)
17:14 <+bridge> <heinrich5991> works for me™
17:14 <+bridge> <heinrich5991> still broken for you?
17:16 <+bridge> <KarToN TV> beans with jam
17:20 <+bridge> <Patiga> now it also works for me consistently. I had that issue yesterday in the afternoon already
17:23 <+bridge> <Patiga> huh my message in your reply has the enumeration switched out with normal bullet points
17:23 <+bridge> <Jupstar ✪> i had ddnet org issue too when u wrote it
17:24 <+bridge> <Patiga> nice at least I'm not crazy :brownbear:
17:25 <+bridge> <Jupstar ✪> do you use dns over https?
17:25 <+bridge> <Jupstar ✪> i use cloudflares dns over https on the browser it tested with 😄
17:25 <+bridge> <Patiga> ow how do I know?
17:25 <+bridge> <Jupstar ✪> its a firefox setting
17:26 <+bridge> <Patiga> I got it on `Use system proxy settings`
17:26 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1115300730828496996/image.png
17:27 <+bridge> <Patiga> ah no I don't have that checkmark ticked
17:27 <+bridge> <Tater> ah I thought I was crazy that I couldnt close the menu sometimes
17:28 <+bridge> <Jupstar ✪> 😬
17:28 <+bridge> <Jupstar ✪> quick merge
17:29 <+bridge> <Patiga> @Jupeyy_Keks hook rendering has so many quirks that I'm considering writing a small block post about it
17:30 <+bridge> <Jupstar ✪> bcs of the hook  (physics) itself? or the rendering itself?
17:30 <+bridge> <Patiga> maybe I can also find some nice topic to write about twmap some day
17:30 <+bridge> <Patiga> the rendering
17:30 <+bridge> <Jupstar ✪> what's so quirky about it 😂
17:30 <+bridge> <Jupstar ✪> doesnt it simply render the head and then the chains
17:31 <+bridge> <Jupstar ✪> i find weapons quirky xD
17:31 <+bridge> <Jupstar ✪> they have so many weird extra cases
17:31 <+bridge> <Jupstar ✪> players.cpp is a fat whole mess
17:31 <+bridge> <Jupstar ✪> everything in one function xD
17:32 <+bridge> <Jupstar ✪> the animations, the rendering, the calculatiosn
17:32 <+bridge> <Tater> I tried to add weapons to the ghost tee and realized this. not worth it xd
17:33 <+bridge> <heinrich5991> I wanna have a blog post @Patiga
17:35 <+bridge> <Patiga> how in game.png it doesn't fit into the atlas segment, how the chain and hook tip are ingame the same length but in game.png the tip is 2x longer, how the chain isn't actually centered (minor) how there is a limit on how many segments are rendered, how hook_x and hook_y in the snapshot are not as useful as they sound and I think I forgot one or two things
17:35 <+bridge> <Jupstar ✪> ah xd
17:35 <+bridge> <Jupstar ✪> 0.7 fixed the length thing
17:36 <+bridge> <Jupstar ✪> thats why hooks look different there
17:36 <+bridge> <Patiga> oh interesting
17:36 <+bridge> <Patiga> I haven't really looked at 0.7 rendering yet, I knew the tees look different but didn't know about the hook
17:40 <+bridge> <fokkonaut> Anyone here from Switzerland?
17:42 <+bridge> <Patiga> context: you might remember that I tried to offload a lot of tee rendering into the shader, as an experiment
17:42 <+bridge> <Patiga> weapons are definitely also the most complex part there, I actually index into an weapon-information array to get offsets and sizes, also for the hand, and next I still need to do the muzzle flash and HADOKEN (ninja dash)
17:43 <+bridge> <Jupstar ✪> is your rendering finished?
17:43 <+bridge> <Jupstar ✪> does it perform well?
17:43 <+bridge> <Patiga> https://gitlab.com/Patiga/twgpu/-/blob/01b5736e5045fd30a4355bbf6c0f8c9e0a077c2d/twgpu/src/tee/tee_shader.wgsl
17:45 <+bridge> <Patiga> I only worked little on twgpu the last month, apart from HADOKEN and muzzle flashes I have the tee rendering finished, after that it should only require atlas rendering of other stuff (ik you don't like atlasses ^^)
17:45 <+bridge> <Patiga> ah right emotes are also missing I guess
17:46 <+bridge> <Patiga> but I enjoy working on it, even if don't spend that much time on it rn
17:46 <+bridge> <Jupstar ✪> mh u got quite some branches there, i am actually mostly interested in the performance xd
17:46 <+bridge> <Jupstar ✪> have u thought about opaque optimizations? rendering from front to back
17:47 <+bridge> <Patiga> yea me too, although optimization isn't an actual concern until I feel that I can render 'everything' ^^
17:48 <+bridge> <Patiga> I did think about that a bit, but for me it didn't sound exciting enough to try it out
17:49 <+bridge> <Jupstar ✪> i thought about it quite often already for tile rendering. on the other hand it will 100% generate more draw calls
17:49 <+bridge> <Learath2> This looks insane, right?
17:49 <+bridge> <Learath2> https://cdn.discordapp.com/attachments/293493549758939136/1115306367566237836/shannon-limit.png
17:49 <+bridge> <Jupstar ✪> so only the GPU profits from this
17:49 <+bridge> <Jupstar ✪> and ddnet really isnt very GPU heavy 😄
17:49 <+bridge> <Learath2> The pink line is about 400gbps, there is no way the theoretical maximum of a fiber is 10^11 gbps, right? 😄
17:50 <+bridge> <Patiga> hm twgpu offloads more work to the gpu
17:51 <+bridge> <Jupstar ✪> i mean, doesn't it depend on the cable
17:51 <+bridge> <Patiga> not only tilemap and tees, I also plan to do instance-based rendering for everything else which is rendered as an atlas
17:51 <+bridge> <Learath2> Optical fiber
17:51 <+bridge> <Jupstar ✪> or is this of a single fiber
17:51 <+bridge> <Learath2> Single optical fiber
17:51 <+bridge> <Jupstar ✪> as in a single light beam
17:51 <+bridge> <Jupstar ✪> ah ok
17:52 <+bridge> <Learath2> Noisy channel, max theoretical bitrate is what I was trying to calculate
17:52 <+bridge> <Jupstar ✪> well i dunno the data, but plank length * 2 is probably the smallest possible distinguishable signal? 😂
17:53 <+bridge> <Patiga> q: if nearly nothing in the ddnet texture atlasses (yea ik there are a few exceptions)  touch the borders of the segments, wouldn't it be a okay general fix to just make the borders of each segment transparent manually? most textures should not be affected and a warning could be thrown if the texture was modified. but it would fix the sampling problem of the texture atlas
17:54 <+bridge> <Jupstar ✪> i guess you know my opinion on that
17:54 <+bridge> <Patiga> xd
17:54 <+bridge> <Jupstar ✪> i really dislike "random" solutions
17:54 <+bridge> <Jupstar ✪> or unintuitive
17:55 <+bridge> <Jupstar ✪> the funny thing is that there is no GLSL function for this
17:55 <+bridge> <Jupstar ✪> directly at least
17:55 <+bridge> <Jupstar ✪> just why xD
17:55 <+bridge> <Jupstar ✪> it should be so ez to implement
17:56 <+bridge> <cyberFighter> oh yeah the limit is weird
17:56 <+bridge> <Patiga> I agree that it wouldn't be as clean as possible, but I'd currently argue it should be quite subtle, even in cases where something gets modified
17:56 <+bridge> <Jupstar ✪> https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureOffset.xhtml
17:56 <+bridge> <Jupstar ✪> 
17:56 <+bridge> <Jupstar ✪> this is the biggest troll
17:56 <+bridge> <Jupstar ✪> why does this exists, but not a "max" offset
17:56 <+bridge> <Patiga> hm I don't see how a glsl function has something to do with this, I'm talking about modifying the texture on the cpu
17:57 <+bridge> <Jupstar ✪> see, if u could do
17:57 <+bridge> <Jupstar ✪> texture(sampler, rect_to_sample_in_texels)
17:57 <+bridge> <Jupstar ✪> it would solve all your problems
17:57 <+bridge> <Jupstar ✪> u say sample over this rect
17:57 <+bridge> <Jupstar ✪> and nothing else
17:57 <+bridge> <Jupstar ✪> act as if this rect is a new texture
17:58 <+bridge> <Patiga> true
17:58 <+bridge> <Jupstar ✪> and the offset function is that
17:58 <+bridge> <Jupstar ✪> but only with an offset
17:58 <+bridge> <Jupstar ✪> not an entire rect
17:58 <+bridge> <Jupstar ✪> xD
17:58 <+bridge> <Patiga> oh interesting
17:58 <+bridge> <Jupstar ✪> ok i dunno how the edge clamping is used here
17:58 <+bridge> <Patiga> but its not that exactly right
17:58 <+bridge> <Patiga> it only 'moves' the origin
17:59 <+bridge> <Jupstar ✪> yes but that sounds like it would edge clamp 0, 0
17:59 <+bridge> <Jupstar ✪> and if it can do that, it could also do that for max, max
17:59 <+bridge> <Jupstar ✪> but i'll look into the spec
18:00 <+bridge> <Patiga> > The offset value must be a constant expression
18:00 <+bridge> <Patiga> hm
18:00 <+bridge> <Jupstar ✪> "A limited range of offset values are supported"
18:00 <+bridge> <Jupstar ✪> still, i don't see why GLSL doesn't implement a function like the rect one
18:01 <+bridge> <Patiga> yea that function would be amazing
18:01 <+bridge> <Patiga> does spirv have such a function?
18:01 <+bridge> <Jupstar ✪> i also couldnt really imagine a performance problem with it
18:01 <+bridge> <Jupstar ✪> i dunno
18:01 <+bridge> <Jupstar ✪> i dont know a lot about it
18:02 <+bridge> <Patiga> same, only used it once for that vulkano project ^^
18:02 <+bridge> <Patiga> we found out too late that there is a 'reflect' function xd
18:03 <+bridge> <Jupstar ✪> i could imagine they dont want it bcs of mipmaps
18:03 <+bridge> <Jupstar ✪> for example there is a rectangle texture, which supports smth similar, but doesn't support mipmaps
18:04 <+bridge> <Patiga> eh, for *most* of the mipmaps the uv coordinates could still be used
18:04 <+bridge> <Jupstar ✪> in a "smaller"/higher mipmap the texel would ofc require less coordinates in total
18:04 <+bridge> <Jupstar ✪> but the GPU could not directly access the points
18:04 <+bridge> <Jupstar ✪> as texels
18:04 <+bridge> <Patiga> yea fair
18:05 <+bridge> <Jupstar ✪> yeah tbh, thats the reason
18:05 <+bridge> <Jupstar ✪> simple as that
18:05 <+bridge> <Jupstar ✪> and makes sense too
18:06 <+bridge> <Patiga> would that be reason enough? it could still be used for textures without mip-maps and I would imagine there are many valid use-cases
18:06 <+bridge> <Patiga> btw ddnet doesn't do mipmaps for anything but quads/tilemaps, right?
18:09 <+bridge> <Jupstar ✪> Yes because u could still implement it your own. And it would have a hidden performance cost
18:09 <+bridge> <Jupstar ✪> It uses high quality mipmaps everywhere
18:10 <+bridge> <Jupstar ✪> With high quality i mean biased
18:10 <+bridge> <Jupstar ✪> Towards quality
18:10 <+bridge> <Patiga> I don't think you can implement such a function in a shader
18:10 <+bridge> <Jupstar ✪> You can
18:11 <+bridge> <Jupstar ✪> U can sample neighbour samples using texelfetch
18:11 <+bridge> <Jupstar ✪> And sample your own
18:12 <+bridge> <Jupstar ✪> But it's a bit of work. But u could probs find shaders online that implement linear sampling
18:12 <+bridge> <Patiga> ouch
18:13 <+bridge> <Jupstar ✪> It's struggle anyway
18:14 <+bridge> <Jupstar ✪> Bcs u also need to have cobtrol about the lod
18:14 <+bridge> <Jupstar ✪> For mipmap linear sampling
18:15 <+bridge> <Patiga> oop I'm not super familiar with the rendering code yet so I tried to figure it out ingame and managed to get minor flickering so I assumed there are no mipmaps. darn then I'll really need to rethink using atlasses. maybe I'll still go with them to get the first 'working' version out there
18:17 <+bridge> <Jupstar ✪> `gfx_gl_texture_lod_bias`
18:17 <+bridge> <Jupstar ✪> set this to 0 and u should™️ have "normal" mipmapping calculations
18:18 <+bridge> <Jupstar ✪> u can even set this to 5000
18:18 <+bridge> <Jupstar ✪> to have the ugliest game ever
18:18 <+bridge> <Jupstar ✪> always restart the game
18:19 <+bridge> <Patiga> does it require restarting the game?
18:19 <+bridge> <Patiga> because I just convinced myself setting it to 0 changed stuff without restarting
18:19 <+bridge> <Patiga> but it might've just been my personal `lod_bias`
18:20 <+bridge> <Jupstar ✪> yep ^^
18:21 <+bridge> <Patiga> lmao
18:21 <+bridge> <Patiga> brains are stoopid
18:23 <+bridge> <Patiga> heh, setting it high is hilarious
18:24 <+bridge> <Patiga> https://cdn.discordapp.com/attachments/293493549758939136/1115315292273393786/2023-06-05-182426_1920x1080_scrot.png
18:25 <+bridge> <Jupstar ✪> I mean u could easily do it without restarting in Vulkan and gl3.3 but it we also have a tiny shader compiler in ddnet
18:25 <+bridge> <Jupstar ✪> And the shader compiler wouldn't recompile it
18:26 <+bridge> <Patiga> what do you need the shader compiler for?
18:26 <+bridge> <Patiga> feature detection?
18:27 <+bridge> <Jupstar ✪> To share some code with old gl versions
18:27 <+bridge> <Jupstar ✪> And to add defines
18:27 <+bridge> <Jupstar ✪> It's not really a compiler
18:27 <+bridge> <Jupstar ✪> More a rewrite xd
18:27 <+bridge> <Patiga> ah ^^
18:28 <+bridge> <Patiga> https://cdn.discordapp.com/attachments/293493549758939136/1115316340899708999/2023-06-05-182840_1920x1080_scrot.png
18:29 <+bridge> <Jupstar ✪> But i called it compiler for flex 😂
18:29 <+bridge> <Jupstar ✪> Hot
18:29 <+bridge> <Patiga> nice :p
18:30 <+bridge> <Patiga> do you generate the mipmaps on the gpu or cpu?
18:31 <+bridge> <Jupstar ✪> For OpenGL i can't tell
18:31 <+bridge> <Jupstar ✪> It's a ogl function
18:31 <+bridge> <Jupstar ✪> VK should be gpu
18:31 <+bridge> <Voxel> how much of a size decrease would it be if we removed all backwards compat
18:31 <+bridge> <Jupstar ✪> In what?
18:31 <+bridge> <Jupstar ✪> Code, data files?
18:31 <+bridge> <Voxel> Code
18:32 <+bridge> <jao's hairy kebab> when remove support for outdated 0.6
18:33 <+bridge> <Jupstar ✪> Half of rendering code, Network code would be much smaller BCS we could rely on external packing .
18:33 <+bridge> <Jupstar ✪> I'd blindly guess 25% of all code minimum
18:34 <+bridge> <Patiga> gtg in a min, thanks for the talk @Jupeyy_Keks :)
18:38 <+bridge> <Patiga> one last cheeky question (oh god it got longer): what about array textures instead of atlasses, but with width and height of the maximum segment size. then the textures 1. arent streched, 2. can be easily mipmapped. Had to look it up and I'd estimate > 75% wasted gpu memory space on game.png so no I guess xd
18:39 <+bridge> <Patiga> nice monologue, Patiga 👍
18:39 <+bridge> <Jupstar ✪> I'd probably prefer that over wrong rendering;)
18:40 <+bridge> <Mr.Gh0s7> It works nicely exept for the end of the video where it doesn't clip the contents
18:40 <+bridge> <Mr.Gh0s7> https://cdn.discordapp.com/attachments/293493549758939136/1115319172461772860/live_map_preview_in_editor2.mp4
18:40 <+bridge> <Jupstar ✪> Well they wouldn't fix it without stretching tho
18:40 <+bridge> <Patiga> I'm probably trying too hard to use instancing and grouping stuff together, but its also fun for me
18:41 <+bridge> <Patiga> oh right, welp
18:41 <+bridge> <Patiga> it was a fine idea until confronted with reality
18:41 <+bridge> <Jupstar ✪> it is a cool idea
18:42 <+bridge> <Jupstar ✪> you just fear multi texturing too much 😄
18:42 <+bridge> <Jupstar ✪> except u need this one extension anyway 😂
18:43 <+bridge> <Jupstar ✪> nice
18:43 <+bridge> <Jupstar ✪> u should look into maplayers to see how clipping works
18:44 <+bridge> <Jupstar ✪> ok editor probs also clips
18:44 <+bridge> <Jupstar ✪> u could generally implement this using maplayers
18:44 <+bridge> <Jupstar ✪> would save lot of code dublication
18:44 <+bridge> <Jupstar ✪> background map also uses it
18:45 <+bridge> <Jupstar ✪> u could look how menu_background does it
18:45 <+bridge> <Jupstar ✪> it's very ez
18:45 <+bridge> <Mr.Gh0s7> k ;)
18:45 <+bridge> <Jupstar ✪> for clipping u can also change the viewport itself
18:46 <+bridge> <Jupstar ✪> we should have support for this
18:46 <+bridge> <Jupstar ✪> (i mean clip the whole scene)
18:46 <+bridge> <Jupstar ✪> instead of using Clip functions
18:47 <+bridge> <Jupstar ✪> oh but maplayers implement a menu rendering code, that could suck 😂 
18:47 <+bridge> <Jupstar ✪> but can be disabled ofc
18:48 <+bridge> <Robyt3> to improve the usability once you solve the hard issues: add some kind of arrow button on the right side to expand/collapse the preview instead of using a button at the bottom. you could also add a divider in the middle that can be dragged left and right, same how the envelope editor can be dragged up and down
18:49 <+bridge> <Jupstar ✪> btw have u ever loaded a huge map like arctic festival
18:49 <+bridge> <Jupstar ✪> 32bit users rip for sure xD
18:49 <+bridge> <Mr.Gh0s7> I don't think so
18:49 <+bridge> <Robyt3> and you should disable the editor hotkeys while the file popup is open, it looks like you are scrolling in the editor and preview at the same time
19:04 <+bridge> <Mr.Gh0s7> here's the current code https://github.com/Inateblig/ddnet/commit/7a3980ed36876e09d27def4e62b9ce745e217905
19:06 <+bridge> <Robyt3> ah, so it's behaving so weirdly because it hooks directly into the editor code...
19:06 <+bridge> <Mr.Gh0s7> yeah :/
19:07 <+bridge> <Mr.Gh0s7> now I'm trying to implement it with Jyp's suggestion ;)
19:23 <+bridge> <Chairn> how is shannon rate computed here?
19:39 <+bridge> <Learath2> `R_b = 2 * R_s * log_2(1 + GSNR * R_s/B_n)` this formula really baffles me but it's what's given in the docs for this exercise. `R_s` is the "symbol-rate of the light-path" and `B_n` is the noise bandwidth
19:40 <+bridge> <Chairn> wtf is `symbol-rate of the light-path` ?
19:40 <+bridge> <Chairn> B_n is probably more like signal bandwidth
19:40 <+bridge> <Learath2> I have no idea, this teacher has awful lectures and his work contains all kinds of weird terminology like that
19:40 <+bridge> <Chairn> i guess they used the 500THz of light frequency, but it's an error
19:41 <+bridge> <Learath2> R_s is 32 GHz, B_n is 12.5GHz
19:41 <+bridge> <Learath2> I'm fairly sure 12.5GHz is the bandwidth of the noise
19:41 <+bridge> <Chairn> they should use the bandwidth that they actually use, i.e. something like 499-501 THz, so 2 Thz only
19:42 <+bridge> <Chairn> my formula is B*log2(1+S/N)
19:42 <+bridge> <Learath2> The capacity limit I know is `R_b = B log_2(1 + gsnr)` but I could not figure out what they are doing here and how it relates for the life of me
19:42 <+bridge> <Chairn> good, physics laws are still the same over the Alps
19:42 <+bridge> <Learath2> Maybe I should just mail the dude
19:43 <+bridge> <Voxel> wtf is shannon
19:43 <+bridge> <Learath2> very important compsci guy
19:43 <+bridge> <Chairn> https://en.wikipedia.org/wiki/Claude_Shannon
19:43 <+bridge> <Chairn> <https://en.wikipedia.org/wiki/Claude_Shannon>
19:44 <+bridge> <Chairn> noise bandwidth is already a weird term imo
19:44 <+bridge> <Chairn> noise has infinite bandwidth
19:46 <+bridge> <Learath2> Every single damn course I took in this uni barring the signals one who was courteous enough to upgrade his entire course to more globally used terminology, has used bizarre terminology and weird mistranslated messy material
19:46 <+bridge> <Chairn> why are you there btw?
19:47 <+bridge> <Learath2> cheapest uni with a degree worth something I could go to
19:47 <+bridge> <Jupstar ✪> @Learath2 are you happy that you will have forgotten about this course in around 2 years and never need anything of what you learned ever again
19:48 <+bridge> <Learath2> gets me outside of turkey aswell so that's a bonus
19:48 <+bridge> <Learath2> I am so angry that you couldn't begin to understand, but I'm just biting my tongue and just finishing this experience from hell
19:50 <+bridge> <Learath2> True, what the hell is a noise bandwidth. The fourier transform of WGN is just flat...
19:51 <+bridge> <Chairn> are you at M1 level?
19:51 <+bridge> <Learath2> I'm guessing M1 is masters, no, I'm a lowly bachelor
19:53 <+bridge> <Chairn> you can try to apply to international masters in France
19:53 <+bridge> <Chairn> they'll ask for money, but you can ask for a scholarship
19:54 <+bridge> <Chairn> meanwhile, in France, using Signal can leads you to being trialed as a terrorrist <https://www.laquadrature.net/2023/06/05/affaire-du-8-decembre-le-chiffrement-des-communications-assimile-a-un-comportement-terroriste/>
20:01 <+bridge> <Learath2> I wonder if B_n refers to the equivalent noise bandwidth
20:29 <+bridge> <Mr.Gh0s7> hmm seems hard xD
20:31 <+bridge> <Jupstar ✪> mh?
20:31 <+bridge> <Jupstar ✪> it's ez af 😂
20:31 <+bridge> <Mr.Gh0s7> not the code duplication the implemention of the preview which will use the CMapLayers
20:31 <+bridge> <Jupstar ✪> yeah i also mean that
20:32 <+bridge> <Jupstar ✪> menu_background does that already
20:32 <+bridge> <Jupstar ✪> it should be <100 lines of code
20:35 <+bridge> <Jupstar ✪> i dunno if editor can access client code tho
20:35 <+bridge> <Mr.Gh0s7> yeah that was mainly my problem
20:35 <+bridge> <Jupstar ✪> but its part of the client, so why not
20:35 <+bridge> <Mr.Gh0s7> although I could be doing something wrong
20:35 <+bridge> <Learath2> The slides have the units wrong...... everything is in gbps so this dude copied gbps to the shannon limit too, it's in bits per second :pepeW:
20:36 <+bridge> <Cellegen | RiH> bit sliding :Chill:
20:51 <+bridge> <Learath2> Firefox somehow "broke" after updating, the gentoo life
20:56 <+bridge> <Jupstar ✪> alpha tester
20:56 <+bridge> <Jupstar ✪> 😬
20:59 <+bridge> <heinrich5991> https://jisho.org/search/hadouken
20:59 <+bridge> <heinrich5991> hmmm
21:03 <+bridge> <Ryozuki> i think hadoken is in ddnet code somewhere
21:03 <+bridge> <Jupstar ✪> its the ninja effect
21:03 <+bridge> <Jupstar ✪> the dash
21:04 <+bridge> <Jupstar ✪> https://streetfighter.fandom.com/wiki/Hadoken
21:04 <+bridge> <Jupstar ✪> i guess matricks is streetfighter fan
21:04 <+bridge> <Jupstar ✪> 😂
21:04 <+bridge> <Jupstar ✪> https://static.wikia.nocookie.net/streetfighter/images/1/1e/Ryu-hadoken-artwork.png/revision/latest?cb=20100709171559
21:06 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1115355974048415805/image.png
21:07 <+bridge> <Avolicious> Apple just announced Apple Vision Pro
21:07 <+bridge> <Avolicious> Teeworlds on a new level 😮
21:08 <+bridge> <Jupstar ✪> nice, they invented VR
21:09 <+bridge> <fokkonaut> sometimes with chat open this happens
21:09 <+bridge> <fokkonaut> https://cdn.discordapp.com/attachments/293493549758939136/1115356624547225701/image.png
21:09 <+bridge> <Jupstar ✪> nobody has ever done this before
21:09 <+bridge> <Jupstar ✪> 😬
21:09 <+bridge> <fokkonaut> at least on this one server (some private server by @cyberfighter
21:09 <+bridge> <Jupstar ✪> yeah its some weird glitch with the new SDL/IME stuff
21:09 <+bridge> <fokkonaut> known already?
21:09 <+bridge> <Jupstar ✪> yes, but i dunno any workaround
21:10 <+bridge> <fokkonaut> toke
21:10 <+bridge> <fokkonaut> oke
21:10 <+bridge> <Avolicious> Are you talking about the microsoft hololens? xDDDD
21:10 <+bridge> <Jupstar ✪> that was cool, bcs it was minecraft 😂
21:11 <+bridge> <Avolicious> Lol
21:12 <+bridge> <Avolicious> But tbh, Apple did a great job with Apple Silicon
21:13 <+bridge> <Jupstar ✪> yep
21:13 <+bridge> <Jupstar ✪> but useless without good software
21:13 <+bridge> <Avolicious> True, but every architecture is useless without good software
21:14 <+bridge> <Jupstar ✪> they could stop their ego trip and open up their hardware
21:15 <+bridge> <Avolicious> But this is how they pay their engineers to be that creative and research this
21:15 <+bridge> <Jupstar ✪> i'd also love to pay their engineers 😉
21:16 <+bridge> <Avolicious> then go and buy an apple 🙂
21:16 <+bridge> <Jupstar ✪> sadly they have bad software, else i'd do that
21:16 <+bridge> <Avolicious> Mhmmm which one? The OS itself or just pieces?
21:17 <+bridge> <Jupstar ✪> i am not a musician, so there is nothing interesting from apple
21:18 <+bridge> <Jupstar ✪> 
21:18 <+bridge> <Jupstar ✪> their OS and drivers are buggy, have bad performance in games
21:18 <+bridge> <Jupstar ✪> 
21:18 <+bridge> <Jupstar ✪> so nothing interesting for me
21:18 <+bridge> <Jupstar ✪> for a desktop class CPU
21:18 <+bridge> <Jupstar ✪> for that money i could buy a 4090 and destroy my electricity bill 😂
21:19 <+bridge> <Avolicious> Ah I see, true... gaming is not that great, fair enough
21:19 <+bridge> <cyberFighter> @keb help i noclipped out of a source map
21:19 <+bridge> <Avolicious> But I guess thats not their main market
21:19 <+bridge> <Jupstar ✪> tbh i dont even know what their main market is
21:19 <+bridge> <Jupstar ✪> probably fanboys with too much money
21:19 <+bridge> <Avolicious> 👀
21:20 <+bridge> <Avolicious> Wouldnt say that, but their products work seamlessly mostly
21:20 <+bridge> <Avolicious> Never had problems
21:20 <+bridge> <Jupstar ✪> i mean paying so muhc for video eiditing is probably nothing for everyone 😄
21:20 <+bridge> <Avolicious> I had a lot of androids before, it was a mess to pair bluetooth
21:20 <+bridge> <Jupstar ✪> and the "real" rendering happens on cloud servers anyway
21:20 <+bridge> <heinrich5991> interesting, never had problems with that
21:20 <+bridge> <Jupstar ✪> ah well phones are not interesting to me tbh 😄
21:20 <+bridge> <Avolicious> I had a lot of problems with Bose and OnePlus
21:21 <+bridge> <Avolicious> Had problems with Google Pay
21:21 <+bridge> <Avolicious> Switched to an iPhone some time ago and never had problems at all
21:21 <+bridge> <Jupstar ✪> besides connecting
21:21 <+bridge> <Jupstar ✪> bluetooth in linux and android is indeed the best for me. on windows i get weird crackeling with my bt headphones. But didnt test on ios tbf
21:22 <+bridge> <Jupstar ✪> my headphones are also bose 😄
21:22 <+bridge> <Jupstar ✪> well what do you use your phone for?
21:22 <+bridge> <Avolicious> It was such a mess, always had async audio
21:22 <+bridge> <Jupstar ✪> music and browsing?
21:22 <+bridge> <Avolicious> Mostly planning my day, business, talking, music 😄
21:22 <+bridge> <keb> true
21:22 <+bridge> <Voxel> jup when i make my super bloated graphical client update im going to you for shader advice LOL
21:23 <+bridge> <Voxel> jup when i make my super bloated graphical client im going to you for shader advice LOL
21:23 <+bridge> <Avolicious> And quickly share my notes from iPhone to Mac 😄
21:23 <+bridge> <Jupstar ✪> yeah, sadly for these tasks 1000€+ is quite a banger xD
21:23 <+bridge> <Jupstar ✪> 
21:23 <+bridge> <Jupstar ✪> i could spent that for desktop hardware
21:23 <+bridge> <Jupstar ✪> 
21:23 <+bridge> <Jupstar ✪> But if u have the money, it probably the fastest CPU wise
21:24 <+bridge> <Jupstar ✪> i'd prefer high refresh and polling rate displays
21:24 <+bridge> <Jupstar ✪> so i assume i have to buy samsung :/
21:24 <+bridge> <Avolicious> Its expensive for sure, so think twice before buying. But Samsung isnt better
21:24 <+bridge> <Avolicious> paying 1000€ for a Samsung
21:24 <+bridge> <Voxel> i might make mockups in an art program if i remember
21:24 <+bridge> <Jupstar ✪> not my first choice, bcs all my samsung monitors died exactly after warranty died 😄
21:25 <+bridge> <Avolicious> But its the same with headphones... I only buy BeyerDynamics ( a german company ), but their audio is stunning
21:25 <+bridge> <Avolicious> But they also expensive like Apple
21:32 <+bridge> <deen> Are they? I live half an hour from their headquarter and have always loved the fake 15 € BeyerDynamic (superlux hd330) I have had for > 15 years, and keep buying new (original BeyerDynamic) earpads, which are more expensive than the entire headphones. So I thought I should try the originals, I ordered 3 different ones, from 100 to 500 €. And while they were better, it didn't seem worth the money. I noticed that at the low volumes I use for headpho
21:33 <+bridge> <Avolicious> I had a few others already and have to say, durability, sound and comfort fits best for me
21:33 <+bridge> <heinrich5991> my <50€ bluetooth headphones worked fine for me
21:34 <+bridge> <Avolicious> Its heavily opinionated, everyone has other preferences
21:35 <+bridge> <Jupstar ✪> well there defs is a difference in working fine and having the best audio
21:35 <+bridge> <Avolicious> I had bad experiences with Logitech for example, their headsets broke after 2.5 months each, had to send them in 3 times in a row
21:36 <+bridge> <Jupstar ✪> logitech is always cheap af from materials
21:36 <+bridge> <Jupstar ✪> but they are still well designed
21:36 <+bridge> <Jupstar ✪> 
21:36 <+bridge> <Jupstar ✪> my first logitech headphones were actually coolest for PC headphones, but the collapsable microphone broke after using it too many times xD
21:36 <+bridge> <Jupstar ✪> the mices are great too, but 100% broken after 1 year of teeworlds 😂
21:37 <+bridge> <Avolicious> After Logitech I switched over to SteelSeries, worked better but still problems at some point. Afterwards switched over to Sennheiser and now stuck with Beyerdynamics
21:38 <+bridge> <Avolicious> Yeah, had the Logitech Performance and Mad Catz 😄
21:38 <+bridge> <Avolicious> Mad Catz was fun not gonna lie
21:39 <+bridge> <Avolicious> https://scale.coolshop-cdn.com/product-media.coolshop-cdn.com/AH87VU/9dc3393d72af41ccbd9cb8829c868dd6.jpeg/f/mad-catz-s-t-r-i-k-e-7-gaming-keyboard.jpeg
21:39 <+bridge> <Jupstar ✪> wtf
21:39 <+bridge> <Avolicious> Hahahahahahaa, it was fun to flash the display and deploy your own custom kernel on it
21:39 <+bridge> <Avolicious> I still have it somewhere around
21:39 <+bridge> <Jupstar ✪> looks a bit unhandy for anything else than gaming xD
21:39 <+bridge> <Avolicious> Indeed, it was useless because its not mechanic
21:40 <+bridge> <Avolicious> Ghosting was like every 2nd keypress
21:40 <+bridge> <Jupstar ✪> lmao, but then sell it as gaming keyboard 😄
21:40 <+bridge> <Avolicious> At this time I dont care about, I wanted the small screen
21:40 <+bridge> <Avolicious> It was a bummer, but atleast I had it
22:10 <+bridge> <Chairn> r/programmerhumor on a killing spree
22:10 <+bridge> <Chairn> <https://www.reddit.com/r/ProgrammerHumor/comments/141ke0b/alright_ima_go_ask_chatgpt/>
22:10 <+bridge> <Chairn> @Ryozuki <https://www.reddit.com/r/ProgrammerHumor/comments/14144b3/learn_database_with_anime_style/>
22:10 <+bridge> <Chairn> <https://www.reddit.com/r/ProgrammerHumor/comments/141eohy/ah_shit/>
