03:32 <+bridge> <Headshot> gitlab moment
07:45 <+ChillerDragon> i can recommend https://grep.app/ for searching github
09:24 <+bridge> <deen> I don't manage dbs either. I break them
09:24 <+bridge> <Voxel> the D in deen means "destruction"
09:59 <+ChillerDragon> when downloading a 0.7 map and summing up the size it exceeds the size sent by map change and yet my downloaded mapfile has the correct sha256 sum is that weird? or a known tw protocol bug?
10:00 <+ChillerDragon> dont know if its my reimplementation of the protocol
10:01 <+ChillerDragon> but the official client hides this bug anyways with this clamp https://github.com/teeworlds/teeworlds/blob/26d24ec061d44e6084b2d77a9b8a0a48e354eba6/src/engine/client/client.cpp#L1228
10:01 <+ChillerDragon> even if it gets too much it just clamps it down right to the expected and carrys on as if everything is fine
10:01 <+ChillerDragon> i really do not understand how my code works xd
10:06 <+ChillerDragon> aw F my first gitlab 500 https://zillyhuhn.com/cs/.1683619584.png
10:06 <+ChillerDragon> apparently not much better than github
10:09 <+bridge> <Ryozuki> self host
10:10 <+bridge> <heinrich5991> I don't know any such bug
10:10 <+bridge> <heinrich5991> perhaps you're counting wrong?
10:15 <+ChillerDragon> yea perhaps
10:15 <+ChillerDragon> your map downloader is 0.6 only right?
10:15 <+ChillerDragon> map dl changed a bit in 0.7
10:15 <+ChillerDragon> @Ryozuki i do not trust my self with ensuring the data does not get lost
10:17 <+bridge> <heinrich5991> correct, my map downloader is 0.6 only
10:21 <+ChillerDragon> yea whatever everything works i do not understand why. i will create a mental note in case i run into issues when bridging the map dl code
10:26 <+ChillerDragon> pog
10:26 <+ChillerDragon> https://ascii.zillyhuhn.com/?a=mapdl
10:44 <+bridge> <heinrich5991> nice 🙂
10:57 <+bridge> <Ryozuki> @Learath2 i know o2 is recommended for system wide flag options but it doesnt enable -ftree-vectorize
10:57 <+bridge> <Ryozuki> is it safe to enable -ftree-vectorize ?
10:58 <+bridge> <Ryozuki> > -march= is an ISA selection option; it tells the compiler that it may use the instructions from the ISA. On an Intel/AMD64 platform with -march=native -O2 or lower optimization level, the code will likely end up with AVX instructions used but using shorter SSE XMM registers. To take full advantage of AVX YMM registers, the -ftree-vectorize, -O3 or -Ofast options should be used as well[1].
10:58 <+bridge> <Ryozuki> > 
10:58 <+bridge> <Ryozuki> > -ftree-vectorize is an optimization option (default at -O3 and -Ofast), which attempts to vectorize loops using the selected ISA if possible. The reason it previously wasn't enabled at -O2 is that it doesn't always improve code, it can make code slower as well, and usually makes the code larger; it really depends on the loop etc. As of GCC 12, it is enabled by default with a low cost model (-fvect-cost-model=very-cheap) to strike a balance betwee
10:59 <+bridge> <Ryozuki> oh maybe its enabled now on o2
10:59 <+bridge> <Ryozuki> since gcc 12
11:13 <+bridge> <Jupstar ✪> Doesn't clang enable some at O2 already
11:13 <+bridge> <Learath2> Fwiw this contrived example looks shit in about any language I can think of, minus the allocator thing in most other languages but that's just 2 lines
11:13 <+bridge> <Jupstar ✪> O3 should be safe tbh xd
11:15 <+bridge> <Ryozuki> it looks good in rust
11:16 <+bridge> <Ryozuki> :gigachad:
11:16 <+bridge> <Jupstar ✪> Xd
11:16 <+bridge> <Ryozuki> but u can see the syntax
11:16 <+bridge> <Learath2> It is mostly working, there are a couple people running a full O3 system, but you never know what ancient piece of software broke strict aliasing
11:16 <+bridge> <Ryozuki> and try on every push
11:16 <+bridge> <Ryozuki> i wonder if try is like a except
11:16 <+bridge> <Ryozuki> fail on every allocation
11:17 <+bridge> <Learath2> Doubt(tm), it will be about the same minus the allocator lines and the tries, and you'll need to go from vec to str to do the final comparison
11:17 <+bridge> <Ryozuki> @Jupeyy_Keks o3 is safe to use in rust but in gcc it may trigger ub cuz c coders cant be perfect
11:18 <+bridge> <Jupstar ✪> Just use.
11:18 <+bridge> <Ryozuki> @Learath2 u dont need to go from vec to str
11:18 <+bridge> <Ryozuki> the str has a method to get it as a slice of u8 thats zero allocs
11:19 <+bridge> <Ryozuki> as_ is usually cheap
11:19 <+bridge> <Jupstar ✪> @Ryozuki can u show segfault in zig without unsafe?
11:19 <+bridge> <Jupstar ✪> Didn't find anything
11:20 <+bridge> <Learath2> I guess you can use a u8 vec yeah, I was thinking a char vec
11:20 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1105424098521272360/Screenshot_2023-05-09-11-20-34-970_org.mozilla.firefox.jpg
11:21 <+bridge> <Ryozuki> yes
11:21 <+bridge> <Ryozuki> iirc
11:21 <+bridge> <Ryozuki> zig has no concept of borrow checker iirc
11:21 <+bridge> <Learath2> https://stackoverflow.com/questions/75713507/does-zig-have-special-syntax-for-single-expression-functions chatgpt needs to be stopped
11:22 <+bridge> <Jupstar ✪> I just wonder wtf that language is good for then. Any code example?
11:22 <+bridge> <Ryozuki> https://www.reddit.com/r/Zig/comments/elihvh/why_this_code_is_segfaulting/
11:22 <+bridge> <Ryozuki> its good for the allocator thing iirc
11:22 <+bridge> <Ryozuki> it goes to lengths to let u control and know every alloc
11:23 <+bridge> <Ryozuki> and i guess comptime stuff
11:23 <+bridge> <Ryozuki> literally u gotta save the allocator in ur data types
11:23 <+bridge> <Ryozuki> like the array example
11:24 <+bridge> <Learath2> zig is like a step above C in safety but couple steps below Rust
11:24 <+bridge> <Jupstar ✪> "It's a missing compile error: https://github.com/ziglang/zig/issues/2130
11:24 <+bridge> <Jupstar ✪> "
11:24 <+bridge> <Jupstar ✪> So sounds like they fixed it
11:24 <+bridge> <Ryozuki> https://stackoverflow.com/questions/75623924/zig-segmentation-fault-at-address
11:25 <+bridge> <Ryozuki> zig doesnt protect u from invalid pointers and eyc
11:25 <+bridge> <Ryozuki> etc
11:25 <+bridge> <Learath2> You can have cool things like setting compile time constraints yourself and the compiler won't let it pass until it's satisfied. Rusts borrow checker basically creates a set of basic constraints for everything
11:25 <+bridge> <Jupstar ✪> And are the zig compilers much less complex? Or what would u describe as better in zig than rust?
11:25 <+bridge> <Jupstar ✪> If we don't talk about syntax
11:25 <+bridge> <Ryozuki> zig has null i see
11:25 <+bridge> <Ryozuki> bad
11:26 <+bridge> <Jupstar ✪> Mh sounds interesting, but can't imagine
11:26 <+bridge> <Jupstar ✪> As data type/value directly?
11:27 <+bridge> <Jupstar ✪> I mean a rust option also has none.. just that u have to handle it xd
11:28 <+bridge> <Ryozuki> null ptr i guess
11:28 <+bridge> <Jupstar ✪> K
11:28 <+bridge> <Ryozuki> rust doesnt have nullable types
11:28 <+bridge> <Learath2> Honestly nothing much. I sort of prefer it letting you do your thing without the compiler getting in the way, but that comes at a cost of safety. There is pretty much no reason to recommend zig
11:29 <+bridge> <Ryozuki> none is a enum variant
11:29 <+bridge> <Ryozuki> to represent a null pointer im safe u would do option<box<t>>
11:29 <+bridge> <Ryozuki> mobile sucks
11:29 <+bridge> <Learath2> The extremely easy cross compiling, `defer` and `undefined` are great though
11:30 <+bridge> <Ryozuki> mojo on the other hand seems interesting
11:30 <+bridge> <Ryozuki> its basically a mlir frontend
11:30 <+bridge> <Ryozuki> sad its python like
11:30 <+bridge> <ReiTW> python
11:31 <+bridge> <Ryozuki> https://docs.modular.com/mojo/notebooks/BoolMLIR.html
11:31 <+bridge> <Ryozuki> mojo allows low level ir
11:31 <+bridge> <Ryozuki> so u can do all u can in mlir
11:33 <+bridge> <Ryozuki> u can make a i17 type for example
11:33 <+bridge> <Ryozuki> or i256
11:33 <+bridge> <Learath2> Also zig will probably be the last language that gives you a decent amount of footguns so it's the last chance to have fun before we are all condemned to eternal combining of safe blocks and being the compilers slave
11:34 <+bridge> <Learath2> Every new language seems to be interested in nothing but the most extreme levels of compile time memory management
11:34 <+bridge> <Ryozuki> xd
11:35 <+bridge> <Ryozuki> inho its good
11:35 <+bridge> <Ryozuki> better than gc
11:35 <+bridge> <Ryozuki> we just need to get more and more close to the limit before we cant prove its safe
11:35 <+bridge> <Ryozuki> right now its limited
11:36 <+bridge> <heinrich5991> the general thing is the halting problem, unfortunately
11:36 <+bridge> <heinrich5991> so we'll be stuck at limited
11:37 <+bridge> <Ryozuki> yeah i know
11:37 <+bridge> <Ryozuki> but we can be less limited
11:37 <+bridge> <Ryozuki> than now i think
11:37 <+bridge> <Learath2> Worry not gc is making a comeback too. I've seen new experimental languages that use rusts idea of managing memory at compile time, but relaxes the requirements and inserts gc sweeps
11:37 <+bridge> <Ryozuki> polonius dtw
11:37 <+bridge> <Ryozuki> polonius ftw
11:40 <+bridge> <Jupstar ✪> Hard life. I couldn't tell which is better tho. In one u have to be more careful but might end up doing something greater. On the other u can code more "fearless" but sometimes have to choose a weirder design or more overhead.
11:40 <+bridge> <Jupstar ✪> 
11:40 <+bridge> <Jupstar ✪> Considering that modern software is bloated af and nobody understands 99% of wtf they doing. Maybe the latter ^^
11:40 <+bridge> <Learath2> Latter is better for the user, former is more enjoyable for me
11:41 <+bridge> <Jupstar ✪> Understandable tbh
11:41 <+bridge> <Learath2> Idk coding in garbage collected or managed languages feel more like I'm a labourer than a coder 😄
11:41 <+bridge> <Jupstar ✪> XD
11:42 <+bridge> <heinrich5991> what gc'ed language do you program in?
11:42 <+bridge> <Learath2> But I also do appreciate the much more powerful standard libraries and features offered by new languages. So a middle ground like zig is pretty attractive to me
11:42 <+bridge> <Learath2> Java and a teeny tiny bit of nim sometimes
11:43 <+bridge> <Learath2> Though I pretty much replaced nim in my workflow. I usually reach for python or rust
11:44 <+bridge> <Ryozuki> @Learath2 tbh i can see the appeal of c simplicity and there was a phase where i only used c too
11:44 <+bridge> <Ryozuki> but rust is simply greater
11:45 <+bridge> <Jupstar ✪> Who needs bash if u have rust
11:45 <+bridge> <Jupstar ✪> Who needs python if u have rust
11:45 <+bridge> <Ryozuki> java
11:45 <+bridge> <Ryozuki> SlaveFactoryBuilder
11:45 <+bridge> <Learath2> I'm getting ready to replace bash and python with perl. Just haven't had the time to learn it
11:46 <+bridge> <Ryozuki> bash is a managed gc lang
11:46 <+bridge> <Learath2> I'd rather program with punchcards than write python ngl
11:47 <+bridge> <Jupstar ✪> @Ryozuki rust has great parsing speed doesn't it?
11:47 <+bridge> <Jupstar ✪> 
11:47 <+bridge> <Jupstar ✪> I wonder if there is no way to have a rust interpreter xd
11:47 <+bridge> <Jupstar ✪> 
11:47 <+bridge> <Jupstar ✪> Would improve dev speed a lot for some stuff where u don't modify memory
11:48 <+bridge> <Jupstar ✪> I never touched perl. Is it that good?
11:48 <+bridge> <heinrich5991> as an API language, perhaps. I used z3 to solve a sudoku, was pretty painless in python
11:49 <+bridge> <heinrich5991> also, @Patiga's twmap also has a python api
11:49 <+bridge> <Learath2> It's easily better than bash because types, libraries and saner quoting. It's better than python because it's not python
11:49 <+bridge> <heinrich5991> also, @Patiga's twmap has a python api, too
11:49 <+bridge> <Jupstar ✪> Write bash to rust macro ^^
11:50 <+bridge> <Learath2> Pythons only value to me is indeed as glue because everyone and their mothers have a python binding
11:50 <+bridge> <Jupstar ✪> Ah. Well bash defs sucks if u do logic in it xD. I really mostly use it for simple stuff and calling programs
11:50 <+bridge> <Learath2> Yeah bash is for simple sequencing of stuff for me
11:56 <+bridge> <Ryozuki> make is kinda a good bash interface for commands
11:57 <+bridge> <heinrich5991> ah, and what do you use for writing GUIs?
11:57 <+bridge> <Ryozuki> i rarely write guis lately
11:57 <+bridge> <Ryozuki> but i would use egui
11:58 <+bridge> <Jupstar ✪> Dioxus
11:58 <+bridge> <Learath2> I haven't written a gui in quite some time. No one wants gui applications and for my own use I prefer a tui or a cli
11:59 <+bridge> <Jupstar ✪> Once it's finished in two million years
11:59 <+bridge> <Learath2> If I had to write a gui application I'd probably look at qt
11:59 <+bridge> <Ryozuki> ew
12:00 <+bridge> <Ryozuki> look at iced
12:00 <+bridge> <heinrich5991> this very chat client is a UI 😉
12:00 <+bridge> <heinrich5991> re no one wanting UI
12:00 <+bridge> <Ryozuki> well we forced to use discord
12:00 <+bridge> <Learath2> Or maybe gtk, though gtk applications always feel sluggish to me. Idk if it's the people that program them or gtk itself though
12:00 <+bridge> <Ryozuki> to interact with normal people
12:01 <+bridge> <Ryozuki> i wanna a weechat that shows pfp
12:01 <+bridge> <Learath2> This is a glorified web browser. If those count, yeah some people still do want them
12:01 <+bridge> <Ryozuki> anime pfp in cli chat kek
12:01 <+bridge> <Jupstar ✪> First of all we need to remove all bloat that isn't Vulkan. So that u can embedd your gui cleanly while still having the ability to render to your instance yourself. That's already where all gui engine fail. Egui makes it easy. But egui isn't very stable.
12:01 <+bridge> <Jupstar ✪> 
12:01 <+bridge> <Jupstar ✪> Rip I'll wait another 100 years
12:01 <+bridge> <Ryozuki> egui works anywhere u give it a surface
12:01 <+bridge> <Ryozuki> iirc
12:02 <+bridge> <Jupstar ✪> U can easily embed it yeah
12:02 <+bridge> <Jupstar ✪> But egui isn't very beautiful and immediate and still rather buggy
12:02 <+bridge> <Ryozuki> ur bugged
12:03 <+bridge> <Ryozuki> jupstsr make a language that is focused on vulkan rendering
12:03 <+bridge> <Learath2> I love immediate guis but retained just has much better performance characteristics, what do?
12:03 <+bridge> <Jupstar ✪> If there would be a html css renderer u can easily embed that would be powerful. I don't know any. Despite that css is probs also bloated xd
12:03 <+bridge> <Ryozuki> e.g the vulkan api is a builtin of the lang
12:03 <+bridge> <Jupstar ✪> And no i don't mean add javascript support
12:03 <+bridge> <Jupstar ✪> That's what makes everything slow
12:03 <+bridge> <Learath2> DOM and CSS are soooooooooooooo complicated. If I ever did something like that I'd want an extreme subset of it
12:04 <+bridge> <Jupstar ✪> Yep
12:04 <+bridge> <Jupstar ✪> I should, because I think I have some ideas for ur
12:04 <+bridge> <Learath2> Some allowable selectors are insanely hard to implement in a performant way
12:04 <+bridge> <Jupstar ✪> It
12:04 <+bridge> <Ryozuki> it should maybe have easy interop with rust
12:04 <+bridge> <Ryozuki> so u can plug the lang for rendering
12:04 <+bridge> <Jupstar ✪> I dunno. But u could easily use a framework and it's ez af and looks good
12:05 <+bridge> <Jupstar ✪> But yes they can be complicated
12:05 <+bridge> <Ryozuki> (notice how i didnt say c, cuz c old and bad)
12:05 <+bridge> <Ryozuki> :justatest:
12:05 <+bridge> <Jupstar ✪> Didn't notice
12:06 <+bridge> <Learath2> Hm, the subset of html and css I'm thinking of probably wouldn't be enough to run any web framework
12:06 <+bridge> <Learath2> Those kinda need the entire spec
12:06 <+bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1105435606277955594/Screenshot_20230509-120530.png
12:06 <+bridge> <Jupstar ✪> I see c
12:06 <+bridge> <Learath2> Ryozuki in shambles
12:07 <+ChillerDragon> bash is awesome even for logic
12:07 <+ChillerDragon> also good for web dev
12:07 <+bridge> <Jupstar ✪> I awaited u
12:08 <+ChillerDragon> https://github.com/jneen/balls
12:08 <+ChillerDragon> nice web framework written in bash
12:09 <+ChillerDragon> i can finish the task faster in bash than you in rust eventho my program is 200 times slower just because development and compiling is much faster
12:10 <+bridge> <Ryozuki> im back
12:10 <+bridge> <Ryozuki> was opening my m1 mac at work
12:10 <+bridge> <Ryozuki> kek
12:10 <+ChillerDragon> also bash quoting is ez
12:10 <+bridge> <Ryozuki> im a filthy mac user now
12:11 <+ChillerDragon> * sent from my macbook pro
12:11 <+ChillerDragon> i hope ur m1 mac runs free linux
12:12 <+bridge> <Ryozuki> ❯ uname -a
12:12 <+bridge> <Ryozuki> Darwin xxxx-MacBook-Pro.local 22.4.0 Darwin Kernel Version 22.4.0: Mon Mar  6 20:59:28 PST 2023; root:xnu-8796.101.5~3/RELEASE_ARM64_T6000 arm64
12:12 <+ChillerDragon> ewwwwwwwww
12:12 <+bridge> <Learath2> Are you running linux on it?
12:12 <+ChillerDragon> darwin
12:12 <+bridge> <Ryozuki> nah
12:12 <+ChillerDragon> cring
12:12 <+bridge> <Learath2> You are an evil corpo now
12:12 <+bridge> <Ryozuki> i do suc ha drastic change on a laptop that its company owned
12:12 <+bridge> <Ryozuki> xd
12:12 <+bridge> <Ryozuki> wont
12:12 <+bridge> <Ryozuki> *
12:12 <+bridge> <Jupstar ✪> Borrow Mac pls. I want to find work around for VK backend
12:13 <+ChillerDragon> ok come to munich
12:13 <+ChillerDragon> and pick it up
12:13 <+bridge> <Ryozuki> ddnet is bugged on this mac
12:13 <+bridge> <Ryozuki> any simple minimal resize
12:13 <+bridge> <Ryozuki> makes it freeze
12:13 <+ChillerDragon> which wm u use?
12:13 <+bridge> <Ryozuki> default
12:13 <+ChillerDragon> cring
12:13 <+bridge> <Jupstar ✪> Chiller u also have M1?
12:13 <+ChillerDragon> no bro i broke af
12:14 <+bridge> <Jupstar ✪> U mean Mac is bugged on our awesome ddnet
12:14 <+bridge> <Jupstar ✪> Xd
12:14 <+bridge> <Learath2> I think I know exactly where it freezes
12:14 <+ChillerDragon> my mac is older than time it self
12:14 <+bridge> <Jupstar ✪> I need M1 sry
12:14 <+bridge> <Learath2> They made that stupid dispatch sync again I bet
12:14 <+ChillerDragon> !jup go to apple store
12:14 < chillerbot> @Jupstar ✪
12:14 <+ChillerDragon> ez
12:14 <+ChillerDragon> u can test on all devices
12:14 <+bridge> <Learath2> Try the SDL version released right after they added my PR
12:14 <+ChillerDragon> you can easily installe compilers etc in the apple store
12:14 <+ChillerDragon> nobody looks at you weird if u game dev in there
12:15 <+ChillerDragon> trust me i tried
12:15 <+bridge> <Jupstar ✪> 20$ for one week borrow
12:15 <+ChillerDragon> its free
12:15 <+bridge> <Jupstar ✪> Ah nice idea
12:15 <+bridge> <Jupstar ✪> Chiller
12:15 <+ChillerDragon> ik
12:15 <+bridge> <Jupstar ✪> If they have wifi
12:15 <+ChillerDragon> ofc
12:15 <+ChillerDragon> you can do all
12:15 <+bridge> <Jupstar ✪> Ez
12:16 <+ChillerDragon> only downside is it might not be your ideal dev environment as in they usually lack chairs etc
12:16 <+ChillerDragon> also bringing drinks and food is weird xd
12:16 <+bridge> <Ryozuki> this is the bt
12:16 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1105438163691900978/message.txt
12:16 <+bridge> <Learath2> It's good to work while standing
12:16 <+bridge> <Ryozuki> i had to pkill it
12:16 <+ChillerDragon> ofc someone would say that
12:16 <+ChillerDragon> i cant stand longer than 2min or i die
12:17 <+ChillerDragon> i just collapse due to lack of muscles
12:17 <+bridge> <Learath2> Yeah exactly where I think it is
12:17 <+bridge> <Ryozuki> what sdl
12:17 <+bridge> <Ryozuki> ==> sdl2: stable 2.26.5 (bottled), HEAD
12:17 <+bridge> <Ryozuki> Low-level access to audio, keyboard, mouse, joystick, and graphics
12:17 <+bridge> <Ryozuki> https://www.libsdl.org/
12:18 <+bridge> <Ryozuki> /opt/homebrew/Cellar/sdl2/2.26.5 (93 files, 6.4MB) *
12:18 <+bridge> <Ryozuki>   Poured from bottle using the formulae.brew.sh API on 2023-04-12 at 12:02:52
12:18 <+bridge> <Ryozuki> From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/sdl2.rb
12:18 <+bridge> <Learath2> We do swap on gfx thread, causes a sync dispatch, sync dispatch waits on the main thread, main thread waits on gfx thread, game dead
12:18 <+bridge> <Ryozuki> lol that emoji
12:18 <+bridge> <Ryozuki> xd
12:20 <+bridge> <Jupstar ✪> Didn't we fix that especially for m1
12:20 <+bridge> <Jupstar ✪> Ah no we just wait
12:20 <+bridge> <Jupstar ✪> True
12:20 <+bridge> <Jupstar ✪> MacOS bs os no joke
12:20 <+bridge> <Learath2> SDL fixed it, so we removed our fix. But I bet they unfixed it because they just have to keep messing with it without telling anyone
12:21 <+bridge> <Jupstar ✪> True xdd
12:21 <+bridge> <Learath2> @Ryozuki can you try `SDL_HINT_MAC_OPENGL_SYNC_DISPATCH=1`?
12:21 <+bridge> <Ryozuki> how to set env in lldb
12:21 <+bridge> <Jupstar ✪> Use Zink for opengl to Vulkan to metal over molten vk
12:22 <+bridge> <Ryozuki> ah ez
12:22 <+bridge> <Ryozuki> env SDL_HINT_MAC_OPENGL_SYNC_DISPATCH=1
12:22 <+bridge> <Learath2> Don't remember
12:22 <+bridge> <Learath2> Oh that's easy enough
12:22 <+bridge> <Ryozuki> broke
12:23 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1105439774870884433/message.txt
12:23 <+bridge> <Ryozuki> the thing im doing is setting the default windowed borderless to fullscreen
12:23 <+bridge> <Jupstar ✪> Install moltenvk and use Vulkan
12:23 <+bridge> <Ryozuki> it freezes there
12:23 <+bridge> <Learath2> Oh wait they changed the name of the env too
12:23 <+bridge> <Learath2> May allah give me strength, just stop changing stuff...
12:24 <+bridge> <Jupstar ✪> @Learath2 u sure it even does anything at all
12:24 <+bridge> <Learath2> It's `SDL_MAC_OPENGL_ASYNC_DISPATCH=1`
12:24 <+bridge> <Jupstar ✪> M1 has no native ogl driver
12:24 <+bridge> <Jupstar ✪> It's wrapped to metal
12:24 <+bridge> <Learath2> It's sdl causing the deadlock directly, this never makes it into the ogl driver even in old intel macs
12:25 <+bridge> <Jupstar ✪> Mh ok
12:25 <+bridge> <Ryozuki> omg
12:25 <+bridge> <Ryozuki> it works
12:25 <+bridge> <Ryozuki> life savour
12:25 <+bridge> <Ryozuki> saviour
12:26 <+bridge> <Ryozuki> SDL_MAC_OPENGL_ASYNC_DISPATCH=1 fixes it
12:26 <+bridge> <Learath2> Yeah idk why they want to do a sync dispatch there so much
12:26 <+bridge> <Ryozuki> now i can develop ddnet at work too
12:27 <+bridge> <Jupstar ✪> It's especially weird BCS i though MacOS give a shit about backward compability and simply drops whatever software relied on the sync dispatch
12:27 <+bridge> <Ryozuki> can u add it to the readme
12:27 <+bridge> <Ryozuki> will be def useful
12:27 <+bridge> <Ryozuki> ill add it to wiki
12:27 <+bridge> <heinrich5991> no, should be fixed on our side
12:27 <+bridge> <heinrich5991> not tell users to fix something on their side
12:27 <+bridge> <Ryozuki> can this be fixed tho
12:27 <+bridge> <heinrich5991> it's a computer
12:27 <+bridge> <Ryozuki> isnt it a sdl issue
12:27 <+bridge> <heinrich5991> it can do stuff for you
12:28 <+bridge> <Ryozuki> i mean on our side
12:28 <+bridge> <heinrich5991> we could set the env variable
12:28 <+bridge> <heinrich5991> e.g.
12:28 <+bridge> <Learath2> Mh can we even control the env of sdl unless launched by a specific way?
12:28 <+bridge> <Ryozuki> its weird no one complained yet
12:28 <+bridge> <Ryozuki> am i the only m1 user here
12:28 <+bridge> <heinrich5991> deen also is
12:29 <+ChillerDragon> but deen doesnt launch ddnet :D 
12:29 <+bridge> <Learath2> We could monkeypatch SDL, I actually made a prototype of that when I was about to go insane trying to debug that issue
12:29 <+bridge> <heinrich5991> @Learath2 setenv is the name of the function
12:29 <+bridge> <Ryozuki> ah yeah sdl has a function for hints
12:29 <+bridge> <Patiga> if the ui should only sort of wrap one kind of task, similar to a cli, you could try out https://github.com/MichalGniadek/klask
12:29 <+bridge> <Learath2> But doesn't happen before dylib load and sdl decides how to dispatch at init iirc
12:29 <+bridge> <heinrich5991> at SDL_init?
12:29 <+bridge> <heinrich5991> we can set it before that
12:30 <+bridge> <Patiga> it wraps clap 3.x to create a simple ui, apparently with file pickers
12:30 <+bridge> <Ryozuki> u can apply hints before init
12:30 <+bridge> <Learath2> Oh wait, they do react dynamically to it somehow
12:30 <+bridge> <Learath2> So yeah we can hint before we init
12:30 <+bridge> <Learath2> It's not only M1 btw, so we should set that for all macs
12:31 <+bridge> <Ryozuki> *  \brief   A variable controlling whether dispatching OpenGL context updates should block the dispatching thread until the main thread finishes processing
12:31 <+bridge> <Ryozuki>  *
12:31 <+bridge> <Ryozuki>  *  This variable can be set to the following values:
12:31 <+bridge> <Ryozuki>  *    "0"       - Dispatching OpenGL context updates will block the dispatching thread until the main thread finishes processing (default).
12:31 <+bridge> <Ryozuki>  *    "1"       - Dispatching OpenGL context updates will allow the dispatching thread to continue execution.
12:31 <+bridge> <Ryozuki>  *
12:31 <+bridge> <Ryozuki>  *  Generally you want the default, but if you have OpenGL code in a background thread on a Mac, and the main thread
12:31 <+bridge> <Ryozuki>  *  hangs because it's waiting for that background thread, but that background thread is also hanging because it's
12:31 <+bridge> <Ryozuki>  *  waiting for the main thread to do an update, this might fix your issue.
12:31 <+bridge> <Ryozuki>  *
12:31 <+bridge> <Ryozuki>  *  This hint only applies to macOS.
12:31 <+bridge> <Ryozuki>  *
12:31 <+bridge> <Ryozuki>  *  This hint is available since SDL 2.24.0.
12:31 <+bridge> <heinrich5991> maybe only set it if the env var isn't set already
12:31 <+bridge> <Jupstar ✪> Does it even affect our shipped sdl
12:31 <+bridge> <Learath2> There is a possibility that we ship an sdl right after my patch before people started to mess around with it
12:31 <+bridge> <Jupstar ✪> I see
12:32 <+bridge> <Jupstar ✪> Else set the env before calling SDL init viseo
12:32 <+bridge> <Jupstar ✪> Video
12:34 <+bridge> <Ryozuki> let me make the pr
12:35 <+bridge> <Ryozuki> been ages xd
12:35 <+bridge> <Jupstar ✪> Next step install moltenvk and use VK backend
12:35 <+bridge> <Learath2> Idk how best to do it. Do we check for the sdl version?
12:35 <+bridge> <Ryozuki> i installed molten vk
12:35 <+bridge> <Ryozuki> but vulkan doesnt appear
12:35 <+bridge> <Jupstar ✪> Try and see why moltenvk caps fps so weirdly
12:35 <+bridge> <Jupstar ✪> At least for deen it does
12:36 <+bridge> <Learath2> There was a version inbetween where the hint was briefly called the first thing I sent, tho idk if that was released at all
12:36 <+bridge> <Jupstar ✪> -DVulkan=ON
12:36 <+bridge> <Jupstar ✪> In cmake
12:36 <+bridge> <Learath2> And then there are versions that dont need a hint at all but do async dispatch
12:36 <+bridge> <Jupstar ✪> In caps all
12:37 <+bridge> <Learath2> Then there is a minimum version below which maybe we should just disable resizing
12:37 <+bridge> <Jupstar ✪> Maybe we should simply do everything single threaded on MacOS xD
12:37 <+bridge> <Jupstar ✪> All problems solved
12:37 <+bridge> <Ryozuki> [cmake] -- Checking for module 'vulkan'
12:37 <+bridge> <Ryozuki> [cmake] --   No package 'vulkan' found
12:38 <+bridge> <Ryozuki> [cmake] -- Building vulkan shaders
12:38 <+bridge> <Ryozuki> [cmake] /Users/edgar/Documents/misc/ddnet/data/shader/vulkan/quad.vert
12:38 <+bridge> <Ryozuki> [cmake] -- Finished building vulkan shaders
12:38 <+bridge> <Ryozuki> xd
12:38 <+bridge> <Ryozuki> [cmake] --  * Zlib found
12:38 <+bridge> <Ryozuki> [cmake] --  * Vulkan found
12:38 <+bridge> <Jupstar ✪> Then moltenvk not found xd
12:38 <+bridge> <Ryozuki> wtf
12:38 <+bridge> <Jupstar ✪> Lol
12:38 <+bridge> <Jupstar ✪> I said nothing
12:39 <+bridge> <Ryozuki> freeze
12:39 <+bridge> <Ryozuki> with SDL_MAC_OPENGL_ASYNC_DISPATCH=0
12:39 <+bridge> <Ryozuki> oh wait
12:39 <+bridge> <Ryozuki> i didnt change to vulkan
12:39 <+bridge> <Ryozuki> xd
12:40 <+bridge> <Ryozuki> @Jupeyy_Keks it works!
12:40 <+bridge> <Ryozuki> with vulkan
12:40 <+bridge> <Ryozuki> no freeze
12:40 <+bridge> <Jupstar ✪> Yeah
12:40 <+bridge> <Ryozuki> [mvk-info] Created 3 swapchain images with initial size (3024, 1890) and contents scale 2.0 for screen Built-in Retina Display.
12:40 <+bridge> <Ryozuki> [mvk-info] Created 3 swapchain images with initial size (3024, 1890) and contents scale 2.0 for screen Built-in Retina Display.
12:40 <+bridge> <Jupstar ✪> But deen has limited fps
12:41 <+bridge> <Learath2> How limited? Directly to refresh rate?
12:41 <+bridge> <Jupstar ✪> Go server and check fps xd
12:41 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1105444325992697956/message.txt
12:41 <+bridge> <Jupstar ✪> No
12:41 <+bridge> <Jupstar ✪> Weirdly limited
12:41 <+bridge> <Jupstar ✪> As if it tries to save energy
12:41 <+bridge> <Jupstar ✪> 1400 fps or smth
12:41 <+bridge> <Learath2> Mh, always with the bizarre bugs on macOS
12:41 <+bridge> <Jupstar ✪> But it peaks to 6k xd
12:41 <+bridge> <Learath2> 1400 is atleast good enough if it's stable, if not stable ew
12:42 <+bridge> <Jupstar ✪> Yeah but with ogl he gets like 3k
12:42 <+bridge> <Jupstar ✪> That hurts my feelings
12:42 <+bridge> <Learath2> Could it be an issue with how we calculate it?
12:42 <+bridge> <Jupstar ✪> I doubt
12:44 <+bridge> <Jupstar ✪> https://github.com/KhronosGroup/MoltenVK/issues/1407
12:44 <+bridge> <Jupstar ✪> 
12:44 <+bridge> <Jupstar ✪> This issue discussion mentioned similar bug we had
12:44 <+bridge> <Jupstar ✪> But it's closed now
12:44 <+bridge> <Ryozuki> its fluid af
12:44 <+bridge> <Ryozuki> 1500 fps i think
12:44 <+bridge> <Jupstar ✪> Fps
12:44 <+bridge> <Jupstar ✪> That's no fluid
12:44 <+bridge> <Jupstar ✪> On m1
12:44 <+bridge> <Ryozuki> it looks smooth to me
12:44 <+bridge> <Jupstar ✪> Yes but that processor should be on desktop PC perf
12:45 <+bridge> <Ryozuki> hidpi is rly nice
12:45 <+bridge> <Jupstar ✪> Anything below 4k fps is a bug xd
12:45 <+bridge> <Ryozuki> oh wait
12:45 <+bridge> <Ryozuki> didnt build on release with vulkan
12:45 <+bridge> <Ryozuki> built without it xd
12:45 <+bridge> <Jupstar ✪> @Ryozuki is there smth like energy saving options? XD
12:46 <+bridge> <Jupstar ✪> Make everything max perf xD
12:46 <+ChillerDragon> bbbbut the environment!
12:46 <+bridge> <Jupstar ✪> And don't use battery
12:46 <+bridge> <Ryozuki> i have low poer mode off
12:48 <+bridge> <Ryozuki> vulkan fullscreen is 500
12:48 <+bridge> <Ryozuki> and feels slow
12:50 <+bridge> <Jupstar ✪> Hurts to hear
13:34 <+bridge> <Ryozuki> holy shit
13:34 <+bridge> <Ryozuki> github sucks so much
13:35 <+bridge> <Ryozuki> it simply doesnt work
13:35 <+bridge> <Jupstar ✪> Rip
13:35 <+bridge> <heinrich5991> wdym?
13:36 <+bridge> <Ryozuki> doesnt load
13:36 <+bridge> <Ryozuki> https://www.githubstatus.com/
13:42 <+bridge> <ReiTW> Idk why python is such a bad oop language
13:42 <+bridge> <ReiTW> Why tf can u rename attributes, delete etc..
13:42 <+bridge> <Voxel> github fixing issues is going  surprisingly quick
13:43 <+bridge> <Voxel> :oop:
13:43 <+bridge> <Sorah> did the servers get updated recently ?
13:47 <+bridge> <Sorah> ahh i see there is already my old crash topic back again in #bugs  =P
13:53 <+bridge> <Learath2> The biggest issue I have with github is their "smart" code search that misses stuff
13:54 <+bridge> <Learath2> Fwiw I hate all the new search algorithms that try to be smart. Google was better a decade ago
13:54 <+bridge> <Learath2> ElasticSearch is a curse
13:56 <+bridge> <Jupstar ✪> For code search i simply want a search like vs code uses
14:07 <+bridge> <Ryozuki> kek
14:07 <+bridge> <Ryozuki> guess i wont do much work for now
14:07 <+bridge> <Ryozuki> thats what u get for depending on github
14:07 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1105466174914953326/image.png
14:08 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1105466315608703017/image.png
14:11 <+bridge> <Ryozuki> well my repos are here too https://git.edgarluque.com/
14:12 <+bridge> <Ryozuki> https://news.ycombinator.com/item?id=35872835
14:20 <+bridge> <Learath2> Hope they do an incident report blog thing so we can learn what happened
14:25 <+bridge> <Jupstar ✪> I bet some worker accidentally deleted the whole database
14:26 <+bridge> <Jupstar ✪> Maybe the same as on gitlab
14:26 <+bridge> <Ryozuki> did that happen on gitlab?
14:28 <+ChillerDragon> does that mean stuff like homebrew is down too? xd
14:28 <+ChillerDragon> ryo do brew update
14:28 <+bridge> <Ryozuki> well github works 50% of the time
14:29 <+bridge> <Ryozuki> seems better now
14:30 <+bridge> <Jupstar ✪> Well was a while ago I think
14:30 <+bridge> <Jupstar ✪> They just 6h of data
14:32 <+bridge> <Ryozuki> https://www.githubstatus.com/history lists 72 incidents since January
14:34 <+bridge> <Jupstar ✪> Every second day xd
14:43 <+bridge> <Ryozuki> ```cpp
14:43 <+bridge> <Ryozuki> #if defined(CONF_PLATFORM_MACOS) && defined(SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH)
14:43 <+bridge> <Ryozuki>     // Hints will not be set if there is an existing override hint or environment variable that takes precedence.
14:43 <+bridge> <Ryozuki>     // So this respects cli environment overrides.
14:43 <+bridge> <Ryozuki>     SDL_SetHint(SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH, "1");
14:43 <+bridge> <Ryozuki> #endif
14:43 <+bridge> <Ryozuki> ```
14:43 <+bridge> <Ryozuki> @heinrich5991 will this do?
14:43 <+bridge> <Ryozuki> sethint uses normal priority unlike sethintwithpriority
14:43 <+bridge> <Ryozuki> so the env rules
14:43 <+bridge> <Ryozuki> checking that SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH is a nice hack to check we are on a modern version i think xd
14:44 <+bridge> <heinrich5991> sounds good
14:44 <+bridge> <heinrich5991> is `SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH` a preprocessor constant?
14:44 <+bridge> <Ryozuki> ye
14:44 <+bridge> <Ryozuki> *  This hint is available since SDL 2.24.0.
14:44 <+bridge> <Ryozuki>  *
14:44 <+bridge> <Ryozuki>  */
14:44 <+bridge> <Ryozuki> #define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH "SDL_MAC_OPENGL_ASYNC_DISPATCH"
14:44 <+bridge> <heinrich5991> ah
14:44 <+bridge> <heinrich5991> why not do the string instead then?
14:44 <+bridge> <heinrich5991> can be without #ifdefs, probably
14:45 <+bridge> <Ryozuki> but the hint may not exist in sdl older
14:45 <+bridge> <Ryozuki> the preprocesor is nice here, it allows me to set the hint only in sdl versions that matter right?
14:45 <+bridge> <heinrich5991> that's probably just ignored
14:45 <+bridge> <Ryozuki> hmm ok
14:50 <+bridge> <heinrich5991> the macos ifdef is superfluous as well, I guess, but it doesn't matter
14:51 <+bridge> <Ryozuki> xd
14:52 <+bridge> <heinrich5991> this is a lot better than telling users on a random web page that they need to fix their environment 🙂
16:55 <+bridge> <Ryozuki> "i am a beacon of knowledge blazing out across a black sea of ignorance" 
16:55 <+bridge> <Ryozuki> - invoker, carl, dota 2
16:55 <+bridge> <Ryozuki> is invoker a rust dev?
16:55 <+bridge> <Ryozuki> :gigachad: :justatest:
16:56 <+bridge> <Ryozuki> "i am a beacon of knowledge blazing out across a black sea of ignorance" 
16:56 <+bridge> <Ryozuki> - invoker, karl, dota 2
17:16 <+bridge> <gerdoe> 4632 updoots
17:17 <+bridge> <Ryozuki> idk but the reddit joke is not funny
17:17 <+bridge> <Ryozuki> atleast to me xd
17:17 <+bridge> <Ryozuki> like its pretty cringe
17:17 <+bridge> <gerdoe> its literally irony xd
17:17 <+bridge> <Ryozuki> > the expression of one's meaning by using language that normally signifies the opposite, typically for humorous or emphatic effect.
17:17 <+bridge> <Ryozuki> no it isnt
17:18 <+bridge> <gerdoe> i mean you behave like you are typical redditor and rust dev at the same time
17:19 <+bridge> <Ryozuki> how so? explain
17:19 <+bridge> <Ryozuki> what is a typical redditor
17:19 <+bridge> <gerdoe> you are xd
17:19 <+bridge> <Ryozuki> explain further please
17:19 <+bridge> <Ryozuki> ur literally only copying voxel cringe joke
17:20 <+bridge> <Ryozuki> i dont even post on reddit, btw
17:20 <+bridge> <Ryozuki> which makes this even more hilarious
17:20 <+bridge> <Voxel> i call you a redditor because you unironically post shit like this
17:20 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/293493549758939136/1105514750353350836/Untitled15_20230422161224.png
17:21 <+bridge> <gerdoe> ctrl+f `from: Ryozuki#2188 rust`
17:21 <+bridge> <Ryozuki> talking about rust and making fun of it is being a redditor (??)
17:21 <+bridge> <Ryozuki> im rly out of the zoomer landscape
17:21 <+bridge> <gerdoe> no i mean you behave like rust pope or somewhat
17:21 <+bridge> <gerdoe> unironically
17:21 <+bridge> <Ryozuki> i do it ironically actually
17:21 <+bridge> <Jupstar ✪> ryozuki is the prophet, its his destiny
17:22 <+bridge> <Jupstar ✪> 
17:22 <+bridge> <Jupstar ✪> and some day when he dies, he silently says "i wish i learned c"
17:22 <+bridge> <gerdoe> the point of no return xd
17:22 <+bridge> <Ryozuki> i embraced the rust persona on this discord
17:22 <+bridge> <Ryozuki> but this has nothing to do with reddit
17:22 <+bridge> <Ryozuki> and saying updoot or stuff is pretty cringe
17:22 <+bridge> <Voxel> oh
17:22 <+bridge> <Voxel> ¯\_(ツ)_/¯
17:23 <+bridge> <Ryozuki> @Voxel yeah, sometimes i think i need to make it clear for you, i couldnt care less what lang u program in, if u want to use js you go and have fun
17:23 <+bridge> <Voxel> still, linux/rust memes in general give off such a vibe
17:23 <+bridge> <Ryozuki> i think its only u who get them as that
17:23 <+bridge> <gerdoe> i don't make fun of you btw but your representation as rust pope
17:23 <+bridge> <Ryozuki> i am this discord rust pope indeed, but its as a joke
17:23 <+bridge> <Voxel> yeah idk where gerdoe is coming from
17:24 <+bridge> <gerdoe> okey seems i need to sleep a bit more than 1 hour a day xd
17:24 <+bridge> <Ryozuki> i wont say that, cuz i know c already
17:24 <+bridge> <Voxel> i slept for 3 last night
17:25 <+bridge> <Ryozuki> i recommend going to sleep at 23
17:25 <+bridge> <Ryozuki> i go at 23 and wake at 7:40
17:25 <+bridge> <Ryozuki> and im perfectly awake
17:25 <+bridge> <gerdoe> my organism wants to sleep around 10 hours
17:25 <+bridge> <gerdoe> everyday
17:26 <+bridge> <Voxel> i struggle with interpreting text 🔥
17:26 <+bridge> <Jupstar ✪> you want to tell me c is an easy to learn language? Thought it's impossible bcs of UB ^^
17:26 <+bridge> <gerdoe> but going to sleep at 21 didn't help either
17:26 <+bridge> <Voxel> on the other hand tone indicators are mehhhhbbbb
17:26 <+bridge> <Ryozuki> ok yeah, i know C to a point, i dont know its intrincascies regarding ub, and tbh i dont wanna learn them unless i rly need to someday
17:26 <+bridge> <Jupstar ✪> 😄
17:27 <+bridge> <Mr.Gh0s7> This message is a test!
17:27 <+bridge> <gerdoe> This message is a :justatest: !
17:27 <+bridge> <Jupstar ✪> some times i wish there would be 100000 learaths and 100000 ryozukis
17:27 <+bridge> <Jupstar ✪> 
17:27 <+bridge> <Jupstar ✪> and both can code whole day
17:27 <+bridge> <Jupstar ✪> 
17:27 <+bridge> <Jupstar ✪> and then see what happens after 20 years
17:27 <+bridge> <Mr.Gh0s7> Yeah reactions don't transfer through matrix and discord
17:28 <+bridge> <Voxel> ddnet that runs rly fucking fast or rly fucking slow
17:28 <+bridge> <Mr.Gh0s7> Depends if they start compiling or not
17:28 <+bridge> <gerdoe> ddnet with quake alike qvm in rust
17:29 <+bridge> <gerdoe> so every mod will be able to work xd
17:29 <+bridge> <Ryozuki> @Jupeyy_Keks the future is like this:
17:29 <+bridge> <Ryozuki> 
17:29 <+bridge> <Ryozuki> - chairn designs a specificaly designed cpu optimized for vulkan rendering and ddnet code
17:29 <+bridge> <Ryozuki> - we design a language fit for that cpu and ddnet code
17:29 <+bridge> <Ryozuki> - we implement ddnet in that
17:29 <+bridge> <Ryozuki> - the quantum physics break
17:29 <+bridge> <Voxel> ddnetOS
17:29 <+bridge> <Ryozuki> we sell the ddnet pc for 1k€
17:30 <+bridge> <Jupstar ✪> sounds like a plan
17:30 <+bridge> <Ryozuki> we also implement a tcp/ip alt
17:30 <+bridge> <Ryozuki> cuz thats bloat
17:30 <+bridge> <Ryozuki> and rework the internet
17:30 <+bridge> <Ryozuki> where ddos isnt a problem
17:30 <+bridge> <gerdoe> blockchain based ddnet3
17:31 <+bridge> <gerdoe> ddcoins xd
17:31 <+bridge> <Ryozuki> @Jupeyy_Keks what will we do when sdl3
17:31 <+bridge> <Ryozuki> we need to be the first to switch
17:31 <+bridge> <Ryozuki> cuz we are modern
17:31 <+bridge> <Jupstar ✪> ikr
17:31 <+bridge> <Mr.Gh0s7> ddnetOS ddnOS ddOs :justatest:
17:31 <+bridge> <Ryozuki> i remember when we went from sdl1 to sdl2
17:31 <+bridge> <Ryozuki> konsti complained that sdl2 was badxd
17:31 <+bridge> <Jupstar ✪> oh no
17:31 <+bridge> <Jupstar ✪> xd
17:31 <+bridge> <Jupstar ✪> i guess we wait around 6 months
17:31 <+bridge> <Jupstar ✪> and then switch or smth
17:32 <+bridge> <Ryozuki> we could ditch sdl
17:32 <+bridge> <Ryozuki> and use rust based crates
17:32 <+bridge> <Ryozuki> winit
17:32 <+bridge> <Jupstar ✪> mhh if it has all features
17:32 <+bridge> <Ryozuki> https://github.com/rust-windowing/winit
17:32 <+bridge> <Jupstar ✪> they always far behind
17:32 <+bridge> <Ryozuki> winit is only windowed
17:32 <+bridge> <Ryozuki> rust ecosystem decided to go unix way
17:32 <+bridge> <Ryozuki> split focus
17:32 <+bridge> <Ryozuki> winit only windowing
17:32 <+bridge> <Jupstar ✪> yeah
17:33 <+bridge> <Jupstar ✪> e.g. does winit support window notify
17:33 <+bridge> <Jupstar ✪> the blinking
17:33 <+bridge> <Ryozuki> https://github.com/rust-windowing/winit/blob/master/FEATURES.md#core
17:33 <+bridge> <Ryozuki> this is the supported things
17:33 <+bridge> <gerdoe> patiga's wgpu renderer + libtw = ddnet client in rust
17:33 <+bridge> <gerdoe> libtw + some polish = ddnet server in rust
17:34 <+bridge> <Jupstar ✪> rip xd
17:34 <+bridge> <Jupstar ✪> i have a vk backend in rust
17:34 <+bridge> <Ryozuki> notify would be a separate crate i think
17:34 <+bridge> <Ryozuki> https://crates.io/crates/notify
17:35 <+bridge> <Jupstar ✪> i dont mean notifications
17:35 <+bridge> <Jupstar ✪> the blinking
17:35 <+bridge> <Ryozuki> https://github.com/hoodie/notify-rust
17:35 <+bridge> <Jupstar ✪> u dont even know it, bcs u on i3
17:35 <+bridge> <Ryozuki> xd
17:35 <+bridge> <Ryozuki> its this my bad
17:35 <+bridge> <gerdoe> doesn't wgpu support different backends
17:35 <+bridge> <Ryozuki> yes wgpu supports all
17:36 <+bridge> <Ryozuki> but a specific vulkan backend is probs more perf
17:36 <+bridge> <Jupstar ✪> wgpu is build to also work on opengl sadly
17:36 <+bridge> <Jupstar ✪> so the benefits as ryo said arent there
17:36 <+bridge> <Jupstar ✪> or only partially
17:37 <+bridge> <gerdoe> i think they provide some platform/backend specific things in api
17:37 <+bridge> <Ryozuki> u still have wgpu overhead
17:37 <+bridge> <Ryozuki> u cant beat raw api bindings
17:38 <+bridge> <Ryozuki> which probs wouldnt matter much tho
17:38 <+bridge> <Jupstar ✪> i'd be glad if we'd have wgpu backend
17:38 <+bridge> <Jupstar ✪> its gles3 compatible and also has dx backends
17:39 <+bridge> <Ryozuki> android
17:46 <+bridge> <Patiga> opengl is not a primary backend of wgpu
17:47 <+bridge> <Patiga> for android vulkan should be enough, no?
17:51 <+bridge> <Jupstar ✪> generally yes, but vulkan should be enough anywhere ^^
17:52 <+bridge> <Patiga> yes, except for the web if I understand correctly
17:52 <+bridge> <Jupstar ✪> i guess just a matter of time?
17:52 <+bridge> <Jupstar ✪> gles3 to webgl2 works too 😄
17:53 <+bridge> <Patiga> my understanding is that webgpu was invented because the low level access of vulkan wasn't feasible / okay for browsers to support
17:53 <+bridge> <Jupstar ✪> but they can probably emulate it, at least to a certain extend
17:54 <+bridge> <Jupstar ✪> do you happen to know the webgpu limitations/differences?
17:55 <+bridge> <Ryozuki> webgpu has compute shaders iirc
17:55 <+bridge> <Ryozuki> i seen LLM run on browsers or smth
17:55 <+bridge> <Ryozuki> aka u can run the image ais too
17:57 <+bridge> <Patiga> hm not sure what you mean with differences. its limitations are defined by its standard https://www.w3.org/TR/webgpu/#intro
17:57 <+bridge> <Jupstar ✪> if u have compute shaders, u have everything u need
17:57 <+bridge> <Jupstar ✪> 😬
17:57 <+bridge> <Patiga> for example you only have the vertex and fragment shader, you have compute shaders
17:58 <+bridge> <Jupstar ✪> see compute shaders
17:58 <+bridge> <Jupstar ✪> they the raw power of GPUs
17:58 <+bridge> <Patiga> its design is explicitly not like opengl but instead more like vulkan and such
17:59 <+bridge> <Jupstar ✪> yeah
20:10 <+bridge> <Chairn> i think you also need -mavx for AVX extension and -mavx2 for avx2, and -mavx512 for AVX512
20:18 <+bridge> <Chairn> im in !!
20:25 <+bridge> <Iza> https://github.com/ddnet/ddnet/issues/6417 hey, i've opened this issue some time ago, could anyone maybe take a look at it? it'd be important for me
21:35 <+ChillerDragon> bash oneliner to connect to the fullest Multeasymap server xd
21:35 <+ChillerDragon> ``DDNet "connect $(mapname=Multeasymap;curl https://master1.ddnet.org/ddnet/15/servers.json | jq -r "[.servers[] | select(.info.map.name == \"$mapname\")] | sort_by(.info.clients | length) | .[-1].addresses[0]" | cut -d'/' -f3)"``
21:36 <+ChillerDragon> thanks for the ddnet master its making stuff like that so easy @heinrich5991
21:36 <+ChillerDragon> the http and json thingies i mean
