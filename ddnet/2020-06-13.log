00:05 <+bridge> [ddnet] <TortiLeq> I saw him on ddnet last time
00:05 <+bridge> [ddnet] <TortiLeq> So he isnt namebanned
00:10 <+bridge> [ddnet] <!     ZombieToad> @snail swap nameban with snail did 9/11
00:11 <+bridge> [ddnet] <snail> too political
00:14 <+bridge> [ddnet] <Trafalgar Law> Is the ball mod for 0.6 available?
00:17 <+bridge> [ddnet] <!     ZombieToad> https://github.com/scosu/teeworlds/tree/ball0.6.1
00:18 <+bridge> [ddnet] <Trafalgar Law> Yea I know for 0.6.1
00:18 <+bridge> [ddnet] <Trafalgar Law> but I mean a up to date ball mod
00:26 <+bridge> [ddnet] <!     ZombieToad> did you mean 0.7?
00:48 <+bridge> [ddnet] <Trafalgar Law> Nah I mean for 0.6.5
00:49 <+bridge> [ddnet] <Trafalgar Law> or for 0.7 idc
01:17 <+bridge> [ddnet] <!     ZombieToad> all the ball servers use that source i think
02:08 <+bridge> [ddnet] <Arseniy Zarche> @Learath2 what the difference between git bash and git cmd?
09:38 <+bridge> [ddnet] <Learath2> @Arseniy Zarche git bash uses msys to give you a unix like environment, like all the usual things, grep, sed, awk, rm, cp
09:38 <+bridge> [ddnet] <Learath2> Git cmd just puts git tools in your path before launching cmd
09:55 <+ZillyHuhn> @Learath2 send brain
09:56 <+ZillyHuhn> https://github.com/ddnet/ddnet/pull/2256#issuecomment-643586537
09:56 <+ZillyHuhn> how to i print the netobj?
09:56 <+ZillyHuhn> u want the int Type?
09:57 <+bridge> [ddnet] <ᶰ°Konͧsti> ChillerDragon when come to 0.6 again, Shocktsunami soon :feelsbadman:
10:00 <+ZillyHuhn> nice is the rls finally progressing? o.O
10:00 <+ZillyHuhn> hope ddnet siwtched to 0.7 already when its rlsd
10:00 <+ZillyHuhn> u unbanned btw?
10:03 <+bridge> [ddnet] <Learath2> ZillyHuhn: Yeah I want int Type
10:03 <+bridge> [ddnet] <Learath2> I'm assuming it's failing at `Type < 0`
10:03 <+bridge> [ddnet] <Learath2> if it's not can you find where the unpack is failing?
10:05 <+ZillyHuhn> https://github.com/ZillyWoods/ZillyWoods/blob/b71ec28076ec6615342c9683f9c8672181be6023/src/engine/shared/snapshot.cpp#L440
10:05 <+ZillyHuhn> oh wp vscode
10:05 <+ZillyHuhn> worng link :D
10:05 <+ZillyHuhn> https://github.com/ZillyWoods/ZillyWoods/blob/b71ec28076ec6615342c9683f9c8672181be6023/src/engine/shared/snapshot.cpp#L431
10:05 <+ZillyHuhn> SnapSize is -3
10:06 <+bridge> [ddnet] <Learath2> eeeh? really?
10:06 <+ZillyHuhn> https://zillyhuhn.com/cs/.1592035565.png
10:06 <+bridge> [ddnet] <Learath2> can you add a debug statement on the server to check what it's sending?
10:06 <+ZillyHuhn> type=72 btw
10:07 <+ZillyHuhn> btw how is it that u cant reproduce?
10:07 <+bridge> [ddnet] <Learath2> snapshot.cpp:L638 print Type ID and Size
10:07 <+bridge> [ddnet] <Learath2> That's what's weird
10:07 <+ZillyHuhn> is it some mac feature to fix tw snaps?
10:08 <+bridge> [ddnet] <Learath2> maybe some undefined behaviour that clang decided to fix and gcc decides to optimize around
10:08 <+bridge> [ddnet] <Learath2> it's a common occurance
10:08 <+ZillyHuhn> yea probably
10:09 <+bridge> [ddnet] <Learath2> type 72 sounds insane so I'm guessing some broken size is being sent for previous objects
10:10 <+ZillyHuhn> https://paste.zillyhuhn.com/lZ
10:10 <+bridge> [ddnet] <Learath2> These snapshot issues are extremely annoying to fix
10:10 <+ZillyHuhn> here is what the server sends
10:10 <+ZillyHuhn> wanna ssh into mi machine?
10:10 <+bridge> [ddnet] <Learath2> can I connect to this server?
10:10 <+ZillyHuhn> nah its local
10:10 <+bridge> [ddnet] <Learath2> Oh actually ssh would be nice
10:10 <+ZillyHuhn> i can make a public one if u want
10:11 <+ZillyHuhn> send ur ssh key
10:11 <+bridge> [ddnet] <Learath2> the server actually seems to send that 72
10:49 <+bridge> [ddnet] <Learath2> I hoped it'd happen for me to if I used a release build, but nope 😦
10:50 <+bridge> [ddnet] <Learath2> lets see if gcc makes it happen
10:50 <+ZillyHuhn> yea ima get some breakfast feel free to hop into my machine later tho
10:54 <+bridge> [ddnet] <Learath2> oh forgot I build with clang on my vm too
10:55 <+bridge> [ddnet] <Learath2> yeah no, gcc with a release build doesn't make it happen either
11:07 <+bridge> [ddnet] <deen> I tested with GCC and an old TW 0.7 client version btw
11:07 <+bridge> [ddnet] <deen> self compiled, all in Debug
11:08 <+bridge> [ddnet] <Learath2> I used current master of 0.7 but I don't remember a change that'd influence this
11:10 <+bridge> [ddnet] <Learath2> ah finally got it to happen with gcc
11:11 <+bridge> [ddnet] <Learath2> so I guess it's UB 😦
11:13 <+ZillyHuhn> think its more a server thing i could reproduce it with old and new clients
11:13 <+ZillyHuhn> well its obviously a server thing :D
11:56 <+bridge> [ddnet] <Learath2> so unpleasant to debug
11:57 <+bridge> [ddnet] <fokkonaut> are you sure you dont send any wrong snapshots?
11:57 <+bridge> [ddnet] <fokkonaut> snapshots that are meant for the 0.6 clients only for example
11:57 <+bridge> [ddnet] <Learath2> Well compiling with clang fixes it, so it's doubtful that I'm doing something obviously wrong
12:00 <+bridge> [ddnet] <Learath2> besides the unknown objects should just be dropped, no?
12:05 <+bridge> [ddnet] <Learath2> hm the snap just looks truncated, very confused
12:24 <+bridge> [ddnet] <Learath2> my terminal just doesn't have enough scroll buffer to debug this 😛
12:58 <+bridge> [ddnet] <fokkonaut> full screen it
13:00 <+bridge> [ddnet] <Learath2> @fokkonaut do you happen to know why we are looking for `ItemSize` space in the snap but only end up incrementing data by `ItemSize/4`?
13:01 <+bridge> [ddnet] <fokkonaut> eh
13:01 <+bridge> [ddnet] <fokkonaut> what
13:01 <+bridge> [ddnet] <fokkonaut> https://discord.com/channels/252358080522747904/293493549758939136/721302168493097031
13:01 <+bridge> [ddnet] <Learath2> `if(RangeCheck(pEnd, pData, ItemSize) || ItemSize < 0) return -3;` Range check checks whether we have `ItemSize` bytes left in the snap
13:01 <+bridge> [ddnet] <Learath2> but we only do `pData += ItemSize/4;`
13:02 <+bridge> [ddnet] <fokkonaut> I am not familiar with that code, sorry :/
13:02 <+bridge> [ddnet] <Learath2> seems no one is, matricks wrote it and it has been sitting there for the last decade 😄
13:02 <+bridge> [ddnet] <Learath2> maybe when @heinrich5991 is around, he can give me a clue
13:03 <+bridge> [ddnet] <fokkonaut> xD
13:03 <+bridge> [ddnet] <fokkonaut> heinrich should know about it
13:03 <+bridge> [ddnet] <fokkonaut> Is this a client problem or server?
13:03 <+bridge> [ddnet] <Learath2> server
13:04 <+bridge> [ddnet] <Learath2> when compiled with gcc it does something wrong with the snap
13:05 <+bridge> [ddnet] <fokkonaut> I dont have a clue, but an idea is to check your character snap handling. I think you do it differently than I do
13:06 <+bridge> [ddnet] <fokkonaut> I dont get any errors, not on a 0.7 client, not on ddnet Client and also not on the server
13:06 <+bridge> [ddnet] <Learath2> well duh, It's from scratch it is supposed to be different
13:06 <+bridge> [ddnet] <fokkonaut> true
13:06 <+bridge> [ddnet] <fokkonaut> does this error occur while using ddnet or 0.7 client?
13:06 <+bridge> [ddnet] <Learath2> Yeah I have a feeling it's the character snap too
13:06 <+bridge> [ddnet] <Learath2> 0.7
13:07 <+bridge> [ddnet] <fokkonaut> Yep, then i am pretty sure
13:07 <+bridge> [ddnet] <Learath2> on a broken server the character doesn't get snapped at all, I don't get an object of type 10
13:07 <+bridge> [ddnet] <fokkonaut> Mh
13:07 <+bridge> [ddnet] <Learath2> No on a working one I don't get a character snap
13:07 <+bridge> [ddnet] <Learath2> wtf
13:07 <+bridge> [ddnet] <fokkonaut> why do you do it the way you do it
13:07 <+bridge> [ddnet] <fokkonaut> With the cast and all that
13:08 <+bridge> [ddnet] <fokkonaut> The way you had it before was correct
13:08 <+bridge> [ddnet] <Learath2> what cast?
13:09 <+bridge> [ddnet] <Learath2> The whole point of importing the protocol is to avoid using the ugly offsets into snap objects
13:09 <+bridge> [ddnet] <fokkonaut> https://github.com/ddnet/ddnet/commit/fbeec8a750510d98df15aa672cc184dd0c9cedde#diff-fcc0cc87472883c0ac01be250a1135b1R1171
13:09 <+bridge> [ddnet] <fokkonaut> oh, i see
13:10 <+bridge> [ddnet] <fokkonaut> But i guess the problem should be around this stuff
13:10 <+bridge> [ddnet] <Learath2> If I had any idea wtf is up with the snap sizes I could figure this out
13:10 <+bridge> [ddnet] <Learath2> https://gist.github.com/Learath2/1c19cc61227f1fab6b24c79b0380ba9ba
13:11 <+bridge> [ddnet] <Learath2> This is what a broken servers first snap looks like
13:11 <+bridge> [ddnet] <fokkonaut> 404
13:12 <+bridge> [ddnet] <Learath2> https://gist.github.com/Learath2/1c19cc61227f1fab6b24c79b0380ba9b
13:12 <+bridge> [ddnet] <Learath2> And this is a working one
13:12 <+bridge> [ddnet] <Learath2> https://gist.github.com/Learath2/a17040df98ffb85becf153cf18b1bc1c
13:13 <+bridge> [ddnet] <fokkonaut> mhh
13:13 <+bridge> [ddnet] <Learath2> notice how the working one is missing the actual character snap but it has the ddnetcharacter
13:13 <+bridge> [ddnet] <Learath2> so odd
13:14 <+bridge> [ddnet] <fokkonaut> i have an idea
13:15 <+bridge> [ddnet] <fokkonaut> Maybe you should pCore->Write(pCharacter) with the normal character from 0.6
13:15 <+bridge> [ddnet] <fokkonaut> Because the 0.7 character has a different size
13:16 <+bridge> [ddnet] <fokkonaut> Where you do the cast, i dont think thats needed
13:16 <+bridge> [ddnet] <fokkonaut> well wait
13:16 <+bridge> [ddnet] <fokkonaut> i am wrong
13:16 <+bridge> [ddnet] <fokkonaut> okay so
13:17 <+bridge> [ddnet] <fokkonaut> I am doing it the normal way, I just create the pCharacter with the normal size and also write that
13:18 <+bridge> [ddnet] <fokkonaut> then later on i change the values, but I dont write the 0.6 character (so for you, you shoudnt write the 0.7 one i think)
13:18 <+bridge> [ddnet] <Learath2> that reinterpret_cast is horrible there
13:18 <+bridge> [ddnet] <Learath2> let me get rid of that
13:18 <+bridge> [ddnet] <Learath2> maybe that'll help
13:18 <+bridge> [ddnet] <fokkonaut> I think you should just always create the 0.6 cnetobj_character
13:18 <+bridge> [ddnet] <fokkonaut> and always write that
13:19 <+bridge> [ddnet] <fokkonaut> And for 0.7 clients you just edit it. cast the pCharacter to a 07character and then set the vars for it i think?
13:20 <+bridge> [ddnet] <fokkonaut> Thats how i do it basically, but since i dont have the 0.6 protocol for my server, i need to do the offset thing
13:20 <+bridge> [ddnet] <Learath2> I can always create it, I can't always write it
13:21 <+bridge> [ddnet] <Learath2> Still a violation of strict aliasing, which is why I think this is breaking anyway
13:21 <+bridge> [ddnet] <fokkonaut> works for me
13:21 <+bridge> [ddnet] <Learath2> Yeah this works for me aswell
13:21 <+bridge> [ddnet] <Learath2> case closed
13:21 <+bridge> [ddnet] <Learath2> lets ship this and everyone just use clang
13:22 <+bridge> [ddnet] <fokkonaut> i wouldnt do that tbh
13:22 <+bridge> [ddnet] <Learath2> ofc not...
13:22 <+bridge> [ddnet] <fokkonaut> xd
13:23 <+bridge> [ddnet] <Learath2> I was trying to make the point that "works for me" is not a great bar
13:28 <+bridge> [ddnet] <Learath2> it's not the cast but will change that anyway
13:35 <+bridge> [ddnet] <Learath2> oh the 4 is because of using ints
13:36 <+bridge> [ddnet] <Learath2> Imagine iterating your binary protocol with a pointer to a non-fixed size
13:59 <+bridge> [ddnet] <Learath2> okay, now it disappeared with a debug build
14:00 <+bridge> [ddnet] <Learath2> maybe valgrind will bless me with the answer
14:13 <+bridge> [ddnet] <Learath2> pf even more broke and I didn't even touch anything
14:19 <+bridge> [ddnet] <Learath2> @timakro you ever here anymore? 😄
14:28 <+bridge> [ddnet] <Arseniy Zarche> > @Arseniy Zarche git bash uses msys to give you a unix like environment, like all the usual things, grep, sed, awk, rm, cp
14:28 <+bridge> [ddnet] <Arseniy Zarche> @Learath2  too much nonunderstandable words for me but thanks. Will book say me about this?
14:29 <+bridge> [ddnet] <Learath2> I don't think it mentions git bash
14:29 <+bridge> [ddnet] <Learath2> msys is a unix environment that works in windows, it gives you the tools that you'd have on linux on windows
14:29 <+bridge> [ddnet] <Learath2> that's it
14:32 <+bridge> [ddnet] <Learath2> I should have used valgrind at the very beginning...
14:58 <+bridge> [ddnet] <Learath2> `-fsanitize=undefined` is also a godsend
15:35 <+bridge> [ddnet] <Learath2> @heinrich5991 you seem to have a uninitialized use in aio_write
15:41 <+bridge> [ddnet] <heinrich5991> @Learath2 omg what is it?
15:41 <+bridge> [ddnet] <heinrich5991> is this the bug I've been wondering about for a couple of years?
15:42 <+bridge> [ddnet] <Learath2> I'm trying to get a clean backtrace
15:42 <+bridge> [ddnet] <Learath2> you can check it out if you have clang with `-fsanitize=memory`
15:42 <+bridge> [ddnet] <heinrich5991> what do you need to do to trigger it? just starting the server?
15:43 <+bridge> [ddnet] <Learath2> yep
15:44 <+bridge> [ddnet] <Learath2> ```[vagrant@archlinux cross]$ ./DDNet-Server "sv_register 0"
15:44 <+bridge> [ddnet] <Learath2> [2020-06-13 13:44:03][engine]: running on unix-linux-amd64
15:44 <+bridge> [ddnet] <Learath2> [2020-06-13 13:44:03][engine]: arch is little endian
15:44 <+bridge> [ddnet] <Learath2> Uninitialized bytes in __interceptor_fwrite at offset 0 inside [0x7f9b4d71fe50, 112)
15:44 <+bridge> [ddnet] <Learath2> ==8666==WARNING: MemorySanitizer: use-of-uninitialized-value
15:44 <+bridge> [ddnet] <Learath2>     #0 0x560f435119ba in io_write /vagrant/ddnet/cross/../src/base/system.c:341:9
15:44 <+bridge> [ddnet] <Learath2>     #1 0x560f435119ba in aio_thread /vagrant/ddnet/cross/../src/base/system.c:483:3
15:44 <+bridge> [ddnet] <Learath2>     #2 0x560f435135ac in thread_run /vagrant/ddnet/cross/../src/base/system.c:697:2
15:44 <+bridge> [ddnet] <Learath2>     #3 0x7f9b4fdd1421 in start_thread (/usr/lib/libpthread.so.0+0x9421)
15:44 <+bridge> [ddnet] <Learath2>     #4 0x7f9b4fcdebf2 in clone (/usr/lib/libc.so.6+0xffbf2)
15:44 <+bridge> [ddnet] <Learath2> 
15:44 <+bridge> [ddnet] <Learath2> SUMMARY: MemorySanitizer: use-of-uninitialized-value /vagrant/ddnet/cross/../src/base/system.c:341:9 in io_write
15:44 <+bridge> [ddnet] <Learath2> Exiting
15:44 <+bridge> [ddnet] <Learath2> ==8666==WARNING: MemorySanitizer: use-of-uninitialized-value```
15:45 <+bridge> [ddnet] <heinrich5991> this might be the bug we've been hitting on windwos
15:46 <+bridge> [ddnet] <Learath2> io_write is inlined too well so I can't see what is actually uninitialized
15:46 <+bridge> [ddnet] <heinrich5991> `[0x7f9b4d71fe50, 112)`
15:46 <+bridge> [ddnet] <heinrich5991> do you know what that means?
15:46 <+bridge> [ddnet] <heinrich5991> does that mean in a memory region of 112 bytes starting at 0x7f...?
15:47 <+bridge> [ddnet] <Learath2> Yes, not including the 112th byte
15:47 <+bridge> [ddnet] <heinrich5991> what is 112 bytes long even
15:48 <+bridge> [ddnet] <Learath2> let me try at O0
15:48 <+bridge> [ddnet] <Learath2> if it doesn't disappear
15:50 <+bridge> [ddnet] <heinrich5991> ASYNCIO is 88 bytes long on my machine
15:51 <+bridge> [ddnet] <Learath2> takes a while to instrument code on a 1 core vm :/
15:53 <+bridge> [ddnet] <Learath2> oh cmake forces -O2 somewhy
15:53 <+bridge> [ddnet] <jimmy> helo
15:54 <+bridge> [ddnet] <jimmy> is there a way to get an animated text (from after effects for example) into a tw map?
15:55 <+bridge> [ddnet] <Learath2> I don't think I've ever heard of something like that
15:56 <+bridge> [ddnet] <heinrich5991> @Learath2 by default it uses the release config which includes `-O3`(?) or `-O2`
15:58 <+bridge> [ddnet] <Learath2> For release it adds -O3
15:58 <+bridge> [ddnet] <Learath2> idk how to override it
15:59 <+bridge> [ddnet] <heinrich5991> remove the forced `CMAKE_BUILD_TYPE` in CMakeLists.txt or build with `-DDEV=ON` or `-DCMAKE_BUILD_TYPE=Debug`
15:59 <+bridge> [ddnet] <Learath2> `-DCMAKE_C_FLAGS_DEBUG` helped
16:00 <+bridge> [ddnet] <heinrich5991> ah, if that helped, only my first hint has a chance of working
16:01 <+bridge> [ddnet] <Learath2> noooo with -O1 there is another bug that happens first
16:01 <+bridge> [ddnet] <heinrich5991> also in asyncio? 😦
16:01 <+bridge> [ddnet] <Learath2> in the uuid manager
16:01 <+bridge> [ddnet] <heinrich5991> :((
16:01 <+bridge> [ddnet] <Learath2> https://gist.github.com/Learath2/327d000bccd365769066a3948d106b1c
16:03 <+bridge> [ddnet] <heinrich5991> how though? I don't understand it
16:04 <+bridge> [ddnet] <heinrich5991> this is now `-O1` with `clang -fsanitize=memory`?
16:04 <+bridge> [ddnet] <Learath2> and `-fno-optimize-sibling-calls`
16:05 <+bridge> [ddnet] <Learath2> `CFLAGS="-fsanitize=memory -fno-optimize-sibling-calls" CXXFLAGS="-fsanitize=memory -fno-optimize-sibling-calls" LDFLAGS="-fsanitize=memory" CC="clang" CXX="clang++" cmake -GNinja -DCLIENT=OFF -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS_DEBUG="-g -O1" -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" ..`
16:05 <+bridge> [ddnet] <Learath2> That was how I configured it
16:05 <+ZillyHuhn> @jimmy take the after effects animation and create each frame as a image and then use alpha evelopes to play it frame by frame in the map
16:06 <+bridge> [ddnet] <Learath2> and relwithdebinfo has yet another one at `-g -O1` so 3 uninitialized uses
16:06 <+bridge> [ddnet] <Learath2> I'm wondering if MSan is broken 😛
16:06 <+bridge> [ddnet] <heinrich5991> newest ddnet?
16:07 <+bridge> [ddnet] <Learath2> yep
16:12 <+bridge> [ddnet] <heinrich5991> ```
16:12 <+bridge> [ddnet] <heinrich5991> ../src/game/collision.cpp:902:247: warning: bitwise or with non-zero value always evaluates to true [-Wtautological-bitwise-compare]
16:12 <+bridge> [ddnet] <heinrich5991>                 if(m_pDoor[TileOnTheRight].m_Index == TILE_STOPA || m_pDoor[TileOnTheLeft].m_Index == TILE_STOPA || ((m_pDoor[TileOnTheRight].m_Index == TILE_STOPS || m_pDoor[TileOnTheLeft].m_Index == TILE_STOPS) && m_pDoor[TileOnTheRight].m_Flags|ROTATION_270|ROTATION_90))
16:12 <+bridge> [ddnet] <heinrich5991> ```
16:12 <+bridge> [ddnet] <Learath2> RelWithDebInfo has an uninitialized use in LoadMap leading to digest_str
16:12 <+bridge> [ddnet] <Learath2> Debug has one in uuid manager
16:12 <+bridge> [ddnet] <Learath2> RelWithDebInfo at -O2 has one in io_write
16:12 <+bridge> [ddnet] <Learath2> I think those warnings already have an issue
16:17 <+bridge> [ddnet] <heinrich5991> If you want MemorySanitizer to work properly and not produce any false positives, you must ensure that all the code in your program and in libraries it uses is instrumented (i.e. built with -fsanitize=memory). In particular, you would need to link against MSan-instrumented C++ standard library. We recommend to use libc++ for that purpose.
16:17 <+bridge> [ddnet] <Learath2> Ah I left now but I bet trace origins would help
16:17 <+bridge> [ddnet] <Learath2> Msan has an exception for libc
16:17 <+bridge> [ddnet] <Learath2> It has interceptors
16:18 <+bridge> [ddnet] <heinrich5991> yea, currently building with `-fsanitize-memory-track-origins=2`
16:18 <+bridge> [ddnet] <Learath2> libc++ im not sure if they have interceptors for those, maybe you do need an instrumented libc++
16:18 <+bridge> [ddnet] <heinrich5991> `Uninitialized value was created by an allocation of 'retval' in the stack frame of function 'md5_finish'`
16:18 <+bridge> [ddnet] <heinrich5991> sounds like a false positive
16:21 <+bridge> [ddnet] <Learath2> Could be, can you reproduce the one in aio_write?
16:22 <+bridge> [ddnet] <heinrich5991> which flags do I need for that again?
16:22 <+bridge> [ddnet] <Learath2> RelWithDebInfo and just fsanitize=memory
16:22 <+bridge> [ddnet] <Learath2> I think relwithdebinfo defaults to o2
16:36 <+bridge> [ddnet] <heinrich5991> hm
16:37 <+bridge> [ddnet] <heinrich5991> it tells me the buffer is wholly uninitialized, but it contains the bytes I'm expecting it to contain
16:41 <+bridge> [ddnet] <Learath2> Hm I wonder what's wrong with it, it should be using a pattern
16:43 <+bridge> [ddnet] <heinrich5991> 112 is precisely the length even. maybe the variable just happens to still contain the bytes?
16:44 <+bridge> [ddnet] <Learath2> Thatd be some luck
16:46 <+bridge> [ddnet] <heinrich5991> note that we also had problems with bytes marked as uninitialized on windows
16:46 <+bridge> [ddnet] <heinrich5991> so maybe there's more to it
16:46 <+bridge> [ddnet] <heinrich5991> but I don't understand it ← that might well be the problem ^^
16:48 <+bridge> [ddnet] <Learath2> Well the issue is very subtle on windows too, subtle enough to make it all the way to ntkernel before crashing
17:11 <+bridge> [ddnet] <heinrich5991> you know, I wonder how the world fits together
17:11 <+bridge> [ddnet] <heinrich5991> on the one hand we have this issue in code I wrote, with an memsan and (back then) windows reporting a problem
17:11 <+bridge> [ddnet] <heinrich5991> and we can't figure it out
17:12 <+bridge> [ddnet] <heinrich5991> on the other hand one can go to ctf challenges and figure out bugs in a closed source or extremely undocumented software
18:01 <+bridge> [ddnet] <Learath2> :D
19:06 <+bridge> [ddnet] <timakro> @Learath2 Hi
19:08 <+bridge> [ddnet] <Learath2> Hi, I was having big trouble, but I figured it out
20:46 <+bridge> [ddnet] <Learath2> @timakro have you seen my pr btw? It'd be nice to have a review as you were the first one to implement this
