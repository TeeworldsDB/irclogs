05:27 <+bridge> [ddnet] <Im 'corneum> i have a suggestion to remake the rankpoint system.  right now there are big differences between maps and the rankpoints they give. for example its probably very hard to get top10 on multeasymap but when you finish a harder map quickly you can get rankpoints evenw hen you didnt really speedrun the map.  thats why i think its a good idea to use the % of ranks that were recently added.   lets say you get rankpoints if youre within the top
05:27 <+bridge> [ddnet] <Im 'corneum> after all... you can be rank 11 on every map and have 0 rankpoints
09:49 <+bridge> [ddnet] <chillerdragon> yo @deen this is me begging you to not force push anymore to ddnet master \:) i have like 2 active forks merging in irregular intervals and it would cause me big pain in the ass
10:07 <+bridge> [ddnet] <chillerdragon> yikes what do i do when client launch segfaults but running with gdb just hangs it? \:C
10:54 <+bridge> [ddnet] <chillerdragon> fixed it with printf driven development \:D
10:55 <+bridge> [ddnet] <chillerdragon> did anyone of you ever try to configure vscode with cmake? I am a bit annoyed by the greyed out code because vscode does not know about the cmake options i use
10:56 <+bridge> [ddnet] <chillerdragon> image.png
10:56 <+bridge> [ddnet] <chillerdragon> https://cdn.discordapp.com/attachments/293493549758939136/905757270477013012/image.png
11:17 <+bridge> [ddnet] <Ryozuki> you can configure it probs
11:17 <+bridge> [ddnet] <Ryozuki> the cmake command
11:17 <+bridge> [ddnet] <Ryozuki> what vscode probs does is generate compile_commands.json
11:17 <+bridge> [ddnet] <Ryozuki> but it depends on the flags u pass to cmake
11:18 <+bridge> [ddnet] <Ryozuki> for dev u should enable -DDEV and any other feature  u want
11:19 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/905763179416678420/unknown.png
11:19 <+bridge> [ddnet] <Ryozuki> maybe
11:19 <+bridge> [ddnet] <Ryozuki> https://vector-of-bool.github.io/docs/vscode-cmake-tools/settings.html#conf-cmake-configuresettings
11:20 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/905763347704737823/unknown.png
11:26 <+bridge> [ddnet] <deen> did I?
11:37 <+bridge> [ddnet] <chillerdragon> @deen\: no worries mate you did not \:) just asking you to keep it that way
11:38 <+bridge> [ddnet] <chillerdragon> @Ryozuki\: yea tried that it affected the build but not the syntax hightlight
11:38 <+bridge> [ddnet] <Ryozuki> u have to reconfigure
11:38 <+bridge> [ddnet] <Ryozuki> nobo
11:38 <+bridge> [ddnet] <Ryozuki> ctrl shift p
11:38 <+bridge> [ddnet] <Ryozuki> cmake: configure
11:38 <+bridge> [ddnet] <chillerdragon> oh ok lemme try
11:39 <+bridge> [ddnet] <chillerdragon> did it work for u?
11:39 <+bridge> [ddnet] <Ryozuki> lol im not a normie
11:39 <+bridge> [ddnet] <Ryozuki> i use neovim
11:39 <+bridge> [ddnet] <chillerdragon> ok sir
11:41 <+bridge> [ddnet] <Ryozuki> :greenthing:
12:04 <+bridge> [ddnet] <chillerdragon> omagwd it works how did it not work the first time
12:04 <+bridge> [ddnet] <chillerdragon> thanks ryo babe for motivating me to try again
12:05 <+bridge> [ddnet] <chillerdragon> image.png
12:05 <+bridge> [ddnet] <chillerdragon> https://cdn.discordapp.com/attachments/293493549758939136/905774661575516200/image.png
12:05 <+bridge> [ddnet] <chillerdragon> but oof can we get some gitignore? \:D
12:06 <+bridge> [ddnet] <Ryozuki> echo ".cmake" >> .git/info/exclude
12:06 <+bridge> [ddnet] <Ryozuki> ur a nobo
12:06 <+bridge> [ddnet] <Ryozuki> echo ".cmake/" >> .git/info/exclude
12:10 <+bridge> [ddnet] <chillerdragon> ik
12:10 <+bridge> [ddnet] <chillerdragon> but that diff
14:16 <+bridge> [ddnet] <chillerdragon> @Ryozuki\: here u go mozilla dudes accepted it https://addons.mozilla.org/en-US/firefox/addon/github_forks/
14:17 <+bridge> [ddnet] <Ryozuki> Jupstar âœª do you compile with llvm CFI?
14:17 <+bridge> [ddnet] <Ryozuki> LLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e., -Clto).
14:17 <+bridge> [ddnet] <Ryozuki> i discovered this cuz rust added it <https://github.com/rust-lang/rust/pull/89652> xd
14:17 <+bridge> [ddnet] <Ryozuki> > Clang includes an implementation of a number of control flow integrity (CFI) schemes, which are designed to abort the program upon detecting certain forms of undefined behavior that can potentially allow attackers to subvert the programâ€™s control flow. These schemes have been optimized for performance, allowing developers to enable them in release builds.
14:18 <+bridge> [ddnet] <Ryozuki> -fsanitize=cfi for clang
14:18 <+bridge> [ddnet] <Ryozuki> and requires lto
14:19 <+bridge> [ddnet] <Ryozuki> new version poggers
14:19 <+bridge> [ddnet] <Ryozuki> :poggers:
14:21 <+bridge> [ddnet] <Learath2> That is a massive release :D
14:26 <+bridge> [ddnet] <Ryozuki> 15.6: the memory safety update
14:26 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
14:27 <+bridge> [ddnet] <deen> No
14:27 <+bridge> [ddnet] <deen> those changes are not in 15.6
14:27 <+bridge> [ddnet] <Ryozuki> oh
14:27 <+bridge> [ddnet] <deen> since they were not broken by 15.6 changes I think
14:28 <+bridge> [ddnet] <deen> If I keep adding new changes into 15.6 we need more and more rcs
14:28 <+bridge> [ddnet] <Ryozuki> yeah
14:28 <+bridge> [ddnet] <Ryozuki> its good our problem are too many changes
14:28 <+bridge> [ddnet] <Ryozuki> and not the other way around
14:29 <+bridge> [ddnet] <Ryozuki> :ddnet:
14:30 <+bridge> [ddnet] <Ryozuki> @deen the sha sums are not updated yet?
14:30 <+bridge> [ddnet] <Ryozuki> maybe im too fast
14:30 <+bridge> [ddnet] <Ryozuki> xd
14:33 <+bridge> [ddnet] <deen> true, running it now
14:36 <+bridge> [ddnet] <Ryozuki> aur is updated
14:39 <+bridge> [ddnet] <deen> great, thanks
14:51 <+bridge> [ddnet] <Learath2> I'm around for an hour or so incase something blows up ðŸ˜›
14:52 <+bridge> [ddnet] <Ryozuki> :monkaS:
14:58 <+bridge> [ddnet] <chillerdragon> so nice version rls without conflicts in version.h \:D
14:58 <+bridge> [ddnet] <chillerdragon> 
14:58 <+bridge> [ddnet] <chillerdragon> without any conflicts at all
17:04 <+bridge> [ddnet] <Ryozuki> rip rc
17:05 <+bridge> [ddnet] <Learath2> I don't get how not a single one of us gets these weird issues
17:05 <+bridge> [ddnet] <Ryozuki> well i dont play on windows
17:05 <+bridge> [ddnet] <Jupstar âœª> yeah really weird
17:05 <+bridge> [ddnet] <Jupstar âœª> especially louis and others tested it
17:06 <+bridge> [ddnet] <Jupstar âœª> i also asked a few ppl from my clan to test it, who are all on windows
17:06 <+bridge> [ddnet] <Ryozuki> :frozen:
17:20 <+bridge> [ddnet] <deen> we have way too few RC testers I'd say
17:25 <+bridge> [ddnet] <chillerdragon> Yes RC are nice to stabilize releases. I try to merge client to master often its not rly RC but at least something \:D
17:29 <+bridge> [ddnet] <Jupstar âœª> or minimize ifdefs for windows and stuff, use the std or if the std isnt good enough some libs
17:29 <+bridge> [ddnet] <Jupstar âœª> 
17:29 <+bridge> [ddnet] <Jupstar âœª> SDL also has some read write stuff, sadly not really powerful like e.g. c++17 filesystem (https://wiki.libsdl.org/SDL_RWFromFile "a UTF-8 string representing the filename to open")
17:30 <+bridge> [ddnet] <Jupstar âœª> i could atleast imagine that most stuff used in system.h also exists in boost or std
17:31 <+bridge> [ddnet] <Learath2> I dont want to imagine how much we'd break trying to replace system.h
17:32 <+bridge> [ddnet] <Jupstar âœª> in the end boost and std have insanly stricter rules, so its probs easier to use than our randomly written system replacement functions xd
18:20 <+bridge> [ddnet] <Learath2> I pulled out all the laptops I have, none seem to be able to reproduce this :/
18:21 <+bridge> [ddnet] <deen> Maybe if you switch your Windows language to Russian
18:21 <+bridge> [ddnet] <deen> or your username to Russian
18:21 <+bridge> [ddnet] <deen> at least Nakimar reported that reverting the unicode filesystem changes fixed part of the issue
18:24 <+bridge> [ddnet] <Learath2> Oh, that's a lead
18:24 <+bridge> [ddnet] <Learath2> If only one developer could reproduce it we could find what's going wrong
18:45 <+bridge> [ddnet] <Learath2> We should start logging the version and githash when starting the client
18:47 <+bridge> [ddnet] <fokkonaut> definitely worse performance in 15.6
18:47 <+bridge> [ddnet] <Learath2> Yes, the performance is obviously my greatest concern right now
18:47 <+bridge> [ddnet] <fokkonaut> idk why you released it anyways xd
18:47 <+bridge> [ddnet] <Learath2> XDE
18:47 <+bridge> [ddnet] <Jupstar âœª> how is the performance worse?
18:48 <+bridge> [ddnet] <Learath2> Oh idk why, maybe since it worked for everyone in rc and it has been in testing for a long time now?
18:48 <+bridge> [ddnet] <Jupstar âœª> i hope its not SDL again xD
18:48 <+bridge> [ddnet] <fokkonaut> But the performance loss was known
18:48 <+bridge> [ddnet] <Learath2> You know we tend to write software to release not to let ferment
18:48 <+bridge> [ddnet] <Jupstar âœª> @fokkonaut\: can you be more explicit?
18:48 <+bridge> [ddnet] <fokkonaut> snapfinditem is slow on entityex
18:48 <+bridge> [ddnet] <Jupstar âœª> bcs of the doors?
18:48 <+bridge> [ddnet] <fokkonaut> to match to the real entity
18:49 <+bridge> [ddnet] <fokkonaut> as learath suggested, we should have a new netmsg including them
18:49 <+bridge> [ddnet] <Jupstar âœª> but that only matters for zooming out far doesnt it
18:49 <+bridge> [ddnet] <fokkonaut> idk
18:49 <+bridge> [ddnet] <Learath2> Yep, clipped to the view and zoomed at default you shouldn't be losing much performance at all
18:49 <+bridge> [ddnet] <fokkonaut> the whole client feels a bit worse than 15.5
18:49 <+bridge> [ddnet] <Jupstar âœª> i also benchmarked find item and most overhead comes from the insanly slow uuid manager lookup
18:49 <+bridge> [ddnet] <Learath2> At zoom level 2 I lose about 5 fps from 15.5
18:52 <+bridge> [ddnet] <Jupstar âœª> is there anything unique for every single netmsg?
18:52 <+bridge> [ddnet] <Jupstar âœª> that does not require uuid lookup for example
18:52 <+bridge> [ddnet] <Learath2> oh, hm actually I do lose a lot more fps when checking on desktop
18:52 <+bridge> [ddnet] <fokkonaut> not every entityex in a message each, but all in one
18:53 <+bridge> [ddnet] <Learath2> I get 2k fps in 15.5 1k in 15.6 ðŸ˜›
18:53 <+bridge> [ddnet] <fokkonaut> see
18:53 <+bridge> [ddnet] <Jupstar âœª> on what map tho?
18:53 <+bridge> [ddnet] <fokkonaut> ðŸ“‰
18:53 <+bridge> [ddnet] <Learath2> but there are no entityex on that map, I'm on grandma
18:54 <+bridge> [ddnet] <Jupstar âœª> then its weird, are u on windows?
18:54 <+bridge> [ddnet] <Learath2> I spec and look at the first part on both clients
18:54 <+bridge> [ddnet] <Learath2> on windows yep
18:54 <+bridge> [ddnet] <Jupstar âœª> pls SDL
18:54 <+bridge> [ddnet] <Jupstar âœª> dont do this to me
18:54 <+bridge> [ddnet] <Jupstar âœª> can you replace SDL.dll @Learath2 ?
18:54 <+bridge> [ddnet] <Learath2> yep, let me try
18:54 <+bridge> [ddnet] <Jupstar âœª> to check if it comes from there
18:55 <+bridge> [ddnet] <Learath2> ah won't work
18:55 <+bridge> [ddnet] <Learath2> `SDL_FlashWindow` is missing in old sdl
18:56 <+bridge> [ddnet] <Jupstar âœª> ah true
18:57 <+bridge> [ddnet] <Jupstar âœª> https://github.com/Jupeyy/ddnet/commit/84e580b4d98d8c57b933f7bd1a7085bfaa19bdd9
18:57 <+bridge> [ddnet] <Jupstar âœª> 
18:57 <+bridge> [ddnet] <Jupstar âœª> completly randomly make UUID grouped in their 8Bit CRC already almost doubles the performance
18:57 <+bridge> [ddnet] <Jupstar âœª> so the best would be if we somehow could evade calls to it
18:57 <+bridge> [ddnet] <fokkonaut> I just noticed heavy fps drops when you do /showothers and there are other players, is it due to the alpha?
18:58 <+bridge> [ddnet] <Jupstar âœª> mhh, showothers generally drops alot of fps
18:58 <+bridge> [ddnet] <fokkonaut> why? because /pause doesnt drop fps, while at the same position
18:58 <+bridge> [ddnet] <fokkonaut> i even get more fps in /pause
18:58 <+bridge> [ddnet] <fokkonaut> xd
18:58 <+bridge> [ddnet] <Jupstar âœª> ah weird
19:01 <+bridge> [ddnet] <deen> I can make a build with reverted SDL_FlashWindow. Would that help? Then we can test if SDL is causing lower fps
19:01 <+bridge> [ddnet] <Jupstar âœª> i guess learath could just build himself?
19:02 <+bridge> [ddnet] <Learath2> I can't on this computer
19:02 <+bridge> [ddnet] <Learath2> I rage uninstalled VS
19:07 <+bridge> [ddnet] <Jupstar âœª> image.png
19:07 <+bridge> [ddnet] <Jupstar âœª> https://cdn.discordapp.com/attachments/293493549758939136/905880848165924934/image.png
19:07 <+bridge> [ddnet] <Jupstar âœª> lookupuuid is so slow, with my trash crc thing it almost halves
19:07 <+bridge> [ddnet] <Jupstar âœª> 
19:07 <+bridge> [ddnet] <Jupstar âœª> thats why i want to know if there is any unique ID that can identify a uuid packet early
19:08 <+bridge> [ddnet] <Jupstar âœª> or can it be sorted somehow to do binary search over the packets
19:08 <+bridge> [ddnet] <Learath2> CAN REPRODUCE \o/
19:09 <+bridge> [ddnet] <Learath2> Just create a local user account with cyrillic name
19:12 <+bridge> [ddnet] <Jupstar âœª> the Key() is that a 100% bet?
19:12 <+bridge> [ddnet] <fokkonaut> @nuborn EntityEx for doors is sadly not helpful at all, since it still requires the tiles to be placed there ._. My plot doors that work with other tiles are not showing as closed with this :/
19:13 <+bridge> [ddnet] <fokkonaut> Even tho they are sent with entityex m_Number correct + SwitchState state closed
19:14 <+bridge> [ddnet] <Jupstar âœª> @nuborn\: you are not here by any chance?
19:19 <+bridge> [ddnet] <fokkonaut> @nuborn I dont think it is smart to not send doors to clients when they are closed anyways, bcs thats such a small change in snapshot and somehow belongs to the server
19:19 <+bridge> [ddnet] <Learath2> Do any of you have the capability to compile on windows?
19:20 <+bridge> [ddnet] <fokkonaut> yes
19:21 <+bridge> [ddnet] <Learath2> Um @deen this is nice and all but that build you gave out on #bugs didn't fix it for me, I'm not sure that's enough
19:21 <+bridge> [ddnet] <Learath2> If you have some time can you create a user account with a russian name and try to bisect the bug?
19:21 <+bridge> [ddnet] <deen> ah, too bad
19:21 <+bridge> [ddnet] <fokkonaut> wym user acc?
19:22 <+bridge> [ddnet] <deen> windows username
19:22 <+bridge> [ddnet] <fokkonaut> what would that change
19:22 <+bridge> [ddnet] <fokkonaut> ah nvm
19:22 <+bridge> [ddnet] <fokkonaut> i see
19:22 <+bridge> [ddnet] <Learath2> It completely breaks the game for some reason
19:22 <+bridge> [ddnet] <Learath2> Reverting the most obvious commits didn't help
19:22 <+bridge> [ddnet] <Learath2> not sure what we broke there
19:23 <+bridge> [ddnet] <deen> hm, i also had a unicode fs change
19:23 <+bridge> [ddnet] <deen> but it was only fs_rename so probably unrelated
19:24 <+bridge> [ddnet] <fokkonaut> @Learath2 i can ask someone about the russian name, sec
19:25 <+bridge> [ddnet] <Jupstar âœª> @fokkonaut\: or @nuborn
19:25 <+bridge> [ddnet] <Jupstar âœª> what would this break?
19:25 <+bridge> [ddnet] <Jupstar âœª> https://github.com/Jupeyy/ddnet/commit/46b9a7abf8967315c30503c5191686e7dae559da
19:25 <+bridge> [ddnet] <Jupstar âœª> this fixes the performance basically
19:26 <+bridge> [ddnet] <deen> very cool, thanks for looking into the performance so quickly jupstar
19:27 <+bridge> [ddnet] <Jupstar âœª> you can always ask deen or compile with the github CIs \:D
19:27 <+bridge> [ddnet] <Jupstar âœª> (@Learath2)
19:27 <+bridge> [ddnet] <fokkonaut> it wouldnt respect https://github.com/Jupeyy/ddnet/blob/46b9a7abf8967315c30503c5191686e7dae559da/src/engine/shared/snapshot.cpp#L24-L49 anymore
19:27 <+bridge> [ddnet] <fokkonaut> Means, it would break extended messages
19:28 <+bridge> [ddnet] <Jupstar âœª> why not ask robyte, he'll glady do it i bet
19:28 <+bridge> [ddnet] <fokkonaut> Dont apply that, lol
19:28 <+bridge> [ddnet] <Jupstar âœª> he also tested ime stuff for teeworlds
19:28 <+bridge> [ddnet] <Learath2> I doubt we can bisect remotely like this :D, with 500 commits it'd take 9 compilations
19:29 <+bridge> [ddnet] <deen> so, 9 builds? 20 min turnaround time, we'd be done in 3 hours
19:29 <+bridge> [ddnet] <Learath2> I'll just get mingw back on this windows installation
19:30 <+bridge> [ddnet] <Jupstar âœª> ok
19:30 <+bridge> [ddnet] <Jupstar âœª> so its not possible anyway?
19:30 <+bridge> [ddnet] <Jupstar âœª> todo binary search
19:31 <+bridge> [ddnet] <fokkonaut> https://github.com/Jupeyy/ddnet/blob/46b9a7abf8967315c30503c5191686e7dae559da/src/engine/shared/uuid_manager.cpp#L128-L136
19:31 <+bridge> [ddnet] <Jupstar âœª> @fokkonaut\: can you please just say how your client does it?, do you use a different system for extensions?
19:31 <+bridge> [ddnet] <fokkonaut> You mean F-Client?
19:31 <+bridge> [ddnet] <fokkonaut> It does the same as DDNet
19:32 <+bridge> [ddnet] <Learath2> I think 0.7 is better at doing it's searches in snaps
19:32 <+bridge> [ddnet] <fokkonaut> https://github.com/fokkonaut/F-Client/blob/F-Client/src/engine/shared/uuid_manager.cpp#L100-L110
19:32 <+bridge> [ddnet] <fokkonaut> my client uses heinrichs older approach, i htink
19:32 <+bridge> [ddnet] <fokkonaut> no idea if this is slower or not
19:32 <+bridge> [ddnet] <Jupstar âœª> this sucks i know that
19:32 <+bridge> [ddnet] <Learath2> We can go even further and unpack snaps into hashmaps so all further lookups are O(1)
19:33 <+bridge> [ddnet] <Jupstar âœª> ok so you have the same performance regressions
19:33 <+bridge> [ddnet] <Jupstar âœª> maybe the uuid manager is just overkill
19:33 <+bridge> [ddnet] <Jupstar âœª> i dont see an easy way to binary search if you HAVE to use the UUID
19:33 <+bridge> [ddnet] <fokkonaut> no other vanilla compatible way i think, because it sends this snap as if it has the id 0
19:33 <+bridge> [ddnet] <fokkonaut> iirc
19:33 <+bridge> [ddnet] <Jupstar âœª> yeah i already optimized it a bit, bcs nameplates were so slow in the past
19:34 <+bridge> [ddnet] <Jupstar âœª> hashmaps will be very slow i think
19:34 <+bridge> [ddnet] <Jupstar âœª> we need a 32bit lookup
19:34 <+bridge> [ddnet] <Jupstar âœª> everything else gets slow very fast
19:36 <+bridge> [ddnet] <Learath2> Is that really the part that is getting overwhelmed?
19:36 <+bridge> [ddnet] <Jupstar âœª> yes
19:36 <+bridge> [ddnet] <Jupstar âœª> https://matrix-client.matrix.org/_matrix/media/r0/download/matrix.org/MzBjRAcoNIsJBIqChKFOGLxp
19:36 <+bridge> [ddnet] <deen> seems so
19:36 <+bridge> [ddnet] <Jupstar âœª> oh sry
19:36 <+bridge> [ddnet] <Jupstar âœª> this
19:37 <+bridge> [ddnet] <Jupstar âœª> if there is a way to sort them somehow or not call uuid its fixable
19:37 <+bridge> [ddnet] <Jupstar âœª> else its a design flaw
19:37 <+bridge> [ddnet] <Learath2> Sort what?
19:37 <+bridge> [ddnet] <Jupstar âœª> sort keys to call the uuid loopup as less as possible
19:37 <+bridge> [ddnet] <Jupstar âœª> the uuid lookup is already binary, and still so slow, bcs its called so often
19:38 <+bridge> [ddnet] <Jupstar âœª> is heinrich online
19:38 <+bridge> [ddnet] <Learath2> Nope
19:38 <+bridge> [ddnet] <Jupstar âœª> he could just tell xd
19:39 <+bridge> [ddnet] <Learath2> Okay, iirc currently the snap includes an object that has the mappings from snap-type-id -> uuid
19:39 <+bridge> [ddnet] <Jupstar âœª> wait netobject extensions have an unique identifier type dont they?
19:40 <+bridge> [ddnet] <Jupstar âœª> did we have some documentation somewhere?
19:41 <+bridge> [ddnet] <Jupstar âœª> https://github.com/heinrich5991/libtw2/blob/master/doc/snapshot.md
19:41 <+bridge> [ddnet] <fokkonaut> wrong information as it seems, let me debug
19:41 <+bridge> [ddnet] <Learath2> Basically `NETOBJTYPE_EX`Â objects provide a mapping from type-id inside the snap to a uuid
19:42 <+bridge> [ddnet] <Jupstar âœª> ok
19:42 <+bridge> [ddnet] <Jupstar âœª> i mean we just need to "original key" and check against that i guess, snapfind item uses the lookedup item type
19:42 <+bridge> [ddnet] <Jupstar âœª> we need to original item type, is that always NETOBJTYPE\_EX
19:44 <+bridge> [ddnet] <Learath2> Extended objects get `typeid > OFFSET_UUID_TYPE`, `NETOBJTYPE_EX`Â objects provide the mapping from this typeid to the uuid
19:45 <+bridge> [ddnet] <Jupstar âœª> ok
19:48 <+bridge> [ddnet] <Learath2> https://github.com/teeworlds/teeworlds/pull/2129 here is what 0.7 did to optimize snap lookups
19:48 <+bridge> [ddnet] <Jupstar âœª> yeah, but that doesnt like, like its doable
19:49 <+bridge> [ddnet] <Learath2> Why not?
19:49 <+bridge> [ddnet] <Jupstar âœª> ok another question you might know
19:49 <+bridge> [ddnet] <Jupstar âœª> 
19:49 <+bridge> [ddnet] <Jupstar âœª> lets say you have 2 extended objects of the same type, do they share the same offset to the item uuid?
19:50 <+bridge> [ddnet] <Jupstar âœª> bcs type + id is not the same refering @fokkonaut
19:50 <+bridge> [ddnet] <Learath2> they do
19:50 <+bridge> [ddnet] <Learath2> Well to be more correct they will have the exact same type within that one snap
19:50 <+bridge> [ddnet] <fokkonaut> it is the same, but extended objects have type 0
19:51 <+bridge> [ddnet] <fokkonaut> to be vanilla compatible
19:51 <+bridge> [ddnet] <fokkonaut> "compatible"
19:51 <+bridge> [ddnet] <fokkonaut> i other words: so they can be sent to vanilla clients, so they can drop them
19:51 <+bridge> [ddnet] <Learath2> Um, nope. I don't think so
19:51 <+bridge> [ddnet] <fokkonaut> yes, they are
19:51 <+bridge> [ddnet] <fokkonaut> yes, they have
19:52 <+bridge> [ddnet] <Learath2> Eeeh, no they don't or snapshot.cpp is lying to me
19:52 <+bridge> [ddnet] <fokkonaut> They are found by the uuid
19:52 <+bridge> [ddnet] <Learath2> Type 0 is used to provide the mapping,
19:52 <+bridge> [ddnet] <Learath2> Types > OFFSET_UUID_TYPE are decoded using objects of type 0
19:52 <+bridge> [ddnet] <Jupstar âœª> @Learath2\: are the extended types dynamic, e.g. can it have a different internal index from snapshot to snapshot?
19:52 <+bridge> [ddnet] <Learath2> Yes
19:52 <+bridge> [ddnet] <Jupstar âœª> ok
19:53 <+bridge> [ddnet] <Jupstar âœª> so we only need to store these mappings?
19:53 <+bridge> [ddnet] <fokkonaut> yea, but you dont send them as lets say 65557, it can differ from the type number thats on the server
19:53 <+bridge> [ddnet] <Jupstar âœª> from snapshot to snapshot?
19:53 <+bridge> [ddnet] <Jupstar âœª> then we can doi smth like this
19:53 <+bridge> [ddnet] <Jupstar âœª> https://github.com/Jupeyy/ddnet/commit/46b9a7abf8967315c30503c5191686e7dae559da
19:53 <+bridge> [ddnet] <Jupstar âœª> 
19:53 <+bridge> [ddnet] <Jupstar âœª> just with the mapped type
19:54 <+bridge> [ddnet] <Jupstar âœª> e.g. a map that has ENTITY\_EX as key and the internal index as data entry of a std\:\:map
19:54 <+bridge> [ddnet] <Jupstar âœª> 
19:54 <+bridge> [ddnet] <Jupstar âœª> so we can just see what ENTITY\_EX requires as internal type
19:55 <+bridge> [ddnet] <Jupstar âœª> and than do the thing in my commit with that mapped data
19:56 <+bridge> [ddnet] <Learath2> I'm not sure what you are really referring to, the first extended type in a snapshot will be type `32766`
19:57 <+bridge> [ddnet] <Jupstar âœª> yes
19:57 <+bridge> [ddnet] <Jupstar âœª> i'll just try it out and you have to judge on if it will work xd
19:57 <+bridge> [ddnet] <Learath2> I'm not sure what part of the process is the bottleneck. Is it the fact that we are looking for objects of type `ENTITY_EX`Â and that has to go through uuid which is too slow?
19:59 <+bridge> [ddnet] <Jupstar âœª> i mean linear search is slow, but most bottleneck simply comes from the fact we do uuid lookup and uuid is 16bytes
20:00 <+bridge> [ddnet] <Learath2> but what call stack leads to the lookup?
20:00 <+bridge> [ddnet] <Learath2> Is the new `void CGameClient::SnapCollectEntities()`Â taking too long?
20:00 <+bridge> [ddnet] <Jupstar âœª> i assume all calls, bcs it always hits extended objects
20:00 <+bridge> [ddnet] <Jupstar âœª> and they are "unwrapped"
20:01 <+bridge> [ddnet] <Jupstar âœª> that function too yes
20:01 <+bridge> [ddnet] <Jupstar âœª> its 50% of the calls, the rest is onnewsnapshot
20:01 <+bridge> [ddnet] <Jupstar âœª> ok no
20:01 <+bridge> [ddnet] <Jupstar âœª> its -5% of all perf
20:01 <+bridge> [ddnet] <Jupstar âœª> and onnewsnapshot does 50% of all
20:02 <+bridge> [ddnet] <Learath2> I don't follow, I'll just get a profile of my own
20:02 <+bridge> [ddnet] <Jupstar âœª> image.png
20:02 <+bridge> [ddnet] <Jupstar âœª> https://cdn.discordapp.com/attachments/293493549758939136/905894778200281108/image.png
20:03 <+bridge> [ddnet] <Jupstar âœª> oh thats the optimized version
20:03 <+bridge> [ddnet] <Jupstar âœª> image.png
20:03 <+bridge> [ddnet] <Jupstar âœª> https://cdn.discordapp.com/attachments/293493549758939136/905895029258719232/image.png
20:07 <+bridge> [ddnet] <Learath2> Hm, I don't know what SnapFindItem call is causing this
20:07 <+bridge> [ddnet] <fokkonaut> probably from entityex
20:08 <+bridge> [ddnet] <Learath2> There is no SnapFindItem for entityex tho, they are collected differently
20:08 <+bridge> [ddnet] <fokkonaut> ah
20:08 <+bridge> [ddnet] <Jupstar âœª> it also doesnt really matter which one it is, i think all netobjects use it
20:08 <+bridge> [ddnet] <Jupstar âœª> the problem is that entity ex are part of the snapshot
20:08 <+bridge> [ddnet] <Jupstar âœª> so they are still looked up
20:08 <+bridge> [ddnet] <Jupstar âœª> (?)
20:08 <+bridge> [ddnet] <Learath2> There are rather few calls to snapfinditem in the code :/
20:09 <+bridge> [ddnet] <fokkonaut> yes, what i thought too
20:09 <+bridge> [ddnet] <fokkonaut> right now xd
20:09 <+bridge> [ddnet] <Learath2> Maybe the new entityex just make the snap too big for linear search to be viable?
20:09 <+bridge> [ddnet] <Jupstar âœª> so @Learath2 you are saying that we can just ignore objectex?
20:09 <+bridge> [ddnet] <Jupstar âœª> in that call
20:09 <+bridge> [ddnet] <Jupstar âœª> that would be even easier
20:10 <+bridge> [ddnet] <fokkonaut> i think so, yes
20:11 <+bridge> [ddnet] <Learath2> Wym? The id 0? that already should be early returning from GetItemType
20:11 <+bridge> [ddnet] <Jupstar âœª> so just check if the item type is over UUID\_OFFSET, and only check else
20:11 <+bridge> [ddnet] <Jupstar âœª> it doesnt rearly return if there is a object\_ex somewhere in the snapshot
20:11 <+bridge> [ddnet] <Jupstar âœª> early\*
20:11 <+bridge> [ddnet] <Jupstar âœª> bcs that object\_ex is looked up, even if it doesnt matter for this find call
20:12 <+bridge> [ddnet] <Jupstar âœª> it makes no difference between the type of the snapshot thing
20:12 <+bridge> [ddnet] <Learath2> What do you mean by object_ex? `NETOBJTYPE_EX`?
20:12 <+bridge> [ddnet] <Jupstar âœª> yes
20:12 <+bridge> [ddnet] <Learath2> `NETOBJTYPE_EX == 0`Â which is < `OFFSET_UUID_TYPE` so GetItemType should never result in a uuid lookup
20:13 <+bridge> [ddnet] <Learath2> Idk what else you'd be meaning by lookup
20:15 <+bridge> [ddnet] <Jupstar âœª> ok
20:15 <+bridge> [ddnet] <Jupstar âœª> then not objtype\_ex
20:15 <+bridge> [ddnet] <Jupstar âœª> but whatever uses the uuid thing
20:15 <+bridge> [ddnet] <Learath2> Can we somehow learn where this snapfinditem is being called from?
20:15 <+bridge> [ddnet] <Jupstar âœª> NETMSG\_MAP\_DETAILS
20:15 <+bridge> [ddnet] <Learath2> You can try caching the mapping OnNewSnapshot actually
20:16 <+bridge> [ddnet] <Jupstar âœª> if snapfinditem doesnt require extended protocol, it will be fast enough
20:16 <+bridge> [ddnet] <Learath2> Get all the `NETOBJTYPE_EX` objects, build a map from internal id directly to externalid, then use that for this snapshot
20:17 <+bridge> [ddnet] <Learath2> NETMSG_MAP_DETAILS isn't even a snap object, how would it be going thru snapfinditem?
20:19 <+bridge> [ddnet] <Jupstar âœª> well i dunno what message
20:19 <+bridge> [ddnet] <Jupstar âœª> but one of them must be in
20:19 <+bridge> [ddnet] <Jupstar âœª> or the server sends buggy snapshots
20:19 <+bridge> [ddnet] <Jupstar âœª> https://github.com/Jupeyy/ddnet/commit/7b91d861c65ef152f4ed0f16ff8a52be03627951
20:19 <+bridge> [ddnet] <Jupstar âœª> safe or not?
20:21 <+bridge> [ddnet] <Learath2> I don't see how that's helpful
20:22 <+bridge> [ddnet] <Learath2> You removed the ability to find extended objects?
20:22 <+bridge> [ddnet] <Jupstar âœª> NETOBJTYPE\_GAMEINFOEX
20:23 <+bridge> [ddnet] <Jupstar âœª> thats the question
20:23 <+bridge> [ddnet] <Jupstar âœª> (@Learath2)
20:23 <+bridge> [ddnet] <Jupstar âœª> is it ever useful? the client only 2 times does not try to find a non vanilla object type
20:25 <+bridge> [ddnet] <Learath2> I'm not following your logic here. You are still doing GetItemType, which is already cheap for non extended object
20:25 <+bridge> [ddnet] <Learath2> s
20:25 <+bridge> [ddnet] <Jupstar âœª> ok NETOBJTYPE\_DDNETPROJECTILE seems like a problem atleast?
20:25 <+bridge> [ddnet] <Jupstar âœª> thats what i suggested yes
20:25 <+bridge> [ddnet] <Jupstar âœª> (@Learath2)
20:25 <+bridge> [ddnet] <Learath2> I actually don't have any idea, you managed to completely confuse me ðŸ˜„
20:26 <+bridge> [ddnet] <Jupstar âœª> ok lets see it like this\:
20:26 <+bridge> [ddnet] <Jupstar âœª> NETOBJTYPE\_GAMEINFOEX is in the snapshot every time isnt it?
20:26 <+bridge> [ddnet] <Jupstar âœª> every tick
20:26 <+bridge> [ddnet] <Learath2> yes
20:27 <+bridge> [ddnet] <Jupstar âœª> and NETOBJTYPE\_GAMEINFOEX is uuid
20:27 <+bridge> [ddnet] <Jupstar âœª> 
20:27 <+bridge> [ddnet] <Jupstar âœª> so even if you search for something completly unrelated, like a character, it might still lookup this ID type
20:27 <+bridge> [ddnet] <Learath2> Ah, I see what you mean, as said I think building a map at the start will work
20:27 <+bridge> [ddnet] <Jupstar âœª> ok
20:28 <+bridge> [ddnet] <Learath2> Your patch makes more sense too now, it's not correct but it does make sense
20:29 <+bridge> [ddnet] <Learath2> Check if the type we are looking for is an extended type. If not don't even do the lookup is what you are trying to do, right?
20:32 <+bridge> [ddnet] <Jupstar âœª> from what i see only NETOBJTYPE\_DDNETPROJECTILE is used in snapfinditem
20:32 <+bridge> [ddnet] <Jupstar âœª> so we basically only would require mapping for this single uuid
20:33 <+bridge> [ddnet] <Jupstar âœª> (the only non vanilla netobj to be precise)
20:34 <+bridge> [ddnet] <Learath2> Branch on `Type < OFFSET_UUID_TYPE` if true check the raw type, else check thru getItemType. it's not pretty but it will show if that's the issue
20:38 <+bridge> [ddnet] <Jupstar âœª> but i guess i can also check against OFFSET\_GAME\_UUID-1 from protocol.h so i know if the type expects a uuid or not
20:38 <+bridge> [ddnet] <Jupstar âœª> 
20:38 <+bridge> [ddnet] <Jupstar âœª> the uuid manager always adds + OFFSET\_UUID
20:39 <+bridge> [ddnet] <Learath2> Oh please don't confuse me more, these are all different uuids
20:39 <+bridge> [ddnet] <Learath2> offsets*
20:40 <+bridge> [ddnet] <Learath2> `OFFSET_UUID_TYPE` is the offset you are looking for, types < that are internal vanilla types, types >= are extended types period
20:41 <+bridge> [ddnet] <Jupstar âœª> https://github.com/Jupeyy/ddnet/commit/a990669050f70dbac7a14f89e0a4e19438668f56
20:45 <+bridge> [ddnet] <Jupstar âœª> that fix atleast doubles my fps
21:37 <+bridge> [ddnet] <Robyt3> this better be all the unicode fixes :justatest:
22:08 <+bridge> [ddnet] <nuborn> oh. do normal doors show correctly for you? doors are only rendered from the snapshot, so the client doesn't know if it's actually a "real" door or anything else. perhaps you can compare the values (and m_Number/m_Layer) with normal doors
22:09 <+bridge> [ddnet] <fokkonaut> All fine, I was only sending m_NumSwitchers amount for SwitchState, forgot to add + m_NumPlots from my side
22:09 <+bridge> [ddnet] <fokkonaut> All working
22:09 <+bridge> [ddnet] <nuborn> ah ok, nice
22:10 <+bridge> [ddnet] <fokkonaut> If door prediction will base on this, and not tiles, it will work so good :)
22:11 <+bridge> [ddnet] <nuborn> yes, the idea is to make it possible to get more general prediction (and in theory you could even add other types of doors, and get prediction)
22:12 <+bridge> [ddnet] <fokkonaut> oo
22:12 <+bridge> [ddnet] <nuborn> if someone ever fixes the "pass through doors thing" for example:P
22:12 <+bridge> [ddnet] <nuborn> if someone ever fixes the "pass through doors" thing for example:P
22:13 <+bridge> [ddnet] <nuborn> (or maybe it already is)
22:13 <+bridge> [ddnet] <fokkonaut> its not
22:14 <+bridge> [ddnet] <fokkonaut> I dont think its needed to fix that for prediction tho
22:25 <+bridge> [ddnet] <nuborn> I have a branch where I got rid of even more calls to SnapFindItem, including this one (I think), by caching the SNAP_CUR->SNAP_PREV mapping in addition to the entity ex mapping, so I could try to finish up that one
22:28 <+bridge> [ddnet] <nuborn> I dont know much about how UUIDs/SnapFindItem works otherwise, but noticed previously that the uuid lookup took most of the time there
22:37 <+bridge> [ddnet] <deen> oh, you're here too. hi, thanks for fix ðŸ™‚
23:02 <+bridge> [ddnet] <Learath2> @nuborn || anyone looking into the uuid thing: The mapping of type to uuid is not static, it's per snap. Just be careful with that
23:09 <+bridge> [ddnet] <nuborn> oh, so its a mapping to the types, not the objects? then I probably misread a few things of the discussion above
23:10 <+bridge> [ddnet] <Learath2> Okay, let's use concrete terminology here. When I say type I refer to the type part of the "typeandid" construct inside any given netobject
23:11 <+bridge> [ddnet] <Learath2> That type if below `OFFSET_UUID_TYPE` refers to vanilla object types. Except for type 0 (`NETMSGTYPE_EX`). Objects of type 0 instead denote a mapping from their id (which refers to the id inside the netobject) to a uuid.
23:12 <+bridge> [ddnet] <Learath2> Types above `OFFSET_UUID_TYPE` are mapped to uuids using the mappings sent in the `NETMSGTYPE_EX` objects. Then these uuids are mapped to types using the uuid manager
23:13 <+bridge> [ddnet] <Learath2> That last sentence should have been `s/types/concrete types/` as in `NETOBJTYPE_ENTITYEX` e.g.
23:15 <+bridge> [ddnet] <Learath2> Optimizations that come to mind are first keeping this a mapping from extended concrete types to snap internal types
23:15 <+bridge> [ddnet] <Learath2> Second optimizing the linear lookup in SnapFindItem
23:16 <+bridge> [ddnet] <Learath2> Third re-engineering the extended net objects to negotiate the mapping before the first snap through netmsgs
23:17 <+bridge> [ddnet] <nuborn> yes, thanks, that clarified it quite a bit (wasn't aware of how uuids worked internally)
23:19 <+bridge> [ddnet] <nuborn> something I thought about previously (and tried a bit) was to do something like SnapCollectEntities to also gather the snap_prev and snap_cur versions of netobjects in the same list, to reduce the calls to SnapFindItem more, but not sure if that would be needed with those other optimizations?
23:20 <+bridge> [ddnet] <Learath2> I actually have no idea what is the problem here, I haven't profiled it myself so I'll refrain from saying anything concrete
23:20 <+bridge> [ddnet] <Learath2> I think the optimization jupeyy came up with + taking the binary search for snaps from 0.7 should get us back to the same performance, but not exactly sure
23:21 <+bridge> [ddnet] <Learath2> I'd also like to get @heinrich5991 to take a look at the optimization we thought of, I'm sure he'd have a more elegant way of doing it since my idea breaks abstraction
23:23 <+bridge> [ddnet] <Learath2> Oh and an extreme optimization I don't remember who came up with is to unpack the snaps as they arrive into a hashmap
23:23 <+bridge> [ddnet] <Learath2> This would make all lookups O(1), though I think most of the operations on a snap seems to be iterating which is not that good in a hashmap
23:27 <+bridge> [ddnet] <nuborn> yes, lookups on ID are perhaps mostly useful for things like matching cur+prev
23:33 <+bridge> [ddnet] <Learath2> SIMD snap parsing when?
