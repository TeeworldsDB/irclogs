02:12 < bridge_> <Tyrone> Whats the way i can check to see if someone mentions me in chat in chat.cpp?
03:17 < ws-client> <ChillerDragon> In a few days we will probably reach issue/pr #8303 on the ddnet/ddnet repo <:poggers2:1008007455936094328>
03:17 < ws-client> <ChillerDragon> @Tyrone you mean where to put what if statement in the code? there is highlight already
03:19 < ws-client> <ChillerDragon> for example here @Tyrone https://github.com/ddnet/ddnet/blob/d26505759181835b3736d3be57215444f2bccd07/src/game/client/components/chat.cpp#L880-L895
03:20 < discord__> UwU
04:06 < bridge_> <Tyrone> Will look at this in the morning thank you tho Mr dragon
10:45 < bridge_> <ryozuki> morning
10:47 < bridge_> <Peakies> gm
13:39 < ws-client> <ChillerDragon> gn
15:22 < bridge_> <sedonya> What function is called when a player hooks a player? Like OnCharacerDeath, but I couldn't find something similar to OnHook
15:22 < bridge_> <learath2> I don't think there is a hook for it since nothing acts on that information
15:22 < bridge_> <sedonya> Are there other functions that are called along with the hook?
15:28 < bridge_> <learath2> I meant "hook" as in "hooking point". As in I don't think any function is called when you successfully attach your hook to another tee
15:28 < bridge_> <learath2> But check gamecore to be sure
15:29 < bridge_> <learath2> `SetHookedPlayer` is called. Maybe you can check that
16:53 < bridge_> <gumbatw> Is there a way to do the ger10.ddnet.org whitelist handshake thing via bash terminal? Just pinging it is not enough
16:55 < bridge_> <Jupstar ‚ú™> curl <url> maybe
17:12 < bridge_> <milkeeycat> hey, i was trying to make thingy which would parse numeric string and return little endian bytes from that string. here's what ive done
17:12 < bridge_> <milkeeycat> 
17:12 < bridge_> <milkeeycat> ```rust
17:12 < bridge_> <milkeeycat> #[derive(Debug)]
17:12 < bridge_> <milkeeycat> struct IntRepr(Vec<u8>);
17:12 < bridge_> <milkeeycat> 
17:12 < bridge_> <milkeeycat> impl IntRepr {
17:12 < bridge_> <milkeeycat>     pub fn new() -> Self {
17:12 < bridge_> <milkeeycat>         Self(Vec::new())
17:12 < bridge_> <milkeeycat>     }
17:12 < bridge_> <milkeeycat> 
17:12 < bridge_> <milkeeycat>     pub fn div2(&self, num: &str) -> Option<(String, bool)> {
17:12 < bridge_> <milkeeycat>         let mut remainder = false;
17:12 < bridge_> <milkeeycat>         let result = num
17:12 < bridge_> <milkeeycat>             .chars()
17:12 < bridge_> <milkeeycat>             .map(|ch| {
17:12 < bridge_> <milkeeycat>                 let mut new = ch as u8 - b'0';
17:12 < bridge_> <milkeeycat>                 if remainder {
17:12 < bridge_> <milkeeycat>                     new += 10;
17:12 < bridge_> <milkeeycat>                 }
17:12 < bridge_> <milkeeycat> 
17:12 < bridge_> <milkeeycat>                 if new & 1 != 0 {
17:13 < bridge_> <milkeeycat>                     remainder = true;
17:13 < bridge_> <milkeeycat>                 } else {
17:13 < bridge_> <milkeeycat>                     remainder = false;
17:13 < bridge_> <milkeeycat>                 }
17:13 < bridge_> <milkeeycat> 
17:13 < bridge_> <milkeeycat>                 new >>= 1;
17:13 < bridge_> <milkeeycat> 
17:13 < bridge_> <milkeeycat>                 (new + b'0') as char
17:13 < bridge_> <milkeeycat>             })
17:22 < bridge_> <milkeeycat> hey, i was trying to make thingy which would parse numeric string and return little endian bytes from that string. here's what ive done
17:22 < bridge_> <milkeeycat> 
17:22 < bridge_> <milkeeycat> ```rust
17:22 < bridge_> <milkeeycat> #[derive(Debug)]
17:22 < bridge_> <milkeeycat> struct IntRepr(Vec<u8>);
17:22 < bridge_> <milkeeycat> 
17:22 < bridge_> <milkeeycat> impl IntRepr {
17:22 < bridge_> <milkeeycat>     pub fn new() -> Self {
17:22 < bridge_> <milkeeycat>         Self(Vec::new())
17:22 < bridge_> <milkeeycat>     }
17:22 < bridge_> <milkeeycat> 
17:22 < bridge_> <milkeeycat>     fn div2(&self, num: &str) -> Option<(String, bool)> {
17:22 < bridge_> <milkeeycat>         let mut remainder = false;
17:23 < bridge_> <milkeeycat>         let result = num
17:23 < bridge_> <milkeeycat>             .chars()
17:23 < bridge_> <milkeeycat>             .map(|ch| {
17:23 < bridge_> <milkeeycat>                 let mut new = ch as u8 - b'0';
17:23 < bridge_> <milkeeycat>                 if remainder {
17:23 < bridge_> <milkeeycat>                     new += 10;
17:23 < bridge_> <milkeeycat>                 }
17:23 < bridge_> <milkeeycat> 
17:23 < bridge_> <milkeeycat>                 if new & 1 != 0 {
17:23 < bridge_> <milkeeycat>                     remainder = true;
17:23 < bridge_> <milkeeycat>                 } else {
17:23 < bridge_> <milkeeycat>                     remainder = false;
17:23 < bridge_> <milkeeycat>                 }
17:23 < bridge_> <milkeeycat> 
17:23 < bridge_> <milkeeycat>                 new >>= 1;
17:23 < bridge_> <milkeeycat> 
17:23 < bridge_> <milkeeycat>                 (new + b'0') as char
17:23 < bridge_> <milkeeycat>             })
17:26 < bridge_> <melo∆û> nice understanding of bit manipulation!
17:26 < bridge_> <egyt> > `foo`
17:26 < bridge_> <egyt> ü§î
17:27 < bridge_> <egyt> > `foo`
17:27 < bridge_> <egyt> that's probably the only part I understand ü§î
17:27 < bridge_> <fokkonaut> In F-DDrace there is
17:28 < bridge_> <fokkonaut> https://github.com/fokkonaut/F-DDrace/blob/5c75409ba38b65a83ff9f9717c734f35263c80a4/src/game/server/entities/character.cpp#L1496
18:02 < bridge_> <ryozuki> https://doc.rust-lang.org/std/primitive.char.html#method.to_digit
18:06 < bridge_> <ryozuki> looks rly hacky tho
18:06 < bridge_> <milkeeycat> but it works üòè
18:07 < bridge_> <ryozuki> try to remove the allocations
18:07 < bridge_> <ryozuki> maybe return a iterator
18:07 < bridge_> <ryozuki> idk
18:07 < bridge_> <ryozuki> to_string is a allocation
18:08 < bridge_> <milkeeycat> it's a feature
18:08 < bridge_> <ryozuki> ```rust
18:08 < bridge_> <ryozuki>   pub const fn to_digit(self, radix: u32) -> Option<u32> {
18:08 < bridge_> <ryozuki>         // If not a digit, a number greater than radix will be created.
18:08 < bridge_> <ryozuki>         let mut digit = (self as u32).wrapping_sub('0' as u32);
18:08 < bridge_> <ryozuki>         if radix > 10 {
18:08 < bridge_> <ryozuki>             assert!(radix <= 36, "to_digit: radix is too high (maximum 36)");
18:08 < bridge_> <ryozuki>             if digit < 10 {
18:08 < bridge_> <ryozuki>                 return Some(digit);
18:08 < bridge_> <ryozuki>             }
18:08 < bridge_> <ryozuki>             // Force the 6th bit to be set to ensure ascii is lower case.
18:08 < bridge_> <ryozuki>             digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);
18:08 < bridge_> <ryozuki>         }
18:08 < bridge_> <ryozuki>         // FIXME: once then_some is const fn, use it here
18:08 < bridge_> <ryozuki>         if digit < radix { Some(digit) } else { None }
18:08 < bridge_> <ryozuki>     }
18:09 < bridge_> <ryozuki> ```
19:05 < bridge_> <Peakies> :justatest:
19:43 < bridge_> <melo∆û> :justatest: git hard fr
