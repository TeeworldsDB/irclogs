00:16 < bridge_> <heinrich5991> netcode didn't really change
00:16 < bridge_> <heinrich5991> basically only the pacing of packets
00:17 < bridge_> <learath2> I would have expected the inverse ðŸ˜„
00:17 < bridge_> <learath2> https://cdn.discordapp.com/attachments/293493549758939136/1129174817074069604/F07Bj50XgAAFJ8C.png
00:18 < bridge_> <Ewan> why?
00:18 < bridge_> <learath2> Turns out people with filthy mouths are better C coders, take that cs people
00:19 < chillerbot> error
00:19 < bridge_> <Ewan> error
00:24 < chillerbot> error
00:24 < bridge_> <murpi> error
00:26 < bridge_> <majefamous> Hey everyone!!!  I am checking to see if anyone here is in need of a Full time or part-time job. Flexible and Easy Work From Home
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> BENEFITS!
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> Training\: 1 week.
00:26 < bridge_> <majefamous>  3 hours daily/ 5days Monday-Friday 
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> Payment\: Weekly $2500
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> Location\: Anywhere of your choice
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> Employment Type\: online promoter /ONLINE TASK
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> Work from Home Position 
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> JOIN THE CHAT ROOM FOR MORE INFORMATION
00:26 < bridge_> <majefamous> ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡
00:26 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
00:26 < bridge_> <majefamous> 
00:26 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
00:35 < bridge_> <_gwendal> Hey i think that's quite a problem
00:35 < bridge_> <_gwendal> https://cdn.discordapp.com/attachments/293493549758939136/1129179240722604194/Discord_t2FV9XJwZA.png
00:35 < bridge_> <_gwendal> if you don't enter a name, the bot will try your username instead trying with your nickname
00:35 < bridge_> <_gwendal> if you don't enter a name, the bot will try your username instead of trying with your nickname
00:37 < bridge_> <murpi> Blame discord
00:37 < bridge_> <_gwendal> xd
00:37 < bridge_> <murpi> uNiQuE UsErNAmEs
00:37 < bridge_> <_gwendal> i can try to fix that tonight if you wish
00:37 < bridge_> <_gwendal> (it must be 1 line to change)
00:48 < bridge_> <murpi> No, we just have to update our discord.py version. What you experience is a bug that hasn't been fixed in discord.py 2.2.2 yet
00:53 < bridge_> <murpi> granted the problem couldn't have been resolved in discord.py 2.2.2 because the username migration took place after the release of that version but still
00:59 < bridge_> <majefamous> Hey everyone!!!  I am checking to see if anyone here is in need of a Full time or part-time job. Flexible and Easy Work From Home
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> BENEFITS!
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> Training\: 1 week.
00:59 < bridge_> <majefamous>  3 hours daily/ 5days Monday-Friday 
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> Payment\: Weekly $2500
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> Location\: Anywhere of your choice
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> Employment Type\: online promoter /ONLINE TASK
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> Work from Home Position 
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> JOIN THE CHAT ROOM FOR MORE INFORMATION
00:59 < bridge_> <majefamous> ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡
00:59 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
00:59 < bridge_> <majefamous> 
00:59 < bridge_> <majefamous> https://t.me/+s1mUKAv6bQMxOWE0
01:00 < bridge_> <murpi> @zwelf2 Please kick "majefamous" from IRC
01:01 < bridge_> <Zwelf> done now
01:10 < bridge_> <knusk1> yo, what about adding an option for sorting the skins by last added or recently used?
01:42 < bridge_> <chairn> cant you use the name that is used only by this discord rather than the uNiQuE UsErNAmE ?
01:43 < bridge_> <murpi> if I update the discord.py lib, yes.
01:59 < bridge_> <louis.place> is that even proper statistical analysis
01:59 < bridge_> <chairn> it is if you only consider the average
01:59 < bridge_> <chairn> but the second gaussian fit is far fetched
01:59 < bridge_> <louis.place> it doenst compare code with to code without swear words really
02:00 < bridge_> <chairn> it does?
02:00 < bridge_> <learath2> It's probably a flawed study, the group of projects with swear words must be much much smaller
02:01 < bridge_> <chairn> is wtf a swear word?
02:01 < bridge_> <learath2> As evidenced by the distribution not really being normal, central limit theorem guarantees that with enough of a sample size you'll always get a normal, as you do on the left one
02:03 < bridge_> <louis.place> it just shows the distribution for each on their own no?
02:03 < bridge_> <louis.place> am i tripping
02:03 < bridge_> <chairn> in the same way you can compare number, you can compare distribution
02:03 < bridge_> <louis.place> like having an average for each value would be a better comparison
02:03 < bridge_> <chairn> in the same way you can compare numbers, you can compare distributions
02:03 < bridge_> <louis.place> and yeah looks like the sample size is too small for the one on the right anyways
02:04 < bridge_> <chairn> you can also see here the asymmetry of the second one
02:04 < bridge_> <louis.place> theres nothing 9+
02:04 < bridge_> <chairn> but yeah, we lack also the std deviation, the kurtosis and asymmetry factor if we want to be pedantic
02:04 < bridge_> <chairn> we also lack sample size for each one, methodology and roughly 95% of a real study
02:07 < bridge_> <learath2> ðŸ˜„
02:07 < bridge_> <learath2> It's just one graph
02:07 < bridge_> <louis.place> ðŸ¤“ this twitter post is confirmed not statistically sound
02:07 < bridge_> <learath2> Also depends very much on what code quality metric is used
07:10 < bridge_> <ryozuki> trye
07:10 < bridge_> <ryozuki> another day i get the urge to do some ddnet web dev
07:10 < bridge_> <ryozuki> with rust
07:10 < bridge_> <ryozuki> maybe ill do it finally
08:36 < ws-client> <Jupstar> @ryozuki when if not today, on FFR
08:37 < bridge_> <ryozuki> ye
08:37 < bridge_> <ryozuki> when im done with gym
09:14 < bridge_> <screeeny> what even is rust web development? I can only imagine it writing your wasm code
09:16 < bridge_> <ryozuki> no?
09:16 < bridge_> <ryozuki> backend
09:16 < bridge_> <ryozuki> my go to stack nowadays is rust backend svelte ts frontend
09:17 < bridge_> <ryozuki> im gonna do a master visualizer i think
09:18 < bridge_> <screeeny> oh u mean as backend i see, sounds like a nice stack
09:18 < ws-client> <Jupstar> i mean even for wasm its cool
09:18 < bridge_> <screeeny> please do it ddnet.org gives me chills
09:18 < ws-client> <Jupstar> blazingly fast startup times
09:19 < ws-client> <Jupstar> blazingly few javascript
09:20 < bridge_> <ryozuki> ill try
09:20 < bridge_> <ryozuki> modern slick
09:20 < bridge_> <ryozuki> blazing fast
09:20 < bridge_> <ryozuki> fearless concurrnecy
09:20 < bridge_> <screeeny> catgirl devs
09:21 < bridge_> <ryozuki> :cutestare:
09:21 < bridge_> <ryozuki> with socks
09:21 < bridge_> <ryozuki> put the rust socks
09:23 < bridge_> <chillerdragon> WTF is that a response to my !p from yesterday?
09:23 < bridge_> <chillerdragon> (<@749222324980416602_chillerbot>)
09:24 < ws-client> <Jupstar> i think i have to write yet another serialization library for rust xdd
09:24 < ws-client> <Jupstar> https://github.com/djkoloski/rust_serialization_benchmark
09:24 < ws-client> <Jupstar> they are simply too slow
09:24 < bridge_> <ryozuki> no?
09:24 < bridge_> <ryozuki> they pretty fast
09:24 < bridge_> <ryozuki> iirc
09:32 < ws-client> <Jupstar> i need the fastest
09:58 < bridge_> <ryozuki> alkahest looks nice
09:58 < bridge_> <ryozuki> but its weird to put serde_json there
09:58 < bridge_> <ryozuki> json is inherently slower than others like bincode
10:00 < bridge_> <ryozuki> rkyv too
10:08 < bridge_> <ryozuki> https://cheats.rs/
10:08 < bridge_> <ryozuki> @learath2
10:08 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1129323623736418304/image.png
10:08 < bridge_> <ryozuki> here its shown too
10:08 < bridge_> <ryozuki> the let thing we discussed
10:18 < bridge_> <ryozuki> my rust pr was merged finally
10:18 < bridge_> <ryozuki> present rust contributor
10:44 < bridge_> <Ewan> gg
11:03 < ws-client> <Jupstar> @ryozuki u are smth better now than us
11:24 < bridge_> <Zwelf> chillerdragon\: I've now a daily updating archive of the ddnet discord channels\: https://archive.strct.cc/ddnet (and some more) Not an interactive Matrix bridge yet, but at least read-only access.
11:25 < ws-client> <Jupstar> omg that looks fancy af xd
11:29 < bridge_> <heinrich5991> Zwelf: cool!
11:29 < bridge_> <heinrich5991> I love archives
11:32 < bridge_> <heinrich5991> @jupeyy_keks cool benchmark
11:33 < bridge_> <heinrich5991> I think it's good to include, so you can see how much slower it is
11:52 < bridge_> <heinrich5991> hmmmmmm
11:54 < bridge_> <Jupstar âœª> Lol
11:54 < bridge_> <Jupstar âœª> Did it do that automatically?
11:54 < bridge_> <heinrich5991> yes. but before passing checks
11:54 < bridge_> <heinrich5991> I seem to have misconfigured something
11:55 < bridge_> <Jupstar âœª> Rn it's only on the merge queue branch? Maybe it reopens the pr or smith xd
11:55 < bridge_> <Jupstar âœª> Smth
11:56 < bridge_> <Jupstar âœª> Ah no it merged into master
11:56 < bridge_> <Jupstar âœª> And additionally a branch lol
11:58 < bridge_> <heinrich5991> @jupeyy_keks is https://github.com/ddnet/ddnet/pull/6836 ready?
11:58 < bridge_> <heinrich5991> can you try to merge it using hte merge queue?
11:59 < bridge_> <Jupstar âœª> Why did it work now?
12:00 < bridge_> <heinrich5991> I changed some settings on the repo itself
12:00 < bridge_> <Jupstar âœª> I x
12:00 < bridge_> <Jupstar âœª> C
12:11 < bridge_> <chillerdragon> Cool stuff thanks. How is that done? Is it a officially supported export feature? Who is hosting that?
12:16 < bridge_> <Zwelf> I'm hosting that using https://github.com/Tyrrrz/DiscordChatExporter/
12:17 < bridge_> <Zwelf> not really official, but best option for me from available listed on https://wiki.archiveteam.org/index.php/Discord
12:29 < bridge_> <ryozuki> did that  pr merge itself without review?
12:30 < bridge_> <ryozuki> ah heinrich did it
12:30 < bridge_> <ryozuki> ill miss bors r+
12:31 < bridge_> <heinrich5991> https://github.com/ddnet/ddnet/pull/6848
12:31 < bridge_> <heinrich5991> you can try out the new thing ðŸ™‚
12:31 < bridge_> <ryozuki> ohh
12:31 < bridge_> <ryozuki> i will xD
12:31 < bridge_> <ryozuki> @heinrich5991 merge when ready waits for ci right?
12:31 < bridge_> <heinrich5991> correct
12:31 < bridge_> <heinrich5991> it's like `bors r+`
12:32 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1129359656926576710/image.png
12:32 < bridge_> <ryozuki> pog
12:32 < bridge_> <heinrich5991> hmmmm
12:32 < bridge_> <heinrich5991> this looks different from merge queue
12:32 < bridge_> <heinrich5991> let's see if it'll work
12:33 < bridge_> <ryozuki> i think it auto merges into the queue
12:33 < bridge_> <ryozuki> i guess the merge queue is a requirement
12:35 < bridge_> <heinrich5991> bors was a nice service ðŸ™‚ I'm thankful we had access to it
12:35 < ws-client> <Jupstar > lmao the greatest contributor to our project died xd
12:35 < bridge_> <ryozuki> xd
12:35 < bridge_> <ryozuki> true
12:35 < bridge_> <ryozuki> im still mad 100 commits of mine are not counted
12:36 < bridge_> <ryozuki> cuz github doesnt resolve mailmap
12:36 < bridge_> <heinrich5991> oh, it does not?
12:36 < bridge_> <ryozuki> no sadly
12:36 < bridge_> <ryozuki> i would be top 9
12:36 < bridge_> <ryozuki> or 8
12:36 < bridge_> <heinrich5991> have you found a feature request?
12:37 < bridge_> <ryozuki> https://github.com/orgs/community/discussions/22518
12:37 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1129360947392290816/image.png
12:37 < bridge_> <heinrich5991> I see
12:37 < bridge_> <heinrich5991> unfortunately, github is closed-source software
12:37 < bridge_> <heinrich5991> otherwise you could have fixed it yourself
12:38 < bridge_> <ryozuki> true
12:43 < bridge_> <heinrich5991> @ryozuki did you press any more buttons?
12:43 < bridge_> <heinrich5991> or did it add itself to the merge queue?
12:43 < bridge_> <Jupstar âœª> looks so weird xdd. i wonder if that influences the stats on gh profil
12:43 < bridge_> <Jupstar âœª> https://cdn.discordapp.com/attachments/293493549758939136/1129362517592907786/Screenshot_20230714-124114.png
12:44 < bridge_> <heinrich5991> no, merge commits aren't counted AFAIK
12:45 < bridge_> <heinrich5991> any preference for merge commits vs rebasing?
12:45 < bridge_> <heinrich5991> ntw
12:45 < bridge_> <heinrich5991> btw
12:45 < ws-client> <Jupstar > rebase i guess xd
12:58 < bridge_> <ryozuki> conflicts
13:00 < bridge_> <heinrich5991> I'm not sure how there can be conflicts
13:00 < bridge_> <heinrich5991> but we'll see ðŸ™‚
13:01 < bridge_> <ryozuki> @heinrich5991 sometimes there arent, u just need to rebase
13:03 < bridge_> <heinrich5991> @ryozuki seems like github is buggy(?) there are no merge conflicts when merging the branch on the command line
13:03 < bridge_> <ryozuki> yeah idk
13:03 < bridge_> <ryozuki> i seen this a lot
13:04 < bridge_> <heinrich5991> rebased
13:05 < bridge_> <chairn> does it auto close issues just like bors though ?
13:06 < bridge_> <ryozuki> @deen on the sqlite dumps, can u make map.timestamp nullable and put the 0000-00-00 timestamps as null?
13:06 < bridge_> <heinrich5991> that's a github feature, not a bors feature
13:06 < bridge_> <heinrich5991> so yes
13:06 < bridge_> <ryozuki> with that  fix pgloader would work and i would be able to import it to psql
13:06 < bridge_> <ryozuki> which probs works faster
13:06 < bridge_> <ryozuki> and maybe ddstats can be faster
13:07 < bridge_> <ryozuki> ```
13:07 < bridge_> <ryozuki> 2023-07-14T11:07:23.147996Z ERROR Database error 22008: date/time field value out of range: "0000-00-00 00:00:00"
13:07 < bridge_> <ryozuki> QUERY: CREATE TABLE maps
13:07 < bridge_> <ryozuki> (
13:07 < bridge_> <ryozuki>   map       text,
13:07 < bridge_> <ryozuki>   server    text,
13:07 < bridge_> <ryozuki>   points    bigint default '0',
13:07 < bridge_> <ryozuki>   stars     bigint default '0',
13:07 < bridge_> <ryozuki>   mapper    text,
13:07 < bridge_> <ryozuki>   timestamp timestamp default '0000-00-00 00:00:00'
13:07 < bridge_> <ryozuki> );
13:07 < bridge_> <ryozuki> ```
13:07 < bridge_> <ryozuki> and sqlite doesnt support alter column xd
13:08 < bridge_> <ryozuki> its such a chore
13:25 < bridge_> <heinrich5991> @ryozuki https://github.com/ddnet/ddnet/pull/6849 could you review this?
13:29 < bridge_> <ryozuki> done
13:30 < bridge_> <heinrich5991> nice. now it doesn't rnu all the checks twice
13:32 < bridge_> <heinrich5991> ah
13:32 < bridge_> <heinrich5991> maybe the merge conflict thing came because I changed the merge mode to rebase instead of merge
13:32 < bridge_> <heinrich5991> perhaps merge would be better?
13:32 < bridge_> <ryozuki> its easier certainly
13:33 < ws-client> <Jupstar> but why should rebase not work in such a case
13:33 < bridge_> <heinrich5991> because it likely tried to rebase both commits
13:34 < bridge_> <heinrich5991> even the one already included in master
13:34 < ws-client> <Jupstar> mh weird behavior xd
13:37 < bridge_> <heinrich5991> well, I'll leave it as rebase for now
13:38 < bridge_> <heinrich5991> let's see how it works out or if someone complains
13:39 < ws-client> <Jupstar> bors used merged right?
13:39 < ws-client> <Jupstar> the commits were always all over the place
13:39 < bridge_> <heinrich5991> yes
13:40 < bridge_> <heinrich5991> bors used merge, it couldn't do rebase unless you self-hosted it
13:40 < bridge_> <heinrich5991> we didn't ahve a choice there
13:51 < bridge_> <vy0x2> the hashes for the nightly version somehow doesnt align, can someone check too?
13:51 < bridge_> <vy0x2> ddnet.org/downloads/DDNet-nightly-win64.zip
13:51 < bridge_> <vy0x2> ddnet.org/downloads/md5sums.txt
13:51 < bridge_> <vy0x2> the hashes for the nightly version somehow doesnt align, can someone check too?
13:51 < bridge_> <vy0x2> https://ddnet.org/downloads/DDNet-nightly-win64.zip
13:51 < bridge_> <vy0x2> https://ddnet.org/downloads/md5sums.txt
13:53 < bridge_> <heinrich5991> I can confirm that it doesn't match
13:53 < bridge_> <ryozuki> md5?
13:53 < bridge_> <ryozuki> wasnt it sha
13:53 < bridge_> <heinrich5991> we also have sha256
13:53 < bridge_> <vy0x2> both
13:53 < bridge_> <heinrich5991> both don't match
13:53 < bridge_> <heinrich5991> (you should ignore md5, probably, and only use sha256)
13:56 < bridge_> <zwelf2> it probably just didn't got updated:
13:56 < bridge_> <zwelf2> ```shell
13:56 < bridge_> <zwelf2> $ curl -I https://ddnet.org/downloads/sha256sums.txt
13:56 < bridge_> <zwelf2> HTTP/2 200 
13:56 < bridge_> <zwelf2> last-modified: Sun, 09 Jul 2023 00:19:13 GMT
13:56 < bridge_> <zwelf2> $ curl -I https://ddnet.org/downloads/DDNet-nightly-win64.zip
13:56 < bridge_> <zwelf2> HTTP/2 200 
13:56 < bridge_> <zwelf2> last-modified: Thu, 13 Jul 2023 22:15:51 GMT
13:56 < bridge_> <zwelf2> ```
13:56 < bridge_> <heinrich5991> ah
13:56 < bridge_> <heinrich5991> we had full disk problems on ddnet.org yesterday
13:57 < bridge_> <heinrich5991> probably due to that
13:57 < ws-client> <Jupstar> on 9th july was last release
13:57 < ws-client> <Jupstar> maybe they were never updated in first place
13:57 < bridge_> <heinrich5991> ah
13:57 < bridge_> <heinrich5991> maybe
13:58 < ws-client> <Jupstar> we dont offer any download besides https do we? so they are not that useful anyway
13:58 < ws-client> <Jupstar> if your https isnt secure, then these keys probs wont help xd
14:03 < bridge_> <ryozuki> https://godbolt.org/z/ba7doaTn8
14:04 < bridge_> <ryozuki> look at this
14:04 < bridge_> <ryozuki> auto simd
14:04 < bridge_> <ryozuki> epic
14:04 < bridge_> <learath2> It would be useful if one of us would sign the checksums file actually
14:16 < bridge_> <heinrich5991> @ryozuki why 112?
14:16 < bridge_> <ryozuki> https://www.reddit.com/r/rust/comments/14yvlc9/n_times_faster_than_c_where_n_128/
14:16 < bridge_> <ryozuki> idk
14:16 < bridge_> <ryozuki> i found it here
14:16 < bridge_> <ryozuki> in comments
14:29 < bridge_> <TsFreddie> apparently unity can glitch when you delete something and decided it want to delete a parent folder instead
14:30 < bridge_> <TsFreddie> my day is ruined
14:30 < bridge_> <Jupstar âœª> my dog ate my unity project
14:30 < bridge_> <TsFreddie> literally
14:31 < bridge_> <TsFreddie> or i have schizophrenia and just thought i worked the entire day
14:39 < bridge_> <heinrich5991> also seems to work with 256
14:40 < bridge_> <ryozuki> no git?
14:40 < bridge_> <ryozuki> git solves that
14:40 < bridge_> <ryozuki> small commits
14:40 < bridge_> <ryozuki> rebase when done
14:42 < bridge_> <ryozuki> hello its friday
14:42 < bridge_> <ryozuki> and
14:42 < bridge_> <ryozuki> https://github.com/ddnet/ddnet/issues/6843
14:42 < bridge_> <ryozuki> rust would have prevented this
14:42 < bridge_> <ryozuki> have a good day
14:42 < bridge_> <Jupstar âœª> was about to say
14:42 < bridge_> <ryozuki> rly? xd
14:43 < bridge_> <Jupstar âœª> not this issue, but i wanted to remind its friday
14:43 < bridge_> <chairn> it's also 14th of july
14:43 < bridge_> <chairn> french national day
14:43 < bridge_> <ryozuki> congratz
14:43 < bridge_> <ryozuki> on whathever this means for u a french
14:44 < bridge_> <ryozuki> maybe ill do french fries today
14:44 < bridge_> <ryozuki> :trollet:
14:44 < bridge_> <chairn> officially, it's french federation day, but lots of people thinks more about Bastille take over
14:44 < bridge_> <heinrich5991> > Bastille Day is the common name given in English-speaking countries to the national day of France, which is celebrated on 14 July each year.
14:45 < bridge_> <chairn> which is officially wrong
14:46 < bridge_> <heinrich5991> I don't think anything in that sentence is wrong ðŸ˜„
14:47 < bridge_> <ryozuki> ```rust
14:47 < bridge_> <ryozuki> #[no_mangle]
14:47 < bridge_> <ryozuki> pub unsafe extern "C" fn cairo_native__dict_get(
14:47 < bridge_> <ryozuki>     map: *mut std::ffi::c_void,
14:47 < bridge_> <ryozuki>     key: &[u8; 32],
14:47 < bridge_> <ryozuki> ) -> *mut std::ffi::c_void {
14:47 < bridge_> <ryozuki>     let ptr = map.cast::<HashMap<[u8; 32], NonNull<std::ffi::c_void>>>();
14:47 < bridge_> <ryozuki> 
14:47 < bridge_> <ryozuki>     if let Some(v) = (*ptr).get(key) {
14:47 < bridge_> <ryozuki>         v.as_ptr()
14:47 < bridge_> <ryozuki>     } else {
14:47 < bridge_> <ryozuki>         std::ptr::null_mut()
14:47 < bridge_> <ryozuki>     }
14:47 < bridge_> <ryozuki> }
14:47 < bridge_> <ryozuki> ```
14:47 < bridge_> <ryozuki> its safe if i save a ptr to a hashmap outside rust and pass it to extern c rust functions to use its functionality?
14:47 < bridge_> <ryozuki> ```rust
14:47 < bridge_> <ryozuki> #[no_mangle]
14:47 < bridge_> <ryozuki> pub unsafe extern "C" fn dict_get(
14:47 < bridge_> <ryozuki>     map: *mut std::ffi::c_void,
14:47 < bridge_> <ryozuki>     key: &[u8; 32],
14:47 < bridge_> <ryozuki> ) -> *mut std::ffi::c_void {
14:47 < bridge_> <ryozuki>     let ptr = map.cast::<HashMap<[u8; 32], NonNull<std::ffi::c_void>>>();
14:47 < bridge_> <ryozuki> 
14:47 < bridge_> <ryozuki>     if let Some(v) = (*ptr).get(key) {
14:47 < bridge_> <ryozuki>         v.as_ptr()
14:47 < bridge_> <ryozuki>     } else {
14:47 < bridge_> <ryozuki>         std::ptr::null_mut()
14:47 < bridge_> <ryozuki>     }
14:47 < bridge_> <ryozuki> }
14:47 < bridge_> <ryozuki> ```
14:47 < bridge_> <ryozuki> its safe if i save a ptr to a hashmap outside rust and pass it to extern c rust functions to use its functionality?
14:47 < bridge_> <ryozuki> :justatest:
14:48 < bridge_> <heinrich5991> yes
14:48 < bridge_> <heinrich5991> what are you doing?
14:48 < bridge_> <Jupstar âœª> @murpi maybe there should be a "bug" button that redirects to the bug channel, if such thing is possible
14:48 < bridge_> <Jupstar âœª> better than handle those stuff private ðŸ˜„
14:48 < bridge_> <ryozuki> bad stuff
14:48 < bridge_> <murpi> Well, #welcome specifically says:
14:48 < bridge_> <murpi> 
14:48 < bridge_> <murpi> Other (for miscellaneous issues)
14:48 < bridge_> <murpi> Note: No technical support.
14:49 < bridge_> <ryozuki> add a bug report button xd
14:49 < bridge_> <murpi> and I had nothing else to do, so yeah
14:49 < bridge_> <ryozuki> and the bot sends a #bugs msg
14:49 < bridge_> <ryozuki> wdym by this
14:49 < bridge_> <ryozuki> btw its mildly triggering
14:49 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1129394307175039036/image.png
14:49 < bridge_> <ryozuki> but the icon on linux looks shiet
14:50 < bridge_> <murpi> means im currently im bed, doing literally nothing so I might as well answer the guys question
14:50 < bridge_> <murpi> ^^
14:50 < bridge_> <heinrich5991> can probablyâ„¢ be fixed by installing the right font
14:51 < bridge_> <ryozuki> u know which?
14:51 < bridge_> <ryozuki> i have windows fonts installed iirc
14:53 < bridge_> <chairn> he kinda cheats though, input string is not supposed to be only s and p
14:53 < bridge_> <ryozuki> i dont want to code a hashmap in mlir again so we have like part of a rust runtime in it
14:53 < bridge_> <chairn> https://cdn.discordapp.com/attachments/293493549758939136/1129395299715141784/image.png
14:53 < bridge_> <ryozuki> looks nice
14:53 < bridge_> <ryozuki> send font
14:53 < bridge_> <heinrich5991> ah nice
14:53 < bridge_> <chairn> win7 discord app
14:53 < bridge_> <heinrich5991> no. some emoji font
14:54 < bridge_> <ryozuki> didnt u say when u finished paper u would come to linux
14:54 < bridge_> <chairn> uh, no
14:54 < bridge_> <chairn> i gotta upgrade my ubuntu 18 though
14:56 < bridge_> <Jupstar âœª> hello, past is calling, they want their chairn back
14:56 < bridge_> <ryozuki> xd
14:57 < bridge_> <_voxeldoesart> im probably gonna get linux mint if anything when i DO get a linux
14:57 < bridge_> <ryozuki> try it in a vm
14:57 < bridge_> <ryozuki> can u use qemu in windows?
14:57 < bridge_> <_voxeldoesart> idk
14:57 < bridge_> <ryozuki> qemu is so good
14:57 < bridge_> <_voxeldoesart> im mobile i cant check
14:57 < bridge_> <Jupstar âœª> WSL
14:57 < bridge_> <heinrich5991> I usually use virtualbox
14:58 < bridge_> <heinrich5991> https://www.qemu.org/download/#windows
14:58 < bridge_> <heinrich5991> exists for windows
14:58 < bridge_> <ryozuki> i always want to try some embedded chips and stuff with rust
14:58 < bridge_> <ryozuki> but im unoriginal
14:58 < bridge_> <ryozuki> idk what to do
14:58 < bridge_> <ryozuki> i have a stm32 iirc
14:58 < bridge_> <Jupstar âœª> do vms already support OpenglOnDirect12
14:58 < bridge_> <chairn> how do you program it?
14:59 < bridge_> <chairn> ST IDE is garbage built on garbage eclipse....
14:59 < bridge_> <ryozuki> i have a stm32f3 and a stm32g491
14:59 < bridge_> <ryozuki> no ides
14:59 < bridge_> <Jupstar âœª> @_voxeldoesart try native, else u dont feel the linux perf boost
14:59 < bridge_> <Jupstar âœª> 
14:59 < bridge_> <Jupstar âœª> vms are slow af and gpu drivers are always bad xd
14:59 < bridge_> <ryozuki> https://medium.com/digitalfrontiers/rust-on-a-stm32-microcontroller-90fac16f6342
15:00 < bridge_> <Jupstar âœª> u'll get a wrnog image burnt into your head
15:00 < bridge_> <chairn> back in my days, virtualbox had not gpu driver available
15:00 < bridge_> <ryozuki> now it has
15:00 < bridge_> <ryozuki> if u have a second gpu
15:00 < bridge_> <ryozuki> u can also do passthrough
15:00 < bridge_> <ryozuki> native perf right
15:00 < bridge_> <Jupstar âœª> @ryozuki https://doc.rust-lang.org/rustc/platform-support/wasm64-unknown-unknown.html
15:00 < bridge_> <Jupstar âœª> 
15:00 < bridge_> <Jupstar âœª> pls make it happen
15:00 < bridge_> <ryozuki> what about this
15:00 < bridge_> <ryozuki> this is the best target: https://doc.rust-lang.org/rustc/platform-support/x86_64-unknown-none.html
15:00 < bridge_> <murpi> passthrough is such a godsent
15:01 < bridge_> <Jupstar âœª> wasm with 64 -bit memory model
15:01 < bridge_> <ryozuki> Freestanding/bare-metal x86-64 binaries in ELF format: firmware, kernels, etc.
15:01 < bridge_> <ryozuki> is it 32 rn?
15:01 < bridge_> <Jupstar âœª> yes
15:01 < bridge_> <ryozuki> f
15:01 < bridge_> <heinrich5991> why do we need more than 4gb of ram? :p
15:01 < bridge_> <heinrich5991> for wasm
15:01 < bridge_> <ryozuki> to run wasm games for example
15:01 < bridge_> <Jupstar âœª> thats not the point
15:01 < bridge_> <Jupstar âœª> usize is 32bit too
15:01 < bridge_> <heinrich5991> why is that a problem?
15:02 < bridge_> <Jupstar âœª> easier to read linear memory if memory has the same sizes xd
15:02 < bridge_> <ryozuki> @chairn do u know a microprocessor with lot of docs?
15:02 < bridge_> <ryozuki> i know espresso does a lot of software
15:02 < bridge_> <ryozuki> was it the name
15:03 < bridge_> <ryozuki> https://github.com/esp-rs
15:03 < bridge_> <ryozuki> espressif
15:03 < bridge_> <chairn> risc-v is quite well documented, but real chips unfortunately are not...
15:04 < bridge_> <chairn> Alpha architecture used to be a standard in experiments during 2000's
15:04 < bridge_> <chairn> you can try Atmel chips that are used by arduino
15:04 < bridge_> <ryozuki> https://docs.rust-embedded.org/book/intro/index.html
15:05 < bridge_> <villager114514> how can i summon a tee with purpose in my server
15:05 < bridge_> <chairn> there are also softcore such as picoblaze for FPGA only
15:06 < bridge_> <Jupstar âœª> "Connect dummy"
15:06 < bridge_> <Jupstar âœª> in esc menu
15:06 < bridge_> <villager114514> i mean i want to write a npc
15:07 < bridge_> <Jupstar âœª> maybe u should first play around with server code
15:07 < bridge_> <Jupstar âœª> this is a very specific question
15:09 < bridge_> <ryozuki> https://en.wikipedia.org/wiki/Micromouse
15:09 < bridge_> <ryozuki> if i lived in my own house i would def make it smart
15:09 < bridge_> <ryozuki> with rust
15:09 < bridge_> <ryozuki> i live with parents still so its a bother
15:10 < bridge_> <heinrich5991> make it smart anyway :p
15:10 < bridge_> <heinrich5991> I actually don't like the word 'smart' ðŸ˜„
15:10 < bridge_> <ryozuki> xd
15:10 < bridge_> <ryozuki> ye but idk how to convey the meaning
15:10 < bridge_> <ryozuki> actually i have a  aquarium
15:11 < bridge_> <ryozuki> i made  it "smart" with a simple timed switch
15:11 < bridge_> <ryozuki> it just turns on and off lights
15:11 < bridge_> <chairn> wdym "make it smart" ?
15:11 < bridge_> <ryozuki> xdd
15:11 < bridge_> <Jupstar âœª> thats already not smart xd
15:11 < bridge_> <ryozuki> @chairn automate shit
15:11 < bridge_> <ryozuki> for example
15:11 < bridge_> <chairn> i don't get the relation with the post you replied to
15:11 < bridge_> <ryozuki> i think here u pay electricity prices depending on hour
15:11 < bridge_> <ryozuki> when usage is low u pay less
15:11 < bridge_> <ryozuki> so making laundry at late night is cheaper
15:11 < bridge_> <ryozuki> iirc
15:11 < bridge_> <ryozuki> no relation sry
15:12 < bridge_> <ryozuki> im just dum
15:12 < bridge_> <chairn> don't you have a room ?
15:12 < bridge_> <ryozuki> its quite small
15:12 < bridge_> <chairn> and don't you earn 3kâ‚¬ ?
15:12 < bridge_> <Jupstar âœª> ryo already leaked his room
15:12 < bridge_> <ryozuki> 2kâ‚¬
15:12 < bridge_> <chairn> really?
15:12 < bridge_> <ryozuki> but ye
15:12 < bridge_> <ryozuki> im saving
15:12 < bridge_> <ryozuki> to go
15:12 < bridge_> <chairn> i ahven't seen it
15:12 < bridge_> <Jupstar âœª> i'm still waiting for fokkonauts reveal ðŸ˜¬
15:13 < bridge_> <ryozuki> @chairn
15:13 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1129400248104652810/IMG_20230518_142723.png
15:13 < bridge_> <ryozuki> this was some time ago
15:13 < bridge_> <ryozuki> most of my hardware kek
15:13 < bridge_> <chairn> that's no room :D, that's just desktop
15:13 < bridge_> <chairn> that's no room ðŸ˜„ , that's just desktop
15:13 < bridge_> <ryozuki> true
15:13 < bridge_> <ryozuki> well the bed is behind
15:13 < bridge_> <Jupstar âœª> but u see its very small
15:13 < bridge_> <ryozuki> and a small aquarium
15:13 < bridge_> <chairn> actually, desktops
15:13 < bridge_> <ryozuki> thats it
15:14 < bridge_> <chairn> uh no? there's no wall on right apparently, so could be huge
15:14 < bridge_> <ryozuki> there is wall bru
15:14 < bridge_> <chairn> i mean, wall on left is going backward while wall on right is going right, so we can't estimate the room area
15:15 < bridge_> <ryozuki> its more or less same
15:15 < bridge_> <ryozuki> the room is just weird
15:15 < bridge_> <Jupstar âœª> @chairn when do u leak
15:15 < bridge_> <chairn> never i guess
15:15 < bridge_> <chairn> i just have one laptop, not really interesting
15:15 < bridge_> <ryozuki> inb4 30 monsters
15:15 < bridge_> <ryozuki> in desk
15:15 < bridge_> <ryozuki> pee bottle
15:15 < bridge_> <Jupstar âœª> i want to see your toilet paper reserves
15:15 < bridge_> <ryozuki> :trollet:
15:16 < bridge_> <chairn> sorry, the bear is out, he took all the toilet paper with him
15:16 < bridge_> <ryozuki> poor bear
15:17 < bridge_> <ryozuki> @jupeyy_keks r u working rn
15:17 < bridge_> <ryozuki> @chairn since ur a teacher, do u have holidays rn?
15:17 < bridge_> <ryozuki> well in spain there is no school rn
15:17 < bridge_> <Jupstar âœª> no, you?
15:17 < bridge_> <ryozuki> im working
15:17 < bridge_> <ryozuki> from home
15:18 < bridge_> <Jupstar âœª> i see that
15:18 < bridge_> <chairn> not yet, im also a researcher you know
15:18 < bridge_> <Jupstar âœª> ðŸ˜¬
15:18 < bridge_> <ryozuki> ðŸ˜¬ðŸ˜¬
15:18 < bridge_> <chairn> but today is public holliday
15:18 < bridge_> <chairn> due to national day
15:18 < bridge_> <ryozuki> how is research going
15:18 < bridge_> <chairn> bad ðŸ˜„
15:18 < bridge_> <ryozuki> ðŸ˜¬
15:18 < bridge_> <chairn> i cant reproduce fault injection from ARM to RISC-V
15:18 < bridge_> <ryozuki> whats fault injection
15:18 < bridge_> <chairn> https://www.reddit.com/r/technology/comments/14yprx3/its_official_smartphones_will_need_to_have/
15:18 < bridge_> <chairn> almost feels like we're going back to 2000, good old time
15:19 < bridge_> <ryozuki> like a x86 double fault?
15:19 < bridge_> <chairn> physically faulting the hardware to disturb program execution and potentially retrieve secret data or gain execution with a combination of software attack
15:19 < bridge_> <ryozuki> ohh
15:19 < bridge_> <chairn> in my case, i use clock glitch injection
15:20 < bridge_> <chairn> i.e. i can create 2 clock cycles within the duration of a normal clock cycle leading to some data path being in "undetermined" state
15:20 < bridge_> <ryozuki> interesting
15:39 < bridge_> <learath2> 2027 is very very lax on the regulators side, but thank god finally
15:40 < bridge_> <learath2> This sort of hardware glitching has always fascinated me, you can get such bizarre behaviour
15:53 < bridge_> <heinrich5991> is the eu the only thing doing consumer-friendly laws recently?
15:53 < bridge_> <learath2> At least I haven't heard anyone else trying to regulate these tech behemoths at all
16:18 < bridge_> <learath2> um, writing to a mut global is unsafe?
16:19 < bridge_> <Jupstar âœª> Globals are evil
16:20 < bridge_> <Jupstar âœª> https://www.forrestthewoods.com/blog/global-variables-are-evil-and-unsafe/
16:20 < bridge_> <Jupstar âœª> xDD
16:20 < bridge_> <learath2> And passing some obviously global context variable around and pretending it's not global isn't evil
16:20 < bridge_> <Jupstar âœª> ```cpp
16:20 < bridge_> <Jupstar âœª> unsafe_and_evil {
16:20 < bridge_> <Jupstar âœª>     int g_evil = 0;
16:20 < bridge_> <Jupstar âœª> }
16:20 < bridge_> <Jupstar âœª> 
16:21 < bridge_> <Jupstar âœª> void IncrementGlobal(int v) {
16:21 < bridge_> <Jupstar âœª>     unsafe_and_evil {
16:21 < bridge_> <Jupstar âœª>         g_evil += v;
16:21 < bridge_> <Jupstar âœª>     }
16:21 < bridge_> <Jupstar âœª> }
16:21 < bridge_> <Jupstar âœª> ```
16:21 < bridge_> <learath2> I swear computer science people have some sort of brainrot
16:21 < bridge_> <Jupstar âœª> there is no global context ðŸ˜‰
16:21 < bridge_> <learath2> True king
16:21 < bridge_> <heinrich5991> global `mut`s are unsafe because you can obtain multiple `mut` references
16:21 < bridge_> <heinrich5991> you can still have mutable (non-`mut`) global state
16:21 < bridge_> <heinrich5991> what are you trying to do? @learath2
16:22 < bridge_> <learath2> I want a context variable, that'll get initialized late and can change
16:23 < bridge_> <learath2> A singleton
16:23 < bridge_> <heinrich5991> not a lot of context. `Mutex<Option<State>>` would probably work?
16:23 < bridge_> <learath2> If I pass it around to every function that needs the state
16:24 < bridge_> <heinrich5991> no, in a `static`
16:24 < bridge_> <heinrich5991> (not `static mut`)
16:24 < bridge_> <Jupstar âœª> i guess he meant holding the lock everywhere?
16:25 < bridge_> <Jupstar âœª> dunno what u doing learath, but if its not some random project go the hard way and use no globals
16:25 < bridge_> <heinrich5991> rust's stdlib also uses globals ðŸ˜‰
16:25 < bridge_> <heinrich5991> sometimes they're useful
16:26 < bridge_> <learath2> Can you even mutate the inside of a Mutex? atleast it won't allow me
16:26 < bridge_> <Jupstar âœª> lock
16:26 < bridge_> <heinrich5991> yes
16:26 < bridge_> <heinrich5991> `.lock().unwrap()`
16:26 < bridge_> <learath2> But why? This is why I hate "rules" like this. Some weirdo doesn't like them and writes some article that everyone swoons over for 3 decades. What actually is wrong with a singleton actually being global?
16:27 < bridge_> <learath2> Yes, they are usually not good, but a singleton is the perfect place for them
16:27 < bridge_> <Jupstar âœª> bad design, i blame the OS tho, they are not designed for this yet xd
16:27 < bridge_> <Jupstar âœª> the only globals that must exists is a minimal set of core functionality the OS must implement xd
16:28 < bridge_> <Jupstar âœª> i mean heinrich already said it
16:28 < bridge_> <Jupstar âœª> multiple mutable references
16:28 < bridge_> <Jupstar âœª> and locks can have deadlocks
16:28 < bridge_> <learath2> That's a rust thing, definitely not the reason people hate globals
16:29 < bridge_> <learath2> Locks can always have deadlocks, you don't hate globals you hate locks then
16:29 < bridge_> <Jupstar âœª> then use unsafe?
16:29 < bridge_> <heinrich5991> in languages other than rust, globals can easily cause dataraces
16:29 < bridge_> <heinrich5991> you can use globals in rust without using `unsafe`
16:29 < bridge_> <Jupstar âœª> it sounds like he wants to use globals in unsafe matters
16:30 < bridge_> <heinrich5991> @learath2 does the `static DATA: Mutex<Option<Data>> = Mutex::new(None);` work for your use-case?
16:30 < bridge_> <learath2> No, you just gathered that from the fact that you don't like globals and anyone that uses them must be doing something wrong in your mind
16:30 < bridge_> <Jupstar âœª> the problem is, sure u can say if u only use a global and thought about it 1 week, then they might be nice to share some stuff
16:30 < bridge_> <Jupstar âœª> 
16:30 < bridge_> <Jupstar âœª> but the truth is they will be used like in ddnet source code
16:30 < bridge_> <Jupstar âœª> completely random
16:31 < bridge_> <heinrich5991> I think there are valid use-cases for globals
16:31 < bridge_> <Jupstar âœª> if u dont do std::exit in a cpp shared library they stay active
16:31 < bridge_> <Jupstar âœª> u have random broken states everywhere
16:31 < bridge_> <learath2> Let me think about it for a second. I can't argue against deep rooted ideology and code at the same time
16:31 < bridge_> <heinrich5991> I don't understand this
16:31 < bridge_> <heinrich5991> when c++ exits main, it calls all the destructors, no?
16:32 < bridge_> <Jupstar âœª> what main?
16:32 < bridge_> <heinrich5991> `int main() {}`
16:32 < bridge_> <heinrich5991> whne the program exits
16:32 < bridge_> <heinrich5991> the whole program
16:32 < bridge_> <Jupstar âœª> well with shared libraries i meant dynamic libraries
16:33 < bridge_> <heinrich5991> I don't understand it yet. even destructors in shared librariese hsould be calld when the main process exits
16:33 < bridge_> <Jupstar âœª> u can unload a shared library without destroying its state, as android does it
16:33 < bridge_> <heinrich5991> I mean that's kinda on android though
16:33 < bridge_> <heinrich5991> it doesn't support C++ apparently
16:34 < bridge_> <heinrich5991> then you could say "globals are evil because android doesn't support c++ properly"
16:34 < bridge_> <Jupstar âœª> thats not an android bug
16:34 < bridge_> <heinrich5991> why is it not?
16:34 < bridge_> <heinrich5991> I think shared libraries call destructors on linux
16:34 < bridge_> <heinrich5991> when you unload them
16:35 < bridge_> <heinrich5991> there's a special link section for this, I think
16:35 < bridge_> <Jupstar âœª> @learath2 pls give me cpp spec that guarantees the above
16:35 < bridge_> <patiga> can confirm that the esp32 rust support is really damn good. call it bloated microcontroller programming but I enjoyed having most of the rust std library available ^^. I coded some infrastructure in rust on the microcontroller and didn't really face many problems. https://esp-rs.github.io/book/
16:35 < bridge_> <heinrich5991> shared libraries don't exist in the cocntext of the C++ standard
16:35 < bridge_> <ryozuki> it is in rust cuz its not thread safe
16:35 < bridge_> <Jupstar âœª> so you agree that this is not an android bug
16:36 < bridge_> <heinrich5991> no, I do not
16:36 < bridge_> <heinrich5991> a compiler failing to compile something also adheres to the C++ standard
16:36 < bridge_> <ryozuki> nice!
16:36 < bridge_> <heinrich5991> I'd still call it a bug in the C++ compler
16:36 < bridge_> <heinrich5991> failing to compile any source file at all
16:37 < bridge_> <ryozuki> check out once_cell and its lazycell variant
16:37 < bridge_> <ryozuki> https://docs.rs/once_cell/latest/once_cell/sync/struct.Lazy.html
16:37 < bridge_> <heinrich5991> what I want to say: having a functioning c++ compiler goes beyond adhering to the standard)
16:37 < bridge_> <heinrich5991> what I want to say: having a functioning c++ compiler goes beyond adhering to the standard
16:37 < bridge_> <learath2> I was thinking `OnceCell` but I need to mutate it more than once
16:37 < bridge_> <ryozuki> well then mutex
16:38 < bridge_> <ryozuki> does thread local work here if ur not doing mt?
16:38 < bridge_> <ryozuki> ```rust
16:38 < bridge_> <ryozuki> use std::cell::Cell;
16:38 < bridge_> <ryozuki> thread_local! {
16:38 < bridge_> <ryozuki>     pub static FOO: Cell<u32> = const { Cell::new(1) };
16:38 < bridge_> <ryozuki> }
16:38 < bridge_> <ryozuki> ```
16:38 < bridge_> <learath2> I'm doing mt
16:38 < bridge_> <ryozuki> they just added const support for it
16:38 < bridge_> <ryozuki> ah then mutex ye
16:39 < bridge_> <ryozuki> @learath2 well check RwLock if u read more than write
16:39 < bridge_> <heinrich5991> good idea
16:39 < bridge_> <ryozuki> https://github.com/usagi/rust-memory-container-cs
16:39 < bridge_> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1129421899575865484/rust-memory-container-cs-3840x2160-dark-back.png
16:39 < bridge_> <ryozuki> this is a rly good pic imho
16:39 < bridge_> <ryozuki> i usually follow this
16:40 < bridge_> <ryozuki> anime pfp obviously
16:41 < bridge_> <ryozuki> i like how deen checks this channeel from time to time
16:41 < bridge_> <ryozuki> and possible  the only thing he sees
16:41 < bridge_> <ryozuki> is rust
16:42 < bridge_> <ryozuki> as intentended
16:42 < bridge_> <ryozuki> cant write
16:42 < bridge_> <ryozuki> as intended
16:44 < bridge_> <ryozuki> @jupeyy_keks when bible?
16:45 < bridge_> <learath2> This works with `std::sync::Mutex` but not with `tokio::sync::Mutex`, I'm perhaps just misunderstanding something, but it seems tokios mutexguard doesn't implement DerefMut for some reason
16:45 < bridge_> <learath2> I think I'll just pass around an `Arc<Context>` like I did last time, I can't believe you actually made me feel bad about using a global
16:46 < bridge_> <ryozuki> u can use sync mutex in tokio
16:46 < bridge_> <learath2> Well `Arc<Mutex<Context>>` that is
16:46 < bridge_> <heinrich5991> `tokio`'s `MutexGuard` seems to impl `DerefMut`
16:47 < bridge_> <ryozuki> btw i think in tokio u should spawn blocking calls in a special way
16:47 < bridge_> <ryozuki> https://docs.rs/tokio/latest/tokio/task/fn.spawn_blocking.html
16:48 < bridge_> <ryozuki> https://docs.rs/tokio/latest/tokio/sync/struct.RwLock.html
16:48 < bridge_> <learath2> Ah, they weren't returning a Result like the std one, yeah I figured it out
16:48 < bridge_> <ryozuki> wdym it doesnt impl derefmut
16:48 < bridge_> <ryozuki> u have to do .lock().await iirc
16:48 < bridge_> <learath2> Yeah
16:48 < bridge_> <heinrich5991> or `blocking_lock()`
16:48 < bridge_> <learath2> and omit the unwrap
16:49 < bridge_> <ryozuki> yeah they dont handle poisoning i think
16:49 < bridge_> <ryozuki> its a debate in rust itself
16:49 < bridge_> <learath2> Or maybe I should think of making the context actually immutable, I didn't end up needing it last time and removed it, that's even safer
16:50 < bridge_> <learath2> Anyway, thanks, I hadn't thought of a Mutex
16:50 < bridge_> <ryozuki> > Mutex poisons not for true safety in the sense that Rust normally cares about. It poisons as a safety-guard against blindly using the data that comes out of a Mutex that has witnessed a panic while locked. The data in such a Mutex was likely in the middle of being modified, and as such may be in an inconsistent or incomplete state. It is important to note that one cannot violate memory safety with such a type if it is correctly written. After al
16:50 < bridge_> <ryozuki> > 
16:50 < bridge_> <ryozuki> > However if the Mutex contained, say, a BinaryHeap that does not actually have the heap property, it's unlikely that any code that uses it will do what the author intended. As such, the program should not proceed normally. Still, if you're double-plus-sure that you can do something with the value, the Mutex exposes a method to get the lock anyway. It is safe, after all. Just maybe nonsense.
16:50 < bridge_> <ryozuki> https://doc.rust-lang.org/nomicon/poisoning.html
16:51 < bridge_> <learath2> Why is there a debate? I think it's a good idea, no? Such data is rarely ever useful
16:51 < bridge_> <ryozuki> cuz its not unsafe
16:51 < bridge_> <ryozuki> idk
16:51 < bridge_> <ryozuki> i just said it there is debate
16:51 < bridge_> <ryozuki> it adds lot of unwraps xd
16:51 < bridge_> <ryozuki> @learath2 u sure u dont want rwlock?
16:51 < bridge_> <learath2> I guess if you know for sure what panic'd and what it touches is limited to something that can just be reinitialized, maybe it's sane to keep using
16:52 < bridge_> <ryozuki> multiple readers
16:52 < bridge_> <learath2> I think I'll just get rid of the mutability by getting more out of the context, so I can just have a `OnceCell`
16:52 < bridge_> <heinrich5991> you probably want to have `OnceLock` instead: https://doc.rust-lang.org/std/sync/struct.OnceLock.html
16:53 < bridge_> <heinrich5991> `OnceCell` (stdlib) doesn't work with threads
16:53 < bridge_> <learath2> Ah, yes that one
16:55 < bridge_> <Jupstar âœª> btw i don't directly agree with this. It depends on the OS design
16:55 < bridge_> <Jupstar âœª> 
16:55 < bridge_> <Jupstar âœª> rn you have an OS that does everything for you. it deallocates the processes you allocated etc.
16:55 < bridge_> <Jupstar âœª> 
16:55 < bridge_> <Jupstar âœª> I bet in future there are operating systems that are so minimal that u rather link against an OS sdk that having a kernel space and user space
16:55 < bridge_> <Jupstar âœª> 
16:55 < bridge_> <Jupstar âœª> with a minimal set of data that can be considered a global state
16:55 < bridge_> <Jupstar âœª> 
16:55 < bridge_> <Jupstar âœª> a global variable would mean there is a "known" location(be it a memory address or a global function) that initializes it or accesses it in some kind.
16:55 < bridge_> <Jupstar âœª> So you increase amount of "OS SDK" again.
16:55 < bridge_> <Jupstar âœª> 
16:55 < bridge_> <Jupstar âœª> All code would be truely position independent with such a concept
16:55 < bridge_> <Jupstar âœª> 
16:55 < bridge_> <Jupstar âœª> Current global variables are scoped bcs they are within a program that works with virtual memory addresses
16:55 < bridge_> <Jupstar âœª> 
16:55 < bridge_> <Jupstar âœª> So yeah not future proof. Thanks for agreeing with me humans in 2000 years
16:57 < bridge_> <Jupstar âœª> btw i don't directly agree with this. It depends on the OS design
16:57 < bridge_> <Jupstar âœª> 
16:57 < bridge_> <Jupstar âœª> rn you have an OS that does everything for you. it deallocates the processes you allocated etc.
16:57 < bridge_> <Jupstar âœª> 
16:57 < bridge_> <Jupstar âœª> I bet in future there are operating systems that are so minimal that u rather link against an OS sdk than having a kernel space and user space
16:57 < bridge_> <Jupstar âœª> 
16:57 < bridge_> <Jupstar âœª> with a minimal set of data that can be considered a global state
16:57 < bridge_> <Jupstar âœª> 
16:57 < bridge_> <Jupstar âœª> a global variable would mean there is a "known" location(be it a memory address or a global function) that initializes it or accesses it in some kind.
16:57 < bridge_> <Jupstar âœª> So you increase amount of "OS SDK" again.
16:57 < bridge_> <Jupstar âœª> 
16:57 < bridge_> <Jupstar âœª> All code would be truely position independent with such a concept
16:57 < bridge_> <Jupstar âœª> 
16:57 < bridge_> <Jupstar âœª> Current global variables are scoped bcs they are within a program that works with virtual memory addresses
16:57 < bridge_> <Jupstar âœª> 
16:57 < bridge_> <Jupstar âœª> So yeah not future proof. Thanks for agreeing with me humans in 2000 years
16:57 < bridge_> <ryozuki> :gigachad:
16:57 < bridge_> <learath2> Shared lib destructors get called? As far as C++ standard is concerned shared libraries aren't even a thing
16:58 < bridge_> <Jupstar âœª> yeah yeah was more a trick question
16:58 < bridge_> <Jupstar âœª> even dlopen allows "saving" global variables
16:58 < bridge_> <Jupstar âœª> e.g. not deallocating them
16:59 < bridge_> <Jupstar âœª> "RTLD_NODELETE (since glibc 2.2)
16:59 < bridge_> <Jupstar âœª> Do not unload the library during dlclose(). Consequently, the library's static variables are not reinitialized if the library is reloaded with dlopen() at a later time. This flag is not specified in POSIX.1-2001."
16:59 < bridge_> <Jupstar âœª> xd
16:59 < bridge_> <learath2> How is my bots context not part of it's minimal set of global state?
17:00 < bridge_> <Jupstar âœª> u bloat the global space with a global state
17:00 < bridge_> <learath2> How is passing every function the exact same address any different from a global?
17:00 < bridge_> <Jupstar âœª> why should it have the same address?
17:01 < bridge_> <learath2> Barring memory mapping shenanigans, I allocate it once, it'll be passed to every function, it'll have the same address
17:02 < bridge_> <learath2> It has to be Pin with multiple things reading it aswell so no rust moving shenanigans either
17:02 < bridge_> <learath2> In C++ even less, the compiler won't move things around
17:03 < bridge_> <Jupstar âœª> well depends on if u want this
17:05 < bridge_> <learath2> If the argument was that any such piece of data is bad I'd have an easier time following it, but passing the same address to everything vs the compiler placing it compile time and providing the address really doesn't seem any different to me
17:05 < bridge_> <Jupstar âœª> anyway
17:05 < bridge_> <Jupstar âœª> what i want to ultimately say is it destroys modularity
17:05 < bridge_> <learath2> (You know why globals are actually hated? They don't exist in math)
17:05 < bridge_> <Jupstar âœª> xDDDDDDDDDDD
17:06 < bridge_> <Jupstar âœª> ok touche
17:06 < bridge_> <Jupstar âœª> but yeah u also pass the address of all functions in your whole programm ðŸ˜¬
17:06 < bridge_> <learath2> But why aren't modules allowed to have local globals?
17:06 < bridge_> <Jupstar âœª> save me immortal humans 2000 years from now
17:06 < bridge_> <Jupstar âœª> i want to see such an OS design in action
17:07 < bridge_> <learath2> Things have to have some state, even Haskell people have to pass around some state everywhere
17:07 < bridge_> <Jupstar âœª> mhh local globals xdd
17:07 < bridge_> <Jupstar âœª> 
17:07 < bridge_> <Jupstar âœª> i mean i know what u mean, but isnt the module itself then a state
17:07 < bridge_> <Jupstar âœª> it's kind of your state object xd
17:08 < bridge_> <learath2> Local global does sound like a bit like an oxymoron, but what you are saying makes it feel like my global state is leaking all the way to the kernel
17:08 < bridge_> <learath2> It's not it's just "global" within my program
17:09 < bridge_> <learath2> The only truly global state is the kernel
17:09 < bridge_> <Jupstar âœª> yeah but that also means the kernel can be extremly small
17:09 < bridge_> <Jupstar âœª> 
17:09 < bridge_> <Jupstar âœª> bcs the program does not need to know about any "kernel functions" except very very few
17:09 < bridge_> <heinrich5991> registers :p
17:14 < bridge_> <Jupstar âœª> anyway @learath2 isnt rust already cool bcs if u dont use refcell and Rc and Arc and Mutex u basically never face hard to debug memory/data race behavior xd
17:14 < bridge_> <Jupstar âœª> 
17:14 < bridge_> <Jupstar âœª> at least for a single threaded program i find this pretty cool tbh
17:14 < bridge_> <Jupstar âœª> 
17:14 < bridge_> <Jupstar âœª> it wont scale to real world ofc, but who knows what programming languages there will be some day ðŸ˜„
17:16 < bridge_> <learath2> Even with `Arc` and `Mutex` there won't be any memory/data race issue
17:16 < bridge_> <learath2> Even with multiple threads you are pretty safe in rust
17:16 < bridge_> <Jupstar âœª> race conditions then*
17:16 < bridge_> <learath2> It indeed is pretty impressive, I just find it's compiler way too "endearing" at times
17:17 < bridge_> <learath2> its* (?)
17:17 < bridge_> <learath2> I keep having trouble with this recently, when you have possession, do you use `'s`?
17:17 < bridge_> <Jupstar âœª> and arc and rc can leak memory
17:18 < bridge_> <Jupstar âœª> not for its
17:18 < bridge_> <Jupstar âœª> it is
17:18 < bridge_> <Jupstar âœª> it's
17:18 < bridge_> <heinrich5991> it's = it is
17:18 < bridge_> <heinrich5991> its = belonging to it
17:19 < bridge_> <Jupstar âœª> but it's heinrich's car
17:19 < bridge_> <Jupstar âœª> xd
17:19 < bridge_> <Jupstar âœª> heinrich's a car
17:19 < bridge_> <Jupstar âœª> xd
17:20 < bridge_> <learath2> Yeah, this is the one that confuses me
17:20 < bridge_> <learath2> I guess it's just used to separate the `s` from the noun there and not as a contraction
17:21 < bridge_> <Jupstar âœª> `'` are bloat ðŸ˜¬
17:21 < bridge_> <Jupstar âœª> we just lazy
17:32 < bridge_> <ryozuki> u are  safe  with multiple threads, in the sense rust defines safe
17:32 < bridge_> <ryozuki> u can leak, deadlocks, and race conditions (but not data races (if i didnt get this the other way i always forget))
17:33 < bridge_> <ryozuki> and its math
17:33 < bridge_> <ryozuki> :justatest:
17:33 < bridge_> <ryozuki> it's = it is
17:34 < bridge_> <Jupstar âœª> @ryozuki does the heinrich move xDDD
17:34 < bridge_> <ryozuki> no, ' are for lifetimes
17:34 < bridge_> <ryozuki> :gigachad:
17:34 < bridge_> <Jupstar âœª> ðŸ˜¬
17:34 < bridge_> <ryozuki> ðŸ˜¬
17:34 < bridge_> <Jupstar âœª> #define ðŸ˜¬ '
17:34 < bridge_> <ryozuki> would be pog
17:34 < bridge_> <ryozuki> ðŸ˜¬a
17:34 < bridge_> <Jupstar âœª> fn <ðŸ˜¬ a>
17:34 < bridge_> <Jupstar âœª> xD
17:35 < bridge_> <ryozuki> ```rust
17:35 < bridge_> <ryozuki> fn<ðŸ˜¬a>(hello: ðŸ˜¬a str) -> &ðŸ˜¬a str;
17:35 < bridge_> <ryozuki> ```
17:35 < bridge_> <Jupstar âœª> thats why rust needed proc macros
17:35 < bridge_> <Jupstar âœª> ðŸ˜¬
17:37 < bridge_> <_voxeldoesart> why the a
17:37 < bridge_> <Jupstar âœª> u can also name it b
17:38 < bridge_> <_voxeldoesart> ok so ðŸ˜¬a is just a name
17:38 < bridge_> <Jupstar âœª> error: identifiers cannot contain emoji:
17:38 < bridge_> <_voxeldoesart> grimaceA
17:38 < bridge_> <_voxeldoesart> dude im so funny quirky! grimace? like the Grimace Sh-
17:40 < bridge_> <Jupstar âœª> if u use doc syntax, e.g.
17:40 < bridge_> <Jupstar âœª> 
17:40 < bridge_> <Jupstar âœª> /**
17:40 < bridge_> <Jupstar âœª> * you can do any syntax you want with rust, because the string here is preserved
17:40 < bridge_> <Jupstar âœª> */
17:40 < bridge_> <Jupstar âœª> u can then parse the inner string
17:40 < bridge_> <ryozuki> `&'a`
17:43 < bridge_> <Jupstar âœª> chillerdragon: when bash to rust proc macro?
17:43 < bridge_> <Jupstar âœª> then i can use bash inside rust code
17:49 < bridge_> <Jupstar âœª> @murpi #join-leave bot still needs the new channel id xdd
17:49 < bridge_> <Jupstar âœª> https://cdn.discordapp.com/attachments/293493549758939136/1129439521025564702/image.png
17:50 < bridge_> <murpi> ah ok
17:52 < bridge_> <murpi> a bit silly to keep creating pull requests to a repository that no one manages
17:55 < bridge_> <Jupstar âœª> who owns it?
17:56 < bridge_> <ryozuki> what repo
17:56 < bridge_> <ryozuki> what did i miss
17:58 < bridge_> <murpi> ddnet-discordbot
18:00 < bridge_> <Jupstar âœª> lmao so many open prs
18:00 < bridge_> <Jupstar âœª> why dont u just merge @murpi
18:00 < bridge_> <Jupstar âœª> i also went  full ego on my bot xdd
18:00 < bridge_> <Jupstar âœª> easier for small repos
18:01 < bridge_> <Jupstar âœª> if nobody cares to review just merge
18:01 < bridge_> <murpi> tbh I'd just put all my changes into one PR
18:10 < bridge_> <ryozuki> oh
18:10 < bridge_> <ryozuki> i dont have write access to it
18:25 < ChillerDragon> @jopsti use this crate https://github.com/matklad/xshell
18:30 < bridge_> <Jupstar âœª> but i need to distract you xd
18:31 < ChillerDragon> hrhrhr
18:31 < ChillerDragon> nice try
18:33 < ChillerDragon> https://zillyhuhn.com/tmp/12len.pcap @heinrich5991 @davide55 here u go 238.0.0.2 is fokkos server 238.0.0.1 is me. My client was connecting to the server being filtered by the fw. And the server was still sending snaps from a prior connection of mine.
19:17 < ChillerDragon> can i stop srv running in da client while in game?
19:17 < ChillerDragon> pkill ddnetserver i geuss
19:28 < bridge_> <teero777> There is a stop server vote by default but ig you don't use a default server
19:28 < bridge_> <teero777> And rcon also exist
19:31 < bridge_> <teero777> And rcon shutdown also exists
19:32 < ChillerDragon> im ingame on other srv xd
19:34 < bridge_> <teero777> Ahh I get it now
19:34 < bridge_> <heinrich5991> ChillerDragon: did you use an old version of the dissector at the time?
19:34 < bridge_> <heinrich5991> it's not showing me problems from the screenshot yesterday
20:06 < bridge_> <davide55> Thx
20:07 < bridge_> <davide55> Seems not a really useful pcap.
20:07 < bridge_> <davide55> 
20:07 < bridge_> <davide55> Start recording before joining the server, and wait 30-40 before stopping please
20:34 < ChillerDragon> @heinrich5991 not latest for sure
20:35 < ChillerDragon> @davide55 im not bugged anymore
