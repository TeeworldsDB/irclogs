01:16 < bridge> <chillerdragon> @kollpotato hi developa
01:48 < bridge> <teero777> hi shiverdragon
02:18 < bridge> <jxsl13> I greet Koll Dragon
02:18 < bridge> <jxsl13> Koll D. Potato
02:20 < bridge> <blackkkent> how to build ddnet
02:22 < bridge> <blackkkent> with msys2
02:27 < bridge> <jxsl13> isn't there a readme that explains that?
02:29 < bridge> <blackkkent> im from russia i idk what say in readme
02:30 < bridge> <jxsl13> did not see anything in the readme at first glance
02:31 < bridge> <jxsl13> there are two options, when programming learn english or use a translator. Learning english is usually the better option.
02:31 < bridge> <blackkkent> shut up
02:32 < bridge> <blackkkent> I'm lazy
02:32 < bridge> <jxsl13> you will not get far with that.
02:33 < bridge> <jxsl13> but someone probably has built ddnet with msys2 and will answer your question.
02:33 < bridge> <jxsl13> just wait.
02:35 < bridge> <Ewan> womp womp
02:35 < bridge> <Ewan> i donâ€™t think helping ignorant ppl is a great use of time
02:51 < bridge> <Solly (bun bun)> why doesnt it show a "not done" symbol
02:51 < bridge> <Solly (bun bun)> https://cdn.discordapp.com/attachments/293493549758939136/1393031847520243752/image.png?ex=6871b181&is=68706001&hm=fa2a02e75f87309f2c91b639170019871184ffef6cea72cc17bf3cf47aaeb7f0&
02:51 < bridge> <Solly (bun bun)> like none have failed why is it an x
02:51 < bridge> <Solly (bun bun)> (something did just fail)
07:00 < bridge> <blackkkent> hi chillerdragon
07:00 < bridge> <blackkkent> in your fork ddnetpp is the money farm used and how to set it up
07:00 < bridge> <blackkkent> and another question how to issue money or do you need to work with the code?
07:01 < bridge> <blackkkent> hi chillerdragon
07:01 < bridge> <blackkkent> in your fork ddnetpp is the money farm used and how to set it up
07:01 < bridge> <blackkkent> and another question how to issue money or do you need to work with the code?
07:01 < bridge> <blackkkent> 
07:01 < bridge> <blackkkent> how to change /shop
07:29 < bridge> <filoqcus> afk farm?
07:29 < bridge> <filoqcus> https://github.com/DDNetPP/DDNetPP/issues/458
07:29 < bridge> <filoqcus> 
07:29 < bridge> <filoqcus> and you can change /shop in the code, idk
07:29 < bridge> <filoqcus> https://cdn.discordapp.com/attachments/293493549758939136/1393101766027116596/IMG_2751.jpg?ex=6871f29f&is=6870a11f&hm=01ef7e5a5304463c463312fa4e4d1d229e0a2c5a2d9f12651893d16df926b693&
08:01 < bridge> <chillerdragon> @blackkkent: Money Farm? Used? You mean the chairs where you can sit on to farm money? Yes they exist. You can just place the tiles in the map. The entities filo sent you can help you.
08:01 < bridge> <chillerdragon> 
08:01 < bridge> <chillerdragon> By issuing money you mean cheating money? That works by patching the values in the database using sql.
09:34 < bridge> <Assa> Done, but I am afraid D: this doesn't use buffered tiles yet and I need a huge cleanup
09:34 < bridge> <Assa> https://cdn.discordapp.com/attachments/293493549758939136/1393133209818239118/screenshot_2025-07-11_09-32-03.png?ex=68720fe8&is=6870be68&hm=a3c6b058b6a2d62c8b1951d3ebc5a83609b4ee5c0562a58ecca6d07db9f50423&
10:22 < bridge> <Assa> oh you see on the screenshot, I accidentally added borders as a feature ðŸ¤”
11:11 < bridge> <kollpotato> halo
11:24 < bridge> <kebscs> There's just extended flag for thisb
11:24 < bridge> <kebscs> But on old editor it lag too much
11:27 < bridge> <Assa> I don't know what to do with this feature, this is a 4 digit PR again, and maybe I should make open a draft PR as orientation and implement it bit by bit
11:27 < bridge> <Assa> I needed to create 2 interfaces, because CEditorMap is not an IMap
11:33 < bridge> <kebscs> Split into smaller prs
11:48 < ws-client> <ChillerDragon> Someone forgot to merge my crispy clean prs #10470, #10399
11:48 < chillerbot> https://github.com/ddnet/ddnet/issues/10470
11:48 < chillerbot> https://github.com/ddnet/ddnet/issues/10399
11:49 < ws-client> <ChillerDragon> @blackkkent btw there is documentation /shop not sure what exactly you want to change but here are some options https://github.com/DDNetPP/DDNetPP/blob/master/docs/shop.md
12:50 < bridge> <learath2> Is this one compatible with the upcoming QUIC pr?
12:50 < bridge> <blackkkent> thx bro
12:52 < bridge> <melon> Is there a draft PR of the quic impl?
12:52 < bridge> <learath2> Yes
12:52 < bridge> <melon> O
12:53 < bridge> <learath2> #6961
12:53 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/6961
12:53 < bridge> <blackkkent> how to load this
12:55 < bridge> <melon> damn
12:55 < bridge> <melon> 
12:55 < bridge> <melon> looks painful, i missed that entirely :kek:
13:00 < bridge> <Assa> I wish I could help, but I am not quic enough
13:08 < ws-client> <ChillerDragon> wdym compatible @learath2 i wrap udp sending not sure how it can be compatible or incompatible to quic. The quic pr should do the same then to allow the unit tests to run smoothly without depending on networking.
13:09 < bridge> <blackkkent> chiller how to use this https://github.com/DDNetPP/DDNetPP/issues/458
13:09 < bridge> <chillerdragon> Move the image in your ddnet folder
13:10 < bridge> <blackkkent> corn?
13:10 < bridge> <blackkkent> root?
13:10 < bridge> <chillerdragon> data/editor/entities
13:10 < bridge> <chillerdragon> Next to the others
13:11 < bridge> <learath2> I was wondering if you moved around things so much that the quic pr would need to be significantly changed
13:11 < bridge> <chillerdragon> No
13:11 < bridge> <chillerdragon> Itâ€™s chill af
13:11 < bridge> <chillerdragon> Heinrich will love it
13:11 < bridge> <learath2> Seems you didn't. My next concern is whether this gets optimized properly and doesn't have a performance hit
13:11 < bridge> <blackkkent> rename to ddnet.png?
13:12 < bridge> <chillerdragon> You can name it whatever
13:12 < bridge> <chillerdragon> Also why do you reply to random messages?
13:12 < bridge> <blackkkent> I am very sleepy I haven't slept all night I really want to sleep.
13:12 < bridge> <blackkkent> What are the next steps?
13:13 < bridge> <chillerdragon> Open the editor and in the top select the entities
13:14 < bridge> <chillerdragon> This needs not optimization. Accessing a pointer isnâ€™t crazy expensive. This is done all over the place. Even in loops. Which gets run way more than the udp code
13:17 < bridge> <blackkkent> where?
13:18 < bridge> <chillerdragon> Top
13:19 < bridge> <blackkkent> https://cdn.discordapp.com/attachments/293493549758939136/1393189876920352818/image.png?ex=687244ae&is=6870f32e&hm=b5c2a72c10d9c6b2f03fd4b6cb9cd35055a8425ee33fdb9960e9f79f2084fa10&
13:20 < ws-client> <ChillerDragon> settings
13:20 < bridge> <kollpotato> chiller: is this a good fix for the semicolon issue xd
13:20 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393190215476318301/image.png?ex=687244ff&is=6870f37f&hm=343b345af1ba16303bdbc0972373bc87a19e758ef07a97c3419f29b1ab0636a3&
13:20 < ws-client> <ChillerDragon> ono xd
13:20 < bridge> <blackkkent> thx
13:20 < bridge> <melon> :wtf:
13:21 < bridge> <kollpotato> its tower
13:21 < bridge> <kollpotato> everyone love tower
13:21 < ws-client> <ChillerDragon> fikmesan will love it
13:39 < bridge> <kollpotato> i tried 10 different way to fix it
13:39 < bridge> <kollpotato> i tried 10 different ways to fix it
13:39 < bridge> <kollpotato> i gave up and copy pasted it into chatgpt
13:39 < bridge> <kollpotato> lets see
13:43 < bridge> <kollpotato> it couldnt fix it either
15:30 < ws-client> <ChillerDragon> @milkeeycat ddnet_protocol in 2025? wot
15:34 < ws-client> <ChillerDragon> there is too much ci omagawd who added all dat shit xd
15:35 < bridge> <milkeeycat> :clueless:
15:39 < bridge> <milkeeycat> chilllerdragon: you don't have ideas for prs for others tw related projects? xd
15:42 < bridge> <milkeeycat> chilllerdragon: you don't have ideas for prs for other tw related projects? xd
15:47 < ws-client> <ChillerDragon> 0.6 ddnet_protocol is priority number 1 right now!
15:49 < ws-client> <ChillerDragon> it bothers me that we did not spawn a tee yet"!
15:50 < bridge> <milkeeycat> there's a branch which can parse inputs!
15:58 < bridge> <ryozuki> > free(): invalid next size (normal)
15:58 < bridge> <ryozuki> @learath2 what does this mean
15:59 < bridge> <ryozuki> i guess it means a double free
15:59 < bridge> <ryozuki> but my god, what a useful error message
16:03 < bridge> <learath2> I guess it could also be a buffer overflow somewhere else ruining the next size
16:04 < bridge> <learath2> asan would 100% catch this
16:05 < bridge> <pilonpl> What's the status on the account system for DDNet?
16:10 < bridge> <jxsl13> not happening before heino's retirement
16:10 < bridge> <jxsl13> :kek:
16:12 < bridge> <chairn> damn, this guy is unstable. He keeps leaving and coming by ðŸ˜„
16:15 < bridge> <ryozuki> https://lwn.net/ml/all/cover.1747070147.git.anand.jain@oracle.com/
16:16 < bridge> <ryozuki> btrfs: new performance-based chunk allocation using device roles
16:16 < ws-client> <ChillerDragon> bruv why is it called hack and not merged @milkeeycat 
16:17 < bridge> <milkeeycat> because i made it quickly to make kernel module work xd
16:17 < ws-client> <ChillerDragon> the CI passes
16:17 < ws-client> <ChillerDragon> ship it
16:18 < bridge> <milkeeycat> btw, does your editor formats C code correctly(in ddnet_protocol)?
16:18 < bridge> <ryozuki> @learath2 someone made a tool to create factorio maps from images
16:18 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1393234923107909652/new-mapart-meta-use-ghosts-to-place-free-maparts-instatly-v0-1by02w6vb2cf1.png?ex=68726ea2&is=68711d22&hm=7bb4cd8d6b2b9a14904f2227389a615b83c73993083c5f2f9f4a00f2182c202e&
16:18 < bridge> <ryozuki> https://www.reddit.com/r/factorio/comments/1lwf7qf/new_mapart_meta_use_ghosts_to_place_free_maparts/
16:18 < bridge> <milkeeycat> mine formats correctly only C++ code -.-
16:18 < bridge> <ryozuki> https://factorio.voxelartcraft.de/
16:22 < ws-client> <ChillerDragon> @milkeeycat i dont use my editor :p i use ./scripts/fix_style.py :p and it works well
16:22 < bridge> <milkeeycat> but I remember it was working before :\
16:26 < bridge> <learath2> I also use fix_style ðŸ˜›
16:27 < bridge> <filoqcus> :brownbear:
16:48 < bridge> <melon> I use vscodes workspace which makes it do stuff :mlem:
16:50 < bridge> <milkeeycat> i use neovim btw
17:12 < bridge> <filoqcus> Uh clion:nouis:
17:12 < bridge> <kollpotato> i use zed btw
17:12 < bridge> <kollpotato> written in rust
17:12 < bridge> <kollpotato> btw
17:52 < bridge> <Solly (bun bun)> I think you might need to use a higher Res
18:03 < bridge> <pilonpl> my second PR
18:03 < bridge> <milkeeycat> pro tip, you can write "closes #number" or "fixes #number" and the issue will be closed automatically when the pr is merged
18:04 < bridge> <pilonpl> Where? In the title?
18:05 < bridge> <kollpotato> does it?
18:05 < bridge> <milkeeycat> in pr description
18:05 < bridge> <pilonpl> That's so dumb actually lol
18:05 < bridge> <kollpotato> deen closed the issue i fixed manually i think
18:05 < bridge> <pilonpl> Why can't i just add it in a separate menu?
18:05 < bridge> <kollpotato> what menu xd
18:06 < bridge> <kebscs> bcs git is text based
18:06 < bridge> <pilonpl> Idk, on github
18:06 < bridge> <kebscs> its jsut github that does it automatically by parsing the commit msg
18:06 < bridge> <pilonpl> But issues is a github thing
18:06 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1393262218346496020/image.png?ex=6872880e&is=6871368e&hm=2ab94cf1562ceccecc209592d9e2f397f0c1ecb60b4eede2b8bc09035ba1b52b&
18:06 < bridge> <milkeeycat> the issue was closed because the pr was merged
18:07 < bridge> <kollpotato> is this a github feature?
18:08 < bridge> <pilonpl> I can still edit the pr
18:08 < bridge> <kebscs> it closes only on merge
18:08 < bridge> <kebscs> you can edit pr before merged and include closes #
18:09 < bridge> <kollpotato> sick
18:09 < bridge> <kollpotato> one minute before merge i can just copy paste all issues
18:09 < bridge> <kollpotato> and it will close them all
18:09 < bridge> <kollpotato> xD
18:10 < bridge> <pilonpl> 300iq
18:10 < bridge> <pilonpl> you could solve all issues this way
18:10 < bridge> <kollpotato> wait is this really how it can be fixed
18:10 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393263206973309039/image.png?ex=687288fa&is=6871377a&hm=df1d27a1319a437a09547aa754bfc84998f41e13316730b58335b1d9f7cf16b3&
18:10 < bridge> <kollpotato> i tried to apply my parser knowledge but it didnt work
18:10 < bridge> <kollpotato> this is simple af
18:10 < bridge> <pilonpl> well idk, but it seems to work
18:11 < bridge> <kollpotato> have u tried all test cases?
18:11 < bridge> <pilonpl> idk
18:11 < bridge> <pilonpl> i think i tried most stuff and it works as expected
18:11 < bridge> <pilonpl> i PRed this so others can test it
18:12 < bridge> <kollpotato> some checks failed xd
18:12 < bridge> <kollpotato> no merge for u
18:12 < bridge> <kollpotato> bcus space after if
18:12 < bridge> <pilonpl> well
18:12 < bridge> <louis> its just style, run clang format script
18:13 < bridge> <pilonpl> i don't like the formatting used in this project tbh
18:13 < bridge> <kollpotato> yeah but u dont have an option
18:13 < bridge> <pilonpl> space after `if` is clearly better
18:13 < bridge> <louis> also personally i would avoid continue statements and just flip the if stuff around (conditionally return, otherwise nothing)
18:13 < bridge> <pilonpl> really?
18:14 < bridge> <kollpotato> i think its fine
18:14 < bridge> <kollpotato> i think many people avoid continue because its too long as a keyword
18:14 < bridge> <louis> its more readable if you have one conditional return inside nested ifs instead of both a conditional continue and also a return
18:14 < bridge> <milkeeycat> wtf xd
18:15 < bridge> <kollpotato> yes its random
18:15 < bridge> <pilonpl> i think stuff like
18:15 < bridge> <pilonpl> ```c
18:15 < bridge> <pilonpl> if (condition) {
18:15 < bridge> <pilonpl>     // optionally do stuff
18:15 < bridge> <pilonpl>     continue;
18:15 < bridge> <pilonpl>     // or
18:15 < bridge> <pilonpl>     break;
18:15 < bridge> <pilonpl>     // or
18:15 < bridge> <pilonpl>     return; 
18:15 < bridge> <pilonpl> }
18:15 < bridge> <pilonpl> ```
18:15 < bridge> <pilonpl> is the best way to write code
18:15 < bridge> <kollpotato> but ive seen 2 people avoid it
18:17 < bridge> <pilonpl> nested ifs are really unreadable tho
18:17 < bridge> <pilonpl> continue makes it immediately obvious it skips everything
18:18 < bridge> <pilonpl> okay anyways
18:18 < bridge> <pilonpl> what do i do when a check fails?
18:18 < bridge> <milkeeycat> you fix it
18:19 < bridge> <pilonpl> but like i just commit to the branch?
18:19 < bridge> <milkeeycat> yes
18:20 < bridge> <louis> u should squash commits
18:20 < bridge> <louis> or git commit --amend and then force push, idk best practice
18:20 < bridge> <louis> since its only gonna be a style fix
18:21 < bridge> <louis> idk its just kinda ugly imo
18:21 < bridge> <louis> and then u have to find where the continue will jump to
18:21 < bridge> <kollpotato> @pilonpl i think ur pr broke everything
18:21 < bridge> <kollpotato> i launched the client it cant load the binds
18:21 < bridge> <kollpotato> or maybe i did something wrong
18:21 < bridge> <kollpotato> yeah same
18:21 < bridge> <kollpotato> but i can live with that
18:21 < bridge> <pilonpl> it works on my machine
18:22 < bridge> <ryozuki> idk in c++ continue probs a bit ugly
18:22 < bridge> <ryozuki> in rust in some places it falls lovely
18:22 < bridge> <kollpotato> they do the same thing xd
18:22 < bridge> <ryozuki> might be biased cuz c++ ugly for me
18:22 < bridge> <ryozuki> i know but its also about style
18:23 < bridge> <louis> it can  be nice where the logic requires it idk
18:23 < bridge> <louis> does c++ have labeled loops btw
18:23 < bridge> <louis> doesnt look like it
18:23 < bridge> <chillerdragon> It has goto xd
18:23 < bridge> <ryozuki> ```rust
18:23 < bridge> <ryozuki> loop {
18:23 < bridge> <ryozuki>   if skipped_leg_day {
18:23 < bridge> <ryozuki>     continue;
18:23 < bridge> <ryozuki>   }
18:23 < bridge> <ryozuki> 
18:23 < bridge> <ryozuki>   strength += 1;
18:23 < bridge> <ryozuki> }
18:23 < bridge> <ryozuki> ```
18:23 < bridge> <ryozuki> im bored
18:23 < bridge> <louis> oh right xd
18:24 < bridge> <ryozuki> (this is rust)
18:24 < bridge> <soulyvevo> looks ugly
18:24 < bridge> <ryozuki> afaik c++ has no loop, but u can just do for(;;)
18:24 < bridge> <ryozuki> yo mama
18:24 < bridge> <louis> strength += if skipped_leg_day 1 else 0 ez
18:24 < bridge> <kollpotato> yeah its just somehow all my binds were reset when i was testing my code
18:24 < bridge> <kollpotato> i think it works
18:25 < bridge> <ryozuki> what is m_pCommand
18:25 < bridge> <pilonpl> okay so now i have to remove that one space character
18:25 < bridge> <ryozuki> a ptr to char?
18:25 < bridge> <pilonpl> yeah
18:25 < bridge> <chillerdragon> @milkeeycat: btw i got weird gtest error
18:26 < bridge> <ryozuki> thats a big while
18:27 < bridge> <ryozuki> til https://en.cppreference.com/w/cpp/utility/integer_sequence.html
18:27 < ws-client> <ChillerDragon> @milkeeycat https://github.com/MilkeeyCat/ddnet_protocol/pull/83/commits/082432151d066a0a46c81dade633699c0b02e2f6
18:28 < bridge> <kebscs> what is it even for
18:29 < bridge> <ryozuki> i guess useful for overcomplicated c++ templates
18:30 < bridge> <pilonpl> btw how would i do that without `continue` anyways?
18:31 < bridge> <kollpotato> i think just inverse and remove continue
18:31 < bridge> <pilonpl> inverse what?
18:31 < bridge> <kollpotato> ```cpp
18:31 < bridge> <kollpotato>             if(!pNextPart)
18:31 < bridge> <kollpotato>             {
18:31 < bridge> <kollpotato>                 return;
18:31 < bridge> <kollpotato>             }
18:31 < bridge> <kollpotato> 
18:31 < bridge> <kollpotato>             pStr = pNextPart;
18:32 < bridge> <kollpotato> ```
18:32 < bridge> <kollpotato> idk if it works
18:32 < bridge> <pilonpl> maybe
18:32 < bridge> <pilonpl> well no
18:32 < bridge> <pilonpl> it would not
18:32 < bridge> <pilonpl> you really need to start a new iteration
18:32 < bridge> <kollpotato> oh right
18:33 < bridge> <louis> oh it's the entire while loop xd
18:33 < bridge> <louis> so jank
18:33 < bridge> <melon> wouldnt that be the equivalent of while(true)
18:33 < bridge> <melon> just much more ugly
18:33 < bridge> <pilonpl> idk, some people really like `for (;;)`
18:34 < bridge> <melon> if your code requires an endless loop you should reevaluate your life choices
18:34 < bridge> <melon> :Pepega:
18:34 < bridge> <louis> cap
18:34 < bridge> <kollpotato> yeah otherwise it does this
18:34 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393269237027438734/image.png?ex=68728e97&is=68713d17&hm=e597014ea18386c38fd157e0a0a03f8f2c759827f177af1ca0bbf4d8399a5858&
18:34 < bridge> <louis> just code good
18:34 < bridge> <pilonpl> yeah, games should have a time limit anyways
18:34 < bridge> <pilonpl> like in china or something
18:34 < bridge> <.dartmonkey> So real xd
18:35 < bridge> <pilonpl> after 400k frames the game should tell you to touch grass
18:37 < bridge> <ryozuki> a kernel uses a  endless loop
18:37 < bridge> <ryozuki> iirc
18:37 < bridge> <ryozuki> embedded
18:37 < bridge> <melon> i'll make an exception for that
18:38 < bridge> <ryozuki> idk loop in rust is used a bit
18:38 < bridge> <ryozuki> it fits in some places
18:38 < bridge> <ryozuki> like main loops
18:38 < bridge> <ryozuki> with multiple stop conditions
18:38 < bridge> <kollpotato> why does no one pr new features using rust
18:38 < bridge> <kollpotato> cxx is pretty much useless
18:39 < bridge> <ryozuki> because any new feature requires adding lot of bridge code
18:39 < bridge> <ryozuki> i guess
18:39 < bridge> <melon> QUIC utilizes rust
18:39 < bridge> <kollpotato> heinrich is the one who utilizes rust
18:39 < bridge> <ryozuki> master server is in rust
18:40 < bridge> <pilonpl> actually i think 
18:40 < bridge> <pilonpl> ```c
18:40 < bridge> <pilonpl> loop {
18:40 < bridge> <pilonpl>     if (!condition) break;
18:40 < bridge> <pilonpl>     // Equivalent to while (condition)
18:40 < bridge> <pilonpl> }
18:40 < bridge> <pilonpl> ```
18:40 < bridge> <pilonpl> wouldn't be half bad
18:40 < bridge> <kollpotato> mastersrv does not need cxx bridge
18:40 < bridge> <totar> Isn't every application an endless loop?
18:40 < bridge> <kollpotato> its independent
18:40 < bridge> <ryozuki> i know
18:40 < bridge> <ryozuki> just saying
18:40 < bridge> <ryozuki> no
18:40 < bridge> <ryozuki> btw a loop that breaks is considered endless?, but if its enough complex u cant know if it breaks even if it has a if break
18:40 < bridge> <ryozuki> cuz halting problem
18:41 < bridge> <ryozuki> so
18:41 < bridge> <ryozuki> everything is and is not a endless loop
18:41 < bridge> <ryozuki> at the same time
18:41 < bridge> <ryozuki> thanks for coming to my ted talk
18:41 < bridge> <ryozuki> now ill queue for a dota ranked
18:42 < bridge> <ryozuki> ```rust 
18:42 < bridge> <ryozuki> fn main() {
18:42 < bridge> <ryozuki>     let mut counter = 0;
18:42 < bridge> <ryozuki> 
18:42 < bridge> <ryozuki>     let result = loop {
18:42 < bridge> <ryozuki>         counter += 1;
18:42 < bridge> <ryozuki> 
18:42 < bridge> <ryozuki>         if counter == 10 {
18:42 < bridge> <ryozuki>             break counter * 2;
18:42 < bridge> <ryozuki>         }
18:42 < bridge> <ryozuki>     };
18:42 < bridge> <ryozuki> 
18:42 < bridge> <ryozuki>     assert_eq!(result, 20);
18:42 < bridge> <ryozuki> }
18:42 < bridge> <ryozuki> 
18:42 < bridge> <ryozuki> ```
18:42 < bridge> <ryozuki> btw u cant do this in cpp
18:42 < bridge> <ryozuki> ```rust
18:42 < bridge> <ryozuki> 
18:42 < bridge> <ryozuki> fn main() {
18:42 < bridge> <ryozuki>     let mut counter = 0;
18:43 < bridge> <ryozuki> 
18:43 < bridge> <ryozuki>     let result = loop {
18:43 < bridge> <ryozuki>         counter += 1;
18:43 < bridge> <ryozuki> 
18:43 < bridge> <ryozuki>         if counter == 10 {
18:43 < bridge> <ryozuki>             break counter * 2;
18:43 < bridge> <ryozuki>         }
18:43 < bridge> <ryozuki>     };
18:43 < bridge> <ryozuki> 
18:43 < bridge> <ryozuki>     assert_eq!(result, 20);
18:43 < bridge> <ryozuki> }
18:43 < bridge> <ryozuki> 
18:43 < bridge> <ryozuki> ```
18:43 < bridge> <ryozuki> loops can return values
18:43 < bridge> <.dartmonkey> Maybe if it breaks it's not endless cause there is an end
18:43 < bridge> <ryozuki> xd
18:43 < bridge> <melon> idk i usually avoid endless loops at all costs, atleast fully intention ones like `while(true) or for (;;)`
18:43 < bridge> <melon> having to early return and/or break out of it is just another thing to keep track for me
18:44 < bridge> <melon> monkeybrain
18:44 < bridge> <.dartmonkey> https://tenor.com/view/roblox-meme-roblox-lua-meme-luau-roblox-studio-gif-9076490622546437733
18:44 < bridge> <kollpotato> oh no roblox development
18:50 < ws-client> <ChillerDragon> stability seems closer to stabbable and stabbing than stable to me. Change my mind.
18:51 < bridge> <pilonpl> Pioooooo approved my PR
18:51 < bridge> <pilonpl> even tho it's apparently midnight for her lol?
18:52 < bridge> <kollpotato> wait is she a maintainer
18:52 < ws-client> <ChillerDragon> everyone can approve
18:52 < ws-client> <ChillerDragon> you too @kollpotato 
18:52 < bridge> <kollpotato> o
18:52 < bridge> <kollpotato> ok i go approve all ur prs
18:52 < ws-client> <ChillerDragon> ez
18:52 < bridge> <pilonpl> that's crazy
18:52 < bridge> <pilonpl> actually
18:54 < bridge> <pilonpl> but why would anyone approve PRs at midnight?
18:55 < bridge> <kollpotato> midnight is not that late
18:55 < bridge> <kollpotato> so why not
18:55 < bridge> <milkeeycat> chillerdragon: imagine if we already introduced ub :santatrollet:
18:57 < bridge> <louis> play deadlock
18:57 < bridge> <louis> if ur into fps
18:57 < bridge> <louis> super good game
19:15 < ws-client> <ChillerDragon> @milkeeycat im sure this fakin google test library is full of bugs
19:16 < ws-client> <ChillerDragon> @pilonpl being stuck in the club queue at midnight is perfect time to review some prs
19:19 < ws-client> <ChillerDragon> @milkeeycat i mean we use malloc and free for those strings so thats scary af
19:21 < bridge> <milkeeycat> I'll have fun time debugging this
19:58 < bridge> <milkeeycat> chillerdragon: btw we don't use malloc for those strings :p
20:05 < ws-client> <ChillerDragon> wot? is it stack from the packer like in tw?
20:10 < bridge> <pilonpl> What's the purpose of the merge queue?
20:13 < bridge> <kollpotato> to avoid race conditions
20:13 < bridge> <kollpotato> if two prs are merged at the exact same time it goes kaboom
20:15 < bridge> <Solly (bun bun)> No it actually goes patoeii
20:15 < bridge> <ryozuki> > imagine this:
20:15 < bridge> <ryozuki> > 
20:15 < bridge> <ryozuki> >     Pull Request #1: Rename bifurcate() to bifurcateCrab()
20:15 < bridge> <ryozuki> > 
20:15 < bridge> <ryozuki> > Change the name of this function, as well as every call site that currently exists in the main branch. I've thought of making it a method on Crab instead of on Sword, but then it would be bifurcateWithSword(), which hardly seems like an improvement.
20:15 < bridge> <ryozuki> > Pull Request #2: bifurcate() after landing, in addition to before
20:15 < bridge> <ryozuki> > 
20:15 < bridge> <ryozuki> >     Adds another call to bifurcate(), to make sure it gets done even if we skip the pre-landing procedure.
20:15 < bridge> <ryozuki> > 
20:15 < bridge> <ryozuki> > When both of these pull requests are sitting open in the backlog, they will both be tested with the main branch. Assuming they both pass, GitHub will happily present the Big Green Merge Button. Once they both get merged, the main branch will go red (Method bifurcate() not found).
20:22 < bridge> <milkeeycat> chillerdragon: ye https://github.com/MilkeeyCat/ddnet_protocol/blob/9203c4ae5f03ebac786c487f7d2afaf17eba4022/src/packer.c#L208-L233
20:24 < bridge> <pioooooo> I mean yeah but I woke up at midnight
20:30 < bridge> <pilonpl> Is 2 PRs enough for the dev role?
20:30 < bridge> <kollpotato> one is enough
20:30 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393298492209893486/image.png?ex=6872a9d6&is=68715856&hm=b4894566addcc0d2dd76329dbac3b7411e9776f24a0f909b362e08c3d4e61b0b&
20:32 < bridge> <kollpotato> this doesnt quite say how much u need but some people got a role just after 1 pr
20:33 < bridge> <kollpotato> and u have to ask for it if u want
20:33 < bridge> <pilonpl> But probably for a bit more than 7 new lines
20:33 < bridge> <kollpotato> meh
20:33 < bridge> <kollpotato> it doesnt matter
20:33 < bridge> <kollpotato> this role is pretty much useless
20:34 < bridge> <kollpotato> some people have 200 prs merged some just 1
20:34 < bridge> <pilonpl> It's nor useless
20:34 < bridge> <pilonpl> It makes your nick purple
20:34 < bridge> <kollpotato> yea
20:35 < bridge> <kollpotato> true
20:35 < bridge> <kollpotato> it looks good
20:41 < bridge> <melon> you need to do some woolooloo to summon the discord gods to give you roles
20:42 < bridge> <melon> FyI - i did a lot of wooloolooing
20:43 < bridge> <kollpotato> where is the summoning
20:43 < bridge> <kollpotato> u lied!!!
20:46 < bridge> <melon> :kek: - i got the role within 0.01 seconds as well
20:56 < bridge> <milkeeycat> chillerdragon: it's the weirdest shit I've ever seen
20:56 < bridge> <milkeeycat> ```cpp
20:56 < bridge> <milkeeycat> ...
20:56 < bridge> <milkeeycat>     std::cout << (int)*info.version << std::endl;
20:56 < bridge> <milkeeycat>     std::cout << (int)info.version[0] << std::endl;
20:56 < bridge> <milkeeycat> ...
20:56 < bridge> <milkeeycat> ```
20:56 < bridge> <milkeeycat> ```
20:56 < bridge> <milkeeycat> 48
20:56 < bridge> <milkeeycat> -10
20:56 < bridge> <milkeeycat> ```
20:56 < bridge> <milkeeycat> ????
20:59 < bridge> <kollpotato> 48 makes sense
20:59 < bridge> <kollpotato> -10 does not
20:59 < bridge> <kollpotato> where did it come from xd
21:00 < bridge> <pilonpl> magic
21:01 < bridge> <kollpotato> i should really learn c
21:01 < bridge> <kollpotato> i barely know pointer arithmetic
21:01 < bridge> <kollpotato> but i know address cant be negative
21:01 < bridge> <pilonpl> this doesn't print the address tho
21:01 < bridge> <kollpotato> is it the character at index 0?
21:02 < bridge> <pilonpl> yeah
21:02 < bridge> <pilonpl> i mean idk, this is weird
21:03 < bridge> <pilonpl> what is the type of `info.version`?
21:03 < bridge> <milkeeycat> `const char *`
21:07 < bridge> <milkeeycat> ```cpp
21:07 < bridge> <milkeeycat>     std::cout << (void *)info.version << std::endl;
21:07 < bridge> <milkeeycat>     std::cout << (int)*info.version << std::endl;
21:07 < bridge> <milkeeycat>     std::cout << (int)*info.version << std::endl;
21:07 < bridge> <milkeeycat> ```
21:07 < bridge> <milkeeycat> ```
21:07 < bridge> <milkeeycat> 0x7fffcb8c06e4
21:07 < bridge> <milkeeycat> -1
21:07 < bridge> <milkeeycat> -1
21:07 < bridge> <milkeeycat> ```
21:07 < bridge> <milkeeycat> and when I print the pointer it gives equal results
21:07 < bridge> <milkeeycat> cool
21:07 < bridge> <milkeeycat> second one is [0]*
21:08 < bridge> <milkeeycat> ```cpp
21:08 < bridge> <milkeeycat>     std::cout << (void *)info.version << std::endl;
21:08 < bridge> <milkeeycat>     std::cout << (int)*info.version << std::endl;
21:08 < bridge> <milkeeycat>     std::cout << (int)info.version[0] << std::endl;
21:08 < bridge> <milkeeycat> ```
21:08 < bridge> <milkeeycat> ```
21:08 < bridge> <milkeeycat> 0x7fffcb8c06e4
21:08 < bridge> <milkeeycat> -1
21:08 < bridge> <milkeeycat> -1
21:08 < bridge> <milkeeycat> ```
21:08 < bridge> <milkeeycat> and when I print the pointer it gives equal results
21:09 < bridge> <pilonpl> seems to work on my machine lol
21:09 < bridge> <pilonpl> ```cpp
21:09 < bridge> <pilonpl> #include <iostream>
21:09 < bridge> <pilonpl> 
21:09 < bridge> <pilonpl> int main() {
21:09 < bridge> <pilonpl>     const char* string = "0idkwhatsnext";
21:09 < bridge> <pilonpl>     std::cout << (int)*string << std::endl;
21:09 < bridge> <pilonpl>     std::cout << (int)string[0] << std::endl;
21:09 < bridge> <pilonpl>     return 0;
21:09 < bridge> <pilonpl> }
21:09 < bridge> <pilonpl> 
21:09 < bridge> <pilonpl> // > g++ main.cpp && ./a.out
21:09 < bridge> <pilonpl> // 48
21:09 < bridge> <pilonpl> // 48
21:09 < bridge> <pilonpl> 
21:09 < bridge> <pilonpl> ```
21:09 < bridge> <kollpotato> yea im trying to reproduce too
21:09 < bridge> <kollpotato> works fine for me
21:10 < bridge> <pilonpl> what compiler? os? flags? idk what might matter
21:11 < bridge> <milkeeycat> it's either gtest or skill issue :thonk:
21:12 < bridge> <melon> can you try `std::cout << (unsigned int)(unsigned char)*info.version << "\n"` for me please
21:12 < bridge> <melon> :kek:
21:12 < bridge> <melon> can you try `std::cout << (unsigned int)(unsigned char)*info.version << "\n";` for me please
21:12 < bridge> <kollpotato> how do i run tests
21:13 < bridge> <kollpotato> i cloned the repo xd
21:13 < ws-client> <ChillerDragon> wotfeke @milkeeycat 
21:13 < bridge> <milkeeycat> `cmake -DCMAKE_TESTING_ENABLED=ON ..` then `make run_tests`
21:13 < bridge> <milkeeycat> chillerdragon: I've never seen anything like this xd
21:14 < bridge> <milkeeycat> if it's our fault, we must've done some criminal stuff
21:14 < bridge> <kollpotato> didnt use rust
21:14 < bridge> <kollpotato> fatal mistake
21:15 < bridge> <melon> tho this is funny, whats the ASCII value of it? how does it land on -1
21:15 < bridge> <melon> learath would know this for sure
21:16 < bridge> <milkeeycat> each time is a different value :lol:
21:16 < ws-client> <ChillerDragon> @milkeeycat i see shit like this all the time. I am criminal like that.
21:16 < bridge> <chairn> there's probably some UB involved somewhere
21:16 < bridge> <chairn> or not
21:16 < bridge> <chairn> last line cast a char to an int
21:17 < bridge> <chairn> while 2nd line interprets the pointed value as an int
21:18 < bridge> <chairn> though the output should be somewhat related which doesn't seem to be the case here
21:18 < ws-client> <ChillerDragon> @chairn isnt ``*string`` and ``string[0]`` the same?
21:18 < bridge> <melon> i assume weird behaviour of a signed char casted to an int which somehow goes from a binary value to a negative one
21:19 < bridge> <chairn> hm true
21:19 < bridge> <melon> where is lerato
21:19 < bridge> <chairn> yeah, but should be related, like -10 and 245
21:19 < bridge> <melon> where is lerato, i dont want to ping
21:19 < bridge> <milkeeycat> @learath2 send help
21:19 < ws-client> <ChillerDragon> xd
21:19 < bridge> <chairn> not -10 and 48 which have completely different binary representation
21:19 < bridge> <learath2> how can I be of service?
21:19 < bridge> <kollpotato> ```cpp
21:19 < ws-client> <ChillerDragon> lmao
21:19 < bridge> <kollpotato> #include <iostream>
21:20 < bridge> <kollpotato> 
21:20 < bridge> <kollpotato> int main() {
21:20 < bridge> <kollpotato>     std::cout << (int)(char)0xff << std::endl;
21:20 < bridge> <kollpotato> 
21:20 < bridge> <kollpotato>     return 0;
21:20 < bridge> <kollpotato> }
21:20 < bridge> <kollpotato> ```
21:20 < bridge> <kollpotato> This prints `-1`
21:20 < bridge> <kollpotato> @learath2 explain pointer
21:20 < bridge> <chairn> this can also print 255 ðŸ™‚
21:20 < bridge> <kollpotato> what???
21:20 < bridge> <milkeeycat> can you clone a repo? xd
21:20 < bridge> <chairn> char is neither signed or unsigned in C
21:20 < bridge> <chairn> it's implementation defined
21:20 < bridge> <learath2> now? not really
21:20 < bridge> <melon> wait @milkeeycat is is even a valid string?, you mentioned getting different results all the time
21:20 < bridge> <melon> so it might as well just be.. uninitialized garbaghe
21:20 < bridge> <melon> so it might as well just be.. uninitialized garbage
21:20 < bridge> <kollpotato> what an awesome world we live in
21:20 < bridge> <chairn> doesn't matter here
21:21 < bridge> <chairn> given he reads it without modifying it
21:21 < bridge> <melon> hmm
21:22 < bridge> <chairn> it feels like there's an UB somewhere above the code triggering this behavior
21:25 < bridge> <learath2> Does it happen in a small reproducible program?
21:27 < bridge> <learath2> I'd guess compiler reordering shenanigans due to UB
21:31 < bridge> <pilonpl> so can i get the Developer role?
21:33 < bridge> <learath2> pr?
21:33 < bridge> <kollpotato> 2 prs!
21:33 < bridge> <kollpotato> he is very cool
21:34 < bridge> <ryozuki> if char is 1 byte, then maybe the cast to it sign extends it?
21:35 < bridge> <chairn> but both should still yield same results as the cast is both char to int
21:36 < bridge> <ryozuki> well
21:36 < bridge> <chairn> show us the rest of the code @milkeeycat
21:36 < bridge> <ryozuki> u are casting a int to char to int
21:36 < bridge> <ryozuki> iirc
21:36 < bridge> <ryozuki> the literal is not a char
21:36 < bridge> <ryozuki> right?
21:36 < bridge> <ryozuki> i forgot c
21:36 < bridge> <ryozuki> also i dont have context
21:36 < bridge> <ryozuki> just came
21:36 < bridge> <ryozuki> and read last msg
21:36 < bridge> <ryozuki> xd
21:37 < bridge> <learath2> also the binary representation of 48 has too many 0s to the right to become a -10 sign extended wrongly
21:37 < bridge> <milkeeycat> https://github.com/MilkeeyCat/ddnet_protocol/blob/owo/test/packet_normal.cc
21:37 < bridge> <ryozuki> OWO
21:37 < bridge> <chairn> yea, even binary representation is too different
21:38 < bridge> <kollpotato> lmao
21:38 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393315414573977670/image.png?ex=6872b999&is=68716819&hm=8a5fd18acfd2e6bc33647abc0ae7f6becd00374713404de8e3177c6ab7d1b82c&
21:39 < bridge> <melon> AI said "oh this is interesting" and proceeded to spit out 50 lines of utter garbage about the issue
21:39 < bridge> <melon> 
21:39 < bridge> <melon> It'lL StEaL OuR JoBs
21:39 < bridge> <milkeeycat> here's what valgrind says
21:39 < bridge> <milkeeycat> ```
21:39 < bridge> <milkeeycat> ==175266== Invalid read of size 1
21:39 < bridge> <milkeeycat> ==175266==    at 0x111F2D: NormalPacket2_Info_Test::TestBody() (packet_normal.cc:23)
21:39 < bridge> <milkeeycat> ==175266==    by 0x151242: void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2635)
21:39 < bridge> <milkeeycat> ==175266==    by 0x149BC0: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2671)
21:39 < bridge> <milkeeycat> ==175266==    by 0x125ABB: testing::Test::Run() (gtest.cc:2710)
21:39 < bridge> <milkeeycat> ==175266==    by 0x126464: testing::TestInfo::Run() (gtest.cc:2856)
21:39 < bridge> <milkeeycat> ==175266==    by 0x126D3C: testing::TestSuite::Run() (gtest.cc:3034)
21:39 < bridge> <milkeeycat> ==175266==    by 0x136B23: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5964)
21:39 < bridge> <milkeeycat> ==175266==    by 0x152486: bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2635)
21:40 < bridge> <milkeeycat> ==175266==    by 0x14AC06: bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2671)
21:40 < bridge> <milkeeycat> ==175266==    by 0x13539C: testing::UnitTest::Run() (gtest.cc:5543)
21:40 < bridge> <milkeeycat> ==175266==    by 0x114737: RUN_ALL_TESTS() (gtest.h:2334)
21:40 < bridge> <milkeeycat> ==175266==    by 0x1146BC: main (gtest_main.cc:64)
21:40 < bridge> <milkeeycat> ==175266==  Address 0x1ffefff414 is on thread 1's stack
21:40 < bridge> <milkeeycat> ==175266==  1468 bytes below stack pointer
21:40 < bridge> <milkeeycat> ==175266==
21:40 < bridge> <milkeeycat> ```
21:40 < bridge> <chairn> use ubsan and asan rather than valgrind
21:40 < bridge> <ryozuki> @milkeeycat pls dont just write it in C, write it all in ANSI C (c99)
21:40 < bridge> <ryozuki> its the real c
21:40 < bridge> <ryozuki> other c is not real
21:40 < bridge> <melon> @teero777 confirm
21:40 < bridge> <ryozuki> and for a challenge
21:40 < bridge> <ryozuki> do c89
21:40 < bridge> <milkeeycat> I'll write in C which has `bool` type
21:40 < bridge> <ryozuki> u haveto declare variables at start
21:40 < bridge> <ryozuki> of functions
21:41 < bridge> <ryozuki> iirc
21:41 < bridge> <ryozuki> thats a fake c
21:41 < bridge> <ryozuki> btw
21:41 < bridge> <ryozuki> to ensure ur project is C
21:41 < bridge> <ryozuki> project(crocks) -> project(crocks C)
21:42 < bridge> <milkeeycat> mhm
21:42 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1393316555852480562/message.txt?ex=6872baa9&is=68716929&hm=c4283fb5be1dff93a6062a52e8b5e02f8abda41cea2116445484cf14f40f37d9&
21:42 < bridge> <ryozuki> @learath2 whats ur take
21:42 < bridge> <milkeeycat> nice wall of text
21:42 < bridge> <teero777> nah thats just pain
21:42 < bridge> <ryozuki> stack-buffer-overflow  just means u are right at the heard of C coding
21:42 < bridge> <ryozuki> it feels like home
21:43 < bridge> <ryozuki> heart*
21:43 < bridge> <kollpotato> @milkeeycat tests are supposed to pass right?
21:43 < bridge> <learath2> i'm a bit preoccupied, if you still haven't figured it out in 20 I'll take a look
21:43 < bridge> <melon> so in conclusion
21:43 < bridge> <melon> 
21:43 < bridge> <melon> its joever, you're reading non-existent memory, the brain is dead - unplug the life support, go home, cry
21:43 < bridge> <ryozuki> it would be fun to find a compiler bug
21:43 < bridge> <teero777> including stdbool.h is fine
21:43 < bridge> <kollpotato> works on my machine
21:43 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393316840305852437/image.png?ex=6872baed&is=6871696d&hm=d7820a811459ef9ceff9e0da2e00d0709a26f63f800635d746934450fa8826e1&
21:43 < bridge> <teero777> it makes the code more clear imo
21:43 < bridge> <ryozuki> i meant as joke, i think c21 or some of those has it, c99 real
21:44 < bridge> <teero777> c21 has bool type built in?
21:44 < bridge> <chairn> nah, it looks like simple buffer overflow
21:44 < bridge> <teero777> or what
21:44 < bridge> <ryozuki> @learath2 btw, is there a optimized malloc for zeroed data?
21:44 < bridge> <ryozuki> or i just have to relly on generic malloc
21:44 < bridge> <ryozuki> or calloc
21:44 < bridge> <chairn> i'd say the multiple unions in the structs don't really help eihter
21:45 < bridge> <ryozuki> do u think kernels keep zeroed regions of memory for faster malloc?
21:45 < bridge> <ryozuki> would be fun
21:46 < bridge> <chairn> the pointer is in the stack, you might be reading the stack you're currently using which explains the change in between 2 calls to std::cout
22:02 < bridge> <milkeeycat> chillerdragon: we return strings which point to stack of this function xd https://github.com/MilkeeyCat/ddnet_protocol/blob/9203c4ae5f03ebac786c487f7d2afaf17eba4022/src/packet.c#L62
22:06 < bridge> <learath2> ok no longer preoccupied, so did you figure it out @milkeeycat
22:07 < bridge> <learath2> idk, but I do know it's better to calloc then malloc+memset
22:08 < bridge> <learath2> old bsds used to zero pages while the system idled, but idk if it's still a thing
22:08 < bridge> <milkeeycat> look at the message above xd
22:08 < bridge> <learath2> ok so you didn't
22:09 < bridge> <learath2> Is it reproducible? Did anyone else get it by cloning your repo?
22:09 < bridge> <milkeeycat> I did -.-
22:09 < bridge> <milkeeycat> we are returning pointers to stack :\
22:09 < bridge> <learath2> Oh you did, ok then I didn't read properly
22:10 < bridge> <milkeeycat> classic whoopsie daisy :pepeW:
22:10 < bridge> <learath2> Rust would have never let you
22:10 < bridge> <learath2> Go would have promoted it to a dynamic allocation immediately. C bad frfr
22:11 < bridge> <milkeeycat> I like having ability to shoot both of my legs
22:11 < bridge> <learath2> me too
22:11 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393323861776400504/screenshot-2025-07-11_23-10-40.png?ex=6872c177&is=68716ff7&hm=0c6d15f6bf0e25fed8685434b958e1e096f1afb55df0fdcdbe3271d92fa158b4&
22:11 < bridge> <pilonpl> And it doesn't generate any warnings??
22:11 < bridge> <milkeeycat> that's why you would like my language, I'll add register coalescing soon, it will be so gooood
22:12 < bridge> <learath2> @pilonpl what is your github name?
22:12 < bridge> <pilonpl> pilonpl
22:12 < bridge> <milkeeycat> that's why you would like my language, I'll add register coalescing(to the compiler backend) soon, it will be so gooood
22:12 < bridge> <kollpotato> c is just assembly with fancy stuff
22:12 < bridge> <pilonpl> Lol
22:12 < bridge> <kollpotato> like functions
22:12 < bridge> <kollpotato> and integers
22:13 < bridge> <pilonpl> But i thought clang had a warning for that specific thing
22:13 < bridge> <milkeeycat> the pointer goes through a few functions
22:13 < bridge> <milkeeycat> it's not just 
22:13 < bridge> <milkeeycat> ```c
22:13 < bridge> <milkeeycat> int a = 0;
22:13 < bridge> <milkeeycat> return &a;
22:13 < bridge> <milkeeycat> ```
22:13 < bridge> <learath2> god I hate modern websites and their searching abilities, I typed `pilo` like 4 times and it didn't show me your name
22:13 < bridge> <learath2> There you go, proud owner of a purple name
22:13 < bridge> <Ewan> gg
22:13 < bridge> <kollpotato> gg
22:14 < bridge> <milkeeycat> gege
22:14 < bridge> <pilonpl> Great
22:14 < bridge> <kollpotato> now u can quit developing for ddnet
22:14 < bridge> <kollpotato> official retirement
22:15 < bridge> <pilonpl> And tell everyone i am an open source contributor lol
22:15 < bridge> <melon> deen landed a job with that
22:16 < bridge> <melon> :Pepega:
22:16 < bridge> <learath2> I didn't so YMMV
22:16 < bridge> <learath2> I didn't, so YMMV
22:16 < bridge> <kollpotato> "i have contributed and maintained a 20 year old game"
22:16 < bridge> <kollpotato> i still wonder
22:16 < bridge> <kollpotato> why heinrich is not active
22:17 < bridge> <kollpotato> well at least in this channel
22:17 < bridge> <kollpotato> didnt he say anything about that
22:17 < bridge> <learath2> What posessed you to write this in C btw? I approve but I didn't think you were a C person
22:18 < bridge> <milkeeycat> for https://github.com/MilkeeyCat/nodummies
22:18 < bridge> <learath2> idk why, but I guess it's because everyone is more interested in beefing with him ðŸ˜›
22:19 < bridge> <learath2> LOL, I'm so installing this on all ddnet servers
22:19 < bridge> <milkeeycat> I even ran without outside vm :justatest:
22:19 < bridge> <milkeeycat> I even ran outside vm :justatest:
22:20 < bridge> <pilonpl> How can a kernel module do that?
22:21 < bridge> <learath2> intercept all packets, modify teeworlds ones
22:21 < bridge> <milkeeycat> ^
22:21 < bridge> <learath2> I also approve your usage of goto, you are well on track to becoming a real programmer
22:21 < bridge> <learath2> Not one of these 2025 zoozers
22:21 < bridge> <kollpotato> here or on github?
22:21 < bridge> <teero777> can be used as a cheat lol xD
22:21 < bridge> <teero777> the copy moves
22:21 < bridge> <learath2> here
22:22 < bridge> <melon> kernel-level cheats
22:22 < bridge> <melon> crazy
22:22 < bridge> <learath2> ring0 ddnet cheats before gta 6 wor
22:22 < bridge> <learath2> ring0 ddnet cheats before gta 6 wow
22:22 < bridge> <kollpotato> well im gonna search for the so called beef myself then
22:22 < bridge> <teero777> XD
22:22 < bridge> <pilonpl> 8 spaces of indentation is crazy
22:22 < bridge> <teero777> yea
22:22 < bridge> <pilonpl> Why is that a thing in the linux kernel
22:22 < bridge> <teero777> 2 or 4 is fine
22:23 < bridge> <inv41idu53rn4m3> tabs I understand but 8 spaces is diabolical
22:23 < bridge> <pilonpl> So much storage space wasted
22:23 < bridge> <inv41idu53rn4m3> xd
22:23 < bridge> <learath2> I should try to make ring -3 ddnet cheats that run on the management engine
22:24 < bridge> <inv41idu53rn4m3> kinda crazy that tabstop 8 used to be standard, I guess it's due to shorter variable names or sth
22:24 < bridge> <melon> learath on his way to broadcast `hey bro, check out this client: learath-ddnetclient.com`
22:24 < bridge> <inv41idu53rn4m3> kinda crazy that tabstop 8 used to be standard, I guess it's due to shorter variable names or sth that it was tolerable
22:25 < bridge> <inv41idu53rn4m3> The BASIC code I wrote as a kid never had line length issues and I was using 8 wide tabs
22:25 < bridge> <learath2> I guess it used to be used for making tables
22:25 < bridge> <inv41idu53rn4m3> The BASIC code I wrote as a kid never had line length issues and I was using 8 wide tabs XD
22:26 < bridge> <learath2> 8 wide tabs give you 7 characters per cell in your table
22:26 < bridge> <learath2> Also explains the name of the key ðŸ˜„
22:26 < bridge> <inv41idu53rn4m3> wait no way
22:27 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393327851096248350/image.png?ex=6872c52e&is=687173ae&hm=c900e4350561a35ac763866d75c71415d02352c5a566182848c7d7f09cc99209&
22:27 < bridge> <inv41idu53rn4m3> oh right, it's Tabulator
22:27 < bridge> <inv41idu53rn4m3> oh right, it's Tab for Tabulator
22:27 < bridge> <inv41idu53rn4m3> ...for making tables
22:27 < bridge> <inv41idu53rn4m3> but at least it's not literally the Table key
22:28 < bridge> <learath2> https://cdn.discordapp.com/attachments/293493549758939136/1393328069716082740/image.png?ex=6872c562&is=687173e2&hm=79d6c5da9ffb8f7d2dafe8243aaac05391b3bcc59b1e7c554efc0c16ef8d12f8&
22:28 < bridge> <inv41idu53rn4m3> yeah
22:28 < bridge> <learath2> https://cdn.discordapp.com/attachments/293493549758939136/1393328224116674592/image.png?ex=6872c587&is=68717407&hm=a897fbd0a9dae073e59c65a2983ea2e2a12e6b02bb3308e98932644caec05af5&
22:28 < bridge> <learath2> ðŸ˜›
22:28 < bridge> <pilonpl> Honestly idk how tab can be used for making tables
22:30 < bridge> <learath2> as such
22:30 < bridge> <learath2> https://cdn.discordapp.com/attachments/293493549758939136/1393328719191605353/image.png?ex=6872c5fd&is=6871747d&hm=05c3dafc5dac844484f8dd5b0697a0e535cfa4322815a69846cab4d9812dcab4&
22:31 < ws-client> <ChillerDragon> ah nice find @milkeeycat 
22:31 < ws-client> <ChillerDragon> @milkeeycat we dont have asan in CI right? we need that!
22:31 < bridge> <inv41idu53rn4m3> The magic of the Tab character is that it isn't always 8 spaces wide, it aligns to the next multiple of 8 characters
22:31 < bridge> <milkeeycat> chihllerdragon: we need valgrind,asan,ubsan,everythingsan
22:32 < bridge> <learath2> you can see that if it was 4 characters I couldn't possibly list my quantity and price for cheese and cake
22:32 < bridge> <inv41idu53rn4m3> or in rich text documents it aligns to wherever your tab stops are set
22:32 < bridge> <milkeeycat> chillerdragon: we need valgrind,asan,ubsan,everythingsan
22:32 < bridge> <learath2> tbh I'm really surprised one of the sans didn't catch this, did you use them to find it?
22:33 < bridge> <pilonpl> I don't really see tabs anywhere
22:33 < bridge> <inv41idu53rn4m3> you can still use a variable number of tabs for possibly longer fields
22:33 < bridge> <learath2> all the spaces in there are tabs
22:33 < bridge> <pilonpl> Yeah but i mean in practice
22:33 < bridge> <milkeeycat> I always use ddnet readme when I need to use asan, I did what readme said
22:33 < bridge> <inv41idu53rn4m3> probably in the output of traditional command line tools
22:33 < ws-client> <ChillerDragon> me too @milkeeycat xd
22:33 < bridge> <milkeeycat> xdd
22:33 < bridge> <learath2> Well you are supposed to be using it in code when indenting, idk why everyone decided to use spaces instead, weirdos
22:33 < bridge> <inv41idu53rn4m3> if you use traditional command line tools
22:34 < bridge> <kollpotato> chillerdragon: should i fix an issue which wont matter until 2026
22:34 < bridge> <kollpotato> xd
22:34 < bridge> <pilonpl> Right? What even is the benefit.
22:35 < ws-client> <ChillerDragon> 2026 seems pretty near
22:35 < ws-client> <ChillerDragon> fix it fast
22:35 < bridge> <kollpotato> october 2026
22:35 < bridge> <kollpotato> well it also depends
22:35 < bridge> <learath2> with tabs? everyone gets to view it however they like it, easily, without expensive find and replace to fix all the indents
22:35 < bridge> <kollpotato> if ddnet wants to upgrade to rust 1.100
22:35 < bridge> <pilonpl> I guess tabs are wider than a normal character
22:35 < bridge> <vzechz> :justatest: hi developers
22:35 < bridge> <kollpotato> wtf fat
22:35 < ws-client> <ChillerDragon> @learath2 tabs dont go well with ascii art and alignments
22:36 < bridge> <vzechz> no u?
22:36 < bridge> <inv41idu53rn4m3> because people like tabstop 4 (or even 2, yeesh) and they want their code to look the same everywhere
22:36 < bridge> <inv41idu53rn4m3> especially for alignments that aren't exact multiples of the tabstop it's important, because a mix of tabs and spaces looks awful when you change the tabstop
22:36 < bridge> <learath2> tabs to indent spaces to align, best of all worlds
22:36 < bridge> <learath2> if you indent with 2 spaces never talk to me again
22:36 < ws-client> <ChillerDragon> then you end up mixing tabs and spaces in one line and before you know you have non portable ascii art
22:36 < ws-client> <ChillerDragon> 2 spaces goated
22:37 < ws-client> <ChillerDragon> i also press space twice
22:37 < bridge> <inv41idu53rn4m3> I don't, because I don't need 8 levels of nested callbacks like the JS devs :kek:
22:37 < ws-client> <ChillerDragon> https://www.youtube.com/watch?v=oRva7UxGQDw
22:37 < bridge> <milkeeycat> 1 space enjoyers?
22:37 < ws-client> <ChillerDragon> 1 space?????
22:37 < bridge> <learath2> ```c
22:37 < bridge> <learath2> if (foo)
22:37 < bridge> <learath2>   {
22:37 < bridge> <learath2>   goto jail;
22:37 < bridge> <learath2>   }
22:37 < bridge> <learath2> ```
22:37 < bridge> <milkeeycat> you don't even need to press space twice
22:37 < bridge> <pilonpl> 2 spaces is okay for yaml i think
22:37 < bridge> <milkeeycat> only once
22:37 < bridge> <kollpotato> i prefer -4 spaces
22:38 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1393330504404566066/quality20.png?ex=6872c7a7&is=68717627&hm=b92258ba84c341dfb3dec52b13e738ca4863076ed9d370aad50b83a705ee8eeb&
22:38 < bridge> <learath2> you get solitary confinement
22:38 < bridge> <pilonpl> 4 spaces is what i use
22:38 < ws-client> <ChillerDragon> why use spaces or tabs?
22:38 < ws-client> <ChillerDragon> we could also use semicolons
22:38 < bridge> <inv41idu53rn4m3> Huh, I've been accidentally based
22:38 < bridge> <inv41idu53rn4m3> Godot defaults to tabs (yeah I generally just use whatever the editor defaults to for a language)
22:39 < bridge> <inv41idu53rn4m3> my default is 4 spaces because I'm boring
22:39 < bridge> <inv41idu53rn4m3> not opinionated enough for tabs
22:39 < bridge> <inv41idu53rn4m3> not feeling opinionated enough for tabs
22:39 < bridge> <pilonpl> 4 spaces use 4 bytes
22:39 < bridge> <learath2> If you use anything except Allman, K&R or Stroustrup style you are irredeemable
22:39 < bridge> <pilonpl> Tab only uses 1
22:39 < bridge> <pilonpl> Also with tabs anyone can set the width they want
22:40 < bridge> <pilonpl> So idk, seems like tabs win
22:42 < ws-client> <ChillerDragon> i switched from spaces to tabs actually xd
22:42 < bridge> <pilonpl> 0 indent is also an option
22:42 < ws-client> <ChillerDragon> because of bash syntax
22:43 < bridge> <pilonpl> Who even invented indentation?
22:44 < bridge> <learath2> pff probably ancient
22:45 < bridge> <pilonpl> Btw what about mixed indentation
22:49 < bridge> <pilonpl> Maybe 
22:49 < bridge> <pilonpl> ```c
22:49 < bridge> <pilonpl> int func(int a, int b) {
22:49 < bridge> <pilonpl>     Int c = a + b; // 4 indent
22:49 < bridge> <pilonpl>     if (c < a) {
22:49 < bridge> <pilonpl>         printf("what"); // 8 indent
22:49 < bridge> <pilonpl>       } // 6 indent
22:49 < bridge> <pilonpl>   } // 2 indent
22:49 < bridge> <pilonpl> ```
22:50 < bridge> <melon> someone take this man's devrole away
22:50 < bridge> <pilonpl> Maybe 
22:50 < bridge> <pilonpl> ```c
22:50 < bridge> <pilonpl> int func(int a, int b) {
22:50 < bridge> <pilonpl>     int c = a + b; // 4 indent
22:50 < bridge> <pilonpl>     if (c < a) {
22:50 < bridge> <pilonpl>         printf("what"); // 8 indent
22:50 < bridge> <pilonpl>       } // 6 indent
22:50 < bridge> <pilonpl>   } // 2 indent
22:50 < bridge> <pilonpl> ```
22:50 < ws-client> <ChillerDragon> i mean you see some weird ass indents out in the wild if the code is weird
22:50 < ws-client> <ChillerDragon> like multi line if conditions
22:50 < ws-client> <ChillerDragon> or js callback hell
22:57 < bridge> <pilonpl> Btw can we just agree writing blocks like this
22:57 < bridge> <pilonpl> ```c
22:57 < bridge> <pilonpl> if (condition)
22:57 < bridge> <pilonpl> {
22:57 < bridge> <pilonpl>     // Do stuff
22:57 < bridge> <pilonpl> }
22:57 < bridge> <pilonpl> ```
22:57 < bridge> <pilonpl> Is terrible?
22:57 < bridge> <pilonpl> Why would you waste a whole line for no reason
22:58 < bridge> <pilonpl> Vertical space is already a precious resource
22:59 < bridge> <chillerdragon> whatâ€™s wasted exactly?
23:00 < bridge> <chillerdragon> As bash enjoyer I ofc do `condition && do_stuff`
23:00 < bridge> <kollpotato> the bracket `{` could be right after the condition
23:00 < bridge> <chillerdragon> the } after the do stuff
23:00 < bridge> <chillerdragon> Could also remove them entirely
23:00 < bridge> <chairn> it's more readable imo
23:01 < bridge> <pilonpl> How so?
23:01 < bridge> <kollpotato> there is no reason
23:01 < bridge> <kollpotato> it just is as it is
23:02 < bridge> <kollpotato> i have noticed that c/c++/c# all prefer it that way
23:03 < bridge> <kollpotato> btw teewars 0.1 is just 10k lines of code
23:03 < bridge> <pilonpl> I think it's dumb because the indentation already separates the lines enough
23:17 < bridge> <chairn> it's even more clearly separated like that
23:39 < bridge> <aegisub> message(9).txt
