00:16 < bridge> <meloƞ> furo recommended a nice tool called https://phind.com - its AI that links the source it spits out to you, so if in doubt you can check that source for yourself - can be helpful sometimes
01:47 < bridge> <teero777> @ryozuki look what I just found
01:47 < bridge> <teero777> https://anime-girls-holding-programming-books.netlify.app/
01:49 < bridge> <teero777> @ryozuki
01:49 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1207851271718174760/image0.png?ex=65e12627&is=65ceb127&hm=cd3446d2c0c59f8581fe969c42e43f7bf74fcb43b2a8ba86448aee2b18161478&
01:50 < bridge> <teero777> 😂😂😂
02:11 < bridge> <learath2> this me
02:11 < bridge> <learath2> https://cdn.discordapp.com/attachments/293493549758939136/1207856773126553670/Himegoto_Casting_Malloc-cce222d18598ea57f7aed68f5f9d8626.png?ex=65e12b47&is=65ceb647&hm=edcd2e3600d1c7b150302b8a25b3e3679a7855c2f200714876711c652341f2bf&
02:12 < bridge> <teero777> gcc is forcing me to cast to (char*) ;(
02:12 < bridge> <learath2> Not in superior C
02:12 < bridge> <teero777> xD
02:14 < bridge> <learath2> Today I wrote some templates so cursed I just deleted them, they truly are the source of all evil
02:14 < bridge> <learath2> A very task-specific reimplementation of `std::bind`
02:19 < bridge> <teero777> you mean templates as a type in cpp or template as a base construct you built in C to lay more C over?
02:19 < bridge> <teero777> I can't talk
02:20 < bridge> <teero777> Neither can I correctly explain anything I'm thinking with written language
02:21 < bridge> <teero777> Gn
04:04 < bridge> <Ewan> It’s not GCC, it’s C++
04:05 < bridge> <Ewan> interesting
04:54 < bridge> <miguilim> Hello guys, I'm really struggling trying to code a snap single chunk. Can someone help me decode it?
04:54 < bridge> <miguilim> 
04:54 < bridge> <miguilim> ```
04:54 < bridge> <miguilim> "\x08\x0e\x0f\xae\x0b\xaf\x0b\xda\xf9\xfc\xd6\x0c\x82\x02\x00\x07" \
04:54 < bridge> <miguilim> "\x00\x04\x0a\x90\x02\xb0\x0a\x02\x03\x04\x04\x90\x04\xb0\x06\x02" \
04:54 < bridge> <miguilim> "\x02\x04\x02\xb0\x01\xb0\x04\x01\x00\x04\x01\xb0\x01\xb0\x03\x01" \
04:54 < bridge> <miguilim> "\x00\x06\x00\x00\x00\x00\x00\x14\x00\x00\x01\x0b\x00\xcc\xcc\x80" \
04:54 < bridge> <miguilim> "\xd1\x03\xcd\xf8\x88\x81\x02\xff\xfd\xfb\x87\x02\xff\xff\xfb\xf7" \
04:54 < bridge> <miguilim> "\x0f\xff\xfd\xfb\xf7\x0f\xff\xfd\xfb\xf7\x0f\xff\xff\xfb\xf7\x0f" \
04:54 < bridge> <miguilim> "\x8c\x01\xd2\xc8\xf0\xc1\x03\xff\xfd\xfb\x87\x02\xff\xfd\xfb\xf7" \
04:54 < bridge> <miguilim> "\x0f\xff\xfd\xfb\xf7\x0f\xff\xfd\xfb\xf7\x0f\xff\xff\xfb\xf7\x0f" \
04:54 < bridge> <miguilim> "\x00\x86\xe3\xd3\x0b\xa0\xfc\x80\x01\x0a\x00\x01\x00\x00\x00\x00"
04:54 < bridge> <miguilim> ```
04:55 < bridge> <miguilim> This is the first snap after I enter a dm1 game. I already know how to decode:
04:55 < bridge> <miguilim> 
04:55 < bridge> <miguilim> flags: 0
04:55 < bridge> <miguilim> size: 142 bytes
04:55 < bridge> <miguilim> message: 7 (snap single)
04:55 < bridge> <miguilim> 
04:55 < bridge> <miguilim> tick: 750
04:55 < bridge> <miguilim> delta tick: 751
04:55 < bridge> <miguilim> crc: -1701813851
04:56 < bridge> <miguilim> but how do I decode the snap data XD?
04:59 < bridge> <chillerdragon> WTF js
05:01 < bridge> <miguilim> snap data starts at \x82\x02 (first line)
05:01 < bridge> <chillerdragon> It’s all ints
05:01 < bridge> <chillerdragon> Call getInt() until you consumed all
05:02 < bridge> <chillerdragon> https://cdn.discordapp.com/attachments/293493549758939136/1207899661063553034/ima_27f506d.jpeg?ex=65e15338&is=65cede38&hm=96a1c165f2651a54b8512eede91b41d92fd1c2cb186d935973f7d4eed7be6a69&
05:02 < bridge> <chillerdragon> First three ints are removed num zero
05:02 < bridge> <chillerdragon> Then the next int is the item type
05:02 < bridge> <chillerdragon> Then it’s id
05:03 < bridge> <chillerdragon> Then lookup its size in your table and consume as many ints as this type is big
05:03 < bridge> <chillerdragon> Then another item starts
05:03 < bridge> <chillerdragon> @miguilim: what are you working on?
05:05 < bridge> <miguilim> what decoder is this?
05:06 < bridge> <chillerdragon> What are you working on dude?
05:06 < bridge> <chillerdragon> You ignored my question since days I’m seriously curious
05:06 < bridge> <miguilim> re-implementation of teeworlds server on a high level language as a framework for mods
05:07 < bridge> <miguilim> TeeFrame
05:07 < bridge> <miguilim> Frame from framewrok xd
05:07 < bridge> <miguilim> Frame from framework xd
05:07 < bridge> <miguilim> tee from teeworlds xdddddddddd
05:07 < bridge> <chillerdragon> Which language
05:07 < bridge> <miguilim> php + swoole
05:07 < bridge> <chillerdragon> So you reimplement the server from scratch?
05:07 < bridge> <chillerdragon> Woah php that’s new
05:08 < bridge> <miguilim> yes
05:08 < bridge> <chillerdragon> https://chillerdragon.github.io/teeworlds-protocol/07/snap_items.html
05:08 < bridge> <chillerdragon> 
05:08 < bridge> <chillerdragon> Ye so it’s my ruby lib it’s linked here
05:09 < bridge> <chillerdragon> The item types and sizes changed in 0.7 but the concept is the exact same
05:09 < bridge> <miguilim> respecting the protocol, but logic is completely different
05:09 < bridge> <chillerdragon> What do you mean by different logic?
05:10 < bridge> <miguilim> but it works for 0.6 xd?
05:11 < bridge> <chillerdragon> ?
05:11 < bridge> <chillerdragon> Parse the stuff as I explained it and it will work yes
05:11 < bridge> <miguilim> I will not copy how the things works and how they are structured
05:12 < bridge> <chillerdragon> So it’s not 1:1 the c++ code in php yes that makes sense
05:19 < bridge> <miguilim> how do I run this XD I never messed with ruby
05:19 < bridge> <miguilim> https://cdn.discordapp.com/attachments/293493549758939136/1207903989710983168/image.png?ex=65e15740&is=65cee240&hm=0988a4e02cdc0bbd3281e662e8195a825ad875cd2f9415ffde9e3807f8889d95&
05:23 < bridge> <miguilim> do the 0.6 protocol have unknown size snap items?
05:27 < bridge> <miguilim> 🤯
05:38 < bridge> <miguilim> its not working XD
05:38 < bridge> <miguilim> not exactly
05:39 < bridge> <miguilim> I'm trying to extract first snap item (it seems to be obj_pickup)
05:39 < bridge> <miguilim> https://cdn.discordapp.com/attachments/293493549758939136/1207909081302442004/image.png?ex=65e15bfe&is=65cee6fe&hm=fdfa67434f5cf2d23c7d73670140258450c538f52a3f6e952f496ca14bc8f3f6&
05:39 < bridge> <miguilim> https://cdn.discordapp.com/attachments/293493549758939136/1207909124617273344/image.png?ex=65e15c09&is=65cee709&hm=1044f7d01f8430c02c873c405f61a17ff689fea9c2a32a205792e2db39252baa&
05:39 < bridge> <miguilim> but what is this 10 XDDDDDDDDDDDDDDDDDD
05:40 < bridge> <miguilim> ohhhhhhhhhhhh
05:40 < bridge> <miguilim> its the ID
05:40 < bridge> <miguilim> now everything makes sense
05:41 < bridge> <miguilim> :poggers2:
05:43 < bridge> <miguilim> if the snap single contains multiple obj items, what do snap do?
06:10 < bridge> <chillerdragon> gem install huffman\_tw
06:10 < bridge> <chillerdragon> Idk I forgot. I think it’s just deltas and not full snaps or something like that.
06:11 < bridge> <chillerdragon> Don’t think so. But ddnet added their own snap items.
07:37 < bridge> <Ewan> hi chillah
07:40 < bridge> <teero777> If I were to compile it by hand I wouldn't get that error so gcc fault
07:54 < bridge> <kaffeine0> In C++ it would be `new` and no casts. Here we have `malloc()` => it is C (or a fishy legacy C++).
07:54 < bridge> <Ewan> what
07:55 < bridge> <Ewan> in a perfect world sure
07:55 < bridge> <Ewan> im just saying c++ requires explicit casting of void pointer types like returned from malloc
08:29 < bridge> <miguilim> now getting this :cammo:
08:29 < bridge> <miguilim> https://cdn.discordapp.com/attachments/293493549758939136/1207951845755195402/image.png?ex=65e183d2&is=65cf0ed2&hm=6f679cb235f13a6c639402c1b988dfb3f47721968be91f9ee3e271f2569d27e2&
09:04 < bridge> <ryozuki> malloc is usinh a function not C
09:05 < bridge> <ryozuki> using malloc is using a function not C
09:05 < bridge> <ryozuki> using new is using a c++ feature
09:05 < bridge> <ryozuki> that said, use rust
09:05 < bridge> <ryozuki> :owo:
09:06 < bridge> <ryozuki> ffr
09:29 < bridge> <Jupstar ✪> Epyc
09:53 < bridge> <matodor> php8+?
09:54 < bridge> <va_ll> and how does msg.header.size work, it’s just that for some reason it doesn’t send messages at all when I enter the message length
09:54 < bridge> <va_ll> how does msg.header.size work, it’s just that for some reason it doesn’t send messages at all when I enter the message length
10:12 < bridge> <remakepower> That usually doesn't happen unless you had some incorrect code
10:13 < bridge> <remakepower> And what is "when you enter the message length"?
10:15 < bridge> <va_ll> well the value to msg.header.size with the length of the message
10:43 < bridge> <learath2> It is technically part of libc, so kinda C 😄
10:43 < bridge> <ryozuki> i dont think using a library means using a language xd
10:44 < bridge> <learath2> I guess that's fair
10:44 < bridge> <ryozuki> https://astral.sh/blog/uv
10:44 < bridge> <ryozuki> made in rust
10:45 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1207985991948705854/image.png?ex=65e1a39f&is=65cf2e9f&hm=6b23d57e48c66e0b9804c48e9f5dca834738aaec077592ede270d22b9436a819&
10:45 < bridge> <ryozuki> @learath2 i need to do the same for portage
10:45 < bridge> <ryozuki> i always keep leaving it for later
10:45 < bridge> <ryozuki> i wonder how complex it is
10:45 < bridge> <ryozuki> portage is slow
10:47 < bridge> <Jupstar ✪> U share lot of pyson related stuff lately. Stay on our side, the dark side ( insert your cat emoji here )
10:47 < bridge> <learath2> Look at it, gorgus
10:47 < bridge> <ryozuki> idk its just news xd
10:47 < bridge> <ryozuki> i dont rly do python
10:47 < bridge> <ryozuki> i do edlang
10:49 < bridge> <learath2> It's mostly graph operations
10:49 < bridge> <Jupstar ✪> Yeah at least it's written in rust 😏
10:50 < bridge> <ryozuki> i saw it here https://this-week-in-rust.org/blog/2024/02/14/this-week-in-rust-534/
10:50 < bridge> <Jupstar ✪> If you share a rust compiler written in pyson. Then I know the world is doomed
10:50 < bridge> <learath2> Replacing portage/emerge with a rust application is probably unfeasible though. You'd need to start shipping a rust compiler in stage3, it would probably be unpopular
10:51 < bridge> <ryozuki> https://blog.cocl2.com/posts/rust-ref-stable-collection/
11:03 < bridge> <Jupstar ✪> https://github.com/orgs/wapm-packages/repositories
11:04 < bridge> <Jupstar ✪> Llvm compiled to wasm xD
12:31 < bridge> <ryozuki> damn
12:31 < bridge> <ryozuki> the llvm optimizer makes my factorial recursive function into a non recursive
12:37 < bridge> <Jupstar ✪> When use ai for optimizations xd
12:37 < bridge> <Jupstar ✪> Could probably work to detect certain patterns. Just hard to make it reliable
12:38 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1208014593578770452/message.txt?ex=65e1be42&is=65cf4942&hm=e826e856091447e5904e01073c3411ee041f90d1d20771e04ab4debb8b04084f&
12:38 < bridge> <ryozuki> look this wizardry
12:39 < bridge> <ryozuki> ```rust
12:39 < bridge> <ryozuki> mod Main {
12:39 < bridge> <ryozuki>     pub fn main() -> i32 {
12:39 < bridge> <ryozuki>         let b: i32 = factorial(4);
12:39 < bridge> <ryozuki>         return b;
12:39 < bridge> <ryozuki>     }
12:39 < bridge> <ryozuki> 
12:39 < bridge> <ryozuki>     pub fn factorial(n: i32) -> i32 {
12:39 < bridge> <ryozuki>         if n == 1 {
12:39 < bridge> <ryozuki>             return n;
12:39 < bridge> <ryozuki>         } else {
12:39 < bridge> <ryozuki>             return n * factorial(n - 1);
12:39 < bridge> <ryozuki>         }
12:39 < bridge> <ryozuki>     }
12:39 < bridge> <ryozuki> }
12:39 < bridge> <ryozuki> 
12:39 < bridge> <ryozuki> ```
12:39 < bridge> <ryozuki> this is my code btw
12:40 < bridge> <ryozuki> ```llvm
12:40 < bridge> <ryozuki> define i32 @main() local_unnamed_addr #1 !dbg !19 {
12:40 < bridge> <ryozuki> entry:
12:40 < bridge> <ryozuki>   call void @llvm.dbg.value(metadata i32 24, metadata !23, metadata !DIExpression()), !dbg !25
12:40 < bridge> <ryozuki>   call void @llvm.dbg.value(metadata i32 24, metadata !23, metadata !DIExpression()), !dbg !26
12:40 < bridge> <ryozuki>   ret i32 24, !dbg !27
12:40 < bridge> <ryozuki> }
12:40 < bridge> <ryozuki> ```
12:40 < bridge> <ryozuki> main gets inlined tho xd
12:53 < bridge> <chillerdragon> That’s odd I would have to take a look
12:54 < bridge> <chillerdragon> You need the length of the entire message not the chat message. Just wait for me to fix it. I should get to it within the end of next week
12:55 < bridge> <learath2> Is that not a classic case of tail recursion optimization?
12:55 < bridge> <ryozuki> yes
12:55 < bridge> <ryozuki> im just amazed cuz im seeing the ir
12:56 < bridge> <ryozuki> making my own lang
12:56 < bridge> <ryozuki> but i thought most is about removing the stack usage
12:56 < bridge> <ryozuki> not recursion (?)
12:58 < bridge> <teero777> Problem is probably to not change the behaviour of the code
12:58 < bridge> <learath2> Well "tail recursion optimization" is basically "tail call optimization" getting rid of the stack usage. But after that there is another pass (I don't remember the name) that optimizes further because the target is the same subroutine so it can be treated as a loop
13:21 < bridge> <ryozuki> @learath2 do u bet i can make edlang faster than c or not
13:22 < bridge> <learath2> No bet. You control IL generation directly. Ofc you can get it faster, especially for specific tasks
13:24 < bridge> <ryozuki> :owo:
13:39 < bridge> <teero777> https://reddit.app.link/gdTXHAxIeHb
13:39 < bridge> <teero777> 😂😂
15:01 < bridge> <meloƞ> considering im getting bullied by a check atm - is there any way to run a build test locally without having to push each of my attempts to the PR ? XD
15:01 < bridge> <meloƞ> 
15:01 < bridge> <meloƞ> https://github.com/ddnet/ddnet/pull/7886
15:01 < bridge> <meloƞ> considering im getting bullied by a check atm - is there any way to run a build test locally without having to push each of my attempts to the PR ? XD
15:01 < bridge> <meloƞ> 
15:01 < bridge> <meloƞ> #7886
15:01 < bridge> <meloƞ> considering im getting bullied by a check atm - is there any way to run a build test locally without having to push each of my attempts to the PR ? XD
15:01 < bridge> <meloƞ> https://github.com/ddnet/ddnet/pull/7886
15:10 < bridge> <archimede67> *no*
15:10 < bridge> <meloƞ> :OHNOOOO:
15:11 < bridge> <archimede67> You could probably just run the command locally yeah
15:12 < bridge> <archimede67> For the checks that fail
15:15 < bridge> <meloƞ> the check is running on ubuntu 20.04 which would require me to downgrade my cmake version to test that accurately i assume?
15:15 < bridge> <archimede67> Maybe you can use docker to build with a specific environment
15:16 < bridge> <meloƞ> @reitw time to teach me docker properly!
15:16 < bridge> <meloƞ> <a:pepelaugh:1106634559723937853>
15:17 < bridge> <archimede67> Or use something to run GitHub actions locally
15:17 < bridge> <archimede67> https://github.com/nektos/act
15:27 < bridge> <meloƞ> cant seem to get it running on my system - sadge
15:41 < bridge> <furo> Why don't you just enable actions for your fork and push to a branch that isn't your PR?
17:46 < bridge> <ryozuki> https://twitter.com/duborges/status/1758201294743875911
17:46 < bridge> <ryozuki> video
17:50 < bridge> <ryozuki> https://factorio.com/blog/post/fff-398
20:59 < bridge> <learath2> I was going to delete this since it turned out so unwieldy but I think I'll show everyone before I do, https://paste.pr0.tips/CNp
20:59 < bridge> <learath2> Observe this template abomination
20:59 < bridge> <learath2> It's a reimplementation of `std::bind` just for this usecase, it just to avoid typing the out type of the vulkan functions
21:54 < bridge> <zhn> a struct that has information both about type and name of the value
21:54 < bridge> <learath2> They really should add a constexpr unordered_map constructor and getter
22:03 < bridge> <zhn> as people say: just use boost
22:03 < bridge> <zhn> :pepeW:
22:04 < bridge> <gravitycontained> you mean to have custom perfect hash functions?
22:04 < bridge> <gravitycontained> afaik unordered_map is a general catch all
22:04 < bridge> <gravitycontained> but can't you pass your own hash function anyway
22:04 < bridge> <gravitycontained> or is memory allocation also inefficient
22:08 < bridge> <learath2> It has to be structured in a certain way to provide the complexity guarantees in the standard. So `unordered_map` is stuck as a closed adressing hashmap
22:11 < bridge> <gravitycontained> interesting, I see
22:11 < bridge> <gravitycontained> closed causes overhead and performance degrades as load factor grows it says
22:11 < bridge> <gravitycontained> https://cdn.discordapp.com/attachments/293493549758939136/1208158623495364669/image.png?ex=65e24466&is=65cfcf66&hm=64010a550326e22316589c28416c4181fa28a68f349d93ba835e59fad34c2492&
22:11 < bridge> <learath2> https://abseil.io/about/design/swisstables
22:11 < bridge> <learath2> 
22:11 < bridge> <learath2> And the cppcon talk about it are very nice if you are interested
22:12 < bridge> <gravitycontained> cool thanks
22:12 < bridge> <zhn> huh chinese mods are always out of view https://github.com/landmineHQ/ddnet-hidden
23:38 < bridge> <miguilim> How do I calculate the delta value of a snapshot. I though it was the amount of snap items on it. But its not working
23:39 < bridge> <miguilim> My client stuck here
23:39 < bridge> <miguilim> https://cdn.discordapp.com/attachments/293493549758939136/1208180943744016445/image.png?ex=65e2592f&is=65cfe42f&hm=92022c07a103cc591b237705ec161b5b210a610fc0f232a7b14d82888c245295&
