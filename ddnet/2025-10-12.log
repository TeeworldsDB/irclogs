04:10 < bridge_> <Teero> I should make a uefi ddnet client
04:11 < bridge_> <Teero> why does the uefi specification have 2300 pages man
04:12 < bridge_> <Ewan> it's universal
05:10 < bridge_> <Teero> TIL argv is argc+1 big and not argc
05:10 < bridge_> <Teero> https://cdn.discordapp.com/attachments/293493549758939136/1426768887063646238/Screenshot_20251012-050830.png?ex=68ec6d92&is=68eb1c12&hm=cd0b3fa2f00cf593de610bc97dd7292efaf4d890ab5f782faf41be96a21d1a7b&
05:11 < bridge_> <Teero> TIL argv is argc+1 big
05:11 < bridge_> <Teero> https://cdn.discordapp.com/attachments/293493549758939136/1426768887063646238/Screenshot_20251012-050830.png?ex=68ec6d92&is=68eb1c12&hm=cd0b3fa2f00cf593de610bc97dd7292efaf4d890ab5f782faf41be96a21d1a7b&
10:20 < ChillerDragon> i just closed vim .. accidentally???
10:20 < ChillerDragon> how
10:21 < ChillerDragon> i fumbled capslock and found my self in the shell with `-bash: A: command not found`
10:21 < ChillerDragon> how???? xd
10:21 < bridge_> <Jupstar âœª> A: buse
10:37 < bridge_> <Solly (bun bun)> Which formatting mistake are you referring to
10:38 < bridge_> <Solly (bun bun)> Wait no
10:38 < bridge_> <Solly (bun bun)> How did I read that so wrong
10:38 < bridge_> <Solly (bun bun)> So did I for that matter
10:38 < bridge_> <Solly (bun bun)> But I thought you said "why is argv so big" comically referring to the style of spacing or the erroneous paragraph break in-between a word break
10:56 < bridge_> <vahemaaa> chiller what does LIBAN means
11:37 < ws-client1> **<ChillerDragon>** there used to be a player who spammed chat with I am LIBAN on pvp servers
11:37 < ws-client1> **<ChillerDragon>** havent seen him since probably 8 years oO
11:39 < bridge_> <vahemaaa> hmmmm
12:00 < bridge_> <Assa> I remember him xD
12:05 < bridge_> <chillerdragon> Epic
12:12 < bridge_> <zhn> that's nabil ig
12:49 < ws-client1> **<ChillerDragon>** interesting take lol
12:49 < ws-client1> **<ChillerDragon>** what makes you think that @zhn?
12:58 < ws-client1> **<ChillerDragon>** hmm why does clang tidy not want to make this one const?
12:58 < ws-client1> **<ChillerDragon>** https://github.com/ddnet/ddnet/blob/ae90996d5823971b3f9f1709015d78390e6f058d/src/game/server/gamecontext.h#L191
13:21 < bridge_> <blue bencie> string.reverse("LIBAN")
13:27 < bridge_> <remakepower> WOW
13:28 < bridge_> <remakepower> I used zstd to replace with zlib.
13:28 < bridge_> <remakepower> And then->
13:28 < bridge_> <remakepower> map: NatureDefense
13:28 < bridge_> <remakepower> size: 457.0 KiB
13:29 < ws-client1> **<ChillerDragon>** oh
13:29 < bridge_> <remakepower> map: NatureDefense_zstd
13:29 < bridge_> <remakepower> size: 81.7KiB
13:37 < bridge_> <filoqcus> :justatest:
13:48 < bridge_> <milkeeycat> chillerdragon: https://clang.llvm.org/extra/clang-tidy/checks/readability/make-member-function-const.html
13:48 < bridge_> <milkeeycat> > this check will not suggest to add a const to a non-const method if the method reads a private member variable of pointer type
13:48 < bridge_> <milkeeycat> probably that's why?
13:50 < bridge_> <robyt3> Oh, so we could have avoided the NOLINT by making the member variable private:
13:50 < bridge_> <robyt3> ```cpp
13:50 < bridge_> <robyt3> CTuningParams *m_pTuningList;
13:50 < bridge_> <robyt3> const CTuningParams *TuningList() const { return m_pTuningList; }
13:50 < bridge_> <robyt3> CTuningParams *TuningList() { return m_pTuningList; } // NOLINT(readability-make-member-function-const)
13:50 < bridge_> <robyt3> ```
14:10 < ws-client1> **<ChillerDragon>** oh i see thanks @milkeeycat 
15:11 < bridge_> <vahemaaa> is there a way to access server message logs without joining the server
15:40 < bridge_> <qxdfox> trough the console
15:40 < bridge_> <qxdfox> heh?
15:41 < bridge_> <qxdfox> Like on a server you're hosting right?
15:43 < bridge_> <Solly (bun bun)> Is it not printed to stdout
15:43 < bridge_> <Solly (bun bun)> Or a log file
15:43 < bridge_> <Solly (bun bun)> .
15:49 < bridge_> <Teero> econ?
15:59 < bridge_> <blue bencie> whats the prefix for a static char array? s_aArray ?
16:00 < bridge_> <blue bencie> whats the prefix for a static char array again? s_aArray ?
16:00 < bridge_> <Teero> yes
16:00 < bridge_> <Teero> s_aBuf if you will
16:00 < bridge_> <Teero> depends on what it does
16:01 < bridge_> <blue bencie> bored so i thought about doing https://github.com/ddnet/ddnet/pull/11066/files quickly
16:01 < bridge_> <blue bencie> 
16:01 < bridge_> <blue bencie> putting the emotes in a static const char array and i was unsure about the prefix
16:01 < bridge_> <blue bencie> guess `s_aEmoteNames[]` it is
16:01 < bridge_> <blue bencie> bored so i thought about doing https://github.com/ddnet/ddnet/pull/11066/files quickly
16:01 < bridge_> <blue bencie> 
16:01 < bridge_> <blue bencie> putting the emotes in an array and i was unsure about the prefix
16:20 < bridge_> <robyt3> It can be static const, so `EMOTE_NAMES`
16:49 < bridge_> <blue bencie> oh wow, fix_style.py fails silently on windows when launched through powershell
16:49 < bridge_> <blue bencie> :angy:
16:57 < bridge_> <blue bencie> hmm.. @robyt3 i added `if(Emote != EMOTE_NORMAL)`. I could either keep that or i adjust the index and remove it from `EMOTE_NAMES` - any preferences?
16:58 < bridge_> <blue bencie> i tried not to alter behaviour given we break early if its EMOTE_NORMAL, but it looks weird having it in EMOTE_NAMES then xd
16:59 < bridge_> <robyt3> I'd maybe replace the `"normal"` with `nullptr` because it's not supposed to be used, but removing the element entirely and adjusting the index would also be fine I think
17:00 < bridge_> <blue bencie> i guess i'd prefer to do the latter the
17:00 < bridge_> <blue bencie> i guess i'd prefer to do the latter then
18:09 < ChillerDragon> !remind 60 @jsaurusrex wat bug
18:09 < ChillerDragon> !ping
18:09 < ChillerDragon> gg
18:25 < bridge_> <blue bencie> ChillerDragon
18:25 < bridge_> <blue bencie> 
18:25 < bridge_> <blue bencie> ```
18:25 < bridge_> <blue bencie> /home/runner/work/ddnet/ddnet/src/engine/client/client.cpp:516:22: error: invalid case style for static variable 'EMOTE_NAMES' [readability-identifier-naming,-warnings-as-errors]
18:25 < bridge_> <blue bencie>   516 |                 static const char *EMOTE_NAMES[] = {
18:25 < bridge_> <blue bencie>       |                                    ^~~~~~~~~~~
18:25 < bridge_> <blue bencie>       |                                    s_EMOTE_NAMES
18:25 < bridge_> <blue bencie> ```
18:25 < bridge_> <blue bencie> 
18:25 < bridge_> <blue bencie> really? ._.
18:29 < bridge_> <robyt3> Hmm, why does it work in other cases like `static const char *DEFAULT_SERVERLIST_URLS[]` or `static const char *const EXPLANATION[]` though?
18:49 < bridge_> <Ewan> not on LLVM bruh ðŸ˜­
18:49 < bridge_> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1426975037344452780/image.png?ex=68ed2d90&is=68ebdc10&hm=544d769ba911f6885d2b8b38b41467c9db2d245a9ec6906bdf71b33bf9f13d3a&
18:50 < bridge_> <blue bencie> huuh why? :o
18:50 < bridge_> <Ewan> force pushing
18:51 < bridge_> <blue bencie> is LLVM --amend driven? xd
18:51 < bridge_> <blue bencie> i'm a big force push fan
18:51 < bridge_> <blue bencie> https://cdn.discordapp.com/attachments/293493549758939136/1426975637691961465/image.png?ex=68ed2e1f&is=68ebdc9f&hm=bdad86633fb2d933b716e0e79cb575da3369033e93500a02772ddcf5fda1c36b&
18:51 < bridge_> <blue bencie> easier to edit commits that way
18:52 < bridge_> <blue bencie> easier to edit commits that way IMO
19:03 < bridge_> <Ewan> :[
19:09 < bridge_> <totar> But once it gets merged the force pushes are wiped clean? So what does it matter?
19:10 < bridge_> <Ewan> you sure got me!
19:10 < bridge_> <Ewan> there will never be negative consequences to force pushing
19:10 < bridge_> <Ewan> :lol:
19:21 < bridge_> <milkeeycat> `static const char *DEFAULT_SERVERLIST_URLS[]` works because it's global, `static` options apply only to local `static`s :justatest: (https://github.com/llvm/llvm-project/blob/d72cd24ac43861b885dbcac395f2cc53246d6042/clang-tools-extra/clang-tidy/readability/IdentifierNamingCheck.cpp#L1497-L1558)
19:21 < bridge_> <milkeeycat> `static const char *const EXPLANATION[]` works because it uses `StaticConstant*` options, not `StaticVariable*`(there's only `StaticVariablePrefix` option set)
19:33 < bridge_> <totar> Idk I thought you had some secret git knowledge
19:34 < bridge_> <Ewan> it depends on what the force push overwrote and whether anyone else had it checked out
19:34 < bridge_> <Ewan> in this situation it's pretty harmless yea
21:31 < bridge_> <milkeeycat> Do only admins have access to the core dump and binary for https://github.com/ddnet/ddnet/issues/11046 ?
21:32 < ws-client1> **<ChillerDragon>** catto hunting the 0d
21:34 < bridge_> <robyt3> Yeah, because it would contain the rcon auths
21:57 < bridge_> <milkeeycat> Understandable
22:32 < bridge_> <Solly (bun bun)> ```
22:32 < bridge_> <Solly (bun bun)> git commit --ammend -m "hi"
22:32 < bridge_> <Solly (bun bun)> ```
22:32 < bridge_> <Solly (bun bun)> is the same as
22:32 < bridge_> <Solly (bun bun)> ```
22:32 < bridge_> <Solly (bun bun)> git reset HEAD~1
22:32 < bridge_> <Solly (bun bun)> git commit -m "hi"
22:32 < bridge_> <Solly (bun bun)> ```
22:32 < bridge_> <Solly (bun bun)> for both you need `git add -A` and `git push --force(-with-lease)`
22:33 < bridge_> <blue bencie> `git rebase -i HEAD~1`
22:33 < bridge_> <blue bencie> i interactively rebase everything
22:33 < bridge_> <blue bencie> edit, squash, pick - it has everything i need!
22:33 < bridge_> <Ewan> squash ðŸ¤¤
22:34 < bridge_> <Solly (bun bun)> rebase is cool, took me a while to figure out how it works
22:34 < bridge_> <Solly (bun bun)> my only gripe is EDITOR is often set to something stupid
22:34 < bridge_> <Solly (bun bun)> (vscode config not making it code, wsl using vim for whatever reason, default nano)
22:34 < bridge_> <Solly (bun bun)> but thats not gits fault
22:35 < bridge_> <Ewan> I would really hope apps don't fuck up my environment when I install them
22:35 < bridge_> <Solly (bun bun)> on systems which are not mine i dont like using rebase because i will get an inconvenient editor
22:35 < bridge_> <Ewan> there's also no unified way to set EDITOR
22:35 < bridge_> <Solly (bun bun)> vscode integrated terminal *should* set EDITOR to code
22:35 < bridge_> <Ewan> oh the integrated one
22:35 < bridge_> <Ewan> agreed
22:35 < bridge_> <Solly (bun bun)> yeah there is, every shell has a way to set env vars
22:36 < bridge_> <Solly (bun bun)> its up to you and your shell on how to get the env var to the git when you run it
22:36 < bridge_> <Ewan> what
22:36 < bridge_> <Solly (bun bun)> all os's have environment variables, which are normally inherited in shells, and settable
22:37 < bridge_> <Solly (bun bun)> git might also take an argument for it i dont know
22:37 < bridge_> <Ewan> I don't think you read what I said
22:37 < bridge_> <Solly (bun bun)> the terminal is presummably spawned from javascript where you can use  javascript
22:38 < bridge_> <Solly (bun bun)> the terminal is presummably spawned from javascript where you can use  javascript (to pass env vars to the shell of your choice)
22:38 < bridge_> <Solly (bun bun)> the terminal is presummably spawned from javascript where you can use  javascript (to pass env vars to the shell of your choice)
22:38 < bridge_> <Solly (bun bun)> yeah there is, every shell has ~~a way to set~~ env vars
22:39 < bridge_> <Solly (bun bun)> ~~all os's have environment variables, which are normally inherited in shells, and settable~~
22:39 < bridge_> <Solly (bun bun)> yeah i did not really think what i said
22:39 < bridge_> <Solly (bun bun)> but there is
22:39 < bridge_> <Solly (bun bun)> its up to you and your shell on how to get the env var to the git when _you_ run it
22:39 < bridge_> <Solly (bun bun)> git might ~~also~~ take an argument for it i dont know
22:42 < bridge_> <Solly (bun bun)> bashrc ðŸ‘€
22:43 < bridge_> <Solly (bun bun)> maybe not
22:58 < bridge_> <Ewan> the closest thing is /etc/profile or the user-specific counterpart but the former is not guaranteed to be writable and the latter is not guaranteed to exist
22:58 < bridge_> <Ewan> also it's not sourced by all shells
22:59 < bridge_> <Ewan> but for the integrated terminal, it can just inherit the environment from the parent process
22:59 < bridge_> <Ewan> i thought we were talking about system-wide modifications when installing an editor
22:59 < ws-client1> **<ChillerDragon>** @Solly (bun bun) its not the same its just similar
23:00 < ws-client1> **<ChillerDragon>** for example if you change your git identity `--amend` will keep the old one and `reset` and recommit will update it
23:02 < ws-client1> **<ChillerDragon>** solly btw u realy cooked with the nameplate stuff xd
23:02 < ws-client1> **<ChillerDragon>** i never looked at the code until kz sent some pr using it
23:02 < ws-client1> **<ChillerDragon>** i should port my messy nameplate edits to use the new shit
23:07 < bridge_> <Solly (bun bun)> @chillerdragon thank you
23:07 < bridge_> <Solly (bun bun)> bash rc ):
23:08 < bridge_> <Ewan> yeah it'll overwrite
23:08 < bridge_> <Solly (bun bun)> i guess you could detect a vscdoe session and not set EDITOR
23:08 < bridge_> <Solly (bun bun)> my problem is that it doesnt get set at all
23:08 < bridge_> <Solly (bun bun)> you can definatley manually write a command on start
23:08 < bridge_> <Solly (bun bun)> export EDITOR=yo mama
23:08 < bridge_> <Solly (bun bun)> `export EDITOR=yo mama`
23:09 < bridge_> <Solly (bun bun)> works in unix-like shells
23:09 < bridge_> <Solly (bun bun)> then batch and pshw are different
23:09 < bridge_> <Ewan> you can do like bash --noprofile
23:09 < bridge_> <Solly (bun bun)> id rather use my profile
23:09 < bridge_> <Ewan> but then u have the opposite issue
23:09 < bridge_> <Ewan> yeah
23:09 < bridge_> <Ewan> and this is only bash
23:09 < bridge_> <Ewan> there is no UNIFIED way
23:09 < bridge_> <Solly (bun bun)> everyone should use bash
23:09 < bridge_> <Solly (bun bun)> powershell is disgusting
23:09 < bridge_> <Ewan> yes they are the only two shells
23:10 < bridge_> <Solly (bun bun)> everything which isnt is old, niche, or based on bash
23:10 < bridge_> <Solly (bun bun)> everything which isnt is old, niche, or based on bash/bash compatible
23:10 < bridge_> <Solly (bun bun)> everything which isnt is old, niche, or based on bash/posix compatible
23:10 < bridge_> <Solly (bun bun)> i write my shell scripts with /bin/sh B)
23:10 < bridge_> <Ewan> "everyone should use x"
23:11 < bridge_> <Ewan> one day u might realize why this is bad
23:12 < bridge_> <Solly (bun bun)> the only thing i dislike about wayland is them not deciding on one env var
23:12 < bridge_> <Solly (bun bun)> (which has already been standardized)
23:12 < bridge_> <Solly (bun bun)> to determine whether to use wayland or x(wayland)
23:12 < bridge_> <Solly (bun bun)> `XDG_SESSION_TYPE=x11`
23:13 < bridge_> <Solly (bun bun)> powershell is just a sucky shell
23:13 < bridge_> <Solly (bun bun)> Set-Directory ðŸ‘» (has been fixed so)
23:13 < bridge_> <Solly (bun bun)> Set-Directory ðŸ‘» (has been fixed so, not a point anymore)
23:14 < bridge_> <Ewan> it's not a sucky shell
23:14 < bridge_> <Ewan> you just don't understand it
23:14 < bridge_> <Solly (bun bun)> theres a meme for that
23:14 < bridge_> <Ewan> try writing cmd scripts in current year
23:14 < bridge_> <Solly (bun bun)> batch wasnt any better
23:14 < bridge_> <Solly (bun bun)> goto ðŸ‘€
23:15 < bridge_> <Solly (bun bun)> posix also has stupid syntax aswell
23:15 < bridge_> <Solly (bun bun)> fi
23:15 < bridge_> <Ewan> fish calls it end
23:15 < bridge_> <Solly (bun bun)> slightly better
23:15 < bridge_> <Solly (bun bun)> i am a brace fan
23:15 < bridge_> <Ewan> also works for loops and whatnot
23:15 < bridge_> <Solly (bun bun)> for (i think) uses end already
23:16 < bridge_> <inv41idu53rn4m3> If I'm writing a shell script I'm going to write it in a language that most shells understand
23:16 < bridge_> <inv41idu53rn4m3> If I'm not doing that then I'm not subjecting myself to shell script
23:16 < bridge_> <inv41idu53rn4m3> fish is stupid
23:16 < bridge_> <Ewan> i wouldn't script in fish unless it's for personal use
23:16 < bridge_> <Solly (bun bun)> as with bash extentions shortcuts are nice
23:16 < bridge_> <Solly (bun bun)> especially when its quick and dirty
23:16 < bridge_> <Teero> I don't like fish either xd
23:16 < bridge_> <Solly (bun bun)> tater likes zsh
23:17 < bridge_> <Teero> But honestly bash is also a horrible language
23:17 < bridge_> <Solly (bun bun)> some script in tclient uses it and i couldnt tell you how it works
23:17 < bridge_> <Ewan> if we are talking about scripting for any real use case, you kind of have to do /bin/sh (not because it's better, but because it has the potential to be much much faster if the host is running dash which is the default on most distros atp)
23:17 < bridge_> <inv41idu53rn4m3> zsh is like for the cool people who like fancy shells but I'm clearly too boring and basic in my usage to want any of that
23:18 < bridge_> <Ewan> i still think fish is pretty great as a daily driver
23:28 < bridge_> <Ewan> i am going to lose my mind
23:28 < bridge_> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1427045229772673196/image.png?ex=68ed6eef&is=68ec1d6f&hm=c6c6adab73863bfc9cc67bacd027df0a718c263110700b411d06980c34315d45&
23:28 < bridge_> <Ewan> is it because of these
23:28 < bridge_> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1427045404603842580/image.png?ex=68ed6f19&is=68ec1d99&hm=bb0993f11c289012ba0efe4998ba90d38fb8cd637052fff903d62f73c574a18e&
23:29 < bridge_> <Ewan> GitHub will remove the notification from your view but not from the total count
23:29 < bridge_> <Ewan> :pepeW:
