09:47 <+bridge> [ddnet] <Index> meh.. please NO account system, its not tw anymore with registration ! :<
12:38 <+bridge> [ddnet] <Zodiac> Anyone online want to give their thoughts on this PR:
12:38 <+bridge> [ddnet] <Zodiac> https://github.com/ddnet/ddnet/pull/3654
12:38 <+bridge> [ddnet] <Zodiac> 
12:38 <+bridge> [ddnet] <Zodiac> I'm hoping to code/complete the feature layer today. I think the suggestion by kamillentee might be the right approach.
12:42 <+bridge> [ddnet] <Zodiac> Anyone online want to give their thoughts on this PR:
12:42 <+bridge> [ddnet] <Zodiac> https://github.com/ddnet/ddnet/pull/3654
12:42 <+bridge> [ddnet] <Zodiac> 
12:42 <+bridge> [ddnet] <Zodiac> I'm hoping to code/complete the feature later today. I think the suggestion by kamillentee might be the right approach.
16:33 <+bridge> [ddnet] <heinrich5991> https://kornel.ski/rust-c-speed something that resonates with me, as I'm currently writing almost-C for https master servers
16:57 <+bridge> [ddnet] <Learath2> Why not rust?
16:57 <+bridge> [ddnet] <heinrich5991> eh, client part
16:57 <+bridge> [ddnet] <heinrich5991> server part is rust
16:57 <+bridge> [ddnet] <Learath2> Ah, I see 😛
16:57 <+bridge> [ddnet] <Learath2> I would have went with python to prototype and c++ to implement
16:57 <+bridge> [ddnet] <heinrich5991> hm. server part is rust + nginx right now
16:58 <+bridge> [ddnet] <Ryozuki> i see lot of rust posts ppl saying x program in rust is slower than xi n java, and it was what to_lowercase does lot of unicode stuff, they just had to change it to make_ascii_lowercase
16:58 <+bridge> [ddnet] <Learath2> Most of these kinds of benchmarks suffer from the same silliness
16:58 <+bridge> [ddnet] <Learath2> I saw one where they were sorting vectors and the C++ one was creating a copy of the vector after every swap...
16:59 <+bridge> [ddnet] <Ryozuki> oh and also the writer thing
16:59 <+bridge> [ddnet] <Ryozuki> if they dont wrap the writer in a bufwriter it flushes byte by byte
16:59 <+bridge> [ddnet] <Ryozuki> so they made the program slower than the python one
16:59 <+bridge> [ddnet] <heinrich5991> it can be said that this is unexpected and can lead to programs being slower in rust than in C/Python/Java
17:00 <+bridge> [ddnet] <Ryozuki> rusts likes things being explicit than implicit
17:00 <+bridge> [ddnet] <Ryozuki> actually in java u have to wrap the filewriter in a buffered writer too
17:00 <+bridge> [ddnet] <Learath2> Well I have one piece of advice, don’t use languages that you are not familiar with
17:00 <+bridge> [ddnet] <Ryozuki> so its not something uncommon
17:00 <+bridge> [ddnet] <heinrich5991> libc automatically switches between line buffering/block buffering depending on output redirection
17:00 <+bridge> [ddnet] <heinrich5991> that can be nice for performance 🙂
17:00 <+bridge> [ddnet] <Learath2> Not like the languages are made for kindergartners
17:01 <+bridge> [ddnet] <Ryozuki> ```java
17:01 <+bridge> [ddnet] <Ryozuki>  PrintWriter out
17:01 <+bridge> [ddnet] <Ryozuki>    = new PrintWriter(new BufferedWriter(new FileWriter("foo.out")));
17:01 <+bridge> [ddnet] <Ryozuki> ```
17:01 <+bridge> [ddnet] <Ryozuki> xd
17:01 <+bridge> [ddnet] <Ryozuki> fcking java
17:01 <+bridge> [ddnet] <Ryozuki> yeah
17:01 <+bridge> [ddnet] <Ryozuki> but they always come to the reddit rust
17:01 <+bridge> [ddnet] <Ryozuki> crying
17:01 <+bridge> [ddnet] <Ryozuki> "gottem!!!"
17:01 <+bridge> [ddnet] <Ryozuki> like they rly try hard to prove rust is nto perfomant
17:02 <+bridge> [ddnet] <heinrich5991> are you maybe talking about "children"? kindergarteners are people who oversee children (at least in german)
17:02 <+bridge> [ddnet] <Ryozuki> kinder
17:02 <+bridge> [ddnet] <Learath2> Well they are looking in the wrong place. Rusts shortcomings sre very well documented
17:02 <+bridge> [ddnet] <heinrich5991> they come to the rust subreddit for advice, nothing wrong with that IMO
17:02 <+bridge> [ddnet] <Ryozuki> i know kinder is kid due to the chocalte egg
17:02 <+bridge> [ddnet] <Ryozuki> chocolate egg
17:02 <+bridge> [ddnet] <Ryozuki> iirc
17:02 <+bridge> [ddnet] <Learath2> Hm, in english a kindergartner would be someone attending as a child. I think
17:02 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/820326071475109908/640x640.png
17:03 <+bridge> [ddnet] <Ryozuki> xdddd
17:03 <+bridge> [ddnet] <heinrich5991> the rust subreddit explicitly encourages asking questions
17:03 <+bridge> [ddnet] <heinrich5991> hm interesting
17:03 <+bridge> [ddnet] <heinrich5991> false friends and all
17:03 <+bridge> [ddnet] <Ryozuki> i guess a kindergartener would be the one taking care
17:03 <+bridge> [ddnet] <Learath2> String formatting is a great place to poke at rust or the binary size
17:03 <+bridge> [ddnet] <heinrich5991> kinder-garten means "garden for children"
17:03 <+bridge> [ddnet] <Ryozuki> the blog also says something, c programs have 30mb of std lib already in the system
17:03 <+bridge> [ddnet] <Ryozuki> so they tend to be smaller
17:03 <+bridge> [ddnet] <Ryozuki> but its a bit misleading
17:04 <+bridge> [ddnet] <heinrich5991> ```
17:04 <+bridge> [ddnet] <heinrich5991> > ls -lh /usr/lib/libc-2.32.so
17:04 <+bridge> [ddnet] <heinrich5991> -rwxr-xr-x 1 root root 2.1M Oct 14 19:00 /usr/lib/libc-2.32.so*
17:04 <+bridge> [ddnet] <heinrich5991> ```
17:04 <+bridge> [ddnet] <Learath2> I never checked in rust but with C you can pretty much not link to libc at all if you prefer
17:04 <+bridge> [ddnet] <heinrich5991> no 30MB
17:04 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/820326508572704768/unknown.png
17:04 <+bridge> [ddnet] <Learath2> Or link statically with an already tiny one like ulibc or musl and let LTO rip
17:05 <+bridge> [ddnet] <heinrich5991> yes, works for rust, too, but formatting is hard to avoid
17:05 <+bridge> [ddnet] <Ryozuki> one thing i found useful is the include_bytes! macro
17:05 <+bridge> [ddnet] <Ryozuki> so useful to test stuff
17:05 <+bridge> [ddnet] <Learath2> I remember reading a blog post with someone doing rust on embedded. He had to get rid of error handling in most places to not pull in fmt
17:05 <+bridge> [ddnet] <Ryozuki> <https://github.com/edg-l/teestatus/blob/master/src/server_v2.rs#L189>
17:06 <+bridge> [ddnet] <heinrich5991> error handling or panics?
17:06 <+bridge> [ddnet] <Learath2> Aah panics it was, yes
17:06 <+bridge> [ddnet] <Learath2> I think he managed to get it to print out a static string at the end tho
17:06 <+bridge> [ddnet] <heinrich5991> @Ryozuki use permalinks. press y before copying the link 🙂
17:06 <+bridge> [ddnet] <heinrich5991> https://github.com/edg-l/teestatus/blob/bf009dcc65a95ebaf057ab9800275d63bea043d5/src/server_v2.rs#L189
17:07 <+bridge> [ddnet] <Ryozuki> 🧐
17:08 <+bridge> [ddnet] <Ryozuki> ` fn parse_main<S: AsRef<[u8]>>(data: &'a S)` :monkalaugh:
17:09 <+bridge> [ddnet] <Ryozuki> AsRef magic
17:09 <+bridge> [ddnet] <heinrich5991> that leads to monomorphisation costs unless you immediately call another function without the type parameter
17:10 <+bridge> [ddnet] <heinrich5991> `fn parse_main_inner(data: &'a [u8]) -> …`
17:10 <+bridge> [ddnet] <heinrich5991> (the function will be duplicated for each type you call it with in the final executable)
17:10 <+bridge> [ddnet] <Ryozuki> 👀
17:10 <+bridge> [ddnet] <Learath2> Did you see the new function syntax for C++? I never saw it in the wild even tho it’s been in since C++11
17:11 <+bridge> [ddnet] <Learath2> I wonder why the return type at the end took off so much
17:11 <+bridge> [ddnet] <heinrich5991> you mean the auto -> ?
17:11 <+bridge> [ddnet] <Learath2> Yep
17:11 <+bridge> [ddnet] <Learath2> Every new language has that syntax now
17:11 <+bridge> [ddnet] <heinrich5991> it's easier to parse and easier to grep for, I like it
17:11 <+bridge> [ddnet] <heinrich5991> and it's also the syntax in maths
17:12 <+bridge> [ddnet] <heinrich5991> easier to parse as in that you need a less complex automaton to recognize it
17:12 <+bridge> [ddnet] <Learath2> It’s easier for the compiler but I’m so used to spotting it at the start of the line
17:12 <+bridge> [ddnet] <heinrich5991> it's really nice I can grep for functions in rust via 'fn function_name'
17:13 <+bridge> [ddnet] <heinrich5991> in C I have to hope that they follow the "return type on separate line" coding convention
17:13 <+bridge> [ddnet] <heinrich5991> wireshark follows it
17:14 <+bridge> [ddnet] <Learath2> That looks weird to me, I usually just grep for / function_name\(.*\)$/
17:14 <+bridge> [ddnet] <heinrich5991> that also gets calls
17:14 <+bridge> [ddnet] <Learath2> Discord ate my backslashes 😛
17:14 <+bridge> [ddnet] <Ryozuki> @heinrich5991 <https://github.com/edg-l/teestatus/blob/7a077f13110acf8d72614a3dd6d0b55b35069c8d/src/server.rs#L160>
17:14 <+bridge> [ddnet] <Ryozuki> i always keep in mind what you said about accepting [u8] instead of vecs, you think that recommendation is applicable here still? i need to modify the contents of those buffers btw
17:14 <+bridge> [ddnet] <Learath2> I personally don’t mind
17:14 <+bridge> [ddnet] <Learath2> But I can see it being an issue in a massive codebase
17:15 <+bridge> [ddnet] <Ryozuki> well
17:15 <+bridge> [ddnet] <Ryozuki> the buffers should already have the size needed
17:15 <+bridge> [ddnet] <Ryozuki> so maybe using u8 is better
17:15 <+bridge> [ddnet] <heinrich5991> take `&mut [Vec<u8>]` ?
17:16 <+bridge> [ddnet] <Ryozuki> what about the inner vec
17:16 <+bridge> [ddnet] <heinrich5991> the Vec -> &[] conversion only applies unconditionally for the outermost layer
17:16 <+bridge> [ddnet] <heinrich5991> okay, even there, unconditionally is wrong. if you need to call functions like push or reserve, take a vec there
17:17 <+bridge> [ddnet] <Ryozuki> no i dont need
17:17 <+bridge> [ddnet] <heinrich5991> hm
17:17 <+bridge> [ddnet] <heinrich5991> you could take a single buffer 🙂
17:17 <+bridge> [ddnet] <heinrich5991> and split off as much as you need each time
17:17 <+bridge> [ddnet] <Ryozuki> i made this a zero  copy parser, it saves the recv content in the buffer and returns a view of that content as a ServerInfo struct
17:17 <+bridge> [ddnet] <Ryozuki> i needed 2 buffers due to the more packet
17:17 <+bridge> [ddnet] <Ryozuki> maybe a single buffer is better
17:17 <+bridge> [ddnet] <heinrich5991> take a &mut [u8]
17:18 <+bridge> [ddnet] <heinrich5991> you can split it with split_mut_at (or similar) after receiving the first packet
17:19 <+bridge> [ddnet] <Learath2> Hm, being zero-copy means it can’t work on architectures that can’t do unaligned access, right?
17:19 <+bridge> [ddnet] <heinrich5991> zero copy probably means "copy the ints"?
17:19 <+bridge> [ddnet] <heinrich5991> here
17:19 <+bridge> [ddnet] <Ryozuki> ah yea
17:19 <+bridge> [ddnet] <Ryozuki> the ints are copied i guess
17:19 <+bridge> [ddnet] <Ryozuki> its not fully zero copy
17:19 <+bridge> [ddnet] <Learath2> Makes sense
17:19 <+bridge> [ddnet] <Ryozuki> the strings are not copied tho
17:20 <+bridge> [ddnet] <Ryozuki> which theorically is most of the content?
17:20 <+bridge> [ddnet] <Ryozuki> maybe it doesnt make sense to make this 0 copy
17:20 <+bridge> [ddnet] <Learath2> What if a string is unaligned? Does that fail at compilation even?
17:21 <+bridge> [ddnet] <heinrich5991> "no unaligned access" on platforms means "the standard method of getting integers only works on aligned addresses"
17:21 <+bridge> [ddnet] <heinrich5991> (this always refers to "all platforms that I know")
17:21 <+bridge> [ddnet] <heinrich5991> strings (as character arrays) can still be unaligned
17:21 <+bridge> [ddnet] <Ryozuki> > A string slice (&str) is made of bytes (u8), and a byte slice (&[u8]) is made of bytes, so this function converts between the two. Not all byte slices are valid string slices, however: &str requires that it is valid UTF-8. from_utf8() checks to ensure that the bytes are valid UTF-8, and then does the conversion.
17:21 <+bridge> [ddnet] <Ryozuki> idk im not rly informed about this align stuff
17:21 <+bridge> [ddnet] <heinrich5991> you can still have unaligned ints, but need different methos of accessing them
17:22 <+bridge> [ddnet] <heinrich5991> in rust you'd probably make a new type "unaligned int" that as a value function
17:22 <+bridge> [ddnet] <Learath2> Well ofc there is a way, I bet LLVM can even do the shift for you on such platforms
17:22 <+bridge> [ddnet] <heinrich5991> in rust you'd probably make a new type "unaligned int" that has a value function
17:23 <+bridge> [ddnet] <Ryozuki> oh i get it now
17:23 <+bridge> [ddnet] <Learath2> But accessing an int should be no different to accessing a char
17:23 <+bridge> [ddnet] <Ryozuki> right now i do a little hack in the parser tho
17:23 <+bridge> [ddnet] <Ryozuki> i check if its the end by checking if there are
17:23 <+bridge> [ddnet] <Ryozuki> consecutive \0
17:23 <+bridge> [ddnet] <Ryozuki> 2*
17:23 <+bridge> [ddnet] <heinrich5991> ouch 😄
17:23 <+bridge> [ddnet] <heinrich5991> can't you pass a slice?
17:24 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/820331370676355092/unknown.png
17:24 <+bridge> [ddnet] <Ryozuki> its cuz i found it rly simple with nom
17:24 <+bridge> [ddnet] <Ryozuki> xd
17:24 <+bridge> [ddnet] <heinrich5991> nom probably supports "many_until_eof" or similar
17:24 <+bridge> [ddnet] <Ryozuki> its a bit sad the packet doesnt tell u how many players are there
17:24 <+bridge> [ddnet] <Ryozuki> in the current packet
17:24 <+bridge> [ddnet] <Ryozuki> but the buffer is filled with lot of \0
17:24 <+bridge> [ddnet] <Ryozuki> because i use a bigger packet than what its filled
17:24 <+bridge> [ddnet] <heinrich5991> no, because you ignore the recv return value
17:25 <+bridge> [ddnet] <Ryozuki> true
17:25 <+bridge> [ddnet] <Ryozuki> xd
17:25 <+bridge> [ddnet] <Zodiac> @Learath2 @heinrich5991 need your input here 🙂 https://github.com/ddnet/ddnet/issues/3411
17:25 <+bridge> [ddnet] <Ryozuki> ok ill check that
17:25 <+bridge> [ddnet] <heinrich5991> @Zodiac such a rush 😛 I saw it, can I take a day or so to form my opinion? ^^
17:25 <+bridge> [ddnet] <heinrich5991> I like the idea
17:26 <+bridge> [ddnet] <Ryozuki> i got a new theme for my neovim, this time is the ayu dark theme :poggers:
17:26 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/820332023310843914/unknown.png
17:26 <+bridge> [ddnet] <Zodiac> haha I am bored and want to be productive. Blocked on /swap and accounts.
17:27 <+bridge> [ddnet] <Zodiac> I'll look at my feature list and see if there is something else I can do
17:27 <+bridge> [ddnet] <heinrich5991> sorry. this is such a "we're doing a change and will be stuck with it forever" PR, so I don't want to do stupid mistakes
17:29 <+bridge> [ddnet] <Ryozuki> definitly dont call it /otp
17:29 <+bridge> [ddnet] <Zodiac> Yeah fair enough and if we did rush it we wouldn't have gotten the latest idea. I'll look at something different
17:30 <+bridge> [ddnet] <Ryozuki> @heinrich5991 do you want the verification to be a code or a clickable link?
17:30 <+bridge> [ddnet] <Ryozuki> in the email
17:30 <+bridge> [ddnet] <heinrich5991> I have not thought about this
17:30 <+bridge> [ddnet] <heinrich5991> clickable link is less friction
17:31 <+bridge> [ddnet] <Ryozuki> i have yet to hear what deen thinks about all of this too
17:31 <+bridge> [ddnet] <heinrich5991> code might be less susceptible to phishing
17:31 <+bridge> [ddnet] <Zodiac> I have it some thought but couldn't think of a simple way to feed back to the client
17:31 <+bridge> [ddnet] <Zodiac> I have given it some thought but couldn't think of a simple way to feed back to the client
17:32 <+bridge> [ddnet] <Zodiac> Email -> website -> master server -> client
17:32 <+bridge> [ddnet] <Zodiac> but will need a way to know which client to send to
17:32 <+bridge> [ddnet] <Ryozuki> @heinrich5991 have you thought about putting all this auth commands behind https?
17:32 <+bridge> [ddnet] <Ryozuki> emails are sensitive data afterall
17:32 <+bridge> [ddnet] <Ryozuki> a command is not encrypted
17:33 <+bridge> [ddnet] <heinrich5991> I'm in favor of not doing this until we get an encrypted connection, but I hadn't publicly said so yet because I thought you rather want accounts than more delays ^^
17:33 <+bridge> [ddnet] <Zodiac> Thought you were working on the HTTPS part?
17:33 <+bridge> [ddnet] <Zodiac> Team effort 😄
17:33 <+bridge> [ddnet] <Ryozuki> i wonder why u meantion master servers in the accounts issue
17:33 <+bridge> [ddnet] <heinrich5991> I'm working on the https server list, this isn't quite related to accounts, I think
17:34 <+bridge> [ddnet] <heinrich5991> the client can already speak HTTPS, that's no problem
17:34 <+bridge> [ddnet] <Ryozuki> @heinrich5991 should the auth server-side stuff be on its own "microservice" too?
17:34 <+bridge> [ddnet] <Ryozuki> and then servers talk to it or something?
17:35 <+bridge> [ddnet] <heinrich5991> I don't know much about that, it's probably better if others design that part
17:35 <+bridge> [ddnet] <Zodiac> I think it could be
17:35 <+bridge> [ddnet] <heinrich5991> ^
17:35 <+bridge> [ddnet] <heinrich5991> an HTTPS endpoint would be nice, idc how it's implemented
17:36 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
17:36 <+bridge> [ddnet] <Ryozuki> time to push rust into ddnet :monkalaugh:
17:36 <+bridge> [ddnet] <Zodiac> From the server side, it is rather straight forward. Never connected via a CPP client before
17:36 <+bridge> [ddnet] <heinrich5991> I can help you with that, for me the server side isn't as straightforward
17:36 <+bridge> [ddnet] <Zodiac> I was going to suggest creating the backend accounts API in C#
17:36 <+bridge> [ddnet] <Ryozuki> ew
17:36 <+bridge> [ddnet] <Ryozuki> never
17:36 <+bridge> [ddnet] <heinrich5991> only did that in python so far, and only small projects 😄
17:36 <+bridge> [ddnet] <Zodiac> ** waits for uproar 😄
17:37 <+bridge> [ddnet] <heinrich5991> languages we already use in ddnet: C, C++, Python (and nim)
17:37 <+bridge> [ddnet] <heinrich5991> it would be best if it was one of those 😉
17:37 <+bridge> [ddnet] <Ryozuki> :feelsbadman:
17:37 <+bridge> [ddnet] <heinrich5991> it would be best, it's not a strict requirement
17:38 <+bridge> [ddnet] <Zodiac> There is so much hate for C# due the legacy. NET Core is open-source and has so much built-in functionality. Could create the BE accounts system in a day
17:38 <+bridge> [ddnet] <heinrich5991> it's just that every dependency makes it harder to deploy 😉
17:38 <+bridge> [ddnet] <Zodiac> Python isn't a bad alternative
17:38 <+bridge> [ddnet] <Ryozuki> c# reminds me of M$$ and u can just use java if u go that way
17:38 <+bridge> [ddnet] <Ryozuki> python being dynamic doesnt appeal to me
17:38 <+bridge> [ddnet] <heinrich5991> C# isn't a bad language. I don't know how friction less it runs on linux. do you *use* it on linux @Zodiac?
17:39 <+bridge> [ddnet] <Zodiac> Also has a lot of support and could allow for a quick solid implementation
17:39 <+bridge> [ddnet] <Ryozuki> @heinrich5991 to use c# on linux u have to install 300mb software called mono
17:39 <+bridge> [ddnet] <Zodiac> @heinrich5991 it is multi-platform
17:39 <+bridge> [ddnet] <Ryozuki> "multi platform"
17:39 <+bridge> [ddnet] <heinrich5991> I know it's multiplatform
17:39 <+bridge> [ddnet] <heinrich5991> using C on windows is also a PITA
17:39 <+bridge> [ddnet] <Zodiac> We host our C# apps on linus
17:39 <+bridge> [ddnet] <Zodiac> We host our C# apps on linux
17:39 <+bridge> [ddnet] <heinrich5991> ah
17:40 <+bridge> [ddnet] <Zodiac> Cheaper 😄
17:40 <+bridge> [ddnet] <Zodiac> Anyway, just a thought. The solution needs to be decided first.
17:40 <+bridge> [ddnet] <Zodiac> I knew it wouldn't be a popular one.
17:40 <+bridge> [ddnet] <Zodiac> I think python is also a strong option. Been meaning to learn the ins-outs of it as well
17:41 <+bridge> [ddnet] <Ryozuki> thats so boring
17:41 <+bridge> [ddnet] <heinrich5991> Telemetry is enabled by default but can be disabled by setting environment variable DOTNET_CLI_TELEMETRY_OPTOUT=1.
17:42 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
17:42 <+bridge> [ddnet] <heinrich5991> my rust/c++/c/python compiler/interpreter doesn't come with telemetry
17:42 <+bridge> [ddnet] <Zodiac> Boring often means easier 🙂
17:42 <+bridge> [ddnet] <Ryozuki> not rly
17:42 <+bridge> [ddnet] <Ryozuki> i dont like how python scales due to it being dynamic typed
17:42 <+bridge> [ddnet] <heinrich5991> @Learath2 know how I can get a std::shared_ptr of my own class?
17:43 <+bridge> [ddnet] <Ryozuki> and nobody rly uses type hints
17:43 <+bridge> [ddnet] <heinrich5991> I basically want to define a method on std::shared_ptr<CMyType> so I can pass myself to antoher thread
17:43 <+bridge> [ddnet] <Zodiac> Yeah I can't speak much about Python.
17:43 <+bridge> [ddnet] <Ryozuki> we can use the fearless concurrency of rust instead of the nobo python GIL :monkalaugh:
17:43 <+bridge> [ddnet] <heinrich5991> python would probably scale by using multiple processes there
17:44 <+bridge> [ddnet] <Ryozuki> if u want something easy i would use golang before python
17:44 <+bridge> [ddnet] <Ryozuki> u can learn go in 1 day
17:44 <+bridge> [ddnet] <Ryozuki> but rust is the best
17:44 <+bridge> [ddnet] <Zodiac> C# has Tasks which pretty much gives concurrency out of the box
17:44 <+bridge> [ddnet] <Ryozuki> \\(T)/
17:44 <+bridge> [ddnet] <Zodiac> Issue free
17:44 <+bridge> [ddnet] <Learath2> You can just make_shared no?
17:45 <+bridge> [ddnet] <Ryozuki> @Zodiac u can get data races in c# right?
17:45 <+bridge> [ddnet] <Ryozuki> :greenthing:
17:45 <+bridge> [ddnet] <heinrich5991> I have a function ::SpawnTask()
17:45 <+bridge> [ddnet] <heinrich5991> that wants to pass itself to a thread
17:45 <+bridge> [ddnet] <heinrich5991> so I kind of want to ensure that my own class lives as long as the thread
17:46 <+bridge> [ddnet] <heinrich5991> the easiest way would be to already be behind a std::shared_ptr, so I could just clone that
17:46 <+bridge> [ddnet] <heinrich5991> I don't know if I can formulate that in C++ though
17:46 <+bridge> [ddnet] <heinrich5991> (or rust, for that matter)
17:47 <+bridge> [ddnet] <heinrich5991> hm, then again I'm accessing engine, and I can't guarantee that lives long enough
17:47 <+bridge> [ddnet] <Zodiac> The framework handles most of the complexity and protects against most of that. Can't remember the last time I had a race condition. 
17:47 <+bridge> [ddnet] <Zodiac> 
17:47 <+bridge> [ddnet] <Zodiac> But anyways, I am not meaning to come out as C# is the best language. Just that it gets some unnecessary hate due to the pre .NET Core days.
17:47 <+bridge> [ddnet] <heinrich5991> ouch, bolting on concurrency on top of our code works badly
17:47 <+bridge> [ddnet] <Zodiac> I have also heard good things about RUST - just haven't used it myself
17:49 <+bridge> [ddnet] <Ryozuki> well i talk about it here nearly every other day :monkalaugh:
17:50 <+bridge> [ddnet] <heinrich5991> I'm going to put ```// Just pretend `this` and its `m_pEngine` live longer than the thread.``` there and call it a day
17:50 <+bridge> [ddnet] <Ryozuki> :monkaS:
17:53 <+bridge> [ddnet] <Boti.> have fun with it
17:53 <+bridge> [ddnet] <Ryozuki> @Zodiac u mentioned dota 2 in the github right?
17:53 <+bridge> [ddnet] <Ryozuki> actually dota 2 community resembles this one a lot
17:53 <+bridge> [ddnet] <Ryozuki> its all made up of old players
17:53 <+bridge> [ddnet] <heinrich5991> we have a lot of new players
17:53 <+bridge> [ddnet] <heinrich5991> maybe not on discord
17:54 <+bridge> [ddnet] <Ryozuki> btw the strong vote got more than 80 votes iirc
17:54 <+bridge> [ddnet] <Ryozuki> thats way more than the usual ppl chatting here
17:54 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/820339164008546324/unknown.png
17:55 <+bridge> [ddnet] <Ryozuki> same here
17:55 <+bridge> [ddnet] <Ryozuki> there is definitly looking here and they dont talk
17:55 <+bridge> [ddnet] <Ryozuki> ppl*
17:55 <+bridge> [ddnet] <Zodiac> Yeah, there definitely are parallels. The same issues/danger could be had if Valve used /r/dota2 is its guide on decisions
17:55 <+bridge> [ddnet] <Zodiac> Yeah, there definitely are parallels. The same issues/danger could be had if Valve used /r/dota2 is its decision maker
17:56 <+bridge> [ddnet] <Ryozuki> actually valve does a lot of things r/dota2 mentions
17:56 <+bridge> [ddnet] <Zodiac> They do use it as a source but not as the deciding vote
17:57 <+bridge> [ddnet] <Zodiac> There are a number of times the subreddit was heavily against a decision made by Valve
17:57 <+bridge> [ddnet] <Zodiac> They just represent a portion of a larger community
17:57 <+bridge> [ddnet] <Zodiac> Like @heinrich5991  said there are lots of new players. Just not on discord
17:58 <+bridge> [ddnet] <Ryozuki> #join-leave
17:58 <+bridge> [ddnet] <Ryozuki> there is quite lot of ppl joining everyday
17:58 <+bridge> [ddnet] <Ryozuki> they just dont talk
17:58 <+bridge> [ddnet] <Ryozuki> which is quite normal
17:58 <+bridge> [ddnet] <Ryozuki> blending in a discord is not easy
17:58 <+bridge> [ddnet] <Zodiac> Joining and being active participant are two different things
17:58 <+bridge> [ddnet] <heinrich5991> we had 2000 players yesterday. this discord has a member count of 5000
17:59 <+bridge> [ddnet] <heinrich5991> I don't think more than 1000 of these had a discord account joined in this server
17:59 <+bridge> [ddnet] <Ryozuki> if they are interested they would
17:59 <+bridge> [ddnet] <Zodiac> Especially the asian countries
17:59 <+bridge> [ddnet] <Zodiac> Discord is banned in China
17:59 <+bridge> [ddnet] <Ryozuki> well china is a different matter
17:59 <+bridge> [ddnet] <Zodiac> Which actually is our largest community
17:59 <+bridge> [ddnet] <Ryozuki> i rly dislike the barrier
17:59 <+bridge> [ddnet] <Zodiac> There is also a language barrier
17:59 <+bridge> [ddnet] <Ryozuki> i literally know nothing of whats happening there
17:59 <+bridge> [ddnet] <Ryozuki> ye
17:59 <+bridge> [ddnet] <Ryozuki> sad
18:00 <+bridge> [ddnet] <Zodiac> All I am saying is that there is a likelihood that the feedback we rely on is bias towards skilled players and certain demographics
18:00 <+bridge> [ddnet] <Zodiac> It is something to be aware of. Doesn't mean to disregard the input
18:01 <+bridge> [ddnet] <Ryozuki> its ppl who played this game for years, they rly like this game, disregarding the input would be rly bad imho
18:02 <+bridge> [ddnet] <Zodiac> Completely agreed 🙂 It is very important to listen to the feedback. The difference is to not make it the only channel/decider.
18:02 <+bridge> [ddnet] <Ryozuki> there are lot of games that have this type of "hidden mechanic" (strong weak hook) in this case, and learning those mechanics makes you a better player
18:02 <+bridge> [ddnet] <Ryozuki> its also a sense of effort
18:02 <+bridge> [ddnet] <Ryozuki> i rly dont want it removed
18:03 <+bridge> [ddnet] <Ryozuki> also the strong weak hook on novice you wont care most of the time
18:03 <+bridge> [ddnet] <Ryozuki> unless you optimize for top ranks
18:03 <+bridge> [ddnet] <Ryozuki> it matters most on edgehook maps and other brutal maps
18:04 <+bridge> [ddnet] <Zodiac> There are parts that are a lot easier if you so happen to have strong. /spec and /unspecing isn't a skill but rather a knowledge barrier.
18:04 <+bridge> [ddnet] <Ryozuki> and nothing wrong with a knowledge barrier
18:04 <+bridge> [ddnet] <heinrich5991> hm
18:04 <+bridge> [ddnet] <Ryozuki> you can do that novice part
18:04 <+bridge> [ddnet] <heinrich5991> knowledge barrier doesn't seem useful to me
18:04 <+bridge> [ddnet] <Ryozuki> its only normal to expect players to be more invested the more they go into harder maps
18:05 <+bridge> [ddnet] <heinrich5991> yes, removing things you have to know sounds good to me though
18:05 <+bridge> [ddnet] <heinrich5991> all else being equal
18:05 <+bridge> [ddnet] <Ryozuki> i dont like removing things you have to know
18:05 <+bridge> [ddnet] <Ryozuki> it removes depth
18:05 <+bridge> [ddnet] <Ryozuki> a depth that lot of players love
18:05 <+bridge> [ddnet] <Zodiac> It is a knowledge barrier for the sake of it and creates a bad user experience
18:06 <+bridge> [ddnet] <Zodiac> The alternative would be to have a very obvious indicator of who has strong/weak, then a clear method to /spec.
18:06 <+bridge> [ddnet] <heinrich5991> if you create hints that tell you that /spec exists and that it can be used for changing weak/strong, then that removes a knowledge barrier
18:06 <+bridge> [ddnet] <heinrich5991> I see absolutely nothing wrong with that
18:06 <+bridge> [ddnet] <Ryozuki> well i wasnt talking about spec tbh
18:06 <+bridge> [ddnet] <Ryozuki> there are maps without it
18:06 <+bridge> [ddnet] <Kenzoo> https://media.discordapp.net/attachments/342454474117218334/820094495634358287/unknown.png
18:06 <+bridge> [ddnet] <Ryozuki> and u have to plan the strong weak partsa beforehand if u want to optimize it
18:06 <+bridge> [ddnet] <Kenzoo> BROKEN @Zodiac
18:07 <+bridge> [ddnet] <heinrich5991> hmm. UNK?
18:07 <+bridge> [ddnet] <Ryozuki> UNK means unknown
18:07 <+bridge> [ddnet] <Ryozuki> country
18:07 <+bridge> [ddnet] <Zodiac> @Kenzoo thanks Kenzoo - will look into it. What server and map is this?
18:07 <+bridge> [ddnet] <Kenzoo> its block chilean srv
18:07 <+bridge> [ddnet] <Kenzoo> idk why its unk
18:08 <+bridge> [ddnet] <heinrich5991> maybe block servers don't have server location configured
18:12 <+bridge> [ddnet] <Zodiac> But can you see how this might be an example of favouring advanced players at the expense of new players? 
18:13 <+bridge> [ddnet] <Zodiac> 
18:13 <+bridge> [ddnet] <Zodiac> The situation that it benefits advanced players is minimal where most of the time it is an unnecessary extra. Where the avg player/new players unknowingly have a worse experience or find parts harder.
18:13 <+bridge> [ddnet] <Zodiac> 
18:13 <+bridge> [ddnet] <Zodiac> What I am trying to get at is that we have a natural bias to older players, which we need to be aware of. To give an hypothetical. What if there a "Newbies Encouraged! " WhatsApp group and we used that to make decision on strong/weak. Do you think the same decision would have been made?
18:13 <+bridge> [ddnet] <Ryozuki> they dont find parts harder in novice
18:13 <+bridge> [ddnet] <Zodiac> Or moderate
18:13 <+bridge> [ddnet] <Zodiac> I played teeworlds for 2 years and didn't know about strong
18:13 <+bridge> [ddnet] <Ryozuki> i dont think it matters much in moderato too
18:13 <+bridge> [ddnet] <Ryozuki> moderate
18:14 <+bridge> [ddnet] <Ryozuki> until the high end
18:14 <+bridge> [ddnet] <Ryozuki> and there is when u should already know about this
18:14 <+bridge> [ddnet] <Zodiac> Hammer flying is easier if the person on the top has strong
18:14 <+bridge> [ddnet] <Zodiac> It allows you to fall down slower
18:14 <+bridge> [ddnet] <Learath2> As long as a class that lives long enough holds a shared ptr to your class it'll live long enough. Idk which part you are having trouble with
18:14 <+bridge> [ddnet] <Ryozuki> hammer flying with weak in novices doesnt matter
18:14 <+bridge> [ddnet] <Ryozuki> its more useful to control the going down
18:14 <+bridge> [ddnet] <Ryozuki> which i never seen was needed in novice
18:15 <+bridge> [ddnet] <Zodiac> I am not trying to make this about strong 🙂
18:15 <+bridge> [ddnet] <Zodiac> I am using that as an example
18:15 <+bridge> [ddnet] <Zodiac> In this hypothetical can we assume Strong creates a worse experience for new players
18:15 <+bridge> [ddnet] <Ryozuki> no
18:15 <+bridge> [ddnet] <Zodiac> 😅
18:17 <+bridge> [ddnet] <louis> weak sucks remove it
18:19 <+bridge> [ddnet] <jao> remove strong
18:24 <+bridge> [ddnet] <Ryozuki> @heinrich5991 is the mysqlcpp connector removed already on 15.3.2?
18:24 <+bridge> [ddnet] <Ryozuki> gotta know so i can update the arch aur
18:34 <+bridge> [ddnet] <deen> no
20:30 <+bridge> [ddnet] <Astramast> so
20:31 <+bridge> [ddnet] <Astramast> i want a command that bind a key so it emote at a certain frequence a certain emote (smthing like 1time/s
20:31 <+bridge> [ddnet] <Astramast> i want a command that bind a key so it emote at a certain frequence a certain emote (smthing like 1time/s)
20:31 <+bridge> [ddnet] <jao> not possible
20:33 <+bridge> [ddnet] <Astramast> D: sadness is huge
20:56 <+bridge> [ddnet] <bubliman> @Astramast `just do bind key emote [number 1-16]`
20:56 <+bridge> [ddnet] <bubliman> the emotes will be spammed depending on what setting the server uses
20:56 <+bridge> [ddnet] <bubliman> @Astramast just do `bind key emote [number 1-16]`
20:56 <+bridge> [ddnet] <bubliman> the emotes will be spammed depending on what setting the server uses
21:36 <+bridge> [ddnet] <Astramast> no but i dont want to spam like 300 emotes/s
21:36 <+bridge> [ddnet] <Astramast> i want like 1/s or smthing
22:21 <+bridge> [ddnet] <bubliman> Would be amazing, Teeworlds is open source, so u can code it if u want 🙂
22:22 <+bridge> [ddnet] <SPYRES> we need dota's high five in teeworlds. id love that xD
22:40 <+bridge> [ddnet] <heinrich5991> @Learath2 for ping calculation, should a server be able (with a fallback provided by the master server) to select a country? or should the master server have sole control over this?
22:52 <+bridge> [ddnet] <Learath2> Idk how you intend to do ping
22:59 <+bridge> [ddnet] <heinrich5991> wanted to do ping estimates based on geolocation
23:29 <+bridge> [ddnet] <Learath2> Hm, I think the master controls that
23:31 <+bridge> [ddnet] <deen> Nim made it into a major tech news website, but maybe not with the best topic 😄 https://www.zdnet.com/article/this-malware-was-written-in-an-unusual-programming-language-to-stop-it-from-being-detected/
23:33 <+bridge> [ddnet] <Ryozuki> "unusual"
23:33 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
23:34 <+bridge> [ddnet] <Ryozuki> https://roy.marples.name/archives/dhcpcd-discuss/0003457.html
23:34 <+bridge> [ddnet] <Ryozuki> :feelsbadman:
23:36 <+bridge> [ddnet] <Ryozuki> https://news.ycombinator.com/item?id=26449179
23:36 <+bridge> [ddnet] <Ryozuki> actually true comments
23:36 <+bridge> [ddnet] <Ryozuki> im sure this software runs in millions of servers yet no one knows this guy who is about to be gone..
23:36 <+bridge> [ddnet] <Ryozuki> ppl only care about tv ppl :feelsbadman:
23:45 <+bridge> [ddnet] <plsplsplslol> deen helps make malware programming language :monkalaugh:
23:47 <+bridge> [ddnet] <deen> I haven't helped with Nim for years now
23:48 <+bridge> [ddnet] <Ryozuki> i find it funny that most ppl dont know where the test sv password "nimrocks" comes from :monkalaugh:
