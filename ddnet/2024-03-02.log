00:00 < bridge> <teero777> i was already convinced when you started typing
00:00 < bridge> <learath2> `./sysdeps/x86_64/multiarch/strcpy-sse2.S` I looked at the sse2 one
00:01 < bridge> <learath2> Finally someone that takes me for my word
00:01 < bridge> <teero777> all plagiarized from the dictionary
00:02 < bridge> <learath2> fwiw I only looked to spot the presence of 2 loops and I couldn't spot 2 loops
00:03 < bridge> <peter44h> I think in practice the compilers do have an object size limitation of PTRDIFF_MAX
00:03 < bridge> <peter44h> and I guess if you used a 64 bit unsigned for the length the max length would be your whole address space anyway (not that it would work)
00:04 < bridge> <peter44h> though probably a joke
00:04 < bridge> <learath2> ackshully, since zero terminated strings are just a single pointer, their object size is just the size of a pointer
00:04 < bridge> <peter44h> the memory backing the string is an object, I wasn't talking about the pointer itself
00:05 < bridge> <-StormAx> does ddnet have a function to rotate text?
00:06 < bridge> <learath2> For a C string literal under clang and gcc it maybe matters, but any portion of memory that ends in a `\0` is technically free game. e.g. strlens implementation knows nothing about the object size limits
00:08 < bridge> <peter44h> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91397
00:08 < bridge> <peter44h> I've had gcc give me a related bogus warning with wording:
00:08 < bridge> <peter44h> `exceeds maximum object size 9223372036854775807 `
00:08 < bridge> <peter44h> (which is PTRDIFF_MAX)
00:10 < bridge> <peter44h> but if anyone has the 9 million TB of memory please give me some
00:23 < bridge> <chairn> uh, this seems to be too long for the time i have 😢
00:30 < bridge> <teero777> waiting 20mins already for xorg to finish installing.......
00:31 < bridge> <teero777> 15€ rpi do be slow
00:52 < bridge> <cyberFighter> hmm
00:52 < bridge> <cyberFighter> color picker is kind of jank
00:53 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1213272835846578206/image.png?ex=65f4df61&is=65e26a61&hm=6607c335c5f5eb5a80c9ec7f0b29829c3ee89956d88a2837eb944c439d56f5e7&
01:01 < bridge> <chairn> neither does size prefixed strings (in a real physical world)
01:02 < bridge> <chairn> because you only need the inner core of the strlen function in the inner loop of strcpy
01:02 < bridge> <learath2> you mean in a real theoretical world, unless you want to introduce a branch, length is limited
01:02 < bridge> <chairn> to detect the null character in the input string
01:03 < bridge> <chairn> how is it practically limited when no machine has enough memory to fill 2^64 bytes ?
01:04 < bridge> <chairn> anyway, on SIMD, in x86, the glibc function just checks for page boundary on 4kB page
01:04 < bridge> <chairn> then it fetches as much as it wants and detects if there's a null character in the data
01:04 < bridge> <learath2> yes, after looking at it this was obvious
01:04 < bridge> <learath2> it's not, I'm just being pedantic since they are being pedantic
01:05 < bridge> <learath2> my null delimited strings will work for my universe computer with 10 exobyte strings
01:05 < bridge> <chairn> the first load is a special unaligned ones that performs less good than another instruction which requires an cache aligned (or 32B aligned) address, otherwise it generates a segfault (really not the best exception to generate though)
01:11 < bridge> <chairn> note that some ISA allows vector loads to safe in an elegant manner with not touching elements outside the allowed region
01:11 < bridge> <chairn> note that some ISA allows vector loads to fail in an elegant manner with not touching elements outside the allowed region
08:48 < bridge> <Jupstar ✪> @robyt3 i tested on windows
08:48 < bridge> <Jupstar ✪> 
08:48 < bridge> <Jupstar ✪> ram changes, but it doesnt permanentaly increase
08:49 < bridge> <chillerdragon> @furo321: when fix \#8038
08:49 < bridge> <chillerdragon> @furo321: when fix \#8039
08:52 < bridge> <Jupstar ✪> @robyt3 i did however indeed have a massive lag closing the console after a while 😄
08:55 < bridge> <chillerdragon> Dude @remakepower when improve English axaxaxa. Just run your sentences through chatgpt before you post on GitHub and then read the text so everytime you learn it a bit :p
08:55 < bridge> <chillerdragon> 
08:55 < bridge> <chillerdragon> It’s much harder to take you serious when your messages barley make sense
08:55 < bridge> <Jupstar ✪> @robyt3 m_Elements defs increases the whole time 😄
08:56 < bridge> <Jupstar ✪> maybe gcc has a different allocation strategy
08:56 < bridge> <Jupstar ✪> so it takes much longer to notice with it
08:57 < bridge> <milkeeycat> chillerdragon: check dms aka offtopic
08:57 < bridge> <heinrich5991> chillerdragon: don't make fun of others
08:58 < bridge> <milkeeycat> :justatest:
08:58 < bridge> <chillerdragon> Who did I make fun of?
08:58 < bridge> <chillerdragon> On da phone later
09:00 < bridge> <chillerdragon> Oh you deleted my message to bamcane. That’s weird ngl. I was being nice giving him advice on how to be respected more on GitHub. I didn’t make fun of anyone.
09:01 < bridge> <chillerdragon> @heinrich5991: don’t you agree his comments would be treated more seriously if they were corrected by chatgpt? Or that he could learn by doing so? You also correct my English all the time and I learn through that. It’s nice.
09:02 < bridge> <heinrich5991> ChillerDragon: feel free to DM me about rules, if you want anything clarified
09:11 < ws-client> <ChillerDragon> ye sure im actually curious @heinrich5991 where dm
09:12 < bridge> <heinrich5991> at your service, I'm currently monitoring irc, matrix and discord
09:12 < ws-client> <ChillerDragon> do you mind doing it in a public irc channel thats not bridged to ddnet?
09:13 < ws-client> <ChillerDragon> #ddnet-off-topic on quakenet
09:18 < bridge> <heinrich5991> prefer not to
09:18 < bridge> <heinrich5991> interesting: https://sourcehut.org/blog/2021-11-29-announcing-the-chat.sr.ht-public-beta/
09:24 < bridge> <Jupstar ✪> @robyt3 i think i understand the problem now... it's indeed not a leak, it's just a suboptimal way of doing small allocation
09:24 < bridge> <Jupstar ✪> 
09:24 < bridge> <Jupstar ✪> if you'd wait long enough it would probably decrease memory again.
09:24 < bridge> <Jupstar ✪> 
09:24 < bridge> <Jupstar ✪> I'll think about a solution
09:32 < bridge> <Jupstar ✪> who is cpp pro?
09:32 < bridge> <Jupstar ✪> 
09:32 < bridge> <Jupstar ✪> i need this:
09:32 < bridge> <Jupstar ✪> https://en.cppreference.com/w/cpp/container/multimap/lower_bound
09:32 < bridge> <Jupstar ✪> 
09:32 < bridge> <Jupstar ✪> however in my case the multimap is sorted in a reversed order
09:32 < bridge> <Jupstar ✪> 
09:32 < bridge> <Jupstar ✪> so i'd also need the reverse of lower_bound basically
09:32 < bridge> <Jupstar ✪> 
09:32 < bridge> <Jupstar ✪> in other words:
09:32 < bridge> <Jupstar ✪> "the last element that is still greater (or equal) than key"
09:32 < bridge> <Jupstar ✪> iterators in cpp are so hard
09:32 < bridge> <Jupstar ✪> xd
09:33 < bridge> <heinrich5991> have you overloaded the `operator<` to sort in reverse order?
09:34 < bridge> <Jupstar ✪> std::multiset<SMemoryHeapQueueElement, std::greater<>>
09:34 < bridge> <Jupstar ✪> this basically
09:34 < bridge> <heinrich5991> then `lower_bound` should do what you want, no?
09:34 < bridge> <Jupstar ✪> that's not clear for me from the specs
09:34 < bridge> <Jupstar ✪> xd
09:34 < bridge> <Jupstar ✪> "This overload participates in overload resolution only if the qualified-id Compare::is_transparent is valid and denotes a type. It allows calling this function without constructing an instance of Key."
09:35 < bridge> <Jupstar ✪> this is the hardest sentence i over read
09:35 < bridge> <Jupstar ✪> but that would be the intuitive solution i guess
09:35 < bridge> <heinrich5991> I'm not sure what else it would return
09:36 < bridge> <heinrich5991> it can't suddenly start using something other than your comparator, that would violate its internal guarantees, I guess
09:36 < bridge> <Jupstar ✪> i'll simply test it out i guess 😄
09:45 < bridge> <Jupstar ✪> seems not to work
09:46 < bridge> <Jupstar ✪> do i need to use upper_bound then?
09:46 < bridge> <Jupstar ✪> 
09:46 < bridge> <Jupstar ✪> but would it also allow equal compare?
09:47 < bridge> <Jupstar ✪> ok upper also doesnt work
09:47 < bridge> <Jupstar ✪> i don't want to manually quick sort xd
09:49 < bridge> <Jupstar ✪> https://en.cppreference.com/w/cpp/algorithm/lower_bound takes a comparitor
09:49 < bridge> <Jupstar ✪> maybe i can use that
10:10 < bridge> <Ewan> you can't change the operators to sort with rbegin and rend?
10:21 < ws-client> <ChillerDragon> did my bugtrix msgs reach u @heinrich5991 ?
10:24 < bridge> <ryozuki> added casts to edlang
10:33 < bridge> <robyt3> Odd, it used to work correctly with Vulkan and OpenGL when I tested it, but in 18.0.3 it doesn't work consistently with Vulkan anymore
10:51 < bridge> <Jupstar ✪> well i simply need a reversed lower bound, but the class function doesnt offer it 😄
10:51 < bridge> <Jupstar ✪> but yeah with the std thing it's ez
11:17 < bridge> <heinrich5991> I'm not entirely sure what you need. can you give an example with a couple of sample values?
11:17 < bridge> <heinrich5991> ```c++
11:17 < bridge> <heinrich5991> #include <cstdio>
11:17 < bridge> <heinrich5991> #include <map>
11:17 < bridge> <heinrich5991> 
11:17 < bridge> <heinrich5991> int main() {
11:17 < bridge> <heinrich5991>     std::multimap<int, int, std::greater<>> map;
11:17 < bridge> <heinrich5991>     map.insert({1, 2});
11:17 < bridge> <heinrich5991>     map.insert({4, 3});
11:17 < bridge> <heinrich5991>     map.insert({9, 5});
11:18 < bridge> <heinrich5991>     printf("%d\n", map.lower_bound(8)->first);
11:18 < bridge> <heinrich5991>     return 0;
11:18 < bridge> <heinrich5991> }
11:18 < bridge> <heinrich5991> ```
11:18 < bridge> <heinrich5991> this prints `4` for me, which is the first element after `8`, given that I have the `std::greater` ordering
11:25 < bridge> <Jupstar ✪> "the last element that is still greater (or equal) than key"
11:25 < bridge> <Jupstar ✪> 
11:25 < bridge> <Jupstar ✪> so the last element >= 8
11:25 < bridge> <Jupstar ✪> 
11:25 < bridge> <Jupstar ✪> in your case it's 9
11:25 < bridge> <Jupstar ✪> i basically need a reverse iterator
11:29 < bridge> <Jupstar ✪> i already solved it btw
11:29 < bridge> <heinrich5991> nice
11:29 < bridge> <Jupstar ✪> with std::lower_bound tho
11:30 < bridge> <Jupstar ✪> i don't think the class is built for my needs xd
11:30 < bridge> <heinrich5991> to me, it's not clear from your description, whether "greater" refers to the container ordering that is reversed or to the ordering outside the container
11:30 < bridge> <Jupstar ✪> the container is reverse bcs of the std::greater too, like in your example
11:33 < bridge> <Jupstar ✪> i could probably also rewrite it to not use greater in the container already.. but honestly i'm too lazy xdd
11:33 < bridge> <Jupstar ✪> 
11:33 < bridge> <Jupstar ✪> with rust iterators it would have been easier
11:33 < bridge> <Jupstar ✪> just saiyan
11:33 < bridge> <heinrich5991> ```rs
11:33 < bridge> <heinrich5991> #include <cstdio>
11:33 < bridge> <heinrich5991> #include <map>
11:33 < bridge> <heinrich5991> 
11:33 < bridge> <heinrich5991> int main() {
11:33 < bridge> <heinrich5991>     std::multimap<int, int, std::greater<>> map;
11:33 < bridge> <heinrich5991>     map.insert({1, 2});
11:33 < bridge> <heinrich5991>     map.insert({4, 3});
11:33 < bridge> <heinrich5991>     map.insert({9, 5});
11:33 < bridge> <heinrich5991>     auto it = map.lower_bound(8);
11:33 < bridge> <heinrich5991>     it--;
11:33 < bridge> <heinrich5991>     printf("%d\n", it->first);
11:33 < bridge> <heinrich5991>     return 0;
11:33 < bridge> <heinrich5991> }
11:33 < bridge> <heinrich5991> ```
11:33 < bridge> <heinrich5991> I think decrementing the iterator would work then
11:33 < bridge> <Jupstar ✪> yep, probably
11:33 < bridge> <Jupstar ✪> but what if there is no fitting entry
11:33 < bridge> <Jupstar ✪> then u decrement end
11:33 < bridge> <heinrich5991> eh 😦
11:33 < bridge> <Jupstar ✪> what even happens then xd
11:33 < bridge> <heinrich5991> yea
11:33 < bridge> <heinrich5991> UB, probablu
11:34 < bridge> <heinrich5991> UB, probably
11:34 < bridge> <Jupstar ✪> my cpp brain really got removed
11:34 < bridge> <Jupstar ✪> i forgot everything
11:34 < bridge> <Jupstar ✪> in my case this would actually even work
11:34 < bridge> <Jupstar ✪> bcs i first check if there could be a fitting allocation anyway
11:35 < bridge> <Jupstar ✪> to prevent the worst case of iterating through all entries
11:35 < bridge> <Jupstar ✪> which is likely
11:39 < bridge> <Jupstar ✪> i think i'll need quick_search anyway :lol:
11:39 < bridge> <Jupstar ✪> i need to calculate the alignment too, which changes the size requirements
11:39 < bridge> <Jupstar ✪> all discussion for nothing
11:40 < bridge> <Jupstar ✪> but it's also not really correct
11:40 < bridge> <Jupstar ✪> this is harder than expected
11:40 < bridge> <Jupstar ✪> a lower_bound with a condition
11:47 < bridge> <Jupstar ✪> clangd code insight also seems compltely broken
11:47 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1213437409518424084/image.png?ex=65f578a7&is=65e303a7&hm=6f1d090e0814452ac5c1ba272e8daf715047fd9bcfd7cfe678e949802ae95cfc&
11:48 < bridge> <Jupstar ✪> i think it's broken since our refactor for include what u need
11:48 < bridge> <Jupstar ✪> why didnt the tool for example say:
11:48 < bridge> <Jupstar ✪> include <functional>
11:48 < bridge> <Jupstar ✪> 
11:48 < bridge> <Jupstar ✪> here?
11:48 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1213437867221713018/image.png?ex=65f57914&is=65e30414&hm=40b61afee3742e6609b2508ae85e08e20ca23d30507c68e5a6d15bd482acf02c&
11:49 < bridge> <Jupstar ✪> does it find some earlier include and then just stops?
11:49 < bridge> <Jupstar ✪> 
11:49 < bridge> <Jupstar ✪> isn't that the opposite of include what you need :lol:
11:49 < bridge> <Jupstar ✪> include what others need
11:49 < bridge> <Jupstar ✪> xd
11:49 < bridge> <Jupstar ✪> don't include what others already needed*
12:02 < bridge> <Jupstar ✪> ```
12:02 < bridge> <Jupstar ✪> 
12:02 < bridge> <Jupstar ✪> log
12:02 < bridge> <Jupstar ✪> 2(last - first) + O(1) comparisons). However, for non-LegacyRandomAccessIterators, the number of iterator increments is linear. Notably, std::map, std::multimap, std::set, and std::multiset iterators are not random access, and so their member lower_bound functions should be preferred.
12:02 < bridge> <Jupstar ✪> ```
12:02 < bridge> <Jupstar ✪> 
12:02 < bridge> <Jupstar ✪> MHHH
12:02 < bridge> <Jupstar ✪> well that sucks :lol:
12:03 < bridge> <Jupstar ✪> man when gpt 5 ngl
12:03 < bridge> <Jupstar ✪> 
12:03 < bridge> <Jupstar ✪> i waste 1h for a problem where i know the solution, but struggle to apply it
12:23 < bridge> <cyberFighter> i have a curse or something that breaks every feature when i try to use it
12:25 < bridge> <robyt3> Most likely explanation is that we updated our drivers, which causes the buggy code path in the Vulkan backend to be used instead
12:51 < bridge> <Jupstar ✪> i think this generally does not work without reversing the iterator
12:51 < bridge> <Jupstar ✪> 
12:51 < bridge> <Jupstar ✪> "Returns an iterator pointing to the first element that is not less than (i.e. greater or equal to) key"
12:51 < bridge> <Jupstar ✪> 
12:51 < bridge> <Jupstar ✪> for greater it would mean smaller or equal
12:51 < bridge> <Jupstar ✪> 
12:51 < bridge> <Jupstar ✪> but i need smaller (without equal)
12:51 < bridge> <Jupstar ✪> 
12:51 < bridge> <Jupstar ✪> this really sucks xd
12:51 < bridge> <Jupstar ✪> i dunno how i can make it work without O(1) lookup
12:53 < bridge> <Jupstar ✪> i guess i'll simply rewrite the container to use std::less
12:54 < bridge> <Jupstar ✪> well i could use greater_eq
12:54 < bridge> <Jupstar ✪> i guess
12:54 < bridge> <milkeeycat> what was the name of repo which could count loc in project
12:55 < bridge> <Jupstar ✪> tokei
12:55 < bridge> <Jupstar ✪> or snth
12:55 < bridge> <milkeeycat> oh ye, thx
12:56 < bridge> <robyt3> @milkeeycat Are you working on #8020?
12:56 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/8020
12:56 < bridge> <heinrich5991> ah. and you potentially have a lot of elements with the same key?
12:56 < bridge> <heinrich5991> that's probably forbidden
12:57 < bridge> <milkeeycat> no, there's no way my little noodle can fix it, i just wanted to help as much as I could =]
12:57 < bridge> <Jupstar ✪> well a multimap can store multiple equals, so i guess it's no problem here?
12:57 < bridge> <robyt3> ok, thanks 🙂
12:57 < bridge> <Jupstar ✪> i do indeed
12:58 < bridge> <robyt3> ah, so this relates to the main thread index or whatever is used for the one-time-use buffer objects?
12:58 < bridge> <heinrich5991> yes, but equal is defined as `!(a < b) && !(b < a)`
12:58 < bridge> <heinrich5991> that fails if you replace `<` with `<=`
12:59 < bridge> <Jupstar ✪> but why should it need eq
12:59 < bridge> <Jupstar ✪> well maybe it matters, but it seems like in worst case it appends it to a later element?
12:59 < bridge> <Jupstar ✪> when inserting
12:59 < bridge> <heinrich5991> for lookup, e.g.
13:00 < bridge> <heinrich5991> probably UB, but you might get away with it for non-production code
13:00 < bridge> <Jupstar ✪> the problem is the allocations in that thread yeah 😄
13:00 < bridge> <Jupstar ✪> but the real problem is a little bit harder to explain
13:00 < bridge> <Jupstar ✪> if it always uses the biggest allocation => it grows the allocation heap
13:01 < bridge> <Jupstar ✪> it cant merge it bcs of delayed cleanups
13:01 < bridge> <heinrich5991> yea, the comparator must suffice `Compare`
13:01 < bridge> <heinrich5991> and `Compare` states that equality must be `!(a < b) && !(b < a)`
13:01 < bridge> <heinrich5991> so AFAICT, passing `<=` is UB
13:03 < bridge> <learath2> Hm, why not upper_bound - 1?
13:03 < bridge> <Jupstar ✪> even tho that makes sense, doesn't it depend on the lookup done?
13:03 < bridge> <Jupstar ✪> 
13:03 < bridge> <Jupstar ✪> e.g. if i never use a "normal" find
13:03 < bridge> <Jupstar ✪> i mean it's UB by spec
13:03 < bridge> <Jupstar ✪> but logically
13:03 < bridge> <heinrich5991> logically, it might work
13:03 < bridge> <heinrich5991> but then, you'd think the same applies to `sort`
13:04 < bridge> <heinrich5991> and that causes actual segfaults for stuff that doesn't adhere to `Compare`
13:04 < bridge> <Jupstar ✪> yeah i tried that in the pr.. dunno where my thought mistake is
13:05 < bridge> <learath2> Not for lower and upper bound btw
13:05 < bridge> <heinrich5991> but for `lower_bound`/`upper_bound` on `multimap`
13:05 < bridge> <heinrich5991> because `multimap` requires it
13:05 < bridge> <heinrich5991> (the member functions)
13:05 < bridge> <Jupstar ✪> esp upper_bound requires it
13:05 < bridge> <Jupstar ✪> "Returns an iterator pointing to the first element that is greater than key."
13:05 < bridge> <Jupstar ✪> 
13:05 < bridge> <Jupstar ✪> it could tell if it's greater
13:05 < bridge> <Jupstar ✪> without knowing it's not equal
13:05 < bridge> <Jupstar ✪> 😄
13:05 < bridge> <Jupstar ✪> couldn't *
13:06 < bridge> <syrinok> Me and a friend got timed out at the same time, can't connect to any server because "UDP seems to be filtered" what causes this
13:06 < bridge> <heinrich5991> that sounds like UDP isn't working for you, currently
13:07 < bridge> <heinrich5991> teeworlds/ddnet run over UDP
13:08 < bridge> <learath2> Hm, I'm unsure whether the compare fn you use with the multimap itself has to be the same as the one you use in upper and lower bound as long as the data satisfies is_partitioned for both
13:08 < bridge> <Jupstar ✪> so linear search works
13:08 < bridge> <Jupstar ✪> 
13:08 < bridge> <Jupstar ✪> to remove the linear search partially i tried to first find the upper bound for size (minus one)
13:08 < bridge> <Jupstar ✪> => then i reversed the returned iterator and did the linear search on the remaining values
13:08 < bridge> <Jupstar ✪> what is wrong about this xd
13:09 < bridge> <heinrich5991> `upper_bound`/`lower_bound` member functions don't take another comparison function
13:09 < bridge> <Jupstar ✪> i guess make_reverse_iterator automatically does minus one?
13:09 < bridge> <learath2> Bamboozled once again, why does multimap have member upper and lower bound? 😄
13:09 < bridge> <Jupstar ✪> " std::copy(std::make_reverse_iterator(v.end()),
13:09 < bridge> <Jupstar ✪>               std::make_reverse_iterator(v.begin()),
13:10 < bridge> <Jupstar ✪>               std::ostream_iterator<int>(std::cout, ", "));"
13:10 < bridge> <Jupstar ✪> that's how i understand their example
13:10 < bridge> <Jupstar ✪> https://upload.cppreference.com/mwiki/images/3/39/range-rbegin-rend.svg
13:10 < bridge> <Jupstar ✪> xd
13:10 < bridge> <heinrich5991> to do the logarithmic complexity `lower_bound`/`upper_bound`
13:11 < bridge> <Jupstar ✪> so that was my mistake
13:11 < bridge> <Jupstar ✪> the function doesnt reverse the order of the iteration, but literally changes the iterator
13:11 < bridge> <Jupstar ✪> i swear i find cpp's iterator stuff way too complicated
13:12 < bridge> <learath2> Why not a template specialization for the non-member ones though? I guess there is no way to express the operations in terms of iterators?
13:12 < bridge> <heinrich5991> interesting. I don't know. I guess it should be possible in terms of iteratorss
13:13 < bridge> <learath2> I'm sure I'm missing something here. Why did you think it would reverse the order?
13:15 < bridge> <Jupstar ✪> i am not used to not lazy evaluated iterators anymore
13:16 < bridge> <Jupstar ✪> i simply didnt think about it dunno
13:16 < bridge> <Jupstar ✪> there is no .next() call
13:16 < bridge> <Jupstar ✪> it does that automatically xd
13:19 < bridge> <learath2> So is your problem fixed btw?
13:19 < bridge> <Jupstar ✪> i guess so
13:19 < bridge> <Jupstar ✪> upper bound was never the problem
13:19 < bridge> <Jupstar ✪> but if u have a clever way to remove the O(1) search
13:19 < bridge> <Jupstar ✪> u could help me with that
13:20 < bridge> <heinrich5991> O(n)?
13:20 < bridge> <Jupstar ✪> but i think it's not really possible
13:20 < bridge> <learath2> What is the actual problem?
13:20 < bridge> <learath2> Like what are we solving?
13:20 < bridge> <Jupstar ✪> i need to calc alignment on fly
13:20 < bridge> <Jupstar ✪> and add that to the required size
13:20 < bridge> <Jupstar ✪> so the key i am searching for is literally changing xd
13:20 < bridge> <Jupstar ✪> only thing guaranteed is that at least one exists
13:22 < bridge> <Jupstar ✪> only real solution i see is overallocating the whole alignment
13:22 < bridge> <Jupstar ✪> but you as vulkan expert know why i shouldnt
13:22 < bridge> <learath2> I don't quite get it, why does alignment requirement of an object depend on other objects?
13:22 < bridge> <learath2> Why are your things in a multimap?
13:23 < bridge> <Jupstar ✪> the allocation itself has alignment requirements
13:23 < bridge> <Jupstar ✪> but how the allocations (the list of possible allocations) are aligned is not saved in some key value
13:23 < bridge> <zhn> spotted on my save before map change pr afair
13:23 < bridge> <Jupstar ✪> it's not possible @learath2 just ignore my monologue
13:23 < bridge> <Jupstar ✪> i just can't accept that it's linear
13:24 < bridge> <learath2> Sorry, I guess this is far too niche for me to understand from the outside. I was hoping it was more abstract
13:24 < bridge> <learath2> Well a linear search in sorted data does sound like a bummer
13:24 < bridge> <Jupstar ✪> i'd need a data structure that somehow is categorized in certain alignment requirements already i guess
13:25 < bridge> <Jupstar ✪> in 99% of all cases it also doesnt matter
13:25 < bridge> <Jupstar ✪> i already put similar alignments together, similar != equal in this case
13:25 < bridge> <learath2> Depends on how expensive a comparison is and how big your set is
13:25 < bridge> <Jupstar ✪> more like upper categories xD
13:26 < bridge> <learath2> What are you making btw?
13:27 < bridge> <Jupstar ✪> basically this
13:27 < bridge> <Jupstar ✪> Search __most__ fitting allocation, not _first_ fitting
13:28 < bridge> <Jupstar ✪> it's not very easy to explain, but since some stuff is lazy deallocated the allocation heap grows in an undesirable way
13:28 < bridge> <Jupstar ✪> where it sometimes does not merge back similar allocations
13:32 < bridge> <Jupstar ✪> now comes the rust version fix
13:32 < bridge> <Jupstar ✪> let's see how much i struggle there.
13:32 < bridge> <Jupstar ✪> 
13:32 < bridge> <Jupstar ✪> multimaps don't exist in rust
13:33 < bridge> <learath2> I bet there is a crate for it
13:33 < bridge> <Jupstar ✪> back then i didnt find one
13:34 < bridge> <learath2> There is one called multimap and another multi_map
13:34 < bridge> <learath2> Maybe one of them works for you
13:35 < bridge> <learath2> Or I guess you can have a naive multimap as a hashmap of key to vec.
13:35 < bridge> <Jupstar ✪> apparently i used this
13:35 < bridge> <Jupstar ✪> ```rust
13:35 < bridge> <Jupstar ✪> std::collections::BTreeMap<usize, LinkedHashMap<NonZeroUsize, MemoryHeapQueueElement>>
13:35 < bridge> <Jupstar ✪> ```
13:35 < bridge> <Jupstar ✪> and rewrote the logic
13:35 < bridge> <learath2> MemoryHeapQueueElement just says nothing to me 😄
13:36 < bridge> <Jupstar ✪> understandable xd
13:36 < bridge> <ryozuki> why LinkedHashMap?
13:36 < bridge> <learath2> Linked lists are hot
13:36 < bridge> <ryozuki> and why nonzero?
13:36 < bridge> <Jupstar ✪> it's basically just the struct that stores the alloc size and alignment in buffer
13:36 < bridge> <ryozuki> xd
13:36 < bridge> <Jupstar ✪> that's just some id
13:36 < bridge> <Jupstar ✪> bcs i don't work with ptrs in rust
13:36 < bridge> <ryozuki> why not
13:36 < bridge> <Jupstar ✪> in cpp multimap iterators stay valid
13:37 < bridge> <Jupstar ✪> smth like that doesnt exist in rust
13:37 < bridge> <learath2> So this keeps track of your allocations in gpu memory?
13:37 < bridge> <Jupstar ✪> and would be some kind of ptr magic
13:37 < bridge> <Jupstar ✪> well kind of i guess
13:37 < bridge> <Jupstar ✪> 
13:37 < bridge> <Jupstar ✪> but not directly
13:37 < bridge> <ryozuki> is that safe
13:37 < bridge> <Jupstar ✪> it keeps track of sub allocations
13:37 < bridge> <learath2> Why does the alignment need to be kept track of? Do you move objects around later?
13:37 < bridge> <Jupstar ✪> it is safe, as long as they entry doesnt get invalid
13:38 < bridge> <ryozuki> maybe u can achieve that with pin or smth
13:38 < bridge> <ryozuki> but ye sounds annoying
13:38 < bridge> <Jupstar ✪> well for the allocator the offset in heap is interesting
13:38 < bridge> <Jupstar ✪> but for user the offset + align
13:38 < bridge> <Jupstar ✪> xd
13:38 < bridge> <Jupstar ✪> apparently the user for simplicity simply gets a copy
13:38 < bridge> <Jupstar ✪> of that element
13:39 < bridge> <Jupstar ✪> so ignore the alignment stuff
13:40 < bridge> <Jupstar ✪> ```std::multiset<SMemoryHeapQueueElement, std::greater<>>;```
13:40 < bridge> <Jupstar ✪> 
13:40 < bridge> <Jupstar ✪> cpp version btw `SMemoryHeapQueueElement` is the same here
13:41 < bridge> <Jupstar ✪> i also use multiset not map.. but doesnt matter in this case xD
13:42 < bridge> <learath2> Hm, see I may be missing something but alignment should only be important when you allocate first, unless the allocations need to be relocatable without user intervention
13:43 < bridge> <Jupstar ✪> it is
13:43 < bridge> <Jupstar ✪> ignore the alignment part
13:43 < bridge> <Jupstar ✪> i dont use it
13:43 < bridge> <Jupstar ✪> it's only for the result value
13:44 < bridge> <Jupstar ✪> but alignment is affected by the offset in the buffer
13:44 < bridge> <learath2> Anyway, a map doesn't look like the best structure for this. I'll think about it over breakfast
13:44 < bridge> <Jupstar ✪> so exactly at allocation time it matters what the offset is
13:44 < bridge> <Jupstar ✪> note that i already group _similar_ aligned stuff together
13:44 < bridge> <Jupstar ✪> so it only sometimes doesn't fit
13:45 < bridge> <learath2> You want to find the best fitting, so the smallest free block that's properly aligned with enough size, yes?
13:45 < bridge> <Jupstar ✪> yes
13:45 < bridge> <learath2> Ok, brb tea and fooding. It helps me think
13:45 < bridge> <Jupstar ✪> xd
13:46 < bridge> <zhn> lerato tea-powered
13:46 < bridge> <Jupstar ✪> and btw it should not only be the properly aligned one.. if the allocation is big enough, it should be allowed to align the memory inside the allocation
13:46 < bridge> <Jupstar ✪> it's better to waste a few bytes than use a oversized chunk i guess
13:47 < bridge> <Jupstar ✪> or in other words:
13:47 < bridge> <Jupstar ✪> if no alignment fits (without wasting bytes)
13:47 < bridge> <Jupstar ✪> 
13:47 < bridge> <Jupstar ✪> the impl would need to allocate a completely new buffer
13:47 < bridge> <Jupstar ✪> and that's super expensive
14:15 < bridge> <Jupstar ✪> @0xdeen can we also fix linux build xd
14:15 < bridge> <Jupstar ✪> before release
14:16 < bridge> <Jupstar ✪> oh lol u already commented on the pr
14:16 < bridge> <Jupstar ✪> issue*
14:31 < bridge> <learath2> @jupeyy_keks how big are these buffers?
14:32 < bridge> <Jupstar ✪> at least 20mb
14:41 < bridge> <ryozuki> @jupeyy_keks im getting a 30% rise pog
14:41 < bridge> <ryozuki> liking even more my job now xd
14:41 < bridge> <Jupstar ✪> same job?
14:41 < bridge> <heinrich5991> that's significant 😮
14:42 < bridge> <ryozuki> yes
14:42 < bridge> <ryozuki> and then 20%
14:42 < bridge> <ryozuki> on top of that
14:42 < bridge> <Jupstar ✪> that's insane
14:42 < bridge> <ryozuki> they value me
14:42 < bridge> <Jupstar ✪> deserved
14:42 < bridge> <ryozuki> :owo:
14:43 < bridge> <Jupstar ✪> so it's > 40k now right?
14:43 < bridge> <ryozuki> 43k
14:43 < bridge> <ryozuki> then i think its like 52 or smth
14:43 < bridge> <Jupstar ✪> u have 43 niw=+
14:43 < bridge> <Jupstar ✪> now?
14:43 < bridge> <ryozuki> yes
14:43 < bridge> <Jupstar ✪> oh ok
14:43 < bridge> <ryozuki> with the rise
14:43 < bridge> <ryozuki> yeah itsn ot same as germany kek
14:44 < bridge> <Jupstar ✪> wait but why the 52
14:44 < bridge> <ryozuki> but my father gets 14k for reference
14:44 < bridge> <Jupstar ✪> u confuse me
14:44 < bridge> <ryozuki> 52 is the 20% rise
14:44 < bridge> <ryozuki> on top of the 30
14:44 < bridge> <ryozuki> they said will come if i keep doing good
14:44 < bridge> <Jupstar ✪> for what the 20%?
14:44 < bridge> <Jupstar ✪> ah
14:44 < bridge> <ryozuki> ?
14:44 < bridge> <ryozuki> xd
14:44 < bridge> <ryozuki> i get 33k, i got a 30% so now 43k
14:44 < bridge> <Jupstar ✪> 52 is already senior level payment
14:44 < bridge> <ryozuki> then 20% maybe in the future
14:44 < bridge> <Jupstar ✪> that would be good
14:45 < bridge> <Jupstar ✪> ofc depends on region
14:45 < bridge> <Jupstar ✪> in barcelona probably u should get more
14:45 < bridge> <ryozuki> on spain
14:45 < bridge> <ryozuki> im like a living rich
14:45 < bridge> <ryozuki> or close
14:45 < bridge> <ryozuki> medium high
14:45 < bridge> <ryozuki> i only have 1 friend who is close
14:45 < bridge> <ryozuki> he gets 30k
14:45 < bridge> <ryozuki> he is devops
14:45 < bridge> <ryozuki> well he just got the rise to 30k
14:46 < bridge> <learath2> Are you trying to say our ryozooki isn't senior level?
14:46 < bridge> <ryozuki> im not xD
14:46 < bridge> <Jupstar ✪> does the payment reflect the skill ever? xd
14:46 < bridge> <Jupstar ✪> well rarely
14:46 < bridge> <learath2> Rarely indeed. It's all Reagan's fault
14:47 < bridge> <learath2> You are now
14:47 < bridge> <ryozuki> i consider myself skilled atp rogramming
14:47 < bridge> <ryozuki> but not enough yet at soft things
14:47 < bridge> <ryozuki> like managing
14:47 < bridge> <ryozuki> or considering decisions
14:47 < bridge> <ryozuki> i like too much interesting stuff
14:47 < bridge> <ryozuki> to choose the boring answeres
14:47 < bridge> <Jupstar ✪> @learath2 what salery do you aim for?
14:47 < bridge> <Jupstar ✪> 
14:47 < bridge> <Jupstar ✪> i guess u could aim for 48k?
14:48 < bridge> <ryozuki> and probs correct ones
14:48 < bridge> <ryozuki> to choose the boring answers
14:48 < bridge> <learath2> Who cares about managing. That's wht we have managers
14:48 < bridge> <ryozuki> ok not manager, but tech lead
14:48 < bridge> <ryozuki> in this industry sadly u need to become more social
14:48 < bridge> <ryozuki> to go upwards
14:48 < bridge> <ryozuki> i think
14:48 < bridge> <learath2> I honestly don't really care for now, I just need things to pad my CV so as long as I don't starve, it's fine
14:49 < bridge> <Jupstar ✪> it's not about salery anyway
14:49 < bridge> <Jupstar ✪> 
14:49 < bridge> <Jupstar ✪> either ur job is cool or your job offers good opportunities
14:49 < bridge> <Jupstar ✪> 
14:49 < bridge> <Jupstar ✪> for 1st money wont matter as much, second will give u money in long run xd
14:50 < bridge> <learath2> I don't think I'd be worth that much tbf. I'm a generalist that is very well versed in a language that is on life support and a language that everyone can't wait to replace. With no professional experience whatsoever
14:51 < bridge> <ryozuki> @learath2 if u have a nice salary then what matters most is if ur job is interesting
14:51 < bridge> <ryozuki> it changes so much
14:51 < bridge> <learath2> With a lackluster portfolio. I'm a very very risky hire
14:51 < bridge> <ryozuki> ur life
14:51 < bridge> <ryozuki> i worked before in some nodejs pdf shit
14:51 < bridge> <learath2> Not good for shareholder value
14:51 < bridge> <Jupstar ✪> were do u want to apply anyway?
14:51 < bridge> <ryozuki> and now im doign compilers
14:51 < bridge> <Jupstar ✪> in germany only certs matter
14:51 < bridge> <ryozuki> u will havemore luck with startups for a first job
14:51 < bridge> <Jupstar ✪> they dont pay after skill xd
14:51 < bridge> <Jupstar ✪> murica only skill matters
14:52 < bridge> <ryozuki> @learath2 i already dmed u some time ago but if u ever want to apply i can recommend u
14:52 < bridge> <ryozuki> tbh i think u would get along with my coworker, the gdb wizard
14:52 < bridge> <ryozuki> x
14:52 < bridge> <ryozuki> xd
14:52 < bridge> <ryozuki> also he is obsessed with wanting to make his own cpu design
14:53 < bridge> <Jupstar ✪> understandable
14:53 < bridge> <Jupstar ✪> 😬
14:53 < bridge> <ryozuki> his uni thesis was smth about making matrices rly perfomant or smth with assembly
14:53 < bridge> <ryozuki> i forgor
14:53 < bridge> <learath2> I'm thinking europe, haven't thought more specifically than that for now. Maybe netherlands or germany.
14:53 < bridge> <learath2> 
14:53 < bridge> <learath2> I could also consider japan while I'm still young enough to be able to endure the 12 hour japanese work day
14:53 < bridge> <ryozuki> some cache analysis or smth
14:53 < bridge> <learath2> I could actually. Barcelona isn't a half bad place to live in
14:54 < bridge> <ryozuki> i love barcelona, its the city with the most city vibes i ever went
14:54 < bridge> <ryozuki> idk what that means but i know
14:54 < bridge> <learath2> Understandable, vibes are hard to describe
14:54 < bridge> <ryozuki> did u ever live in rome?
14:55 < bridge> <ryozuki> somehwo it smelled worse  than barcelona in the center
14:55 < bridge> <learath2> What certs would a software engineer even get anyway? I thought those were more an IT thing
14:55 < bridge> <ryozuki> a problem is tourists pissing on the small streets of the old city center
14:55 < bridge> <learath2> Cisco certified network engineer
14:55 < bridge> <ryozuki> because there was a time where designers thought having close and not open spaces was better against deseases
14:55 < bridge> <ryozuki> but its the opposite XD
14:55 < bridge> <learath2> Nope, but I did go there twice
14:56 < bridge> <Jupstar ✪> i meant like bachelor and stuff
14:56 < bridge> <Jupstar ✪> anything that qualifies u
14:56 < bridge> <ryozuki> @learath2 did u visit "el barrio gotico"
14:56 < bridge> <learath2> Oic
14:56 < bridge> <ryozuki> in barcelona
14:56 < bridge> <learath2> Nope. The gothic bar? 😄
14:56 < bridge> <ryozuki> no
14:56 < bridge> <ryozuki> its a neighbourhood
14:56 < bridge> <ryozuki> in the oldest part of the city
14:57 < bridge> <ryozuki> https://en.wikipedia.org/wiki/Gothic_Quarter,_Barcelona
14:58 < bridge> <learath2> I may have. Idk it's been so long since I've been to Barcelona
14:59 < bridge> <ryozuki> i wanted to show a pic of the views from the office b ut idk about google map lurkers
14:59 < bridge> <learath2> Let me look at a couple landmarks and see if I remember any
14:59 < bridge> <ryozuki> we have direct sight of sagrada familia
14:59 < bridge> <learath2> Don't, :konsti:
14:59 < bridge> <ryozuki> ill post it and delete
14:59 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1213485858242699265/e7eab44b-6dae-4f67-9b47-cddf69fdde6f.png?ex=65f5a5c6&is=65e330c6&hm=0beeb580426e8653f1597e01c4963a1d39f0dfb923717dbba9b7117f6deab6f8&
14:59 < bridge> <ryozuki> :p
14:59 < bridge> <learath2> Irc never forgets
14:59 < bridge> <ryozuki> true
14:59 < bridge> <ryozuki> xD
14:59 < bridge> <learath2> That is an amazing view though
15:00 < bridge> <ryozuki> yep
15:00 < bridge> <learath2> I'll now camp in front of your building and take your kidneys
15:00 < bridge> <ryozuki> xDDD
15:00 < bridge> <heinrich5991> that seems like an easy job for geoguessr
15:00 < bridge> <ryozuki> indeed
15:00 < bridge> <ryozuki> but well its not my house
15:01 < bridge> <cyberFighter> new bug
15:01 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1213486232265556009/image.png?ex=65f5a61f&is=65e3311f&hm=63e51786ad2d42dcc60d9f6df182657f2b794b97e6c46093393e181dd2b3ea89&
15:01 < bridge> <cyberFighter> take an image, name it something idk, then rename it to something that can be external and export will go out of the box
15:01 < bridge> <heinrich5991> I think @0xdeen also indicated in the past that he could recommend people for some job, but maybe that's a thing of the past already
15:08 < bridge> <ryozuki> @jupeyy_keks https://twitter.com/zozuar/status/1763906851337326736
15:09 < bridge> <ryozuki> video
15:09 < bridge> <ryozuki> https://twigl.app/?ol=true&ss=-Nrz9bitd8IESh_Lyq2F
15:09 < bridge> <ryozuki> insane
15:09 < bridge> <learath2> I love this sort of stuff. Such a small algorithm generating such beauty
15:12 < bridge> <Jupstar ✪> 😮 works well too good
15:12 < bridge> <Jupstar ✪> 😮 works way too good
15:15 < bridge> <cyberFighter> ?
15:15 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1213489841707155486/image.png?ex=65f5a97b&is=65e3347b&hm=9d3a295dd87d06d69d7a25fb55406e20bf0a3fbff24458336b514befd42dddaa&
15:15 < bridge> <cyberFighter> trying to replace grass_doodads and it does this
15:18 < bridge> <robyt3> Replace with itself?
15:18 < bridge> <robyt3> Then use "Readd" instead
15:20 < bridge> <cyberFighter> well it was an embedded one so i thought to replace it
15:29 < bridge> <mind4pixel> Liars
15:29 < bridge> <mind4pixel> https://cdn.discordapp.com/attachments/293493549758939136/1213493481729695784/screenshot_2024-03-02_15-27-22.png?ex=65f5acdf&is=65e337df&hm=5ce10dc3ad28c04a022d56d03187869b2faadd47fabe05c055006e8143414486&
15:29 < bridge> <mind4pixel> https://cdn.discordapp.com/attachments/293493549758939136/1213493509517217832/screenshot_2024-03-02_15-27-28.png?ex=65f5ace6&is=65e337e6&hm=0f47634d1601cbf8faf98d349e2e1facefde59a2db3d4735524a8866b3f97045&
15:30 < bridge> <heinrich5991> you only get every second tick from the server. maybe the tooltip could be reworded
15:35 < bridge> <robyt3> Depends on `sv_high_bandwidth` value, which is 0 per default. Could be changed to "Go to next/previous tick" I guess.
15:35 < bridge> <Jupstar ✪> snapshot
15:35 < bridge> <heinrich5991> yes
15:35 < bridge> <Jupstar ✪> but can't we also interpolate the tick
15:35 < bridge> <Jupstar ✪> then the logic would always be the same
15:36 < bridge> <robyt3> it might work for skipping to the next tick, but I don't think skipping backwards works with interpolation
15:36 < bridge> <Jupstar ✪> how so
15:37 < bridge> <Jupstar ✪> - back to prev. snapshot
15:37 < bridge> <Jupstar ✪> - then interpolate
15:37 < bridge> <Jupstar ✪> or let's call it prediction tick
15:37 < bridge> <Jupstar ✪> that's more clear
15:38 < bridge> <Jupstar ✪> but u could ofc also interpolate between both snapshots
15:38 < bridge> <heinrich5991> more ticks might be missing, though
15:38 < bridge> <heinrich5991> at what point should we stop interpolating?
15:38 < bridge> <Jupstar ✪> predict until tick count is equal
15:39 < bridge> <heinrich5991> for one tick, I can see that work. for more, I think that's a bad idea because it might show users things that didn't actually happen
15:39 < bridge> <Jupstar ✪> that's already the case now
15:40 < bridge> <Jupstar ✪> how should the demo know if an entity spawned for 1 tick if it was never included in a snapshot
15:40 < bridge> <Jupstar ✪> we know the current snapshot and the input of the next snapshot
15:40 < bridge> <Jupstar ✪> that's all we need
15:41 < bridge> <heinrich5991> what I was trying to say is: for one tick the effects of that are likely small. for more, they might show more discrepancies
15:42 < bridge> <heinrich5991> (I'm not sure I completely understood your messages. interpreted them as: it might happen with just one tick as well)
15:43 < bridge> <Jupstar ✪> all i was saying it, that the demo is never smooth in that case anyway
15:43 < bridge> <Jupstar ✪> 
15:43 < bridge> <Jupstar ✪> the demo already interpolates anyway
15:43 < bridge> <Jupstar ✪> if it interpolates between two snapshots or between an imaginary inserted tick doesnt matter then anymore
16:10 < bridge> <Jupstar ✪> @heinrich5991 have u ever thought about logging without global variables? xd
16:11 < bridge> <heinrich5991> I have
16:11 < bridge> <heinrich5991> when I looked at it, I thought it might have pretty bad performance implications though
16:11 < bridge> <heinrich5991> because you have to pass the logging everywhere
16:12 < bridge> <Jupstar ✪> well a global logger might have one too.. e.g. a once_cell wrapper will always have to deref
16:12 < bridge> <heinrich5991> you effectively lose one register to that. it becomes worse if it gets spilled to the stack
16:13 < bridge> <heinrich5991> you mean the if? ye, that's a performance concern, but at least it should be always predicted correctly
16:13 < bridge> <Jupstar ✪> passing stuff is prbably negatable
16:13 < bridge> <Jupstar ✪> 
16:13 < bridge> <Jupstar ✪> also to make it clear. i mean global variables, not global state
16:13 < bridge> <Jupstar ✪> if ur component clones the logger arc. i am fine with that
16:13 < bridge> <heinrich5991> I don't think that passing stuff is negligible, if it happens everywhere
16:14 < bridge> <heinrich5991> ah, so without passing. I haven't thought about that like that yet
16:14 < bridge> <ryozuki> i think heinrich is right
16:14 < bridge> <heinrich5991> ah, so without passing it every time. I haven't thought about that like that yet
16:14 < bridge> <ryozuki> if u pass it always*
16:15 < bridge> <ryozuki> a global is like knowing a constant address so u dont need a register or stack to hold it
16:15 < bridge> <Jupstar ✪> i dunno, it's ofc there, but to me it's on a level with index checks etc.
16:15 < bridge> <Jupstar ✪> 
16:15 < bridge> <Jupstar ✪> it's negatable
16:15 < bridge> <Jupstar ✪> that's true, but how do you intialize  that global?
16:16 < bridge> <Jupstar ✪> a global lock also _cannot_ have optimizations for runtime stuff easily
16:16 < bridge> <Jupstar ✪> e.g. batching
16:16 < bridge> <Jupstar ✪> a global variable which needs a lock*
16:16 < bridge> <Jupstar ✪> well anyway, let's say it makes my programm 5% slower
16:17 < bridge> <Jupstar ✪> i doubt that but ok
16:17 < bridge> <ryozuki> is this real jupstar
16:17 < bridge> <Jupstar ✪> so back to the non global variable:
16:17 < bridge> <Jupstar ✪> 
16:17 < bridge> <Jupstar ✪> how would you imagine it?
16:17 < bridge> <ryozuki> 😬
16:17 < bridge> <Jupstar ✪> currently i have a global state logger
16:17 < bridge> <Jupstar ✪> and from that u kinda allocate a local one, that has a unique id/name whatever
16:18 < bridge> <Jupstar ✪> my goal is to have the possiblity to disable/filter logging of some stuff, without loosing it.
16:19 < bridge> <Jupstar ✪> let's say it like this:
16:19 < bridge> <Jupstar ✪> 
16:19 < bridge> <Jupstar ✪> i can understand the appeal of global loggers, global allocators
16:19 < bridge> <Jupstar ✪> it makes stuff easier to write
16:19 < bridge> <Jupstar ✪> but i hate global variables
16:19 < bridge> <Jupstar ✪> xd
16:20 < bridge> <Jupstar ✪> if u'd have a 100% truely non global variable program, u could literally make every lib a .so load unload it at runtime and it will for ever work
16:20 < bridge> <Jupstar ✪> ofc global state is also a problem
16:21 < bridge> <ryozuki> tbh im at gym rn so hard to think xd
16:21 < bridge> <Jupstar ✪> for logging the global state would probably simply live in the most upper component, e.g. the client.
16:21 < bridge> <Jupstar ✪> 
16:21 < bridge> <Jupstar ✪> so every component beneath can be reloaded
16:21 < bridge> <Jupstar ✪> xd
16:21 < bridge> <Jupstar ✪> xdd
16:21 < bridge> <Jupstar ✪> 
16:21 < bridge> <Jupstar ✪> i talk shit anyway
16:21 < bridge> <ryozuki> whats the problem with globals and dyn libs?
16:22 < bridge> <Jupstar ✪> but i want to consider some designs. logging to me is a rather boring topic
16:22 < bridge> <Jupstar ✪> 
16:22 < bridge> <Jupstar ✪> 
16:22 < bridge> <Jupstar ✪> but if it's epic future proof, who knows how a design would look like
16:22 < bridge> <ryozuki> ahh
16:22 < bridge> <ryozuki> is logging rly a overhead for u?
16:22 < bridge> <ryozuki> are u doing HFT
16:22 < bridge> <Jupstar ✪> well depends on the global var. but generally it might be a different global variable
16:22 < bridge> <Jupstar ✪> 
16:22 < bridge> <Jupstar ✪> or do some shady memory stuff
16:23 < bridge> <Jupstar ✪> no, not really, i don't have an huge amount of logging yet
16:23 < bridge> <Jupstar ✪> 
16:23 < bridge> <Jupstar ✪> i often do log driven debugging
16:23 < bridge> <Jupstar ✪> but dunno, it gets removed afterwards xD
16:23 < bridge> <ryozuki> xd
16:24 < bridge> <ryozuki> @jupeyy_keks do u think smth like compiler supported logging would be useful
16:24 < bridge> <ryozuki> i wonder how a compiler can help
16:24 < bridge> <ryozuki> to make logging better
16:24 < bridge> <ryozuki> less overheas
16:24 < bridge> <ryozuki> less overhead
16:25 < bridge> <Jupstar ✪> well my naive view on logging is that it always has a lock
16:25 < bridge> <Jupstar ✪> 
16:25 < bridge> <Jupstar ✪> either in your impl, or in the OS
16:25 < bridge> <Jupstar ✪> so probably it cant help a lot
16:31 < bridge> <heinrich5991> will take a look later, currently afk
16:37 < bridge> <learath2> why is it desirable to pass around an address everywhere if you aren't even avoiding global state?
16:40 < bridge> <Jupstar ✪> you could also make it the other way around.
16:40 < bridge> <Jupstar ✪> 
16:40 < bridge> <Jupstar ✪> if you use a global variable in your lib, the variable is bound to your lifetime of the lib, so it's "shady" memory management.
16:40 < bridge> <Jupstar ✪> Additionally you will loose the state of your global variable if you unload and reload the lib.
16:40 < bridge> <Jupstar ✪> And this happens opaque to a coder
16:40 < bridge> <Jupstar ✪> also global variables are kind of less explicit
16:41 < bridge> <learath2> If you unload the logging library, wouldn't it make sense that the variable is now out of scope?
16:42 < bridge> <Jupstar ✪> maybe u passed a log item somewhere, which is also invalid now
16:42 < bridge> <Jupstar ✪> 
16:42 < bridge> <Jupstar ✪> ofc this is kinda weird argument, bcs i doubt u'd program like that
16:42 < bridge> <Jupstar ✪> 
16:42 < bridge> <Jupstar ✪> however, generally global variables could cause this
16:42 < bridge> <Jupstar ✪> and it depends on how your global var looks like, e.g. if it is wrapped in an Arc or some heap object
16:43 < bridge> <learath2> I don't really see how it's not possible if you are passing the pointer to global state around
16:43 < bridge> <learath2> You pass me a global state variable, unload yourself, now I have a dangling pointer
16:44 < bridge> <Jupstar ✪> how should that happen with global state?
16:44 < bridge> <Jupstar ✪> im in rust btw
16:44 < bridge> <Jupstar ✪> then the allocator would need to be local too
16:44 < bridge> <learath2> If there is global state that your logger must reference no matter what to do the logging. The unique local loggers you pass around have to contain some reference to that state, no?
16:45 < bridge> <Jupstar ✪> yes, here is the question how that ref looks like
16:46 < bridge> <learath2> No matter what that ref looks like, can't it go out of scope the same way the entire global variable you avoided can go out of scope?
16:46 < bridge> <Jupstar ✪> well depends where your global state is allocated
16:47 < bridge> <Jupstar ✪> maybe that was a bad example
16:47 < bridge> <learath2> But couldnt the global variable also be allocated there to avoid scope issues in the same way?
16:47 < bridge> <Jupstar ✪> it could yes
16:47  * bridge <Jupstar ✪> could
16:47 < bridge> <chairn> what ? what's the relation between Reagan and salary = skill ?
16:48 < bridge> <chairn> everywhere you need to have social skills
16:50 < bridge> <ryozuki> yes
16:52 < bridge> <Jupstar ✪> ok my main problems are the one you already know:
16:52 < bridge> <Jupstar ✪> 
16:52 < bridge> <Jupstar ✪> - modularity, a global var cannot be switched with a different instance  (e.g. having 2 global states)
16:52 < bridge> <Jupstar ✪> - debugging. having to pass stuff makes it easy to replace it for debugging for a specifc area
16:52 < bridge> <Jupstar ✪> - performance (depends on the impl) you could™️ batch stuff etc in case of a local logger instance (you can probably do smth similar with globals too, the only difference is that with a global variable you'd most likely not want to pollute your function arguments/constructors in first place, bcs that defeats the argument about that)
16:53 < bridge> <Jupstar ✪> actually i also didnt want a discussion about global vars xD
16:53 < bridge> <Jupstar ✪> i just want to know if anyone here ever made a logger without global vars
16:53 < bridge> <Jupstar ✪> and see the impl, or hear about challenges, ideas whatever
17:01 < bridge> <learath2> Well I guess it depends on how you define "skill", neoliberalism ushered in the era of wages and profit being more dependent on how socially and economically savvy you are rather than how skilled you are at your craft
17:06 < bridge> <learath2> - You can have an extra level of indirection (which in your current design the local loggers provide) baked into the global variable to begin with (e.g. main component holds a global variable which contains a pointer to the logger component that is currently loaded, one could even have shared_ptrs/arcs to keep the old instance alive if two global loggers being alive at the same time is desired)
17:06 < bridge> <learath2> - Debugging with globals is indeed rather annoying
17:06 < bridge> <learath2> - Batching almost always has nasty looking api anyway, I can see why you might not want that in your global namespace, but I doubt you get any extra performance if you implement it on a local logger rather than a global one
17:06 < bridge> <learath2> me neither, I was curious why you thought avoiding one with a logger would help
17:08 < bridge> <Jupstar ✪> Well u could have a sync point per thread which writes to the logger. There are so many ideas, so why not try out and see how far I come
17:08 < bridge> <Jupstar ✪> And if I fail, that's OK too
17:08 < bridge> <learath2> If I were building such a logger I'd see if I could get rid of all global state as well, relying on some OS mechanism to make sure my lines don't get interleaved
17:10 < bridge> <Jupstar ✪> Under stable. My idea for the global state was to have some kind of fallback mechanism if u want a logger that can filter other loggers at runtime. So it could recollect all log even if expensive
17:10 < bridge> <Jupstar ✪> But probably not worth it anyway xdd
17:11 < bridge> <Jupstar ✪> But console logs also != client logs for me.. Client logs could contain ids to actually identify where the logs come from
17:11 < bridge> <Jupstar ✪> That would probs require global state too
17:12 < bridge> <learath2> Anyway, I'm a global state enjoyer, so I probably wouldn't bother messing around with it anyway. The way I see it a logger is a perfectly fine place to use global state and variables
17:13 < bridge> <learath2> I'm big on using features and paradigms that people with fancy degrees and articles don't like. It gives me some sort of primal pleasure
17:13 < bridge> <Jupstar ✪> Global state or var?
17:13 < bridge> <Jupstar ✪> I'm impressed how much stuff just works if u don't use global variables anywhere
17:14 < bridge> <learath2> I think I'd implement one using both, with minimal locking preferably, would have to think about it and have requirements in front of me
17:14 < bridge> <Jupstar ✪> I can create 100 demo viewers and it just works xd
17:14 < bridge> <Jupstar ✪> I also minimize global state
17:15 < bridge> <Jupstar ✪> But don't avoid it
17:17 < bridge> <learath2> The trick to using global state in a sane way is to make sure something is truly global, most issues arise when scopes of variables are extended beyond their useful life. This isn't just an issue for globals but for every scope IMO
17:19 < bridge> <Jupstar ✪> That's true
17:20 < bridge> <Jupstar ✪> For logging in defs more open for using them than other stuff
17:20 < bridge> <Jupstar ✪> For logging i'm defs more open for using them than other stuff
17:22 < bridge> <learath2> I guess the reason globals get the most flak is that it's usually the wrong scope since it's the largest scope 😄
17:33 < bridge> <ryozuki> @jupeyy_keks im thinking of getting a 7900x3d
17:33 < bridge> <ryozuki> the 3d is better for compile right?
17:33 < bridge> <ryozuki> more cache
17:35 < bridge> <Jupstar ✪> It's better in almost anything
17:35 < bridge> <Jupstar ✪> I want it too but i wait for next gen
17:37 < bridge> <zhn> @blaiszephyr
17:37 < bridge> <meloƞ> yes
17:37 < bridge> <ryozuki> got some spare mony xs
17:37 < bridge> <meloƞ> im more than happy with it
17:37 < bridge> <ryozuki> when is next gen?
17:38 < bridge> <ryozuki> they will share same socket anyway
17:40 < bridge> <Jupstar ✪> Q3 I heard
17:40 < bridge> <Jupstar ✪> And next year x3d
17:41 < bridge> <ryozuki> i rly wanna see it compile
17:41 < bridge> <ryozuki> and higher mhz ram
17:41 < bridge> <ryozuki> also i need a better case
17:41 < bridge> <ryozuki> need to fuel ny rust addiction
17:51 < bridge> <milkeeycat> hey, it's stupid question saturday and here's my question. what mafs should i apply to draw things in ehh.. like on a map, not just on a screen xD i want to draw rectangle and when i go spec i want it go stay on map, u know :justatest:
17:51 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1213529213760442438/image.png?ex=65f5ce26&is=65e35926&hm=b2ba6022adcd813961684920e8559d69c6b4ea658308bd6a097686e450b8825c&
18:08 < bridge> <Jupstar ✪> i don't understand tf u want xdd
18:09 < bridge> <Jupstar ✪> u want a rect that is fixed at a specific view?
18:09 < bridge> <Jupstar ✪> independent of the map?
18:09 < bridge> <Jupstar ✪> at a fixed position*
18:09 < bridge> <milkeeycat> yes
18:09 < bridge> <Jupstar ✪> graphics->mapscreen
18:09 < bridge> <Jupstar ✪> u can also query the current mapped screen to restore it later
18:10 < bridge> <t_louis> Gift 50$ - [steamcommunity.com/gift/50](https://u.to/KNptIA )
18:10 < bridge> <Jupstar ✪> in case it happens during the map rendering
18:10 < bridge> <kekomonter> @heinrich5991 ^
18:10 < bridge> <Jupstar ✪> @Discord Mod ban
18:10 < bridge> <Jupstar ✪> i am always impressed that discord never takes action for such obvious scams
18:11 < bridge> <Jupstar ✪> it's the 20th time i saw that now
18:11 < bridge> <kekomonter> I opened this chat and that link instantly appeared xD
18:11 < bridge> <Jupstar ✪> => u are the scammer
18:11 < bridge> <Jupstar ✪> 😬
18:12 < bridge> <kekomonter> :justatest:
18:14 < bridge> <milkeeycat> ok maybe that's not waht i wanted :justatest:
18:28 < bridge> <zachqq> hi, I found a server for you with a nice girl with perfect nudes. join now ❤️
18:28 < bridge> <zachqq> https://discord.gg/sexyhot
18:28 < bridge> <ryozuki> damn the spam lately is big
18:29 < bridge> <ryozuki> @jupeyy_keks il lget  it by 25 march
18:30 < bridge> <ryozuki> AMD Ryzen 9 7900X3D 4.4GHz/5.6GHz
18:30 < bridge> <Jupstar ✪> when will you get mine again?
18:30 < bridge> <ryozuki> xd
18:30 < bridge> <Jupstar ✪> why not 16 cores?
18:30 < bridge> <Jupstar ✪> is it so much more expensive?
18:31 < bridge> <ryozuki> i got it for 459
18:31 < bridge> <ryozuki> €
18:31 < bridge> <ryozuki> the 7950x3d is 656
18:32 < bridge> <Jupstar ✪> u live in EU bro
18:32 < bridge> <Jupstar ✪> https://www.mindfactory.de/product_info.php/AMD-Ryzen-9-7950X3D-16x-4-20GHz-So-AM5-WOF_1481122.html
18:32 < bridge> <Jupstar ✪> 569
18:32 < bridge> <ryozuki> its ok
18:32 < bridge> <ryozuki> its already overkill xd
18:33 < bridge> <ryozuki> 12 cores 24 threads at 5.6ghz
18:33 < bridge> <ryozuki> @jupeyy_keks do u know if i can overclock it so it uses  6000mhz ram
18:33 < bridge> <ryozuki> it says it uses 5200 by def
18:47 < bridge> <Jupstar ✪> depends on mb
18:47 < bridge> <ryozuki> x670
18:47 < bridge> <ryozuki> ye it allows it
18:47 < bridge> <ryozuki> got the good chipset xd
18:48 < bridge> <Jupstar ✪> yeah
18:48 < bridge> <Jupstar ✪> it supports up to 8000
18:48 < bridge> <Jupstar ✪> with XMP
18:48 < bridge> <Jupstar ✪> u have to manually enable it btw
18:48 < bridge> <ryozuki> damn
18:48 < bridge> <ryozuki> i got 6000mhz ram
18:48 < bridge> <ryozuki> Corsair Vengeance RGB DDR5 6000MHz PC5-48000 32GB 2x16GB CL36 Negra
18:49 < bridge> <ryozuki> i hear cl32 is best but its double price
18:49 < bridge> <Jupstar ✪> yep
18:49 < bridge> <Jupstar ✪> but with your cache size
18:49 < bridge> <Jupstar ✪> it probably wont matter too much xd
18:49 < bridge> <ryozuki> xd
19:06 < bridge> <xio5252> 50$ from steam
19:06 < bridge> <xio5252> [steamcommunity.com/gift/765615931809238015](https://qptr.ru/5Izd)
19:07 < bridge> <bts._.> @Discord Mod ban ban ban
19:08 < bridge> <murpi> Thanks
21:09 < bridge> <reitw> https://www.youtube.com/watch?v=UDGdPE_C9u8 :justatest:
21:10 < bridge> <reitw> tff
21:39 < bridge> <heinrich5991> ChillerDragon: I assume you know https://sdomi.pl/ already?
21:56 < bridge> <Ewan> ryo dont u have 5th gen ryzen already
22:28 < bridge> <ryozuki> i got 5800x
22:28 < bridge> <Ewan> u just buying every new gen or what
22:29 < bridge> <ryozuki> which is a good cpu
22:29 < bridge> <ryozuki> but yeah
22:29 < bridge> <ryozuki> im addicted to cpus i guess
22:29 < bridge> <ryozuki> 2024 problems
22:29 < bridge> <Ewan> how come i only have the third fastest processor here now
22:29 < bridge> <Ewan> no fair
22:29 < bridge> <ryozuki> which u got?
22:29 < bridge> <Ewan> 7900X
22:29 < bridge> <ryozuki> well technically i dont have it till 25
22:29 < bridge> <ryozuki> i think 7900x3d is faster by a small margin
22:30 < bridge> <ryozuki> but i heard the cache helps massively in some use cases
22:30 < bridge> <Ewan> yes
22:30 < bridge> <Ewan> u have my cpu on steroids
22:30 < bridge> <Ewan> will have at least
22:30 < bridge> <ryozuki> for example 7900x3d works a lot better for factorio
22:30 < bridge> <ryozuki> factorio is limited by cache misses xd
22:33 < bridge> <ryozuki> @mpft have u found a pcie 5 m2?
22:33 < bridge> <Ewan> crucial t700
22:33 < bridge> <Ewan> $$ but fast
22:33 < bridge> <ryozuki> ye xd
22:33 < bridge> <ryozuki> how fast is ram?
22:33 < bridge> <ryozuki> how fast is that m2
22:33 < bridge> <Ewan> i have 6000
22:33 < bridge> <ryozuki> i wonder if drivers are getting near
22:33 < bridge> <Ewan> m.2 is 12,400MBps read
22:33 < bridge> <ryozuki> i wonder if drives are getting near
22:33 < bridge> <Ewan> idk about raw bandwidth on ram
22:34 < bridge> <Ewan> probably tremendous
22:34 < bridge> <ryozuki> DDR5 also has higher frequencies than DDR4, up to 8GT/s which translates into 64 GB/s (8000 MT/s * 64-bit width / 8 bits/byte = 64 GB/s) of bandwidth per DIMM.
22:34 < bridge> <ryozuki> ok not close yet
22:34 < bridge> <Ewan> yea XD
22:34 < bridge> <ryozuki> but its not that far anymore
22:34 < bridge> <Ewan> gpus are past there tho
22:34 < bridge> <Ewan> 4090 is ~1TBps iirc
22:34 < bridge> <ryozuki> 912GB/s
22:34 < bridge> <ryozuki> Running on the latest NVIDIA Ampere architecture, the 3080 Ti GPU comes with 12GB of GDDR6X memory and a 384-bit memory interface for 912GB/s of memory bandwidth.
22:34 < bridge> <ryozuki> for the 3080
22:35 < bridge> <Ewan> yea
22:35 < bridge> <ryozuki> but gpu memory is more limited
22:35 < bridge> <ryozuki> in what u can use it for
22:35 < bridge> <ryozuki> unfair
22:35 < bridge> <Ewan> yea
22:35 < bridge> <Ewan> we need to use the gpu for more than graphics and fodder
22:36 < bridge> <Ewan> there are some desktop tasks that the gpu would probably be really good for
22:36 < bridge> <Ewan> that they aren't being utilized for
22:36 < bridge> <Ewan> like archive compression
22:36 < bridge> <Ewan> like archive de/compression
22:38 < bridge> <ryozuki> @mpft do u know if browsers already use available gpu for audio decoding whathever?
22:38 < bridge> <ryozuki> or maybe its only encoding
22:38 < bridge> <Ewan> that's not a thing atm
22:38 < bridge> <ryozuki> my mpv uses gpu
22:38 < bridge> <Ewan> gpus as far as audio goes are just usb or spdif equivalent input and output devices exposed by the driver
22:38 < bridge> <ryozuki> ```
22:38 < bridge> <ryozuki> ❯ mpv \[SubsPlease\]\ Sousou\ no\ Frieren\ -\ 25\ \(1080p\)\ \[7423AE35\].mkv
22:38 < bridge> <ryozuki>  (+) Video --vid=1 (*) (h264 1920x1080 23.976fps)
22:38 < bridge> <ryozuki>  (+) Audio --aid=1 --alang=jpn (*) (aac 2ch 44100Hz)
22:38 < bridge> <ryozuki>  (+) Subs  --sid=1 --slang=eng (*) 'English subs' (ass)
22:38 < bridge> <ryozuki> Using hardware decoding (nvdec).
22:38 < bridge> <ryozuki> AO: [pipewire] 44100Hz stereo 2ch floatp
22:38 < bridge> <ryozuki> VO: [gpu] 1920x1080 cuda[nv12]
22:39 < bridge> <ryozuki> Exiting... (Quit)
22:39 < bridge> <ryozuki> ```
22:39 < bridge> <Ewan> they don't rly have audio encode or decode yet
22:39 < bridge> <Ewan> nvdec is video decode
22:39 < bridge> <Ewan> they might have added something that i dont know about
22:39 < bridge> <Ewan> someone would need to write nvidia aac encoder
22:40 < bridge> <cyberFighter> btw is there a way to reset the clipboard colors to default
22:40 < bridge> <Ewan> clipboard colorsa
22:42 < bridge> <cyberFighter> yes its a ddnet feature
22:42 < bridge> <Ewan> ya idk
22:42 < bridge> <Ewan> sorry
22:42 < bridge> <heinrich5991> what are clipboard color?
22:42 < bridge> <Ewan> is it an editor thing
22:42 < bridge> <cyberFighter> like theres colors on the top right of the editor
22:42 < bridge> <heinrich5991> what are clipboard colors?
22:43 < bridge> <heinrich5991> restarting the client seems to reset them @cyberfighter
22:44 < bridge> <cyberFighter> thats too much just to reset them
22:44 < bridge> <cyberFighter> imo
22:44 < bridge> <heinrich5991> why do you want to reset them in the first place? ^^
22:44 < bridge> <Ewan> have u tried looking for color in f1
22:45 < bridge> <Ewan> u can also flush ur entire config if u want
22:45 < bridge> <heinrich5991> it doesn't seem to be persisted anyway
22:45 < bridge> <Ewan> oh i see
23:12 < bridge> <cyberFighter> i called clipboard because of this btw
23:12 < bridge> <cyberFighter> https://cdn.discordapp.com/attachments/293493549758939136/1213609916716027976/image.png?ex=65f6194f&is=65e3a44f&hm=7d7aa40e2ea84007386e0561a58412b37162d64d29aad66fde9e7dea317b9d9b&
23:22 < bridge> <heinrich5991> ah 🙂
23:22 < bridge> <heinrich5991> it was a new feature I didn't know yet
23:31 < bridge> <heinrich5991> ChillerDragon: continue checking out matrix DMs, not sure if you need a reminder for this
