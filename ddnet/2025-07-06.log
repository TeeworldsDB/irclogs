00:07 < bridge> <pioooooo> I would like to delete this check since there is only few such maps where you can skip start line (correct me). And speedrun strategies already include sacrifies some tees in the run, and the t0 skip isn't much different from those imo. https://www.bilibili.com/video/BV1ykjtzLEeJ And this (stopping team from finish) behavior has caused many issues.
00:28 < bridge> <louis> allowing teams to kill tees at the start is kinda annoying, there are some 4p starts that make certain 2p ranks hard to beat
00:30 < bridge> <syrinok> Ya I've long complained about this
00:38 < bridge> <kebscs> idk whats happening
00:38 < bridge> <kebscs> :tear:
00:44 < bridge> <pioooooo> but like we haven't disallow killing tee midrun, why don't we allow t0 skips that are even more rare
01:47 < bridge> <louis> startline skip? they need to be manually deleted cuz it allows u to get 0.02s time
01:48 < bridge> <louis> so they just made it impossible
02:14 < bridge> <pioooooo> This is achieved by only allow players who have touched startline to finish. What I want to allow is leave/kill before touching startline.
07:02 < ws-client> <ChillerDragon> finally managed to upgrade to c++20 xd found some custom cmake script in cmake/ dir that used 17 bruv the other project had a submodule with c++17 stuff
07:45 < bridge> <kekomonter> Looks funny
07:45 < bridge> <kekomonter> https://cdn.discordapp.com/attachments/293493549758939136/1391293841788764170/DBB8D383-0684-4DEF-BF15-26988E6D85BC.png?ex=686b5edc&is=686a0d5c&hm=907cbf9c35337d99a8c64872e6f31efc7c8909f0fd38d12fc2257f991514615c&
08:24 < bridge> <triki> can someone say its alredy out?https://github.com/ddnet/ddnet/pull/10425
08:25 < bridge> <triki> also can u learn me how to detect its alredy in current version or no?
08:27 < bridge> <TsFreeeeeeeeeddie> if it is merged then you can just use it in the nightly version
08:30 < bridge> <TsFreeeeeeeeeddie> ddnet release about once per month or longer, so if it is only merged last week it's almost 100% not released
08:30 < bridge> <TsFreeeeeeeeeddie> ddnet release about once per month or longer, so if it is only merged last week it's almost 100% not released on release builds
08:31 < bridge> <kebscs> Hold alt
08:32 < bridge> <triki> but it have chance this change can “jumping on the last wagon.”
08:33 < bridge> <triki> what alt? u mean check in editor? but i wanna smth like 100% be sure its released or not, cus sometimes updates is failed but without any error.
08:34 < bridge> <kebscs> On nightly hold alt in editor and move the mouse
08:53 < bridge> <teero777> TIL you can save any game with `gcore <pid>`
08:56 < bridge> <milkeeycat> Could any rust pro help me with a compiler error? I have no idea what to do this with error:
08:56 < bridge> <milkeeycat> ```
08:56 < bridge> <milkeeycat> error[E0521]: borrowed data escapes outside of method
08:56 < bridge> <milkeeycat>    --> src/targets/amd64/mod.rs:239:9
08:56 < bridge> <milkeeycat>     |
08:56 < bridge> <milkeeycat> 228 |     pub fn add_mir_passes(&self, pass_manager: &mut mir::pass::ModulePassManager<'_, Self>) {
08:56 < bridge> <milkeeycat>     |                                  ------------
08:56 < bridge> <milkeeycat>     |                                  |
08:56 < bridge> <milkeeycat>     |                                  `pass_manager` is a reference that is only valid in the method body
08:56 < bridge> <milkeeycat>     |                                  has type `&mut PassManager<'1, mir::Module, amd64::Target>`
08:56 < bridge> <milkeeycat> ...
08:56 < bridge> <milkeeycat> 239 |         pass_manager.add_pass(FunctionToModuleAdaptor::new(fn_pass_manager));
08:56 < bridge> <milkeeycat>     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
08:56 < bridge> <milkeeycat>     |         |
08:56 < bridge> <milkeeycat>     |         `pass_manager` escapes the method body here
08:56 < bridge> <milkeeycat>     |         argument requires that `'1` must outlive `'static`
08:56 < bridge> <milkeeycat> ```
08:56 < bridge> <milkeeycat> Here's the code https://github.com/MilkeeyCat/tja/tree/AAAAAAAAAAAAAAAAAA
08:56 < bridge> <teero777> i think an llm can help you xd
09:04 < bridge> <Jupstar ✪> Change ModulePassManager<'_...> to static
09:41 < bridge> <milkeeycat> Hm, I thought if I add \`static to  `ModulePassManager` it wouldn't work but it does :thonk: thanks xd
09:41 < bridge> <milkeeycat> Hm, I thought if I add `'static` to  `ModulePassManager` it wouldn't work but it does :thonk: thanks xd
09:43 < bridge> <milkeeycat> nvm, it doesn't :lol:
09:46 < bridge> <milkeeycat> @jupeyy_keks I use that method like this
09:46 < bridge> <milkeeycat> ```rust
09:46 < bridge> <milkeeycat> fn test() {
09:46 < bridge> <milkeeycat>     let mut hir = Hir::new();
09:46 < bridge> <milkeeycat>     let target = amd64::Target::new();
09:46 < bridge> <milkeeycat> 
09:46 < bridge> <milkeeycat>     for module in &mut hir.modules {
09:46 < bridge> <milkeeycat>         let mut ctx = tja::pass::Context::new(&hir.ty_storage, amd64::Target::new());
09:46 < bridge> <milkeeycat>         let mut hir_module_pm = hir::pass::ModulePassManager::new();
09:46 < bridge> <milkeeycat> 
09:46 < bridge> <milkeeycat>         target.add_hir_passes(&mut hir_module_pm);
09:46 < bridge> <milkeeycat>         hir_module_pm.run(module, &mut ctx);
09:46 < bridge> <milkeeycat> 
09:46 < bridge> <milkeeycat>         let mut mir_module = ctx.mir_module.take().unwrap();
09:46 < bridge> <milkeeycat>         let mut mir_module_pm = mir::pass::ModulePassManager::new();
09:46 < bridge> <milkeeycat> 
09:46 < bridge> <milkeeycat>         target.add_mir_passes(&mut mir_module_pm);
09:46 < bridge> <milkeeycat>         mir_module_pm.run(&mut mir_module, &mut ctx);
09:46 < bridge> <milkeeycat>     }
09:46 < bridge> <milkeeycat> }
09:46 < bridge> <milkeeycat> ```
09:46 < bridge> <milkeeycat> it means that `hir.ty_storage` has to be borrowed for `'static` but it's not possible
09:48 < bridge> <milkeeycat> ```rust
09:48 < bridge> <milkeeycat>     pub fn add_pass<P: Pass<'hir, U, T> + 'static>(&mut self, pass: P) {
09:48 < bridge> <milkeeycat>         self.passes.push(Box::new(pass));
09:48 < bridge> <milkeeycat>     }
09:48 < bridge> <milkeeycat> ```
09:48 < bridge> <milkeeycat> maybe this is wrong but it doesn't work without `'static` :\
09:49 < bridge> <Jupstar ✪> And if u introduce a new lifetime and force function to module adapter and the module pass manager to use it?
10:05 < bridge> <ryozuki> morning
10:05 < bridge> <teero777> morning
10:05 < bridge> <milkeeycat> I changed
10:05 < bridge> <milkeeycat> ```rust
10:05 < bridge> <milkeeycat>     pub fn add_pass<P: Pass<'hir, U, T> + 'pass>(&mut self, pass: P) {
10:05 < bridge> <milkeeycat>         self.passes.push(Box::new(pass));
10:05 < bridge> <milkeeycat>     }
10:05 < bridge> <milkeeycat> ```
10:05 < bridge> <milkeeycat> and
10:05 < bridge> <milkeeycat> ```rust
10:05 < bridge> <milkeeycat> pub fn add_mir_passes<'a>(
10:05 < bridge> <milkeeycat>         &self,
10:05 < bridge> <milkeeycat>         pass_manager: &mut mir::pass::ModulePassManager<'a, 'a, Self>,
10:05 < bridge> <milkeeycat>     ) 
10:06 < bridge> <milkeeycat> ```
10:06 < bridge> <milkeeycat> and it works, thanks :DD
10:06 < bridge> <ryozuki> does anyone know if adding "metrics", even if they are atomic counters, or maybe clocks can remove optimizations that would otherwise be added
10:06 < bridge> <ryozuki> my guess is yes, that trying to measure perfomance is like quantum physics
10:06 < bridge> <ryozuki> if u observe it its not the real deal
10:06 < bridge> <ryozuki> altho using perf doesnt modify the program, but u dont rly know the real time
10:06 < bridge> <teero777> yea, best you can do is observe externally in an isolated environment
10:06 < bridge> <ryozuki> wdym by externally
10:06 < bridge> <ryozuki> i guess maybe u can measure cpu ticks or smth
10:07 < bridge> <teero777> for example the `time` tool on linux xd
10:07 < bridge> <teero777> even tho it's not really accurate
10:07 < bridge> <teero777> any cpu use will affect your perf
10:07 < bridge> <teero777> even different cpu temps will have a visible effect
10:07 < bridge> <teero777> so hard to benchmark stuff xd
10:07 < bridge> <ryozuki> ye xd
10:07 < bridge> <ryozuki> well hard to bench stuff to the nanosecond
10:08 < bridge> <ryozuki> with ms accuracy its not that bad i g
10:08 < bridge> <ryozuki> this is why if u can bench something for a longer time than just a 200ns function its better
10:08 < bridge> <ryozuki> cuz u can get more accurate results
10:08 < bridge> <teero777> also for my ddnet physics benchmarks i just do like 10 000 000 ticks and measure how long that took, then multiply it so i get TPS
10:09 < bridge> <teero777> the std::chrono in the loop was the bottleneck xD so thats why
10:09 < bridge> <ryozuki> xd
10:09 < bridge> <teero777> also never use `rand()` it's slow asf
10:09 < bridge> <ryozuki> btw @teero777 do u use perf linux tool?
10:09 < bridge> <ryozuki> i recommend using samply
10:09 < bridge> <teero777> yes
10:09 < bridge> <ryozuki> its a rly nice tool i use all time
10:09 < bridge> <ryozuki> it uses perf under the hood and opens it on firefox profiler
10:10 < bridge> <teero777> https://samply.app/ ?! xd
10:10 < bridge> <ryozuki> u can see all, stack charts, flame graphs and functions
10:10 < bridge> <Jupstar ✪> Yeah cpus are not really nanosecond accurate, they approximate the values. But microseconds should be possible
10:10 < bridge> <ryozuki> https://github.com/mstange/samply
10:10 < bridge> <ryozuki> samply record ./my-application my-arguments
10:10 < bridge> <ryozuki> u can pass -r 2000 for 2khz
10:10 < bridge> <ryozuki> or more
10:10 < bridge> <ryozuki> default is 1k
10:10 < bridge> <teero777> i see
10:10 < bridge> <ryozuki> lately at work im working on optimizing
10:10 < bridge> <ryozuki> i use this all the time
10:10 < bridge> <ryozuki> helped me improve perf by 100% xd
10:11 < bridge> <teero777> i was just using gdb because my code was stuck (it was checking 25 million nodes for the one that finished fastest) and i didn't know doing `jump` in gdb can fking destroy the process. so yea i lost all my progress xD
10:12 < bridge> <teero777> was only ~8hrs of computation tho
10:12 < bridge> <teero777> looks good i'll try it some time when i need
10:13 < bridge> <ryozuki> @teero777 example ddnet profile https://share.firefox.dev/44eQFfa
10:13 < bridge> <ryozuki> u can share them easily too
10:13 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1391331198604673074/image.png?ex=686b81a7&is=686a3027&hm=96762f0c1f489dc7be59f8984e0b8c2b7c43623a33ed08837cd75bf5cb5d656d&
10:13 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1391331247711846452/image.png?ex=686b81b3&is=686a3033&hm=865fb48bea36e695ea5c4e761ef46934fae527d0f86201816a0e062fa32e1640&
10:13 < bridge> <ryozuki> functions as time goes
10:13 < bridge> <ryozuki> u can see what function the program is at
10:16 < bridge> <teero777> this is so annoying tbh. i can't even listen to music or basically do anything while doing optimization
10:16 < bridge> <teero777> i need some seperate server for benchmarking that sits in a cooled room
10:16 < bridge> <ryozuki> well this depends if u have a cpu with lot of cores
10:16 < bridge> <ryozuki> it wont affect much
10:16 < bridge> <ryozuki> ur music is probs on another core
10:17 < bridge> <ryozuki> are u measuring ns or what?
10:17 < bridge> <ryozuki> xd
10:17 < bridge> <teero777> many programs like firefox do things on all cores
10:17 < bridge> <ryozuki> well u can use nice to give priority
10:17 < bridge> <teero777> im measuring in ticks per second xd
10:17 < bridge> <teero777> and having firefox open takes away ~400k tps.
10:18 < bridge> <teero777> and some optimizations give less than that
10:18 < bridge> <ryozuki> what cpu u got
10:18 < bridge> <teero777> `CPU: Intel(R) Xeon(R) E3-1240 v5 (8) @ 3.90 GHz`
10:18 < bridge> <teero777> 4 core shit
10:18 < bridge> <ryozuki> i guess ur micro optimizing right
10:18 < bridge> <ryozuki> big optimizations are usually from design choices
10:19 < bridge> <teero777> there are no more big optimizations unless theres something groundbreaking
10:19 < bridge> <ryozuki> are u optimizing without changing physics or breaking current ones?
10:19 < bridge> <teero777> without changing physics
10:19 < bridge> <teero777> that's the hard part lol
10:19 < bridge> <ryozuki> i guess with that constraint yeah xd
10:19 < bridge> <teero777> else i'd get 20-30mil per core easily
12:27 < bridge> <Solly (bun bun)> ^ das alot of commits
12:28 < bridge> <Solly (bun bun)> we gotta squasheeee
12:28 < bridge> <Solly (bun bun)> what idiot didnt squash
12:28 < bridge> <Solly (bun bun)> again guys?>???
12:28 < bridge> <kebscs> 3 commits for 4 lines changed
12:28 < bridge> <Solly (bun bun)> thank u thank u
12:34 < bridge> <melon> why didnt you just rebase :c
12:35 < bridge> <melon> ah nvm each commit is actually a fix
12:35 < bridge> <melon> 
12:35 < bridge> <melon> das okay then
12:40 < bridge> <robyt3> Adding support for multiple editor maps be like: 1 commit, 62 files changed, 3756 insertions(+), 3390 deletions(-) :justatest:
12:40 < bridge> <Solly (bun bun)> when totar easteregg
12:41 < bridge> <Solly (bun bun)> urhmm how is anyone meant to reviewww thiiisss
12:41 < bridge> <kebscs> thats at least 100 commits in solly's prs
12:41 < bridge> <Solly (bun bun)> exactly
12:41 < bridge> <melon> jupsti should, he implemented the same thing in ddnet-rs
12:41 < bridge> <melon> :3
12:41 < bridge> <melon> gosh i forgor
12:41 < bridge> <melon> let me see if i even branched off that, i git reset --hard my main branch on taterino
12:41 < bridge> <melon> let me see if i even branched that off, i git reset --hard my main branch on taterino
12:42 < bridge> <Solly (bun bun)> become good, become tater fork
12:42 < bridge> <melon> meh i dont like to jiggle around with 2 remotes :kek:
12:43 < bridge> <Solly (bun bun)> ```
12:43 < bridge> <Solly (bun bun)> > git remote
12:43 < bridge> <Solly (bun bun)> cux
12:43 < bridge> <Solly (bun bun)> ddnet
12:43 < bridge> <Solly (bun bun)> inf
12:44 < bridge> <Solly (bun bun)> insta
12:44 < bridge> <Solly (bun bun)> kritofer
12:44 < bridge> <Solly (bun bun)> origin
12:44 < bridge> <Solly (bun bun)> private-dump
12:44 < bridge> <Solly (bun bun)> pulse
12:44 < bridge> <Solly (bun bun)> roby
12:44 < bridge> <Solly (bun bun)> sollypulse
12:44 < bridge> <Solly (bun bun)> tater
12:44 < bridge> <Solly (bun bun)> ```
12:44 < bridge> <melon> :justatest:
12:44 < bridge> <Solly (bun bun)> ````
12:44 < bridge> <Solly (bun bun)>   add_sv_register_port
12:44 < bridge> <Solly (bun bun)>   audio_packs
12:44 < bridge> <Solly (bun bun)>   better_cmake
12:44 < bridge> <Solly (bun bun)>   better_custom_flags
12:44 < bridge> <Solly (bun bun)>   better_enums_register
12:45 < bridge> <Solly (bun bun)>   better_fav_groups
12:45 < bridge> <Solly (bun bun)>   better_server_finish_time
12:45 < bridge> <Solly (bun bun)>   character_h_cleanup
12:45 < bridge> <Solly (bun bun)>   chat_cleanup
12:45 < bridge> <Solly (bun bun)>   cl_chat_background_color
12:45 < bridge> <Solly (bun bun)>   clean_multiline_server_chats
12:45 < bridge> <Solly (bun bun)>   clean_multiview
12:45 < bridge> <Solly (bun bun)>   clean_print_colors_binds_cpp
12:45 < bridge> <Solly (bun bun)>   clean_system_h
12:45 < bridge> <Solly (bun bun)>   cleanup_console
12:45 < bridge> <Solly (bun bun)>   cleanup_hud_h
12:45 < bridge> <Solly (bun bun)>   console-cleanup
12:45 < bridge> <Solly (bun bun)>   console-register-std-function
12:45 < bridge> <Solly (bun bun)>   console_cleanup
12:45 < bridge> <Solly (bun bun)>   console_register_functional_api
12:45 < bridge> <Solly (bun bun)>   contributing_enum_style
12:45 < bridge> <Solly (bun bun)>   contributing_patch_2
12:45 < bridge> <Solly (bun bun)>   crenderinfo_refactor
12:45 < bridge> <Solly (bun bun)>   demo_finer_controls
12:45 < bridge> <Solly (bun bun)>   discord_stuff
12:45 < bridge> <Solly (bun bun)>   extract_console_str_to_color
12:45 < bridge> <Solly (bun bun)>   fix_10224
12:45 < bridge> <Solly (bun bun)>   fix_demo_thing
12:45 < bridge> <Solly (bun bun)>   fix_name_plate_direction_weirdness
12:45 < bridge> <Solly (bun bun)>   fix_pulse
12:45 < bridge> <melon> what in the branchdump is this
12:46 < bridge> <Solly (bun bun)> deleting braches which are unused or merged is like removing scar from a brutal fight
12:47 < bridge> <melon> :justatest:
12:47 < bridge> <melon> https://cdn.discordapp.com/attachments/293493549758939136/1391369937301536828/image.png?ex=686ba5bb&is=686a543b&hm=72873d88b9739f88dc4672851af19911924adbf241bd745a4e5947761b8bcb4c&
12:47 < bridge> <Solly (bun bun)> ;0
12:51 < bridge> <robyt3> ```
12:51 < bridge> <robyt3> $ git branch | wc -l
12:51 < bridge> <robyt3> 120
12:51 < bridge> <robyt3> ```
12:51 < bridge> <robyt3> And I automatically delete merged branches
12:52 < bridge> <Solly (bun bun)> woaw roby thats crazy i thought u wer elike a neatfreak with this sorta stuff
12:52 < bridge> <Solly (bun bun)> plz dont kill me w ur superior number of branhces
12:57 < bridge> <robyt3> It used to be more organized, but it's often easier to start on a change than to finish it. I don't use git stash except for very temporary changes as well.
12:58 < bridge> <kebscs> why even delete branches
12:58 < bridge> <kebscs> i have 124 for ddnet, doesnt bother me
12:59 < bridge> <robyt3> I can more quickly find the branch I want with auto complete because they are named consistently to me. I already need a separate list to organize the branches into groups of complete they are. If I never deleted branches, I would have more than 1000 now.
12:59 < bridge> <robyt3> I can more quickly find the branch I want with auto complete because they are named consistently to me. I already need a separate list to organize the branches into groups of how complete they are. If I never deleted branches, I would have more than 1000 now.
13:00 < bridge> <robyt3> It's also fully automated by a script that also fetches upstream, pushes master to origin and prunes remote branches
13:27 < bridge> <patiga> @jupeyy_keks 
13:27 < bridge> <patiga> ```
13:27 < bridge> <patiga> Rendering a total of 1638400 sprites
13:27 < bridge> <patiga> Gathering 10 samples
13:27 < bridge> <patiga> Sample 0 finished in 1.04 seconds (1581318 sprites per second)
13:27 < bridge> <patiga> Sample 1 finished in 1.49 seconds (1100863 sprites per second)
13:27 < bridge> <patiga> Sample 2 finished in 1.48 seconds (1104508 sprites per second)
13:27 < bridge> <patiga> Sample 3 finished in 1.46 seconds (1118675 sprites per second)
13:27 < bridge> <patiga> Sample 4 finished in 1.44 seconds (1137876 sprites per second)
13:27 < bridge> <patiga> Sample 5 finished in 1.49 seconds (1099675 sprites per second)
13:27 < bridge> <patiga> Sample 6 finished in 1.46 seconds (1122297 sprites per second)
13:27 < bridge> <patiga> Sample 7 finished in 1.43 seconds (1145400 sprites per second)
13:27 < bridge> <patiga> Sample 8 finished in 1.45 seconds (1126135 sprites per second)
13:27 < bridge> <patiga> Sample 9 finished in 1.46 seconds (1120720 sprites per second)
13:27 < bridge> <patiga> =====================
13:28 < bridge> <patiga> Duration mean: 1.46 seconds
13:28 < bridge> <patiga> Duration variance: 0.00 seconds
13:28 < bridge> <patiga> ```
13:28 < bridge> <patiga> (for variance + mean it ignores one outlier on each side)
13:28 < bridge> <patiga> I'm scared
13:28 < bridge> <patiga> why is the first run so much faster
13:28 < bridge> <patiga> smth smth throttling after it reached a certain temperature?
14:12 < bridge> <patiga> wait this was on my laptop so an integrated gpu
14:50 < bridge> <patiga> still tho
14:59 < bridge> <kebscs> @totar just figured why you have solution view and not cmake with folders
14:59 < bridge> <kebscs> ure using cmake generate
14:59 < bridge> <kebscs> 😆
15:03 < bridge> <kebscs> ok i enabled it, clang tidy and its building for 10 minutes now
15:03 < bridge> <kebscs> might go back to the usual
15:09 < bridge> <teero777> we got a color change again xd
15:09 < bridge> <ryozuki> omg
15:09 < bridge> <ryozuki> why
15:13 < bridge> <teero777> i blame patiga
15:29 < bridge> <melon> did we alter prediction in any way?
15:29 < bridge> <melon> tees look weird on latest master
15:30 < bridge> <melon> they look like the client tries to predict movement on non-moving tees
15:30 < bridge> <Jupstar ✪> Mh that sounds like not a lot. I assume most time is spent on cpu?
15:30 < bridge> <Jupstar ✪> Updating positions
15:31 < bridge> <kebscs> How to reproduce
15:31 < bridge> <melon> i'll send a video 1 sec
15:31 < bridge> <melon> https://cdn.discordapp.com/attachments/293493549758939136/1391411278274363482/weird.mp4?ex=686bcc3b&is=686a7abb&hm=a61226d444c5b1f03ac7b3b8cbc1acdbb932e26f905cfde637025bab9f8cad2a&
15:31 < bridge> <melon> look at Kei & Baumwolle
15:33 < bridge> <kebscs> Did you record demo of that?
15:33 < bridge> <kebscs> If also happens in demo
15:36 < bridge> <melon> interesting, doesnt happen in demo
15:37 < bridge> <louis> nah baumwolfe is just twitchy today
15:37 < bridge> <louis> he had too much coffee
15:39 < bridge> <kebscs> Then I guess preinput applying to an incorrect tick
15:39 < bridge> <kebscs> Will check later
15:40 < bridge> <kebscs> Also servers didn't restart for so long already preinput might be delayed in most cases so it's not working very properly
16:24 < bridge> <kebscs> whats your and theirs prediction margin
16:25 < bridge> <melon> never changed my prediction margin, its 10
16:26 < bridge> <melon> wolle has it on default aswell
16:38 < bridge> <Jupstar ✪> TreeWolve
16:39 < bridge> <kebscs> idk how to reproduce reliably to test
16:49 < bridge> <kebscs> what im guessing is since it places at [tick %200]
16:50 < bridge> <kebscs> the msg might arrive late or smth and it replaces 1 correct tick
16:50 < bridge> <kebscs> but cant testr
16:50 < bridge> <kebscs> but cant test
18:39 < bridge> <totar> I thought you preferred to the cmake with folders on purpose
18:39 < bridge> <totar> The repo readme says to use the generators
18:40 < bridge> <kebscs> no it doesnt, it says to open as folder
18:40 < bridge> <totar> Oh
18:40 < bridge> <kebscs> https://cdn.discordapp.com/attachments/293493549758939136/1391458815320526938/image.png?ex=686bf881&is=686aa701&hm=9164f02c2e27b0af71e606c32eafe49bbd4574fc2abb4dfd876356c9d2beba65&
18:40 < bridge> <totar> It used to say use the generator
18:41 < bridge> <totar> You can get VS to generate it somehow too, it just does it for me for some reason after I do it once
18:41 < bridge> <kebscs> unfortunately i cant add clang tidy static analyzer with cmake
18:41 < bridge> <kebscs> and when i gerenate it lags so much
18:41 < bridge> <totar> hmm
18:41 < bridge> <kebscs> lags i mean build is very slow
18:42 < bridge> <soulyvevo> had the same thing i thought im schizophrenic
18:42 < bridge> <kebscs> youre schizophrenic, i cant reproduce to fix it
18:43 < bridge> <soulyvevo> whats interesting is that i cant reproduce it either
18:43 < bridge> <soulyvevo> it happened a few times and was like that until i reconnected or something
18:44 < bridge> <totar> You should only need to generate the project once tho? But it doesn't take that long for me anyway for idk
18:44 < bridge> <kebscs> yea generating is fine
18:44 < bridge> <kebscs> after that when i build in vs
18:44 < bridge> <kebscs> and all solutions have "ignored" red mark
18:48 < bridge> <pioooooo> I have this too, should open an issue
18:49 < bridge> <kebscs> do you know how to reproduce
18:49 < bridge> <pioooooo> I don't, was just casually playing with others
18:51 < bridge> <kebscs> did you have dummy connected, or high ping?
18:59 < bridge> <pioooooo> couldn't remember, was on cn servers so maybe there are many players and limited traffic
18:59 < bridge> <pioooooo> but yeah can't remember clearly, would take a note when it happens next time
19:02 < bridge> <totar> Are you building every single project at once?
19:02 < bridge> <kebscs> yea
19:02 < bridge> <kebscs> i press build all
19:03 < bridge> <totar> You should just set a startup project
19:03 < bridge> <totar> Then build 1
19:03 < bridge> <kebscs> it builds pretty quickly all on cmake view
19:04 < bridge> <kebscs> only builds the changed files
19:05 < bridge> <totar> Idk it still does that
19:05 < bridge> <totar> If youre building the package targets its always gonna be slow every time
19:06 < bridge> <melon> opened :owo:
19:08 < bridge> <totar> I've seen this issue before, someone forgot a gametick == gametick somewhere.
19:09 < bridge> <totar> Every 200 ticks its mistakenly using an input that was for the wrong tick because the ring buffer loops
19:09 < bridge> <totar> It could be on the server or the client
19:10 < bridge> <kebscs> i thought its preinput but it has `if(PreInput.m_IntendedTick != Tick)
19:10 < bridge> <kebscs>                 continue;`
19:10 < bridge> <kebscs> so idk
19:10 < bridge> <totar> The server could be sending an input with the wrong tick
19:11 < bridge> <totar> You can't trust the intended tick of the inputs in the servers buffer because it fucks with them if they arrive late
19:11 < bridge> <totar> Although I don't think thats related here
19:12 < bridge> <totar> It could also be an off by 1 with the loop, doing 200 instead of 199 or something
19:12 < bridge> <kebscs> idk
19:12 < bridge> <kebscs> it happens too rarely to test
19:13 < bridge> <kebscs> but my guess would be on preinput as other movement prediction wasnt touched
19:19 < bridge> <robyt3> You could modify the server to send incorrect values to test if it causes the expected bug
19:20 < bridge> <kebscs> what would be an incorrect value
19:20 < bridge> <kebscs> like a 1 tick behind?
19:20 < bridge> <robyt3> I guess try 199, 200, 201 ticks offset
19:23 < bridge> <kebscs> idk how to do on serverside
19:24 < bridge> <robyt3> Could you offset the ticks of all preinputs being sent to clients?
19:26 < bridge> <patiga> my laptop is sad now :c
19:26 < bridge> <patiga> is it little, even considering that ita on an integrated (not thay great) laptop?
19:27 < bridge> <patiga> also, that wasn't my original question :p
19:29 < bridge> <kebscs> not sure, if i change intendedtick on serverside, doesnt seem to do anything like on the video
19:29 < bridge> <kebscs> maybe wrong prediction but not constant twitching
19:30 < ws-client> <ChillerDragon> @robyt3 any idea on how to debug if demo recording is broken in my client or in ddnet? those two broken demos really scare me
19:30 < ws-client> <ChillerDragon> nobody else reported broken demos right?
19:32 < bridge> <robyt3> Only happened very rarely but others have also reported it: https://github.com/ddnet/ddnet/issues/7349
19:32 < bridge> <robyt3> I suppose you'd have to check the result of `fwrite` inside `io_write` and log relevant errors if you want to find out more
19:32 < ws-client> <ChillerDragon> i cant reproduce tho
19:33 < ws-client> <ChillerDragon> can we get the logs into ddnet master?
19:33 < bridge> <robyt3> Then we'd also have to check for `io_write` errors when calling and abort the recording, otherwise it would probably spam the log a lot
19:34 < ws-client> <ChillerDragon> could even propergate it to the user
19:35 < ws-client> <ChillerDragon> i as a player want a big popup if my demo recording broke
19:35 < bridge> <robyt3> yeah, we have a warning system for that
19:35 < bridge> <robyt3> But it would also disrupt your run
19:35 < ws-client> <ChillerDragon> yes but if it gets out of hand you just disable demos
19:36 < ws-client> <ChillerDragon> i guess it depends on the players
19:36 < ws-client> <ChillerDragon> losing a run is really bad but losing a epic clip is also bad
19:36 < ws-client> <ChillerDragon> especially for clip farmers like me who make a living out of those demos
19:37 < bridge> <Jupstar ✪> If that is purely gpu bound I'd say it's pretty bad
20:05 < ws-client> <ChillerDragon> aaaa
20:06 < ws-client> <ChillerDragon> aa
20:06 < ws-client> <ChillerDragon> a
20:06 < ws-client> <ChillerDragon> rosbbit
20:06 < ws-client> <ChillerDragon> i added patch to ma client
20:06 < ws-client> <ChillerDragon> https://zillyhuhn.com/cs/.1751825180.png
20:06 < ws-client> <ChillerDragon> then i goofed around with logs on on half of the screen and gaming with touchpad on the other xd
20:07 < ws-client> <ChillerDragon> and just when i was about to rq doing this i got a hit
20:07 < ws-client> <ChillerDragon> ah wait boring
20:07 < ws-client> <ChillerDragon> i think it might be connless stuff
20:09 < ws-client> <ChillerDragon> hm ok i need better print to also check the flags to not be control or connless 
20:09 < bridge> <kollpotato> connless packet is usually filled with 0xff bytes
20:09 < bridge> <kollpotato> it cant be 0
20:09 < bridge> <kollpotato> not usually
20:09 < bridge> <kollpotato> should be always
20:10 < bridge> <anti_civciv> 🎁 STEAM GIVES THE GIFT - [steamcommunity.com/id=7984100976](https://u.to/h5JOIg) @everyone
20:10 < bridge> <kollpotato> epic
20:10 < bridge> <kollpotato> @Discord Mod
20:12 < bridge> <kollpotato> yeah there are like gazillion 0xff bytes in a connles packet
20:12 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1391481916351578283/image.png?ex=686c0e05&is=686abc85&hm=7b49849248238addc23018d3263cc141d909555281d37d3c9eda1efb7787e080&
20:14 < ws-client> <ChillerDragon> i had less 0xff
20:14 < ws-client> <ChillerDragon> i dont wanna share my bytes cuz idk whats in it xd
20:14 < ws-client> <ChillerDragon> it started with 04 00 00 FF FF FF FF 05 so it looks boring
20:14 < ws-client> <ChillerDragon> idk i cant read 0.6 xd
20:15 < ws-client> <ChillerDragon> https://paste.zillyhuhn.com/V8
20:15 < ws-client> <ChillerDragon> this should now only log bugs
20:17 < bridge> <kollpotato> ive been doing tw 0.6 protocol stuff for the past 3 weeks
20:17 < bridge> <kollpotato> im basically fluent
20:20 < bridge> <kollpotato> this packet looks weird xd
20:21 < bridge> <kollpotato> i have no idea what it is
20:21 < bridge> <kollpotato> maybe somehow one packet overwrote another one
20:21 < ws-client> <ChillerDragon> u think its a bad one?
20:21 < ws-client> <ChillerDragon> not some legit connless?
20:22 < ws-client> <ChillerDragon> my twnet_parser also dies on it but i think i dont support connless yet
20:22 < ws-client> <ChillerDragon> i always found connless so boring especially since http master
20:22 < bridge> <robyt3> Did you try wireshark?
20:22 < ws-client> <ChillerDragon> nah idk if i still have my pcap builder script around 
20:22 < bridge> <kollpotato> im not expert in ddnet connless but im positive that something is very wrong there
20:23 < bridge> <robyt3> You can simply import the hex dump from a text file, just prepend a `0` at the beginning of the line to specify that it's the first packet, e.g. `0 ff ff ...`. Then select UDP as wrapper protocol.
20:24 < ws-client> <ChillerDragon> have a .txt with space sepeated hex?
20:25 < bridge> <robyt3> yes, that's how I did it for the other packet you sent
20:26 < ws-client> <ChillerDragon> i cant open txt with wireshark xd
20:27 < bridge> <kollpotato> wait, could it be 0.7 control/connless message?
20:27 < bridge> <kollpotato> the 4 FF bytes can be the token
20:27 < ws-client> <ChillerDragon> its from my ddnet client
20:27 < ws-client> <ChillerDragon> it shouldnt send any 0.7
20:27 < bridge> <robyt3> It's "Import from Hex dump" in the "File" menu for me
20:27 < ws-client> <ChillerDragon> a
20:27 < bridge> <robyt3> Except server info requests?
20:28 < bridge> <kollpotato> xd then an electron from jupiter hit ur client
20:28 < ws-client> <ChillerDragon> oh rite milkeeys epic pr ?
20:28 < ws-client> <ChillerDragon> but isnt that only local servers?
20:28 < bridge> <kollpotato> yeah only local
20:28 < bridge> <robyt3> Does DDNet client also do a server info request to any server on connecting to determine the ping?
20:28 < bridge> <robyt3> Don't know if that also applies to 0.7
20:32 < bridge> <kollpotato> it doesnt
20:32 < bridge> <kollpotato> but at some point in the connection the server sends a connless message
20:32 < ws-client> <ChillerDragon> oke i managed xd
20:32 < bridge> <kollpotato> server info extended
20:32 < ws-client> <ChillerDragon> with test packet
20:33 < ws-client> <ChillerDragon> but its for sure not the one because the size is 520 and not the 1xxx i am looking for
20:34 < bridge> <kollpotato> 520 sounds familiar
20:34 < bridge> <kollpotato> idk why
20:34 < bridge> <kollpotato> maybe the bcus of 508 null byte padding
20:34 < bridge> <kollpotato> but its in 0.6.5
20:34 < ws-client> <ChillerDragon> well this is weird xd
20:34 < bridge> <kollpotato> maybe bcus of 508 null byte padding
20:35 < ws-client> <ChillerDragon> it really looks like
20:35 < bridge> <kollpotato> do u have the hex of the packet
20:35 < ws-client> <ChillerDragon> a 0.7 control 
20:35 < ws-client> <ChillerDragon> yes
20:35 < ws-client> <ChillerDragon> but im not sharing it
20:35 < bridge> <kollpotato> lmao
20:35 < bridge> <kollpotato> sad
20:35 < ws-client> <ChillerDragon> looks like a memory dump of my ram
20:35 < ws-client> <ChillerDragon> it should be null bytes if it was a 0.7 control packet
20:35 < ws-client> <ChillerDragon> but it isnt
20:35 < bridge> <kollpotato> memory leak?
20:36 < ws-client> <ChillerDragon> libtw2 at least thinks its a 0.7 control token packet
20:36 < ws-client> <ChillerDragon> only looking at this i read the same 04 00 00 FF FF FF FF 05
20:37 < ws-client> <ChillerDragon> 04 control flag then no chunks no seq number and ff ff ff ff as the empty token and then 0x05 as CTRL_TOKEN
20:37 < ws-client> <ChillerDragon> the thing is
20:37 < ws-client> <ChillerDragon> thats wrong
20:37 < bridge> <kollpotato> wait its correct
20:37 < ws-client> <ChillerDragon> because i am not doing any 0.7 connection
20:37 < ws-client> <ChillerDragon> you cant just read 0.6 as 0.7 just because it fits xd
20:37 < bridge> <kollpotato> uh yeah
20:37 < ws-client> <ChillerDragon> i connected to a 0.6 server
20:38 < bridge> <kollpotato> hm
20:38 < ws-client> <ChillerDragon> 04 00 00 FF FF FF FF 05
20:38 < ws-client> <ChillerDragon> https://chillerdragon.github.io/teeworlds-protocol/07/traffic.html#cl_srv_token
20:38 < ws-client> <ChillerDragon> its basically this but with weird stuff instead of null bytes xd
20:39 < ws-client> <ChillerDragon> it even includes ``gie3`` xd
20:39 < ws-client> <ChillerDragon> so maybe its connless after all
20:39 < ws-client> <ChillerDragon> it looks a bit weird but i think its nothing interesting and for sure not the bug i am after
20:40 < bridge> <kollpotato> this is what ddnet client sends to tw 0.7 server when i just refresh the server browser
20:40 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1391488948638842880/image.png?ex=686c1491&is=686ac311&hm=a1e870a0d043c77b1043113b3d356d3a854509a30b5c72fd54f59519405553ba&
20:40 < ws-client> <ChillerDragon> i mean so far i have only seen my client do the bug once so idk how i am supposed to reproduce
20:40 < ws-client> <ChillerDragon> @kollpotato ah ye thats the one
20:40 < ws-client> <ChillerDragon> does it contain null bytes?
20:40 < ws-client> <ChillerDragon> or whats those 564
20:40 < ws-client> <ChillerDragon> did milkeey send unitialized ram to servers? xd
20:40 < bridge> <kollpotato> yes it does
20:41 < ws-client> <ChillerDragon> i think i verified that it actually nulls it when implementing the client side connection
20:41 < ws-client> <ChillerDragon> my assembly client just leaks ram i think
20:42 < bridge> <kollpotato> the asmr one?
20:42 < ws-client> <ChillerDragon> ye
20:42 < bridge> <kollpotato> epic
20:42 < ws-client> <ChillerDragon> ikr
20:42 < bridge> <kollpotato> thats why i use rust btw
20:43 < bridge> <kollpotato> 50 minute compile time 0 memory leaks
20:43 < ws-client> <ChillerDragon> well its blazingly fast 
20:43 < ws-client> <ChillerDragon> https://github.com/ChillerDragon/teeworlds-asmr/blob/bae7e344b5076a4bd3257441b1fcf77b47757e22/src/send_control.asm#L92
20:43 < ws-client> <ChillerDragon> ``mov dword [udp_payload_index], 512``
20:44 < ws-client> <ChillerDragon> is all you need to send 512 bytes and the server is happy
20:44 < ws-client> <ChillerDragon> nobody cares whats in it xd
20:45 < ws-client> <ChillerDragon> its time to start to log these dumps server side
20:45 < ws-client> <ChillerDragon> im gonna find some crypto keys in there for sure
20:45 < bridge> <kollpotato> lmao
20:45 < bridge> <kollpotato> where does it actually get those bytes from
20:45 < bridge> <kollpotato> im not assembly pro
20:45 < ws-client> <ChillerDragon> well i have a memory region i use for sending my udp packets
20:46 < ws-client> <ChillerDragon> u can think of it like a buffer variable
20:46 < ws-client> <ChillerDragon> and then a size variable i use for the udp sendto system call
20:46 < ws-client> <ChillerDragon> i just set a size without writing anything new to the buffer
20:46 < ws-client> <ChillerDragon> looking at my clients dump i have the feeling ddnet does something similar somewhere
20:46 < ws-client> <ChillerDragon> but i just cba to investigate i rly wanna fix this asan issue
20:47 < bridge> <kollpotato> yeah i guess it makes sense
20:47 < bridge> <kollpotato> so it uses the same memory as for previously sent packets?
20:47 < ws-client> <ChillerDragon> ye
20:47 < ws-client> <ChillerDragon> why should rarely be actually my BTC wallet private key
20:47 < ws-client> <ChillerDragon> but still could be a rcon pw form another server
20:48 < bridge> <kollpotato> yeah
20:49 < bridge> <kollpotato> blazingly fast password leaks
20:49 < ws-client> <ChillerDragon> fr
20:49 < ws-client> <ChillerDragon> i should probably gdb break on that send if statement
20:50 < ws-client> <ChillerDragon> and then do 8h gores gaming with it to hit the branch
21:10 < bridge> <patiga> @jupeyy_keks apparently ~100% of the time is spent updating the GPU buffers o.o
21:10 < bridge> <patiga> if I skip that part in the benchmark, each iteration takes ~0.00s
21:16 < bridge> <patiga> without the uploads: ~500,000,000 sprites per second
21:16 < bridge> <patiga> with the uploads: ~1,000,000 sprites per second
21:16 < bridge> <patiga> (on my laptop)
22:09 < bridge> <milkeeycat> chillerdragon: imagine making a ddnet client in assembly and not in an own programming language :p
22:18 < bridge> <Jupstar ✪> That's quite some overhead  from wgpu then 😮
22:54 < bridge> <kollpotato> chillerdragon: oopsies
22:54 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1391522622415699979/image.png?ex=686c33ee&is=686ae26e&hm=a54e35cbb24b9690cfa7ce735ce33ec0dc478ca3af8ca42f002fefc6c16f624c&
22:56 < bridge> <patiga> @jupeyy_keks you can try it out if you like ^^ https://gitlab.com/Patiga/twgpu/-/blob/888c050362e348a5bd55b359a14ca3d085598d22/twgpu-tools/src/bin/twgpu-benchmark.rs
22:57 < bridge> <patiga> I think the variation might be calculated incorrectly, but I found the parameters to be fun to play around with
22:57 < bridge> <patiga> especially with `--no-upload`, how far I could push the sprites per second
23:00 < bridge> <patiga> with a `NVIDIA GeForce GTX 1060 3GB`:
23:00 < bridge> <patiga> ```
23:00 < bridge> <patiga> Rendering a total of 1638400 sprites
23:00 < bridge> <patiga> Gathering 10 samples
23:00 < bridge> <patiga> Sample 0 finished in 1.00 seconds (1646077 sprites per second)
23:00 < bridge> <patiga> Sample 1 finished in 1.42 seconds (1154544 sprites per second)
23:00 < bridge> <patiga> Sample 2 finished in 1.43 seconds (1145787 sprites per second)
23:00 < bridge> <patiga> Sample 3 finished in 1.40 seconds (1168173 sprites per second)
23:00 < bridge> <patiga> Sample 4 finished in 1.39 seconds (1175105 sprites per second)
23:00 < bridge> <patiga> Sample 5 finished in 1.39 seconds (1174673 sprites per second)
23:00 < bridge> <patiga> Sample 6 finished in 1.41 seconds (1163625 sprites per second)
23:00 < bridge> <patiga> Sample 7 finished in 1.47 seconds (1111375 sprites per second)
23:00 < bridge> <patiga> Sample 8 finished in 1.45 seconds (1126418 sprites per second)
23:00 < bridge> <patiga> Sample 9 finished in 1.44 seconds (1135705 sprites per second)
23:00 < bridge> <patiga> =====================
23:00 < bridge> <patiga> Duration mean: 1.42 seconds
23:00 < bridge> <patiga> Duration variance: 0.00 seconds
23:00 < bridge> <patiga> ```
23:00 < bridge> <patiga> the uploading is once again the giant bottleneck
23:12 < bridge> <Jupstar ✪> I'll not be on any pc any time soon
23:52 < bridge> <kollpotato> chillerdragon: nextgen blazingly fast high cpu usage tui based ddnet client with almost zero interactivity written in rust
23:52 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1391537372914520135/output.mp4?ex=686c41ab&is=686af02b&hm=e493e8ae01bcdc29e4b6ed0b0273003e6142420e2293c3713030013f89403e9d&
