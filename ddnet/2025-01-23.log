02:09 < bridge> <learath2> @heinrich5991 when you have some time, would you like to go through all the PRs together and close/merge them?
02:15 < bridge> <learath2> The amount of PRs is rather large, but still a manageable amount. We should get to it before it gets worse and while I'm still very much unemployed
02:37 < bridge> <totar> wait I can help
02:39 < bridge> <meloƞ> :monkalaugh:
02:41 < bridge> <learath2> What happened with that PR anyway, was supposed to be pretty simple :/
02:41 < bridge> <learath2> It even worked fine iirc
02:41 < bridge> <totar> it had some issues
02:42 < bridge> <totar> getting the entity ids was not as consistent as I expected
02:42 < bridge> <totar> so if two entities entered a teleport on the same tick and both of them didn't get an m_Id they would go to the same spot
02:43 < bridge> <totar> also seeding the prng with a small integer is probably not very good for it
08:50 < bridge> <chillerdragon> Start from the oldest
08:52 < bridge> <chillerdragon> The two oldest open prs are by this Heinrich and learath guy. Go tell them to get their pr fixed up and merge it
09:27 < bridge> <milkeeycat> morning C enjoyers and others
09:28 < bridge> <teero777> morn
10:16 < bridge> <ryozuki> im still a certified c++ dev(tm)
10:16 < bridge> <ryozuki> :justatest:
10:19 < bridge> <totar> Is there some leetcode algorithm to do this without n^2
10:20 < bridge> <ryozuki> well messages are max 256 chars
10:20 < bridge> <totar> I'm just wondering
10:20 < bridge> <ryozuki> oh if u find tell me
10:20 < bridge> <ryozuki> i just wanted to get this working(tm)
10:21 < bridge> <ryozuki> maybe instead of a vec i could use a set
10:21 < bridge> <ryozuki> are there hashsets in c++
10:21 < bridge> <ryozuki> std
10:22 < bridge> <ryozuki> maybe iterating the message word by word and doing a set.contains is faster
10:22 < bridge> <totar> Yeah but you still pay the hashing price
10:22 < bridge> <ryozuki> that would be just n iirc
10:22 < bridge> <ryozuki> true
10:22 < bridge> <ryozuki> is hashing that expensive tho
10:22 < bridge> <ryozuki> what alg does std::set use
10:25 < bridge> <ryozuki> @heinrich5991 is using a set better?
10:25 < bridge> <ryozuki> saw ur comments
10:27 < bridge> <totar> I think you want a tree for the best complexity
10:28 < bridge> <totar> If you hash all the banned words you still need to check against the hash of all possible sub strings in the message that are shorter than the longest banned word
10:29 < bridge> <totar> which is kinda still n^2 I guess
10:29 < bridge> <totar> Maybe that makes the current solution n^3
10:29 < bridge> <totar> Well
10:30 < bridge> <totar> m*n^2
10:30 < bridge> <ryozuki> according to docs std::set is a binary search tree
10:31 < bridge> <ryozuki> i guess i need to figure how the json parsing works in ddnet now
10:37 < bridge> <chairn> it's in general a red-black tree i think
10:37 < bridge> <chairn> (which is a kind of binary tree)
10:42 < bridge> <ryozuki> making it json makes it actually easier xd
11:07 < bridge> <ryozuki> @totar actually i forgot a loop there lmao
11:09 < bridge> <ryozuki> fixed and now uses json
11:09 < bridge> <meloƞ> hot
11:10 < bridge> <ryozuki> (without the loop it only censored the first matching same word)
12:03 < bridge> <ryozuki> ```
12:03 < bridge> <ryozuki> [build] /Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/System/Library/Frameworks/ApplicationServices.framework/Frameworks/QD.framework/Headers/ColorSyncDeprecated.h:1000:41: note: 'CMProfileRef' has been explicitly marked deprecated here
12:03 < bridge> <ryozuki> [build]  1000 | typedef struct OpaqueCMProfileRef*      CMProfileRef DEPRECATED_IN_MAC_OS_X_VERSION_10_6_AND_LATER;
12:03 < bridge> <ryozuki> [build]       |                     
12:03 < bridge> <ryozuki> ```
12:03 < bridge> <ryozuki> there is lot of msg like this when compiling in macos
12:04 < bridge> <learath2> What even is the n here? I'd expect it to be something like m * n * k where n is the message length, m is the amount of words in the blacklist, and k is the average length of a blackliated word
12:04 < bridge> <ryozuki> due to [build] In file included from /Users/edgarluque/Documents/misc/ddnet/src/macos/notifications.mm:1:
12:04 < bridge> <ryozuki> xD
12:07 < bridge> <learath2> Though there are more efficient ways to do it indeed. You can employ the Rabin-Karp search algorithm
12:08 < bridge> <learath2> Or build an Aho-Corasick state machine
12:31 < bridge> <ryozuki> i leave that for the future
12:37 < bridge> <ryozuki> there is also https://en.wikipedia.org/wiki/Commentz-Walter_algorithm
12:55 < bridge> <ryozuki> the pr is ready now btw
12:56 < bridge> <ryozuki> well there is a log i can remove
12:57 < bridge> <ryozuki> done
14:00 < bridge> <louis> what is it, just hash pattern matching?
14:03 < bridge> <kollpotato> nerdy ass developer channel
14:03 < bridge> <louis> i dont think it should have both local and global
14:04 < bridge> <louis> why not just have online lists that have varying lebels of censor if ur able to change the online lists url anyways
14:04 < bridge> <louis> like censor_slurs, censor_all
14:16 < bridge> <ryozuki> no
14:16 < bridge> <ryozuki> i prefer to give control to the user
14:16 < bridge> <ryozuki> and levels is subjective
14:18 < bridge> <louis> ye, then they can host their own censorlist if they really want that much control
14:19 < bridge> <louis> seems like an unnecessary additional setting
14:20 < bridge> <louis> u could also have a local json that has online: field updated by the online url and a local: that won't get overwritten
14:20 < bridge> <teero777> @ryozuki does the censorlist support replacing the words? nerdy ass programming language
14:20 < bridge> <louis> so ppl who really care to have a local can edit it manually and those who dont care dont have to be exposed to multiple settings in the gui
14:24 < bridge> <ryozuki> no users who dont want this just click 1 checkbox
14:24 < bridge> <ryozuki> im not gonna change it
14:24 < bridge> <ryozuki> u can make a pr, i think my way is the best
14:25 < bridge> <ryozuki> it just replaces to *
14:27 < bridge> <kollpotato> nerdy *** programming language
14:27 < bridge> <ryozuki> *****
14:27 < bridge> <teero777> uh ok
14:27 < always> helo
14:27 < bridge> <kollpotato> will that feature be enabled on the official servers?
14:27 < always> gg's @everyone
14:27 < always> WTF
14:27 < bridge> <kollpotato> dont use spyware
14:28 < always> it removed my @
14:28 < bridge> <ryozuki> *\*\*\*\*\*
14:28 < bridge> <louis> its client sided
14:28 < bridge> <kollpotato> oh
14:28 < bridge> <kollpotato> im a dumbass
14:28 < bridge> <kollpotato> xD
14:28 < bridge> <kollpotato> then its cool
14:28 < bridge> <louis> if u want chat censor u can always go to chn servers
14:29 < bridge> <louis> server sided chat censor*
14:29 < bridge> <kollpotato> is it enforced by the government?
14:29 < bridge> <ryozuki> ye
14:29 < bridge> <alw5> is there actually a censor??
14:29 < bridge> <kollpotato> classic china moment
14:29 < bridge> <ryozuki> on chn there is server side censor
14:29 < bridge> <alw5> gg
14:29 < bridge> <alw5> https://cdn.discordapp.com/attachments/293493549758939136/1331979131998699623/DDNet_Vgju4GrwFp.png?ex=679395bc&is=6792443c&hm=a30c925d8f7d41c087563dbadf3a2746ea000da5151c2d8c37c54f4832ad7c61&
14:29 < bridge> <ryozuki> u cant say taiwan number one
14:29 < bridge> <kollpotato> i will test it when i get home
14:29 < bridge> <kollpotato> theres no way
14:30 < bridge> <alw5> i just lost so much social credit
14:41 < bridge> <kollpotato> i am the chosen one
14:41 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1331982253810520126/image.png?ex=679398a4&is=67924724&hm=f7ff5aa5fcb880fe59f6f4cb752b5bbbecf4902968de0ab37bab73e20d5cf041&
14:42 < bridge> <kollpotato> or am i supposed to say it in chinese
14:42 < bridge> <kollpotato> xD
14:42 < bridge> <kollpotato> will try again
14:42 < bridge> <kollpotato> still works
14:42 < bridge> <kollpotato> in chinese
14:44 < bridge> <kollpotato> but the external male organ is being censored
14:49 < bridge> <ryozuki> xd
14:49 < bridge> <ryozuki> idk
15:05 < bridge> <louis> dream setup complere
15:05 < bridge> <louis> https://cdn.discordapp.com/attachments/293493549758939136/1331988176017031268/IMG_3730.jpg?ex=67939e28&is=67924ca8&hm=6c0270e1b6a05215b576e03ae5c7b9fe11f8fbb1f22883ad8c7be915eb0273e6&
15:05 < bridge> <louis> dream setup complete
15:05 < bridge> <louis> https://cdn.discordapp.com/attachments/293493549758939136/1331988176017031268/IMG_3730.jpg?ex=67939e28&is=67924ca8&hm=6c0270e1b6a05215b576e03ae5c7b9fe11f8fbb1f22883ad8c7be915eb0273e6&
15:05 < bridge> <louis> now i just need m4 mac mini
15:17 < bridge> <pioooooo> well the censorship actually doesn't help lot tho
15:17 < bridge> <pioooooo> since names are not censored
15:19 < bridge> <pioooooo> and also censor word list is not enough
15:19 < bridge> <ryozuki> it is enough for now
15:19 < bridge> <pioooooo> so i'd rather not having it at all
15:19 < bridge> <ryozuki> we can make it better always
15:19 < bridge> <ryozuki> u can disable it so that works for you
15:19 < bridge> <pioooooo> I mean the current chn ones
15:19 < bridge> <ryozuki> oh ok
15:19 < bridge> <ryozuki> idc about china xD
15:20 < bridge> <pioooooo> ofc i should care being in china TT
15:20 < bridge> <Jupstar ✪> Give team viewer access pls. Need to git bisect smth on Apple silicon
15:22 < bridge> <ryozuki> @jupeyy_keks send repro instructions
15:22 < bridge> <ryozuki> if usend a git bisect script i can run it
15:23 < bridge> <ryozuki> u know u can script it to automatically compile and test and check if its good or bad
15:28 < bridge> <Jupstar ✪> lmao i am not even sure yet how i'd reproduce it, it's just that newer moltenvk create some weird pink framebuffer:
15:28 < bridge> <Jupstar ✪> https://github.com/KhronosGroup/MoltenVK/issues/2220
15:28 < bridge> <Jupstar ✪> 
15:28 < bridge> <Jupstar ✪> they know all commits where it happened but apparently nobody fixes it xd
15:28 < bridge> <Jupstar ✪> I'd maybe simply revert some commits:
15:28 < bridge> <Jupstar ✪> https://github.com/KhronosGroup/MoltenVK/compare/v1.2.6...v1.2.7
15:29 < bridge> <Jupstar ✪> i just hate apple, these mfs that refuse anything good and let randoms have to fix their shit.
15:29 < bridge> <Jupstar ✪> 
15:29 < bridge> <Jupstar ✪> free slaves for apple
15:30 < bridge> <pioooooo> Same should apply to many
15:30 < bridge> <Jupstar ✪> apple is defs the worst xd
15:30 < bridge> <pioooooo> :nouis:
15:45 < bridge> <zhn> US dream setup frfr
16:12 < bridge> <ryozuki> @learath2 good read https://github.com/bminor/glibc/commit/7a61e7f557a97ab597d6fca5e2d1f13f65685c61
16:13 < bridge> <ryozuki> * Do not deallocate the environment array.  Instead, keep older
16:13 < bridge> <ryozuki>   versions around and adopt an  exponential resizing policy.  This
16:13 < bridge> <ryozuki>   results in an amortized constant space leak per active environment
16:13 < bridge> <ryozuki>   variable, but there already is such a leak for the variable itself
16:13 < bridge> <ryozuki>   (and that is even length-dependent, and includes no-longer used
16:13 < bridge> <ryozuki>   values).
16:13 < bridge> <ryozuki> xd
16:13 < bridge> <ryozuki> extern char** environ;
16:13 < bridge> <ryozuki> this legacy thing is crazy
17:56 < bridge> <meloƞ> Hot
18:03 < bridge> <Jupstar ✪> That's only the data repo tho 😂
18:03 < bridge> <Jupstar ✪> But yeah commit is in unmerged pr
18:04 < bridge> <meloƞ> Idc, hot
18:04 < bridge> <meloƞ> 
18:04 < bridge> <meloƞ> Btw are you planning on doing the freeze timer? I saw the .PNG but no impl
18:04 < bridge> <meloƞ> Wanted to do it but I cba learning how to handle external pngs for now :justatest:
18:05 < bridge> <Jupstar ✪> you have to use the freeze container.
18:05 < bridge> <Jupstar ✪> game/client-containers/src/freezes.rs
18:06 < bridge> <Jupstar ✪> almost every asset is build around the container stuff
18:06 < bridge> <meloƞ> Yeah I looked at how you did the hook but it's impl looked like a lot of boilerplate
18:06 < bridge> <meloƞ> Not saying it's bad! But I was just to tired to do it
18:06 < bridge> <meloƞ> :justatest:
18:08 < bridge> <Jupstar ✪> besides the texture or exactly the texture?
18:09 < bridge> <meloƞ> Besides
18:10 < bridge> <meloƞ> Can't reread it so I'm also not sure anymore :justatest:
18:10 < bridge> <meloƞ> In bed rn
18:10 < bridge> <Jupstar ✪> sure
18:10 < bridge> <Jupstar ✪> but i think it should not be _much_ harder than the old ddnet.
18:10 < bridge> <Jupstar ✪> xddd
18:10 < bridge> <Jupstar ✪> 
18:10 < bridge> <Jupstar ✪> he said
18:11 < bridge> <meloƞ> GG you jinxed it!
18:23 < bridge> <ryozuki> @milkeeycat u implemented generics in ur lang?
18:24 < bridge> <milkeeycat> not yet, i'm still not sure if I need to add one more ir xd
18:24 < bridge> <ryozuki> ```rust
18:24 < bridge> <ryozuki>     struct A {
18:24 < bridge> <ryozuki>         a: i32,
18:24 < bridge> <ryozuki>         b: i32,
18:24 < bridge> <ryozuki>     }
18:24 < bridge> <ryozuki> 
18:24 < bridge> <ryozuki>     impl A {
18:24 < bridge> <ryozuki>         pub fn hello(&self, other: i32) -> i32 {
18:24 < bridge> <ryozuki>             return self.a * other;
18:24 < bridge> <ryozuki>         }
18:24 < bridge> <ryozuki> 
18:24 < bridge> <ryozuki>         pub fn set_a(&mut self, value: i32) {
18:24 < bridge> <ryozuki>             self.a = value;
18:24 < bridge> <ryozuki>             return;
18:24 < bridge> <ryozuki>         }
18:24 < bridge> <ryozuki>     }
18:24 < bridge> <ryozuki> 
18:25 < bridge> <ryozuki>     pub fn main() -> i32 {
18:25 < bridge> <ryozuki>         let mut x: A = A {
18:25 < bridge> <ryozuki>             a: 2,
18:25 < bridge> <ryozuki>             b: 3,
18:25 < bridge> <ryozuki>         };
18:25 < bridge> <ryozuki> 
18:25 < bridge> <ryozuki>         x.set_a(4);
18:25 < bridge> <ryozuki> 
18:25 < bridge> <ryozuki>         return x.a;
18:25 < bridge> <ryozuki>     }
18:25 < bridge> <ryozuki> ```
18:25 < bridge> <ryozuki> this compiles in the lang im making at work
18:25 < bridge> <ryozuki> now i need to do generics
18:25 < bridge> <milkeeycat> epyc
18:25 < bridge> <ryozuki> @milkeeycat how many irs u have rn
18:25 < bridge> <ryozuki> i have AST -> ir -> llvm ir -> machine code
18:25 < bridge> <milkeeycat> ast and 1 ir
18:25 < bridge> <ryozuki> the IR will be fully monomorphized already, this means that the ir itself has no generics, so i need to do the work on the ast
18:26 < bridge> <meloƞ> can you guys stop being so smart
18:26 < bridge> <meloƞ> god damn it.
18:26 < bridge> <milkeeycat> do you have type inference? 😬
18:26 < bridge> <ryozuki> only a tiny bit
18:26 < bridge> <ryozuki> its not the priority right now xd
18:27 < bridge> <milkeeycat> do you do it on ir or ast?
18:27 < bridge> <ryozuki> ast, the IR is fully typed and has all the info needed
18:27 < bridge> <ryozuki> to make codegen as easy as possible
18:27 < bridge> <ryozuki> but for example, i think rust has 3 irs
18:27 < bridge> <ryozuki> AST THIR MIR LIR
18:28 < bridge> <ryozuki> and i think it does type checking on THIR
18:28 < bridge> <milkeeycat> where's hir? 🤨
18:28 < bridge> <ryozuki> oh THIR and hir are probs same
18:28 < bridge> <ryozuki> actually THIR may be something like type higher ir or smth
18:28 < bridge> <milkeeycat> hm, i remember it being a separate thing
18:28 < bridge> <ryozuki> https://rustc-dev-guide.rust-lang.org/thir.html
18:28 < bridge> <ryozuki> The THIR ("Typed High-Level Intermediate Representation"), previously called HAIR for "High-Level Abstract IR", is another IR used by rustc that is generated after type checking. It is (as of January 2024) used for MIR construction, exhaustiveness checking, and unsafety checking.
18:29 < bridge> <ryozuki> 
18:29 < bridge> <ryozuki> As the name might suggest, the THIR is a lowered version of the HIR where all the types have been filled in, which is possible after type checking has completed. But it has some other interesting features that distinguish it from the HIR:
18:29 < bridge> <kollpotato> isnt this rust
18:29 < bridge> <ryozuki> ok so i guess it does type checking on the ast
18:29 < bridge> <ryozuki> looks nearly same ye xd
18:29 < bridge> <kollpotato> so whats the goal
18:29 < bridge> <ryozuki> but this lang will have an embedded async runtime, like erlang
18:29 < bridge> <meloƞ> i'm confused, is this still edlang? or something new
18:29 < bridge> <ryozuki> the goal is a mix of erlang and rust
18:29 < bridge> <ryozuki> @blaiszephyr im also making a language at work
18:30 < bridge> <kollpotato> oh right embedded async runtime
18:30 < bridge> <meloƞ> lmao
18:30 < bridge> <kollpotato> cool
18:30 < bridge> <ryozuki> in rust u have to choose
18:30 < bridge> <ryozuki> tokio for example
18:30 < bridge> <ryozuki> it divides a bit the community
18:30 < bridge> <kollpotato> async rust is hell
18:30 < bridge> <ryozuki> also tokio needs to be cooperstive, it cant be preemptive
18:31 < bridge> <ryozuki> the coop part is the .await points
18:31 < bridge> <ryozuki> is where u yield
18:31 < bridge> <ryozuki> to be preemptive u need compiler control
18:32 < bridge> <kollpotato> u smart af
18:32 < bridge> <kollpotato> i dont understand anything u said
18:32 < bridge> <ryozuki> xd
18:32 < bridge> <kollpotato> :cammo:
18:33 < bridge> <ryozuki> @kollpotato you know what a thread is right
18:33 < bridge> <ryozuki> you know green threads?
18:34 < bridge> <kollpotato> no
18:34 < bridge> <kollpotato> a thread that is scheduled by a runtime library or virtual machine (VM) instead of natively by the underlying operating system (OS).
18:36 < bridge> <milkeeycat> I love your funny words magic man
18:36 < bridge> <kollpotato> xD
18:36 < bridge> <kollpotato> u are writing a compiler yourself
18:36 < bridge> <ryozuki> well processes execute in a thread, and in a cpu core, only one thread at a time can actually run (simplified for explanation), but the kernel needs to manage how much cpu time each process uses, otherwise one program would run always while the others wait forever, for this, when you are in a preemptive runtime, the kernel forcefully yields your thread, giving control back to kernel and it can decide to give run time to another process
18:36 < bridge> <kollpotato> u are the magic man too
18:36 < bridge> <milkeeycat> I'm a cave man magic man
18:36 < bridge> <ryozuki> in a cooperative runtime u yield as a user
18:37 < bridge> <ryozuki> in rust those are .await points
18:37 < bridge> <ryozuki> i probs explained this wrong but idk xd
18:37 < bridge> <ryozuki> @kollpotato read this https://en.wikipedia.org/wiki/Preemption_(computing)
18:37 < bridge> <ryozuki> read lot of wiki articles
18:37 < bridge> <ryozuki> i do this all the time
18:37 < bridge> <kollpotato> now i understand 50% instead of 0%
18:37 < bridge> <kollpotato> thanks smart man
18:38 < bridge> <kollpotato> ive been reading a lot of them recently
18:38 < bridge> <kollpotato> mostly about networking
18:38 < bridge> <kollpotato> networking is fun
18:38 < bridge> <kollpotato> one thread at a time per cpu or per cpu core?
18:38 < bridge> <kollpotato> ah right
18:38 < bridge> <kollpotato> cpu core
18:39 < bridge> <kollpotato> so if i have 4 cores i can only run 4 threads at a time
18:39 < bridge> <kollpotato> then i dont understand what i achieved with python 3 years ago when i tried running 1000 threads in parallel
18:39 < bridge> <ryozuki> well there are weird stuff like hyperthreading which idk what does but ye
18:39 < bridge> <ryozuki> > Intel® Hyper-Threading Technology is a hardware innovation that allows more than one thread to run on each core. More threads means more work can be done in parallel. How does Hyper-Threading work? When Intel® Hyper-Threading Technology is active, the CPU exposes two execution contexts per physical core.
18:40 < bridge> <ryozuki> you have to know the difference between parallel and concurrent
18:40 < bridge> <kollpotato> is it like fetching and executing instruction of one thread
18:40 < bridge> <kollpotato> and then going to another one
18:40 < bridge> <kollpotato> yes
18:40 < bridge> <kollpotato> to me these words are the same
18:40 < bridge> <ryozuki> > A system is said to be concurrent if it can support two or more actions in progress at the same time. A system is said to be parallel if it can support two or more actions executing simultaneously. The key concept and difference between these definitions is the phrase “in progress.”
18:41 < bridge> <kollpotato> got it
18:42 < bridge> <ryozuki> tokio can be concurrent using a single thread
18:44 < bridge> <ryozuki> @kollpotato btw threading is one of the hardest and most interesting stuff in computing, its why u need locks, mutexes, atomics, and need to know well the memory model
18:44 < bridge> <kollpotato> i find most of the things in computer science interesting
18:45 < bridge> <kollpotato> but i will still avoid async rust for a while
18:45 < bridge> <ryozuki> https://doc.rust-lang.org/nomicon/atomics.html
18:45 < bridge> <kollpotato> well thats just because i dont need it
18:45 < bridge> <kollpotato> ive read that btw
18:45 < bridge> <ryozuki> oh yeah u dont need async for threading xd
18:45 < bridge> <ryozuki> there was a post learath sent me years ago
18:45 < bridge> <ryozuki> but i forgot
18:46 < bridge> <ryozuki> @kollpotato implement this https://en.wikipedia.org/wiki/Work_stealing
18:46 < bridge> <ryozuki> good for learning
18:47 < bridge> <kollpotato> :justatest:
18:47 < bridge> <kollpotato> do they teach this in uni
18:47 < bridge> <ryozuki> this is what tokio does
18:47 < bridge> <ryozuki> idk i didnt go to uni
18:48 < bridge> <kollpotato> i will
18:48 < bridge> <kollpotato> probably
18:49 < bridge> <ryozuki> do it if u can
18:49 < bridge> <ryozuki> how old r u
18:49 < bridge> <kollpotato> 16
18:49 < bridge> <kollpotato> just 3 more years in school
18:49 < bridge> <ryozuki> u got lot of.time ahead
18:51 < bridge> <kollpotato> i gotta write my own compiler
18:51 < bridge> <kollpotato> before uni
18:51 < bridge> <kollpotato> thats has been my dream
18:51 < bridge> <kollpotato> for 3 years already
18:51 < bridge> <milkeeycat> @ryozuki what do you do with ir before it's lowered to llvm ir?
18:51 < bridge> <kollpotato> that has been my dream
19:00 < bridge> <kollpotato> @ryozuki btw this is kinda cool https://edgl.dev/blog/rust-fn-size-trick/
19:00 < bridge> <kollpotato> but why cant the compiler optimize that?
19:01 < bridge> <ryozuki> nothing
19:02 < bridge> <milkeeycat> :thonk:
19:02 < bridge> <ryozuki> the ir is block based and kinda like ssa
19:02 < bridge> <ryozuki> so it makes it rly ez to translate to llvm ir
19:03 < bridge> <ryozuki> it doesnt have if else it has (cond) jumps s between blocks
19:03 < bridge> <ryozuki> and blocks have no control flow within
19:03 < bridge> <ryozuki> like llvm ir
19:04 < bridge> <milkeeycat> maybe one day I'll make a generator which will spit out llvm ir in the end
19:15 < bridge> <pioooooo> Then what do you generate now
19:15 < bridge> <milkeeycat> assembly
19:15 < bridge> <pioooooo> :poggers2:
19:15 < bridge> <kollpotato> when machine code
19:15 < bridge> <kollpotato> assembly too high levle
19:15 < bridge> <kollpotato> assembly too high level
19:18 < bridge> <hectavoxel> I got modulo in automap working!
19:18 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1332051778413265006/2025-01-23_13-17-32.mp4?ex=6793d964&is=679287e4&hm=1b69e94cdb4dd32f7f091178bbe3d6507bd76e9cf20b4826f4dd11b43cacb8c9&
19:23 < bridge> <hectavoxel> Well, kind of. Let me explain:
19:23 < bridge> <hectavoxel> The logic is inverted. It's supposed to place tile 49 when the modulo is equal to 0, not the opposite.
19:23 < bridge> <hectavoxel> However, when trying to set it that way, it only places down tile 49 (meaning it's always true).
19:23 < bridge> <hectavoxel> 
19:23 < bridge> <hectavoxel> Here's what I put down for the code. In reference to auto_map.cpp
19:23 < bridge> <hectavoxel> ```cpp
19:23 < bridge> <hectavoxel> void CAutoMapper::Proceed(CLayerTiles *pLayer, CLayerTiles *pGameLayer, int ReferenceId, int ConfigId, int Seed, int SeedOffsetX, int SeedOffsetY)
19:23 < bridge> <hectavoxel> // [ ... ]
19:23 < bridge> <hectavoxel>                     for(size_t k = 0; k < pIndexRule->m_vModuloRules.size() && RespectRules; ++k)
19:23 < bridge> <hectavoxel>                     {
19:23 < bridge> <hectavoxel>                         CModuloRule *pModuloRule = &pIndexRule->m_vModuloRules[k];
19:23 < bridge> <hectavoxel>                         if((x + pModuloRule->m_OffsetX) % pModuloRule->m_ModX == 0 && (y + pModuloRule->m_OffsetY) % pModuloRule->m_ModY == 0)
19:23 < bridge> <hectavoxel>                         {
19:23 < bridge> <hectavoxel>                             RespectRules = false;
19:23 < bridge> <hectavoxel>                         }
19:23 < bridge> <hectavoxel>                     }
19:23 < bridge> <hectavoxel> 
19:23 < bridge> <hectavoxel>                                         // already defined code below, just for context
19:23 < bridge> <hectavoxel>                     if(RespectRules &&
19:23 < bridge> <hectavoxel>                         (pIndexRule->m_RandomProbability >= 1.0f || HashLocation(Seed, h, i, x + SeedOffsetX, y + SeedOffsetY) < HASH_MAX * pIndexRule->m_RandomProbability))
19:24 < bridge> <hectavoxel>                     {
19:24 < bridge> <hectavoxel>                         CTile Previous = *pTile;
19:24 < bridge> <hectavoxel>                         pTile->m_Index = pIndexRule->m_Id;
19:24 < bridge> <hectavoxel>                         pTile->m_Flags = pIndexRule->m_Flag;
19:24 < bridge> <hectavoxel>                         pLayer->RecordStateChange(x, y, Previous, *pTile);
19:24 < bridge> <hectavoxel>                     }```
19:24 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1332053089334595604/image.png?ex=6793da9c&is=6792891c&hm=ba792bd5fc7a4a58b3a6060d3f276b8dfc2bcb870781a293162f3a9514c3f055&
19:25 < bridge> <hectavoxel> Like, I KNOW it's in this bit of code:
19:25 < bridge> <hectavoxel> ```(x + pModuloRule->m_OffsetX) % pModuloRule->m_ModX == 0 && (y + pModuloRule->m_OffsetY) % pModuloRule->m_ModY == 0)```
19:25 < bridge> <hectavoxel> But if I set the == to != it doesn't set RespectRules to false anywhere.
19:30 < bridge> <hectavoxel> Well, setting it to !=, and then changing the && to a || works, kind of, but it doesn't accept more than 1 modulo factor that doesn't overlap.
19:31 < bridge> <Jupstar ✪> sweet
19:42 < bridge> <hectavoxel> oh i have an idea actually
19:49 < bridge> <hectavoxel> nvm
19:54 < bridge> <Ewan> u could probably do it if that's the only goal
19:55 < bridge> <Ewan> it would be really cool to see
20:04 < bridge> <Solly> am getting
20:04 < bridge> <Solly> ```
20:04 < bridge> <Solly> Error running link command: no such file or directorymake[2]: *** [CMakeFiles/steam_api.dir/build.make:101: libsteam_api.a] Error 2
20:04 < bridge> <Solly> make[1]: *** [CMakeFiles/Makefile2:399: CMakeFiles/steam_api.dir/all] Error 2
20:04 < bridge> <Solly> make[1]: *** Waiting for unfinished jobs....
20:04 < bridge> <Solly> ```
20:04 < bridge> <Solly> when compiling  ):
20:04 < bridge> <Ewan> needs make
20:04 < bridge> <Ewan> but also wtf
20:04 < bridge> <Ewan> what command invoked this
20:04 < bridge> <Ewan> never seen that
20:05 < bridge> <Ewan> lmfao pkg broken and im unable to fix it myself so i go to google
20:05 < bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1332063581419733106/image.png?ex=6793e462&is=679292e2&hm=0049460077e8c2876fe5db0ebba8b45b23f6ee37ba6aa8bf328d073c134956c9&
20:05 < bridge> <Ewan> 1 minute ago
20:05 < bridge> <Solly> i did cmake ..; make -j24
20:05 < bridge> <Ewan> try not make
20:05 < bridge> <Solly> okay....
20:05 < bridge> <Ewan> do u have ninja or something
20:06 < bridge> <Ewan> -GNinja
20:06 < bridge> <Solly> i do now
20:06 < bridge> <Solly> and i will try
20:07 < bridge> <Solly> 👀
20:07 < bridge> <Solly> works
20:10 < bridge> <Ewan> prob beats make anyway
20:10 < bridge> <Ewan> u know instead of doing like `cmake; <make command>` u can do `cmake; cmake --build` and it will do it intelligently
20:11 < bridge> <Ewan> u basically dont even have to care about the generator as long as u have it installed then
20:11 < bridge> <Solly> i somehow always forget the cmake --build
20:14 < bridge> <kebscs> 376k issues :justatest:
20:14 < bridge> <Solly> probably nix
20:14 < bridge> <Solly> or some other huge monorepo
20:19 < bridge> <Ewan> yea
20:19 < bridge> <Ewan> it's nixpkgs
20:19 < bridge> <Ewan> which is all packages
20:28 < bridge> <kollpotato> why doesnt heinrich chat here anymore
20:29 < bridge> <kollpotato> no messages since the last year
20:32 < bridge> <Ewan> i can only speculate
20:32 < bridge> <ryozuki> true weird
20:33 < bridge> <ryozuki> but he online so he reads us
20:33 < bridge> <Ewan> i think ppl may just be more mad at him overall lately
20:33 < bridge> <ryozuki> well thats a bit trol since last year is not a month ago
20:33 < bridge> <ryozuki> did smth happen
20:33 < bridge> <kollpotato> for what?
20:33 < bridge> <Ewan> eh
20:33 < bridge> <kollpotato> yes xD
20:33 < bridge> <Ewan> not really
20:34 < bridge> <kollpotato> no message since october though
20:34 < bridge> <ryozuki> he active on gh
20:34 < bridge> <ryozuki> so we cant sneak prs kel
20:34 < bridge> <kollpotato> sometimes devs ask him something here
20:34 < bridge> <ryozuki> so we cant sneak prs kek
20:34 < bridge> <kollpotato> are dms on github a thing
20:34 < bridge> <Ewan> no
20:35 < bridge> <Ewan> oh gh he can ghost people if he doesn't like their perspective lol
20:35 < bridge> <ryozuki> @kollpotato when pr to ddnet
20:35 < bridge> <kollpotato> hmmm
20:35 < bridge> <kollpotato> a good question
20:35 < bridge> <kebscs> leaves a comment, author resolves it and refuses to collaborate further
20:35 < bridge> <kollpotato> i need to open an issue first
20:35 < bridge> <Ewan> yea
20:35 < bridge> <kebscs> saw at least 10 prs like that that just are abandoned
20:35 < bridge> <Ewan> basically
20:35 < bridge> <kollpotato> i havent got much issues with ddnet
20:35 < bridge> <ryozuki> tell me prs and i can look into then if its about merging
20:36 < bridge> <ryozuki> altho if its 0.7 stuff i prefer to not be involved
20:36 < bridge> <ryozuki> xd
20:36 < bridge> <kollpotato> this https://github.com/ddnet/ddnet/pull/6961 :justatest:
20:37 < bridge> <kebscs> i dont have them saved last 2 pages of prs have few like that
20:37 < bridge> <Ewan> i think past a certain point the conflicts will outweigh the cost of just remaking the change or w/e
20:37 < bridge> <Ewan> so it really is insulting when he just leaves your code to sit like that
20:37 < bridge> <ryozuki> but whats the issue, author solved the issue and is waiting for merge?
20:38 < bridge> <Ewan> or more feedback
20:38 < bridge> <Ewan> ive seen many PRs which have died because he can't be bothered to come up with a response
20:38 < bridge> <ryozuki> well if that happens ask another dev
20:38 < bridge> <Ewan> yea well i think whenever that's been tried it seems like going behind him or w/e
20:38 < bridge> <Ewan> he's heinrich
20:39 < bridge> <Ewan> he's just more involved than most devs so they usually defer to him
20:39 < bridge> <ryozuki> if he is against smth he will come after we merge it so
20:39 < bridge> <kollpotato> what about this pr #8988?
20:39 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/8988
20:39 < bridge> <kollpotato> just a simple command
20:39 < bridge> <kollpotato> not much
20:39 < bridge> <ryozuki> we merge first ask questions later if the pr looks good
20:39 < bridge> <Ewan> yea right
20:39 < bridge> <Ewan> did u see how he reviewed chiller's more recent PRs
20:39 < bridge> <Ewan> also why you've probably seen fewer PRs from him
20:40 < bridge> <kollpotato> then the whole ddnet is down because of a null pointer
20:40 < bridge> <Ewan> sometimes he's relentless and idk his criteria
20:40 < bridge> <zhn> 6 files changed wtf
20:41 < bridge> <kollpotato> 2 of them are header files
20:42 < bridge> <kollpotato> one file is just for registering the command
20:42 < bridge> <kebscs> <https://github.com/ddnet/ddnet/pull/9083>
20:43 < bridge> <kebscs> ok i changed to heinrich review and now what
20:46 < bridge> <Ewan> that one actually does seem kinda prone to weird things, just another reason we need truly unique identifiers for players lol
20:48 < bridge> <louis> its good to have someone like heinrich that heavily vets everything though
20:48 < bridge> <kebscs> 45 degree bind pr?
20:48 < bridge> <louis> its just he's not as active as some ppl would like
20:48 < bridge> <kebscs> also simple feature and finished and abandoned
20:48 < bridge> <louis> most maintainers aren't as active as ppl would like i guess
20:52 < bridge> <ryozuki> not paid
20:52 < bridge> <kebscs> i guess so but would be nice to have it in pr
20:53 < bridge> <kebscs> or review with a way to make it less bug prone
20:54 < bridge> <louis> even if they were paid i doubt they'd work
20:54 < bridge> <louis> unless it was pretty good rates
20:54 < bridge> <ryozuki> ill check some prs
20:54 < bridge> <ryozuki> btw i recommend u are pushy about ur own prs to get them merged
20:54 < bridge> <ryozuki> ppl simply forget
20:54 < bridge> <ryozuki> i am pushy
20:54 < bridge> <Ewan> #3411
20:54 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/3411
20:55 < bridge> <kollpotato> XD
20:55 < bridge> <Ewan> no pr yet bcs nobody has done it
20:55 < bridge> <louis> i dont rly care too much about getting my specific stuff merged, it'd just be nice to have things merged quicker in general
20:55 < bridge> <ryozuki> be pushy about it
20:55 < bridge> <ryozuki> but send the pr links xd
20:56 < bridge> <kebscs> https://github.com/ddnet/ddnet/pull/9057
20:56 < bridge> <kebscs> <https://github.com/ddnet/ddnet/pull/9057>
20:56 < bridge> <kollpotato> when merge this #7697
20:56 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/7697
20:56 < bridge> <kebscs> this is already implemented in "new" teeworlds editor
20:58 < bridge> <robyt3> I'd like #9097 in 19.0
20:58 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/9097
20:58 < bridge> <Jupstar ✪> i think laser doors and stuff would be more useful then pickups
20:58 < bridge> <Jupstar ✪> i think laser doors and stuff would be more useful than pickups
20:59 < bridge> <kollpotato> https://github.com/ddnet/ddnet/pull/9469 :justatest:
20:59 < bridge> <Jupstar ✪> i mean ok there are probs few maps that use moving switch pickups
21:00 < bridge> <Jupstar ✪> that is quite a massive hack xD
21:00 < bridge> <kebscs> it doesnt render moving pickups on speeder
21:00 < bridge> <kebscs> just normal ones in palce
21:00 < bridge> <kebscs> just normal ones in place
21:00 < bridge> <kollpotato> why would this pr even exist
21:00 < bridge> <kollpotato> it probably affected physics a lot
21:00 < bridge> <kebscs> speeders are tied to server tick so cant rly accurately in editor
21:01 < bridge> <ryozuki> added a comment on https://github.com/ddnet/ddnet/pull/8988#pullrequestreview-2570892935
21:01 < bridge> <kollpotato> @maslowian lets goooo
21:02 < bridge> <kollpotato> why exactly snake case?
21:02 < bridge> <Jupstar ✪> pleasecancelthisswapthankyouverymuch
21:02 < bridge> <kollpotato> all other ddnet commands are just words without any separator
21:02 < bridge> <louis> yeah i don't think it's gonna happen xd
21:02 < bridge> <louis> i mean its cool though
21:02 < bridge> <louis> maybe with good prediction it can be nice
21:02 < bridge> <ryozuki> readable for me and if u type /cancel<tab> it fills it
21:03 < bridge> <kollpotato> yea
21:03 < bridge> <kollpotato> agree
21:03 < bridge> <Jupstar ✪> i'd say /rocketman should give jetpack
21:04 < bridge> <kollpotato> /shootgun
21:04 < bridge> <kollpotato> btw
21:04 < bridge> <kollpotato> idea for an admin only command
21:04 < bridge> <kollpotato> /seg - causes the server to do a segmentation fault
21:04 < bridge> <Jupstar ✪> oh yeah
21:05 < bridge> <Jupstar ✪> /cpp
21:05 < bridge> <ryozuki> https://github.com/ddnet/ddnet/pull/9083 added to merge queue
21:05 < bridge> <kollpotato> hell yeah
21:05 < bridge> <ryozuki> i wonderh ow many ppl used /c ever
21:05 < bridge> <ryozuki> i wonder how many ppl used /c ever
21:05 < bridge> <kollpotato> i never did xD
21:05 < bridge> <milkeeycat> ^
21:05 < bridge> <Jupstar ✪> i always use it
21:05 < bridge> <ryozuki> anyway u shouldnt be doing naughty stuff on ddnet chat
21:05 < bridge> <ryozuki> its transparent
21:05 < bridge> <kollpotato> i just /w <tab>
21:06 < bridge> <ryozuki> :justatest:
21:06 < bridge> <kollpotato> and sometimes arrow key up
21:07 < bridge> <ryozuki> @jupeyy_keks ur graphics guy, does it look ok? https://github.com/ddnet/ddnet/pull/9057
21:07 < bridge> <kollpotato> is there a view screenshots directory button in ddnet
21:08 < bridge> <Ewan> how would that work
21:08 < bridge> <Ewan> ddnet doesnt take screenshots
21:08 < bridge> <Jupstar ✪> i dunno xd
21:08 < bridge> <Ewan> u can do it thru steam but anything else is super platform specific
21:08 < bridge> <ryozuki> bruv
21:08 < bridge> <Jupstar ✪> F10
21:09 < bridge> <louis> u can take screenshot ind dnet
21:09 < bridge> <Ewan> u can make ur own folder in xdg photos but 99% of ppl wont want that
21:09 < bridge> <Ewan> WTF
21:09 < bridge> <Ewan> news to me
21:09 < bridge> <Jupstar ✪> xddd
21:09 < bridge> <kollpotato> xD
21:09 < bridge> <Ewan> lterally never used this feature
21:09 < bridge> <louis> and ye there should be screenshot carosel xd
21:09 < bridge> <louis> would be cute
21:09 < bridge> <Ewan> so where does it put them :justatest:
21:09 < bridge> <robyt3> I'll review it
21:09 < bridge> <kollpotato> ah i think i found an alternative
21:09 < bridge> <kollpotato> i can copy the dir from the console
21:09 < bridge> <Jupstar ✪> so many features in ddnet, there's at least one nobody knows xd
21:09 < bridge> <kollpotato> not perfect but it works
21:09 < bridge> <ryozuki> thanks!
21:09 < bridge> <Ewan> just the ddnet data dir?
21:09 < bridge> <kollpotato> ddnet/screenshots
21:10 < bridge> <ryozuki> any other pr
21:10 < bridge> <ryozuki> now is the time
21:10 < bridge> <kollpotato> https://github.com/ddnet/ddnet-scripts/pull/38
21:11 < bridge> <ryozuki> troll
21:11 < bridge> <kollpotato> xd
21:11 < bridge> <ryozuki> i closed it
21:11 < bridge> <kollpotato> lmao
21:11 < bridge> <kollpotato> why
21:11 < bridge> <ryozuki> it had lot of conflicts
21:11 < bridge> <ryozuki> (im edg-l btw)
21:11 < bridge> <kollpotato> edger
21:11 < bridge> <kollpotato> ikr
21:12 < bridge> <kebscs> <https://github.com/ddnet/ddnet/pull/9544>
21:12 < bridge> <kebscs> imo not sure if necessary, or moved to ddnet tab
21:12 < bridge> <kollpotato> what about adding view screenshots dir there too
21:12 < bridge> <kollpotato> :poggers2:
21:12 < bridge> <kebscs> view screenshot in that tab ok
21:13 < bridge> <ryozuki> looks ok, i found a typo that triggers me so i commentet it
21:13 < bridge> <ryozuki> looks ok, i found a typo that triggers me so i commented it
21:14 < bridge> <ryozuki> do a lot of ppl view their saves files?
21:14 < bridge> <Ewan> ```
21:14 < bridge> <Ewan> ewan@machine ~/ddnet-rs (main)> cargo run
21:14 < bridge> <Ewan> warning: /home/ewan/ddnet-rs/Cargo.toml: file `/home/ewan/ddnet-rs/src/lib.rs` found to be present in multiple build targets:
21:14 < bridge> <Ewan>   * `lib` target `ddnet_rs`
21:14 < bridge> <Ewan>   * `bin` target `ddnet-rs`
21:14 < bridge> <Ewan>     Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s
21:14 < bridge> <Ewan>      Running `target/debug/ddnet-rs`
21:14 < bridge> <Ewan> [2025-01-23T20:12:08Z INFO  fs] Found config dir in "/home/ewan/.config/ddnet-rs-alpha"
21:14 < bridge> <Ewan> [2025-01-23T20:12:08Z WARN  thread_priority] Couldn't set the priority for the thread with Rust Thread ID ThreadId(7) named Some("backend-thread"): OS(13)
21:14 < bridge> <Ewan> [2025-01-23T20:12:08Z INFO  graphics_backend::backend_thread] graphics backend thread exited: libvulkan.so.1: cannot open shared object file: No such file or directory
21:14 < bridge> <Ewan> [2025-01-23T20:12:08Z INFO  xkbcommon_dl] Failed loading `libxkbcommon.so.0`. Error: CantOpen(DlOpen { desc: "libxkbcommon.so.0: cannot open shared object file: No such file or directory" })
21:14 < bridge> <Ewan> [2025-01-23T20:12:08Z INFO  xkbcommon_dl] Failed loading `libxkbcommon.so`. Error: CantOpen(DlOpen { desc: "libxkbcommon.so: cannot open shared object file: No such file or directory" })
21:14 < bridge> <Ewan> thread 'main' panicked at /home/ewan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/winit-0.30.8/src/platform_impl/linux/wayland/seat/keyboard/mod.rs:300:41:
21:14 < bridge> <Ewan> called `Result::unwrap()` on an `Err` value: XKBNotFound
21:14 < bridge> <Ewan> note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
21:14 < bridge> <Ewan> ```
21:14 < bridge> <Ewan> it's installed 😭
21:14 < bridge> <Ewan> wat is this runtime lib detection
21:14 < bridge> <kollpotato> i do once a few months
21:14 < bridge> <Ewan> weird shit
21:14 < bridge> <Ewan> that should be ld.so's job
21:14 < bridge> <kebscs> i do
21:14 < bridge> <kollpotato> wayland skill issue?
21:14 < bridge> <kebscs> save map that gets boring, then come back to it after while with save code
21:15 < bridge> <Ewan> hyprland uses xkb
21:15 < bridge> <kollpotato> u on hyprland?
21:15 < bridge> <Ewan> and libxkbcommon is installed here
21:15 < bridge> <Ewan> yea
21:15 < bridge> <kollpotato> omg
21:15 < bridge> <kollpotato> me too
21:15 < bridge> <kollpotato> hi frien
21:15 < bridge> <Ewan> hi
21:15 < bridge> <kollpotato> i still havent finished configuring it
21:15 < bridge> <Ewan> maybe ddnet-rs needs a fhs env :pepeW:
21:16 < bridge> <Jupstar ✪> what is that xd
21:16 < bridge> <kebscs> <https://github.com/ddnet/ddnet/pull/9251/>
21:17 < bridge> <pluskz> The client from that branch has good prediction, the problem is with old clients xd
21:17 < bridge> <kebscs> would have been useful when i was testing hot reload
21:17 < bridge> <ryozuki> @robyt3 if u can review https://github.com/ddnet/ddnet/pull/9572 too :3
21:17 < bridge> <ryozuki> :owo:
21:17 < bridge> <kollpotato> uwu please review
21:17 < bridge> <Jupstar ✪> why not add it in a new file
21:18 < bridge> <Jupstar ✪> chat msg in new msg out
21:19 < bridge> <kebscs> what if it was word per line instead of json
21:19 < bridge> <Jupstar ✪> i think we should give up on the cmake list explicit files, if we don't stop bloating existing components more
21:19 < bridge> <Jupstar ✪> a chat filter sounds like smth that could be split completely
21:19 < bridge> <Ewan> 🦑
21:19 < bridge> <ryozuki> wdym
21:19 < bridge> <kollpotato> less configuration
21:19 < bridge> <kebscs> non tech people dont know json, it would be easier to edit it for them
21:20 < bridge> <robyt3> json is better, more easily extensible
21:20 < bridge> <ryozuki> also json is easier to handle since we got the json parser already
21:20 < bridge> <robyt3> move the censoring functions to a different file for faster parallel compilation
21:20 < bridge> <kebscs> for getting it from web yes
21:20 < bridge> <ryozuki> is it worth it?
21:20 < bridge> <ryozuki> xD
21:20 < bridge> <Jupstar ✪> lel
21:21 < bridge> <Ewan> json for configs is the worst IMO
21:21 < bridge> <ryozuki> for parsing too since we effectively need 0 parsing code
21:21 < bridge> <kebscs> but i mean if some streamer wants to add a bannable word
21:21 < bridge> <Jupstar ✪> did you miss serde?
21:21 < bridge> <Jupstar ✪> be honest
21:21 < bridge> <kebscs> json is confusing
21:21 < bridge> <Ewan> i can't go back
21:21 < bridge> <ryozuki> nah
21:21 < bridge> <ryozuki> i do
21:21 < bridge> <robyt3> also because we might want to reuse it for other strings
21:21 < bridge> <ryozuki> serde is the best invention in rust
21:21 < bridge> <kollpotato> use rust bridge and implement word censoring in rust!
21:21 < bridge> <Ewan> ye
21:21 < bridge> <Jupstar ✪> go back to what xd
21:21 < bridge> <Ewan> non serde ser/de
21:21 < bridge> <ryozuki> can u add a comment with this? i cant code rn so i may forget
21:21 < bridge> <kebscs> yea but you dont need to parse text file
21:21 < bridge> <Jupstar ✪> ah xdd
21:21 < bridge> <ryozuki> u need to parse newlines xd
21:21 < bridge> <robyt3> yeah, I'll add some comments
21:21 < bridge> <Ewan> they could port it to cpp tho it would just be somewhat messy
21:23 < bridge> <Ewan> they did wow <https://github.com/serde-cpp/serde-cpp>
21:23 < bridge> <Ewan> they are using real attributes
21:23 < bridge> <Ewan> i was expecting macro mess
21:24 < bridge> <kollpotato> another dependency to ddnet? :poggers2:
21:24 < bridge> <Ewan> they have json parser it's fine
21:24 < bridge> <Ewan> this only has yaml anyway rn
21:24 < bridge> <Ewan> but it's about the usability
21:24 < bridge> <kollpotato> yaml is good
21:24 < bridge> <kollpotato> but
21:24 < bridge> <kollpotato> having .cfg .json .yaml
21:24 < bridge> <Ewan> also i dont think most ppl want to depend on a repo with so few stars and such
21:24 < bridge> <ryozuki> serde has shitload of options
21:24 < bridge> <kollpotato> not good
21:25 < bridge> <kollpotato> yeah just copy the source straight to your project
21:25 < bridge> <Ewan> i think json and cfg do serve pretty different roles
21:25 < bridge> <Ewan> but having json for client configs just sucks
21:25 < bridge> <Ewan> make a toml parser
21:25 < bridge> <kollpotato> i will rewrite my teeworlds protocol in serde
21:25 < bridge> <kollpotato> i have no idea why i didnt do it in the first place
21:26 < bridge> <Ewan> or do old fashioned .ini which is basically toml compatible anyway
21:26 < bridge> <kollpotato> i will rewrite my teeworlds protocol packer in serde
21:26 < bridge> <Ewan> not hard to parse either tho
21:26 < bridge> <Ewan> json is like the second worst way to store configs imo
21:27 < bridge> <kollpotato> who knows about toml besides rust devs
21:27 < bridge> <Ewan> lots of ppl
21:27 < bridge> <Ewan> it was around before that
21:27 < bridge> <kollpotato> its relatively new
21:27 < bridge> <kebscs> json>
21:27 < bridge> <kollpotato> no 😠
21:27 < bridge> <kollpotato> just let the user write in binary
21:27 < bridge> <Ewan> cbor or jsonb
21:27 < bridge> <kollpotato> who cares about silly abstractions yk
21:28 < bridge> <Ewan> bson*
21:28 < bridge> <kollpotato> msgpack
21:28 < bridge> <Ewan> but i think those are mostly good for web
21:28 < bridge> <Ewan> network transfer
21:28 < bridge> <Ewan> or even like protobuf
21:28 < bridge> <kollpotato> msgpack good
21:28 < bridge> <kollpotato> ddnet uses it
21:28 < bridge> <Ewan> there was a modern protobuf alternative that looked good
21:28 < bridge> <kollpotato> for caching
21:28 < bridge> <Ewan> i think user configs are totally different bcs they need to be readable still
21:28 < bridge> <kollpotato> huh
21:28 < bridge> <kollpotato> what is it
21:28 < bridge> <Ewan> and easy to fix if u break them
21:28 < bridge> <Ewan> i cant remember what it's called
21:29 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1332084808901333062/image.png?ex=6793f827&is=6792a6a7&hm=f1ae4d76dd55926ef3f2b932059ac237d3a5d23d17e8d8e2ac69db838a790181&
21:29 < bridge> <kebscs> :15Socialcredit:
21:29 < bridge> <ryozuki> taiwan number one
21:31 < bridge> <Ewan> prob this <https://github.com/betwixt-labs/bebop>
21:32 < bridge> <Ewan> btw, cbor is based on msgpack
21:32 < bridge> <kollpotato> so fast???
21:32 < bridge> <kollpotato> crazy
21:32 < bridge> <Ewan> it's assuming you need the whole payload at once
21:32 < bridge> <Ewan> other formats perform better if you're doing chunked reads for example
21:33 < bridge> <Ewan> but it's good for what it is
21:33 < bridge> <ryozuki> https://github.com/ddnet/ddnet/pull/9542 looks good to me, if another can  check
21:33 < bridge> <ryozuki> otherwise ill check again next week and merge
21:48 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1332089477069406209/image.png?ex=6793fc80&is=6792ab00&hm=1a94a1e3fb3e70776bace5a8527467556d9532a18e30a220bf1407f08158bd4e&
21:49 < bridge> <kebscs> <https://github.com/ddnet/ddnet/pull/9274>
21:49 < bridge> <kebscs> 🙂
21:49 < bridge> <ryozuki> @kebscs its true that u should open a issue first before implementing a feature, specially if it is a bit polemic
21:50 < bridge> <kebscs> if i feel like coding ill just quick code
21:50 < bridge> <robyt3> There are still unresolved comments. I'm working on the one about debug dummies
21:51 < bridge> <ryozuki> ok but then dont complain if feature is rejected, just have it in mind
21:51 < bridge> <kebscs> cant the 128p pr be split into 2
21:51 < bridge> <kebscs> client and server
21:51 < bridge> <kebscs> unresolved comments are about server
21:52 < bridge> <robyt3> Of course, because this only contains server-side changes except setting `MAX_CLIENTS = 128`
21:53 < bridge> <kollpotato> what is this save name '/load panty fit carry' to continue
21:54 < bridge> <kollpotato> does it use the whole english dictionary
21:54 < bridge> <kebscs> yea, but most of the server changes are to support old clients from what i see
21:54 < bridge> <robyt3> It uses `wordlist.txt`, no idea where that comes from though
21:54 < bridge> <kebscs> so if the max_clients gets changed to 128 now on client itll support more client versions in future 👍
21:54 < bridge> <kollpotato> @ryozuki less than 100 prs open now
21:54 < bridge> <kebscs> so if the max_clients gets changed to 128 now on client, the patch will support more client versions in future 👍
21:55 < bridge> <kollpotato> u can rest now rust pro
21:56 < bridge> <kebscs> @ryozuki <https://github.com/ddnet/ddnet/pull/8959>
21:57 < bridge> <kollpotato> why does it end with 6666 xD
21:57 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1332091816631074996/image.png?ex=6793feae&is=6792ad2e&hm=f9299dadbdaeb4504115915170dc9a48fadb06f08abc598462984116df894b49&
21:57 < bridge> <kollpotato> cursed file
21:57 < bridge> <robyt3> yeah, I also noticed :monkaS:
21:59 < bridge> <kollpotato> the features was added by zwelf 5 years ago
21:59 < bridge> <kollpotato> comes from here https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases
21:59 < bridge> <kollpotato> there is another file available
21:59 < bridge> <kollpotato> also 66666 lines
21:59 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1332092408153899029/image.png?ex=6793ff3b&is=6792adbb&hm=a745e90a142259de9f960cbb1be00fac1cccac629070f718f3f9445e66717671&
21:59 < bridge> <Ewan> `called `Result::unwrap()` on an `Err` value: failed to load default files for "skins/": requested sound file for default not found: ground_jump_001`
21:59 < bridge> <Ewan> 😕
21:59 < bridge> <Ewan> ``called `Result::unwrap()` on an `Err` value: failed to load default files for "skins/": requested sound file for default not found: ground_jump_001``
21:59 < bridge> <Ewan> 😕
21:59 < bridge> <kollpotato> and another one
21:59 < bridge> <kollpotato> https://cdn.discordapp.com/attachments/293493549758939136/1332092477779345441/image.png?ex=6793ff4b&is=6792adcb&hm=5e072f214ae5605365bd44b0c15615657ee56f6d3abe9242b0169c9c4980059f&
21:59 < bridge> <kollpotato> bruh
