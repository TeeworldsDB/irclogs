00:01 < ChillerDragon> clearly a bug in the c++ compiler
00:01 < ChillerDragon> ryo pls fix
00:02 < ChillerDragon> @louis whats the problem with WSL?
00:16 < bridge> <louis> ChillerDragon: idk im on native windows
00:16 < ChillerDragon> so?
00:16 < ChillerDragon> go to ms store get WSL for free and you have a linux shell in 1 min
00:17 < ChillerDragon> while being on native windows
00:22 < ChillerDragon> @louis did it work?
00:22 < bridge> <louis> i mean i already cloned on my linux vps üòÖ
00:22 < ChillerDragon> so you build there now?
00:22 < ChillerDragon> yea that works too
00:28 < bridge> <louis> ya
01:22 < bridge> <Ewan> if what u want is a native linux build wsl would be good
01:23 < bridge> <Ewan> but usually when i see it advised here it‚Äôs not a good ides
01:23 < bridge> <Ewan> odea
01:37 < bridge> <degisikadamx02> did u remember that :D ? I tried what you said "you can change m_HammerInput to m_Controls.m_aInputData[!g_Config.m_ClDummy]" but it didnt work. I think it is my fault but can u explain it in details.
09:40 < bridge> <ryozuki> morning
09:43 < bridge> <ryozuki> i never contributed a cpp compiler like clang, only llvm which powers rust or mlir
09:43 < bridge> <ryozuki> :owo:
11:04 < bridge> <ryozuki> @learath2 https://www.reddit.com/r/okbuddybaka/comments/17o64eq/chisato_and_takina_explain_how_to_normalize/
11:04 < bridge> <ryozuki> too based
11:08 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1184436738148552734/1hh6h9i083jb1.png?ex=658bf7ac&is=657982ac&hm=a14fdf2502231957577ff308b5549447ff33aee0b4a620a52ad5040617f24cb7&
11:08 < bridge> <ryozuki> bocchi-chan is rust
11:08 < bridge> <ryozuki> bocchi-chan is unsafe rust
11:12 < bridge> <teero777> :monkaStop:
11:23 < bridge> <Fussel> RAII
11:34 < ChillerDragon> lerato did you hack my raspi again? it offline
11:38 < bridge> <cyberfighter> Ddnet irc bridge (lerato): yes ChillerDragon
11:46 < bridge> <Bota> I was hungry so I ate some cables
11:46 < bridge> <Bota> Sry
11:48 < bridge> <teero777> Now I know why I can't find my nvme adapter
11:50 < bridge> <Bota> That was not me I promise :justatest:
11:51 < bridge> <Bota> Please dont tell Lerath :justatest:
11:51 < bridge> <teero777> Ban :banhammer:
11:51 < bridge> <Bota> You? :kek:
11:51 < bridge> <Mr.Gh0s7> are cables tasty? I usually just east my hat! ü•º üé©
11:52 < bridge> <Bota> I as a Bot like Cables
11:52 < bridge> <Bota> And Trains üöÇ Choo Choo
11:52 < bridge> <Mr.Gh0s7> I guess bots wanna be sentient after all
11:53 < bridge> <Mr.Gh0s7> Since if you eat all the cables you'll won't be able to function
11:53 < bridge> <Mr.Gh0s7> and will have to evolve
11:54 < bridge> <teero777> I west my hat too
11:54 < bridge> <teero777> I west my hat
11:57 < bridge> <Fussel> ```CMake Warning (dev) at CMakeLists.txt:383 (message):
11:57 < bridge> <Fussel>   GAME_CLIENT is not alphabetically sorted
11:57 < bridge> <Fussel> Call Stack (most recent call first):
11:57 < bridge> <Fussel>   CMakeLists.txt:391 (set_glob)
11:57 < bridge> <Fussel>   CMakeLists.txt:2161 (set_src)
11:57 < bridge> <Fussel> This warning is for project developers.  Use -Wno-dev to suppress it.``` hu?
11:57 < bridge> <Fussel> I even put in the result of `find . -type f | sort`
11:57 < bridge> <Mr.Gh0s7> I think it means the alphabetical order of the filenames or smt
11:58 < bridge> <Mr.Gh0s7> smt like this
11:58 < bridge> <Fussel> ‚Ä¶ `| sort`
11:58 < bridge> <heinrich5991> try `LC_ALL=C`
11:59 < bridge> <heinrich5991> `| LC_ALL=C sort`
12:04 < bridge> <Fussel> thx, did it
12:15 < bridge> <Fussel> this arithmetics-with-enums-stuff is somewhat irritating ‚Ä¶ only C coders will even think about doing such
12:16 < bridge> <heinrich5991> explain?
12:16 < bridge> <heinrich5991> can you show an example?
12:16 < bridge> <Fussel> e.g. float / enum value
12:17 < bridge> <Fussel> (compiler with c++20 warns about)
12:17 < bridge> <heinrich5991> ah. before constexpr, this was the only way to actually define constants
12:17 < bridge> <heinrich5991> ah. before constexpr, this was the only way to actually define compile-time constants
12:17 < bridge> <Fussel> ^^you were faster
12:18 < bridge> <heinrich5991> well, `const` just means "constant after initialization"
12:18 < bridge> <Fussel> i doubt C++23 will allow that at all
12:18 < bridge> <heinrich5991> do you have a reference that this has something to do with c++20?
12:18 < bridge> <heinrich5991> or is it just that particular compiler that started warning for it when changed to c++20 mode
12:18 < bridge> <Fussel> no this warnings appeared after i switched from c++17 to c++20
12:19 < bridge> <heinrich5991> ok, so it might not be related to c++20 at all? I'm not sure how compilers usually implement stuff
12:21 < bridge> <ryozuki> isnt c++ backwards compat
12:22 < bridge> <Fussel> no. they finally decided against this
12:22 < bridge> <ryozuki> :O
12:22 < bridge> <heinrich5991> link?
12:23 < bridge> <Fussel> no link, but they dropped formerly deprecated stuff, like garbage collector
12:24 < bridge> <heinrich5991> I don't remember a garbage collector in C++
12:25 < bridge> <Fussel> they introduced some keywords, but it wasn't used ^^
12:25 < bridge> <heinrich5991> ah
12:25 < bridge> <heinrich5991> and no compiler implemented it
12:25 < bridge> <heinrich5991> according to some random blog post
12:25 < bridge> <heinrich5991> so they're not actually removing anything that could break anyone
12:25 < bridge> <heinrich5991> since it wasn't implemented
12:28 < bridge> <ryozuki> is cobol memory safe?
12:30 < bridge> <Fussel> as memory safe as any ancient egypt dialect
12:30 < bridge> <heinrich5991> https://news.ycombinator.com/item?id=23240882
12:31 < bridge> <heinrich5991> > I still haven‚Äôt seen any discussion of its characteristics that make it relatively ‚Äúsafe‚Äù, secure, and fast. These are; all memory is statically allocated, no dynamic memory allocation. No user defined functions and no stack. Of course I‚Äôm referring to the 85 standard here and later versions added these things but 85 is very common on mainframes (my understanding please correct if wrong).
12:31 < bridge> <heinrich5991> > 
12:31 < bridge> <heinrich5991> > These two things disallow entire classes of exploits and errors.
12:31 < bridge> <heinrich5991> sounds like yes, by being sufficiently restricted
12:32 < bridge> <TsFreddie> where did the convo in #3091 start or am I just blind
12:32 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/3091
12:32 < bridge> <heinrich5991> see the mention over my first comment
12:32 < bridge> <heinrich5991> see the mention over my first comment today
12:32 < bridge> <ryozuki> oh look thats the issue i opened
12:33 < bridge> <TsFreddie> ah, got it. thnaks
12:33 < bridge> <TsFreddie> I am blind afterall
12:33 < bridge> <TsFreddie> you sure did
12:34 < bridge> <TsFreddie> i did cringe a little bit reading my old replies
12:34 < bridge> <ryozuki> xd
12:34 < bridge> <TsFreddie> am i the only one who don't enjoy reading old posts of mine
12:35 < bridge> <heinrich5991> your posts look fine
12:35 < bridge> <TsFreddie> it's just me.
12:36 < bridge> <ryozuki> i cringe reading my forum posts
12:36 < bridge> <ryozuki> but i was 15
12:36 < bridge> <TsFreddie> oof
12:36 < bridge> <TsFreddie> I think I was 17 when I found teeworlds
12:36 < bridge> <ryozuki> im 23 now
12:37 < bridge> <TsFreddie> 8 year veteran
12:37 < bridge> <ryozuki> btw at some point when i looked into rust
12:37 < bridge> <ryozuki> i also disliked it
12:37 < bridge> <ryozuki> and even abandoned it
12:37 < bridge> <ryozuki> but i picked it again
12:37 < bridge> <ryozuki> xD
12:37 < bridge> <TsFreddie> I hate rust
12:37 < bridge> <ryozuki> :owo:
12:38 < bridge> <TsFreddie> I don't, but I like saying it
12:38 < bridge> <TsFreddie> :owo:
12:38 < bridge> <ryozuki> :NekoEvil:
12:38 < bridge> <TsFreddie> anyway. I'm supposed to finishing my work so I can go home. soo...
12:38 < bridge> <TsFreddie> brb
12:39 < bridge> <ryozuki> just like me when i talk about cpp
12:39 < bridge> <ryozuki> üò¨
12:39 < bridge> <ryozuki> rip
12:39 < bridge> <ryozuki> what time is it there
12:39 < bridge> <ryozuki> 19:39
12:40 < bridge> <TsFreddie> yes, smart guy
12:40 < bridge> <ryozuki> i literally googled
12:40 < bridge> <ryozuki> time in china
12:40 < bridge> <ryozuki> :poggers2:
12:43 < bridge> <TsFreddie> lucky for you china only has one timezone
12:45 < bridge> <ryozuki> https://without.boats/blog/poll-progress/
12:45 < bridge> <TsFreddie> btw how was your app
12:46 < bridge> <ryozuki> i need more time
12:47 < bridge> <ryozuki> yesterday i started a pascal compiler using LLVM MLIR
12:47 < bridge> <ryozuki> in rust
12:47 < bridge> <TsFreddie> did you find a thing to do for it already
12:47 < bridge> <ryozuki> no xd
12:47 < bridge> <TsFreddie> why pascal
12:47 < bridge> <ryozuki> i need a easy good app idea
12:47 < bridge> <ryozuki> cuz pascal is simpler to do a compiler
12:47 < bridge> <ryozuki> its like C but unlike a functional language
12:47 < bridge> <ryozuki> forth is the simplest but its stack based
12:47 < bridge> <TsFreddie> just for fun i guess
12:47 < bridge> <ryozuki> and usually with a interpreter
12:47 < bridge> <ryozuki> yeah
12:47 < bridge> <ryozuki> and to flex
12:47 < bridge> <ryozuki> hey i did a mlir pascal compiler!
12:48 < bridge> <ryozuki> good thing to add to resume
12:48 < bridge> <TsFreddie> can't wait to compile my pascal minesweeper using your compiler
12:48 < bridge> <ryozuki> it will be blazingly fast
12:48 < bridge> <ryozuki> and also maybe able to run some stuff in gpu
12:48 < bridge> <ryozuki> thanks to MLIR
12:48 < bridge> <ryozuki> https://mlir.llvm.org/docs/Dialects/GPU/
12:48 < bridge> <maksudsigma> –¢–µ–±—è –ö–∞—Ç—è –∂–¥–µ—Ç –∑–∞–π–¥–∏ https://discord.gg/pT7mRJBdMx
12:49 < bridge> <ryozuki> this is all big copium tho, maybe i never finish it
12:49 < bridge> <TsFreddie> how long is your resume
12:49 < bridge> <ryozuki> @heinrich5991 this guy spammed all channels
12:49 < bridge> <TsFreddie> :justatest:
12:49 < bridge> <ryozuki> i need to update it
12:49 < bridge> <TsFreddie> i had like three things.
12:49 < bridge> <ryozuki> but i only worked at 2 companies
12:49 < bridge> <TsFreddie> maybe that's why i never found a job
12:50 < bridge> <ryozuki> xd
12:50 < bridge> <ryozuki> u need to sell urself
12:50 < bridge> <ryozuki> i mentioned i contributed to ddnet on my interview
12:50 < bridge> <TsFreddie> maybe when I get fired from this one
12:50 < bridge> <ryozuki> i also mentioned the rust kernel experiment i did following a blog post
12:50 < bridge> <ryozuki> and all the rust projects
12:50 < bridge> <ryozuki> also my old wannabe game engines
12:50 < bridge> <ryozuki> in c
12:50 < bridge> <TsFreddie> oh i had community manager in my resume
12:50 < bridge> <TsFreddie> with ddnet
12:51 < bridge> <TsFreddie> teeworlds*
12:51 < bridge> <ryozuki> why wait to get fired
12:51 < bridge> <ryozuki> find a new job
12:51 < bridge> <ryozuki> the best way to get a better salary is to jump ship
12:51 < bridge> <TsFreddie> i
12:51 < bridge> <TsFreddie> we haven't publish a full project yet
12:51 < bridge> <ryozuki> why do u care
12:51 < bridge> <ryozuki> company would be first to fire u
12:51 < bridge> <ryozuki> dont put the company on a pedestal
12:52 < bridge> <ryozuki> its just a tool for u to get money
12:52 < bridge> <ryozuki> and if possible learn while getting paid
12:54 < bridge> <heinrich5991> https://github.com/rust-lang/rust/issues/118876
12:54 < bridge> <ryozuki> > Looks like an NLL regression. The following invalid example compiles in v1.63.0, where NLL is enabled by default:
12:54 < bridge> <ryozuki> interesting
12:55 < bridge> <Fussel> btw @heinrich5991 the `auto` keyword is another case
12:55 < bridge> <ryozuki> https://blog.rust-lang.org/2022/08/05/nll-by-default.html
12:55 < bridge> <TsFreddie> not if they have lost money on me
12:55 < bridge> <TsFreddie> :owo:
12:55 < bridge> <heinrich5991> what about the `auto` keyword?
12:56 < bridge> <ryozuki> no
12:56 < bridge> <ryozuki> well what do u mean
12:56 < bridge> <ryozuki> ? xd
12:56 < bridge> <Fussel> it was a storage specifier
12:56 < bridge> <Fussel> what nowadays doesn't have one is `auto`
12:57 < bridge> <heinrich5991> ah
12:57 < bridge> <heinrich5991> it's another backward incompatibility, you mean?
12:57 < bridge> <TsFreddie> I think our team has lost the company about 200k usd already
12:58 < bridge> <ryozuki> https://blog.rust-lang.org/2023/12/11/cargo-cache-cleaning.html
12:58 < bridge> <Fussel> ```1) The auto specifier was only allowed for objects declared at block scope or in function parameter lists. It indicated automatic storage duration, which is the default for these kinds of declarations. The meaning of this keyword was changed in C++11.
12:58 < bridge> <Fussel>     (until C++11)```
12:58 < bridge> <ryozuki> it doesnt matter
12:58 < bridge> <ryozuki> u dont owe anything
12:58 < bridge> <ryozuki> ur just a employee
12:58 < bridge> <TsFreddie> i don't think i owe anything tho
12:58 < bridge> <TsFreddie> :owo:
12:58 < bridge> <ryozuki> u think u do by staying there
12:58 < bridge> <ryozuki> and feeling the need to finish the project
12:58 < bridge> <TsFreddie> also where can I jump to
12:58 < bridge> <ryozuki> well u can start searching for a better job now!
12:59 < bridge> <ryozuki> xD
12:59 < bridge> <TsFreddie> i'm in the third large game company in china already
12:59 < bridge> <ryozuki> rly
12:59 < bridge> <TsFreddie> technically*
12:59 < bridge> <ryozuki> sounds bad in there then
12:59 < bridge> <ryozuki> well gaming never had fame for being good
12:59 < bridge> <TsFreddie> what's bad
12:59 < bridge> <ryozuki> do u feel ur paid well
12:59 < bridge> <ryozuki> u do overtimes
12:59 < bridge> <ryozuki> i never did overtime
12:59 < bridge> <TsFreddie> :owo:
13:00 < bridge> <TsFreddie> I do less overtimes than average
13:00 < bridge> <ryozuki> u still do
13:00 < bridge> <TsFreddie> unavoidable
13:00 < bridge> <ryozuki> i guess im too european üá™üá∫
13:00 < bridge> <ryozuki> :owo:
13:00 < bridge> <TsFreddie> you are
13:00 < bridge> <ryozuki> unpaid overtime?
13:01 < bridge> <TsFreddie> no one pays overtime here
13:01 < bridge> <ryozuki> u should know big company doesnt always mean good
13:01 < bridge> <ryozuki> some small companies may have better environment
13:01 < bridge> <ryozuki> or medium
13:01 < bridge> <TsFreddie> and less money and dies in three month
13:01 < bridge> <TsFreddie> been there
13:01 < bridge> <ryozuki> thats like judging all by 1 sample point
13:01 < bridge> <ryozuki> but idk why im spending time to convince u
13:01 < bridge> <TsFreddie> maybe mihoyo is better at burning money. but I still need a few more projects to put in my CV
13:01 < bridge> <ryozuki> xd
13:02 < bridge> <TsFreddie> it's just bad economy
13:02 < bridge> <ryozuki> ever thought about traveling
13:02 < bridge> <TsFreddie> no one has money anymore so no one is getting paid
13:02 < bridge> <ryozuki> here i thought china was on the rise
13:02 < bridge> <TsFreddie> i think china has been saying it
13:02 < bridge> <TsFreddie> i doubt it tho
13:03 < bridge> <ryozuki> time to make food
13:03 < bridge> <TsFreddie> or netease is just doing so bad or mihoyo literally took all the users in one day
13:03 < bridge> <Fussel> hijacking the players tab did work ^^
13:03 < bridge> <ryozuki> why not switch to normal dev
13:03 < bridge> <TsFreddie> I don't know rust
13:03 < bridge> <ryozuki> web dev
13:03 < bridge> <ryozuki> u dont need to know rust
13:04 < bridge> <ryozuki> in fact idk how famous it is in china
13:04 < bridge> <TsFreddie> oh web dev
13:04 < bridge> <ryozuki> u should learn c#
13:04 < bridge> <ryozuki> well u already know
13:04 < bridge> <ryozuki> im sure lot of backend systems use c#
13:04 < bridge> <ryozuki> or java
13:04 < bridge> <ryozuki> or idk
13:04 < bridge> <ryozuki> razor
13:04 < bridge> <TsFreddie> https://996.icu this is web dev
13:04 < bridge> <TsFreddie> game dev has weekend at least
13:04 < bridge> <Fussel> you are a valuable source for atrocities ‚Ä¶
13:05 < bridge> <ryozuki> no im just telling him a language with high market share
13:05 < bridge> <ryozuki> i dont like c# too
13:05 < bridge> <ryozuki> like i dont like cpp
13:05 < bridge> <TsFreddie> since when
13:05 < bridge> <TsFreddie> or are you talking about java
13:05 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1184466210436427816/image.png?ex=658c131e&is=65799e1e&hm=dfc751781490ae6769690739c12d6ab96fd22a91cc6c6b4f3a4cbc77bfda37bf&
13:06 < bridge> <TsFreddie> oh that make sense
13:06 < bridge> <Fussel> like you won't like rust anymore when you've learned c++, trust me üôÇ
13:06 < bridge> <ryozuki> XD
13:06 < bridge> <ryozuki> i come from c++ bro
13:06 < bridge> <TsFreddie> wtf
13:06 < bridge> <Fussel> you didn't learn it right üôÇ
13:06 < bridge> <ryozuki> right
13:06 < bridge> <ryozuki> and im the one being prepotent xd
13:06 < bridge> <heinrich5991> I know a couple of people who went from C++ to Rust
13:06 < bridge> <heinrich5991> and don't want to go back
13:06 < bridge> <ryozuki> me
13:07 < bridge> <TsFreddie> I know more than a couple
13:07 < bridge> <heinrich5991> I've yet to hear the opposite
13:07 < bridge> <heinrich5991> but it's also harder for the opposite to appear since rust is a lot younger
13:07 < bridge> <ryozuki> @tsfreddie a easy path is to learn python and be  ERP plugin dev for random company
13:07 < bridge> <TsFreddie> I think the biggest problem for me to get into rust is that I never was a C++ dev.
13:07 < bridge> <ryozuki> there are loooots who do this
13:07 < bridge> <TsFreddie> no
13:08 < bridge> <Fussel> constraints and concepts ‚ù§Ô∏è
13:08 < bridge> <TsFreddie> well python is quite a thing. google told me that
13:08 < bridge> <ryozuki> i would learn C instead and go to rust
13:08 < bridge> <Fussel> ‚Üê likes c++20
13:08 < bridge> <Jupstar ‚ú™> Ah my daily dose of rust
13:08 < bridge> <TsFreddie> If i didn't apply for a python position i might be at google rn
13:08 < bridge> <ryozuki> morning
13:08 < bridge> <heinrich5991> nice to see c++ catching up in some ways
13:09 < bridge> <ryozuki> imagine not having algebraic data types like sum types
13:09 < bridge> <ryozuki> barbaric languages
13:09 < bridge> <Jupstar ‚ú™> I'd claim you can archive smth similar with traits and proc macros.. only thing rust really missing is const evaluation
13:09 < bridge> <ryozuki> :justatest:
13:09 < bridge> <Jupstar ‚ú™> Achieve
13:09 < bridge> <TsFreddie> i mean i think i know c and c++. I can write godot modules and unity native bindings just fine. but I think you really need to do a native only project to justify putting more time in rust than just make the darn thing
13:09 < bridge> <Fussel> it's really awesome what you can do with it. or, to be more correct: you could have done this in before by MPL, but that's literally unreadable
13:10 < bridge> <heinrich5991> concepts are basically traits AFAICT
13:10 < bridge> <ryozuki> does it make sense to do a native only godot project tho
13:10 < bridge> <TsFreddie> yes
13:10 < bridge> <TsFreddie> but i'd recommend a more framework engine than godot by that point
13:10 < bridge> <TsFreddie> but you can do native only in godot
13:11 < bridge> <Jupstar ‚ú™> Well templates are not directly comparable tho.  E.g. check for a specific type
13:11 < bridge> <Jupstar ‚ú™> Std is same v
13:11 < bridge> <heinrich5991> you get the same for traits, except traits are more defined
13:11 < bridge> <heinrich5991> if you leave the type open, you can specify it when asking for a specific impl
13:12 < bridge> <heinrich5991> e.g. `Iterator<Item=u32>`
13:12 < bridge> <Fussel> I'm really loving the ability to freely chose and overload depending on require, not to talk about generic parameters (requirements) and generic return types (assertions)
13:12 < bridge> <Fussel> I'm really loving the ability to freely choose and overload depending on require, not to talk about generic parameters (requirements) and generic return types (assertions)
13:12 < bridge> <TsFreddie> also depends on your goal. if you want to take the rendering engine and mash it with other native toolings or subsystems, then godot might be weird to use. but if you just want to do Node scripts but with native languages then i guess it's not really that different from using gdscript or C#
13:12 < bridge> <ryozuki> @tsfreddie what i want is bevy with a nice editor
13:12 < bridge> <heinrich5991> yea, sounds nice to have
13:13 < bridge> <Jupstar ‚ú™> another thing templates can do, is to check if a type contains a function
13:13 < bridge> <TsFreddie> then i guess use bevy and write a nice editor
13:13 < bridge> <Jupstar ‚ú™> It allows really hacky things
13:13 < bridge> <Fussel> and since I'm a huge fan of self documenting code, constraints and concepts gave me what I always wanted ^^
13:14 < bridge> <heinrich5991> I find that a bit weird, matching on names instead of the stuff rust does
13:14 < bridge> <ryozuki> can u easily do a library like this in c++ https://docs.rs/contracts/0.6.3/contracts/ and then verify it with tools like https://github.com/facebookexperimental/MIRAI to verify correctness?
13:14 < bridge> <Jupstar ‚ú™> Well believe me, drive macros are what you really want üò¨
13:14 < bridge> <TsFreddie> you actually lose the convenience of scripts (hot loading, jit, no compile time, faster iterations) by using gdextensions. the general consent for game engine is faster iteration and move stuff to native when bottleneck arises
13:14 < bridge> <heinrich5991> where you explicitly tell that this `write` function is part of `io::Write`
13:15 < bridge> <Jupstar ‚ú™> Well i don't want to rate if it's good or bad
13:15 < bridge> <Jupstar ‚ú™> It just has really weird hacks
13:15 < bridge> <Fussel> @jupeyy_keks 2 things are clear: 1. I'm not the one to believe anything and 2. I won't take rust for something c++ offers me ^^
13:15 < bridge> <Jupstar ‚ú™> But that's not my point
13:16 < bridge> <TsFreddie> btw the green discord icon literally means heinrich to me so i'm very disoriented right now.
13:16 < bridge> <Jupstar ‚ú™> Derive macros can basically implement whatever you needed as template as a function for your struct
13:16 < bridge> <Jupstar ‚ú™> So you probably don't even need concepts
13:16 < bridge> <Jupstar ‚ú™> Well it can do anything
13:17 < bridge> <heinrich5991> e.g. if you have a struct
13:17 < bridge> <Jupstar ‚ú™> U can let it program ddnet for you as function of your struct xdd
13:17 < bridge> <heinrich5991> you can write `#[derive(Hash)]`
13:17 < bridge> <heinrich5991> and boom, it has the equivalent of an `std::hash` implementation
13:17 < bridge> <heinrich5991> I kinda missed that in C++
13:18 < bridge> <ryozuki> @jupeyy_keks it can also call the local db and check if a query is correct
13:18 < bridge> <ryozuki> üò¨
13:18 < bridge> <Fussel> introspection is indeed something I miss, but they are working on this too
13:18 < bridge> <TsFreddie> quick question. is bevy an engine or a framework
13:18 < bridge> <ryozuki> both kinda
13:18 < bridge> <ryozuki> it has engine in name tho
13:18 < bridge> <ryozuki> https://bevyengine.org/
13:18 < bridge> <TsFreddie> like the tooling part. do you compile your entire engine for scripting?
13:18 < bridge> <ryozuki> easily extendable by plugin-libs
13:19 < bridge> <TsFreddie> dynamic library then
13:19 < bridge> <Jupstar ‚ú™> It can also connect to the discord api. So spam in this channel how awesome and over powered it is üò¨
13:19 < bridge> <ryozuki> it recommends to configure bevy as a dynamic lib on dev
13:19 < bridge> <TsFreddie> wait bevy is the lib?
13:19 < bridge> <ryozuki> @jupeyy_keks oh bevy is also quite magic
13:20 < bridge> <TsFreddie> i don't get it i guess
13:20 < bridge> <ryozuki> i would love to see if same can be achieved in c++
13:20 < bridge> <ryozuki> with the nice ergonomcs bevy has
13:20 < bridge> <TsFreddie> it is weird to me a native tooling that supports a native language
13:20 < bridge> <ryozuki> ```rust
13:20 < bridge> <ryozuki> fn greet_people(time: Res<Time>, query: Query<&Name, With<Person>>) {
13:20 < bridge> <ryozuki>     for name in &query {
13:20 < bridge> <ryozuki>         println!("hello {}!", name.0);
13:20 < bridge> <ryozuki>     }
13:20 < bridge> <ryozuki> }
13:20 < bridge> <ryozuki> 
13:20 < bridge> <ryozuki> ```
13:20 < bridge> <TsFreddie> oh wait unreal is the same with c++
13:20 < bridge> <TsFreddie> nvm then
13:21 < bridge> <ryozuki> @tsfreddie bevy is a game engine without editor
13:21 < bridge> <ryozuki> so yes its a library itself
13:21 < bridge> <ryozuki> u can implement scripting urself
13:21 < bridge> <ryozuki> https://github.com/makspll/bevy_mod_scripting
13:21 < bridge> <TsFreddie> oh so it doesn't have a editor
13:21 < bridge> <TsFreddie> i thought i dose
13:21 < bridge> <ryozuki> .add_script_host::<RhaiScriptHost<MyRhaiArgStruct>>(PostUpdate)
13:21 < bridge> <ryozuki>         .add_script_host::<LuaScriptHost<MyLuaArgStruct>>(PostUpdate)
13:21 < bridge> <TsFreddie> i thought i does
13:21 < bridge> <ryozuki> i told u it doesnt
13:21 < bridge> <ryozuki> XD
13:21 < bridge> <TsFreddie> i thought it does
13:22 < bridge> <TsFreddie> have you, i thought it has one but it's just incomplete
13:22 < bridge> <ryozuki> its in the plans
13:22 < bridge> <ryozuki> before it becomes 1.0
13:22 < bridge> <TsFreddie> btw I been learning more 3d engine stuff for the past few months, and none of them is about coding
13:22 < bridge> <ryozuki> https://github.com/bevyengine/bevy/projects/1
13:23 < bridge> <TsFreddie> I think I'm slowly moving towards a technical artist position
13:23 < bridge> <Jupstar ‚ú™> As a first step we should write a proc macro that compiles cpp code to rust. Then he at least starts using the rust Eco system xddd
13:24 < bridge> <TsFreddie> :justatest:  it takes a lot to make a 3d scene actually renders nicely and fast. it is quite exhausting just to configure stuff
13:24 < bridge> <ryozuki> xd
13:24 < bridge> <TsFreddie> like I thought making video game is about putting things in places and it renders
13:24 < bridge> <TsFreddie> apparently you spend most of the time stopping it from rendering stuff
13:25 < bridge> <TsFreddie> :kek:
13:32 < bridge> <TsFreddie> ok. Unity's Create menu sucks.
13:32 < bridge> <TsFreddie> why is it a context menu
13:33 < bridge> <TsFreddie> bruh
13:33 < bridge> <TsFreddie> https://cdn.discordapp.com/attachments/293493549758939136/1184473170594496522/image.png?ex=658c199a&is=6579a49a&hm=77bcec5b3a2eb3fc3034376381e63d5e85e769e446a95f4fe281d3d4892d9d82&
13:35 < bridge> <TsFreddie> ok i'm making a better menu and selling it on asset store lmao
13:44 < bridge> <TsFreddie> bruh
13:44 < bridge> <TsFreddie> https://github.com/Unity-Technologies/UnityCsReference/blob/496f7d6c5c0882f35bb776e96356712d54710033/Editor/Mono/MenuItem.cs#L144
13:47 < bridge> <learath2> I'm starting to doubt the second C in CCP
13:47 < bridge> <TsFreddie> you can get a C-er job
13:47 < bridge> <TsFreddie> I don't really like it
13:48 < bridge> <TsFreddie> some people do. and they are very well lived.
13:50 < bridge> <learath2> Working on this for C++ means it may ship with the next standard in 3 years and it may or may not be implemented for another 3 while the compiler vendors think about it
13:50 < bridge> <TsFreddie> you can get civil servants position by exam or get a government owned business position, those are very stable, better benefits overall and very fixed promotion rate based on workyears
13:51 < bridge> <Fussel> @learath2 it's not even C++26, but TS üò¶
13:51 < bridge> <TsFreddie> those are probably more your C
13:51 < bridge> <learath2> So we can have introspection when I'm in my 30s üòÑ
13:52 < bridge> <TsFreddie> several friends of mine works at those positions, they seems pretty happy
13:52 < bridge> <TsFreddie> several friends of mine works at those positions, they seem pretty happy
13:53 < bridge> <TsFreddie> several friends of mine work at those positions, they seem pretty happy
13:53 < ChillerDragon> @Kaffeine  u here?
13:53 < bridge> <TsFreddie> Chiller moment
13:53 < bridge> <learath2> Still bizarre that a nation that aspires to communism won't force all companies operating within their borders to pay a fair wage that includes overtime
13:53 < bridge> <Fussel> that still means you will still experience it. not everyone will be so lucky ^^
13:54 < bridge> <TsFreddie> cuz it is not communism anymore?
13:54 < bridge> <learath2> :pepeW: country ruined
13:54 < bridge> <ryozuki> :pepeW:
13:54 < bridge> <learath2> It's all Deng Xiaoping's fault
13:54 < bridge> <TsFreddie> basically
13:55 < bridge> <TsFreddie> actually i'm pretty bad at modern chinese history
13:55 < bridge> <TsFreddie> let me double check lmao
13:55 < ChillerDragon> @heinrich5991 so what was it you are no fan of optional arguments? rather pass nullptr everywhere?
13:56 < bridge> <TsFreddie> ok you are right
13:56 < bridge> <Fussel> `std::optional<T>` ‚ù§Ô∏è
13:56 < bridge> <learath2> Exchcuse me, it's not 0 cost like Rust `Option<T>`. If only you'd used rust
13:56 < bridge> <Fussel> `std::expected<T,U>` ‚ù§Ô∏è
13:56 < bridge> <TsFreddie> i mean do you still want us to be communists
13:57 < bridge> <learath2> You'd atleast get your overtime
13:57 < bridge> <TsFreddie> for a dollar maybe
13:59 < ChillerDragon> dude @furo321 i have to say i love ur work on the codebase! You are top1 most useful contributor for me personally. Every 2nd pr of urs saves me time to work on other stuff. Very poggies
13:59 < bridge> <learath2> ChillerDragon liking your PRs is a red flag
13:59 < ChillerDragon> im a bit scared if it stays like that we collide xd
13:59 < bridge> <Fussel> @learath2 there will be a time I'll understand why you are obsessed of this. These ‚Ä∫costs‚Äπ you talk about are irrelevant ^^
13:59 < ChillerDragon> lmao lerato
14:00 < bridge> <ryozuki> not just that its more powerful in rust due to sum types
14:00 < ChillerDragon> oh and kaffeine is top2
14:00 < bridge> <learath2> I was just doing a @ryozuki parody, but not all small costs are irrelevant. You are exhibiting the @jupeyy_keks fallacy
14:01 < bridge> <ryozuki> its irrelevant if it makes cpp look bad
14:01 < bridge> <ryozuki> üò¨
14:01 < bridge> <ryozuki> actually due to option being smaller it may have some places it matters more, cache perfomance, etc
14:02 < bridge> <ryozuki> and in rust its more important since its used everywhere
14:03 < bridge> <ryozuki> @learath2 i also think cpp doesnt optimize as well when it knows a type of the variant is impossible to create infallible (?)
14:03 < bridge> <ryozuki> but not sure
14:03 < bridge> <ryozuki> https://doc.rust-lang.org/std/convert/enum.Infallible.html
14:04 < bridge> <ryozuki> looks like std optional one likes many utility methods aswell
14:09 < bridge> <kaffeine0> @chillerdragon: yes
14:20 < ChillerDragon> ah nice
14:20 < ChillerDragon> i am too lazy to understand your translation comments xd
14:20 < bridge> <Jupstar ‚ú™> which fallacy am i exhibited to?
14:20 < ChillerDragon> buffer or not translation is the same right? @kaffeine0
14:21 < bridge> <Jupstar ‚ú™> the "i benchmark" before applying optimizations fallcy?
14:21 < bridge> <learath2> No the memory usage doesn't matter fallacy
14:21 < bridge> <Jupstar ‚ú™> well as i always said: i dont waste memory
14:21 < ChillerDragon> download more ram
14:22 < bridge> <Jupstar ‚ú™> üò¨
14:22 < bridge> <Jupstar ‚ú™> i also lowered the VRAM usage for ddnet quite a bit.
14:22 < bridge> <Jupstar ‚ú™> 
14:22 < bridge> <Jupstar ‚ú™> that only worked, because i finally dropped OpenGL 2.x out of the tile rendering. it was too much of a blocker üòÑ
14:22 < ChillerDragon> @learath2 i also love your work on the 0.7 bridge uwu i think the whole gctf community is thankful for that too
14:23 < bridge> <Jupstar ‚ú™> thanks progress
14:23 < bridge> <Jupstar ‚ú™> üòè
14:23 < bridge> <learath2> I'm not the biggest fan of my work on the 0.7 stuff but nice to hear that atleast someone enjoys it
14:23 < ChillerDragon> it works very smoothly!
14:24 < ChillerDragon> also the code was helpful for the client bridge
14:24 < bridge> <_voxeldoesart> how many ppl are in it
14:24 < ChillerDragon> in wat
14:24 < ChillerDragon> ah in the community?
14:24 < bridge> <_voxeldoesart> yea
14:24 < ChillerDragon> idk there was some gctf tourney using ddnet 0.7 bridge
14:24 < ChillerDragon> some gctf players are 0.7 client enjoyers
14:24 < ChillerDragon> and they now could play together with the ddnet players
14:25 < bridge> <Jupstar ‚ú™> weirdos üòè
14:25 < bridge> <Jupstar ‚ú™> üò¨
14:25 < ChillerDragon> idk its a small group of players not sure maybe 10 or 20 tops
14:25 < bridge> <teero777> I want
14:25 < bridge> <Jupstar ‚ú™> weirdos
14:25 < ChillerDragon> im making up numbers tbh
14:25 < bridge> <_voxeldoesart> god
14:25 < bridge> <Jupstar ‚ú™> chillerdragon when coup oy
14:26 < ChillerDragon> i emailed him
14:26 < bridge> <ryozuki> when teesmash tournament
14:26 < ChillerDragon> heinrich is not joining the coup
14:26 < bridge> <Jupstar ‚ú™> 1 e-mail is nothing
14:26 < ChillerDragon> and dune also not
14:26 < ChillerDragon> and robsti also rq tw i think
14:26 < bridge> <ryozuki> makes sense
14:26 < ChillerDragon> i cant coup oy solo
14:26 < bridge> <ryozuki> he is valued in ddnet, frequent releases
14:26 < bridge> <ryozuki> u see ur work used by ppl
14:26 < bridge> <ryozuki> in teeworlds u need to wait a decade
14:26 < ChillerDragon> i was thinking about opening a new repo and merging all tw prs there
14:26 < ChillerDragon> then heinrich said we already have a community fork of teeworlds
14:27 < ChillerDragon> ... its called ddnet
14:27 < ChillerDragon> so i decided to put all my pvp stuff into ddnet
14:27 < bridge> <Jupstar ‚ú™> i tried to place robyte as tw admin
14:27 < bridge> <Jupstar ‚ú™> so my coup also failed
14:27 < bridge> <_voxeldoesart> when accounts and tune lock and like, any actual good update
14:27 < ChillerDragon> epic attempt tho
14:27 < bridge> <ryozuki> dont diminish the updates we do
14:27 < bridge> <ryozuki> they are nice
14:27 < bridge> <ryozuki> u can do tune lock
14:27 < bridge> <ryozuki> go
14:28 < bridge> <_voxeldoesart> yea, on fokko's bot client LOL
14:28 < ChillerDragon> wot
14:31 < bridge> <heinrich5991> no fan of default arguments indeed
14:31 < ChillerDragon> alr noted
14:31 < ChillerDragon> included none in my ddnet pr then
14:32 < bridge> <_voxeldoesart> like, in terms of gameplay, ddnet is completely deprived of anything new
14:32 < bridge> <_voxeldoesart> and i dont have the time or skill to add it but im sure im not the only one who thinks this
14:32 < ChillerDragon> thats a good thing
14:32 < ChillerDragon> imo we should revert a bunch of gameplay features
14:32 < bridge> <_voxeldoesart> and make ddnet MORE repetitive?
14:32 < ChillerDragon> everythin other than hook/unhook/ht/freeze is bloat
14:32 < bridge> <_voxeldoesart> oh right you're anti team i forgot
14:33 < ChillerDragon> all the vasten100 flappybird weirdoness should be a new game :p
14:33 < ChillerDragon> or mod
14:33 < bridge> <_voxeldoesart> chiller when will you realize that people will eat up hammerhit for only so long
14:33 < ChillerDragon> dude t0 hh does not get boring
14:34 < ChillerDragon> its the poggest
14:34 < bridge> <_voxeldoesart> it really is boring
14:34 < bridge> <_voxeldoesart> literally the same map 20 times
14:34 < ChillerDragon> still better than some weird new gameplay feature
14:34 < ChillerDragon> took me like 5 years to get used to jetpack
14:34 < ChillerDragon> i was such a hater xd
14:35 < bridge> <_voxeldoesart> is this because of change
14:35 < ChillerDragon> change is bad
14:35 < ChillerDragon> dont mess with perfection
14:35 < bridge> <ryozuki> telegun best
14:35 < bridge> <_voxeldoesart> if ppl who didnt like change got their way, browsers wouldn't have tabs
14:35 < bridge> <ryozuki> made by yours dearly
14:36 < bridge> <heinrich5991> yours truly?
14:36 < bridge> <ryozuki> ok yes
14:36 < bridge> <ryozuki> idk formal english
14:36 < bridge> <ryozuki> xdd
14:36 < bridge> <ryozuki> i never write letters
14:36 < ChillerDragon> heinrich our english prof
14:36 < bridge> <_voxeldoesart> no i understood
14:36 < bridge> <_voxeldoesart> ryo made telegun
14:36 < bridge> <ryozuki> :owo:
14:36 < bridge> <ryozuki> with my novice cpp
14:36 < bridge> <heinrich5991> try to apply that same mindset to exploring what LLMs can do üôÇ
14:36 < bridge> <_voxeldoesart> uh oh
14:37 < bridge> <ryozuki> incoming AI rant inbound
14:37 < ChillerDragon> heinrich did u understand kaffeines trans concenerns?
14:37 < bridge> <_voxeldoesart> ryo when we mention anything rust related:
14:37 < bridge> <ryozuki> true
14:37 < bridge> <ryozuki> trans?
14:37 < bridge> <_voxeldoesart> rights
14:38 < ChillerDragon> he wants ddnet to be more lgbtq+69 friendly
14:38 < bridge> <ryozuki> right
14:38 < ChillerDragon> jk
14:38 < ChillerDragon> i mean translate
14:38 < ChillerDragon> its official short writing
14:38 < bridge> <_voxeldoesart> oh yea translation
14:38 < bridge> <Jupstar ‚ú™> enough dose of rust for today. now i need my daily dose of AI
14:38 < ChillerDragon> localizationilaizion
14:38 < bridge> <_voxeldoesart> im not ranting about it today
14:38 < bridge> <_voxeldoesart> you guys are lose causes
14:38 < bridge> <_voxeldoesart> *lost
14:40 < bridge> <Jupstar ‚ú™> @_voxeldoesart i give u mod client if u give me a
14:40 < bridge> <Jupstar ‚ú™> super saiyan god blue 2 super ultra instinct mod
14:40 < bridge> <_voxeldoesart> idk what that means
14:53 < bridge> <heinrich5991> how would you implement a ban list?
14:53 < bridge> <heinrich5991> I guess an intrusive data structure would be nice
14:53 < bridge> <heinrich5991> I don't think I can have this in rust, easily
14:53 < bridge> <heinrich5991> need to look up bans by IP address, client fingerprint and expiry date
14:54 < bridge> <heinrich5991> first priority: fast to look up
14:54 < bridge> <heinrich5991> other priorities: not too bad to manipulate
14:54 < bridge> <kaffeine0> @chillerdragon: translation can be applied only to the text before args substitution. E.g. translation works on "Only %d active players are allowed" and does not work with %d replaced by the number.
14:54 < ChillerDragon> yea that much i got
14:54 < ChillerDragon> but how is it related to the pr?
14:55 < ChillerDragon> its not worse or better before or after the pr with buffer or without buffer is it?
14:55 < bridge> <ryozuki> sounds like the job of a database xd
14:55 < bridge> <learath2> A vector with 3 hashmaps that indexes it?
14:55 < bridge> <kaffeine0> If CanJoinTeam would write the message to `char *pBuffer` then it needs to insert the arguments (there is no other way to pass them to the caller). It means that the caller can not apply the translation. It means that e.g.  recorded demo 'll have the localized text instead of e.g. English.
14:56 < ChillerDragon> but thats the same for without buffer isnt it?
14:56 < bridge> <heinrich5991> sounds too slow, I need to quickly decide to drop packets
14:56 < ChillerDragon> the just translate in CanJoinTeam already?
14:56 < bridge> <heinrich5991> the vector I can get behind. it makes removal slow though, unless you do the fast remove trick, but then indices need to be adjusted
14:56 < bridge> <heinrich5991> ideally, the vector would be sorted by time though
14:57 < bridge> <kaffeine0> With buffer the method is expected to return "baked" string. And without the buffer the CanJoinTeam() override is expected to send whatever it needs (e.g. translated string to the player and en string to the demo recorder).
14:57 < bridge> <learath2> A list backed by a vector for storage?
14:57 < ChillerDragon> yes
14:57 < ChillerDragon> so?
14:57 < ChillerDragon> i dont get it sorry kaffeine xd
14:57 < ChillerDragon> just translate on bake
14:57 < bridge> <learath2> Actually, what do you mean by the "fast remove trick"?
14:58 < bridge> <heinrich5991> replace the removed element with the last one
14:58 < bridge> <ryozuki> what if u make removal a simple change to None
14:58 < bridge> <learath2> Then insertion is O(n)
14:58 < bridge> <learath2> How about a vector backed list?
14:59 < bridge> <ryozuki> > first priority: fast to look up
14:59 < bridge> <ryozuki> > other priorities: not too bad to manipulate
14:59 < bridge> <ryozuki> does it need fast insertion? fast deletion?
14:59 < bridge> <learath2> Mh, no something better exists, it's on the tip of my tongue but I can't figure it out
15:00 < bridge> <learath2> How about a `Vec<Either<Ban, FreeListNode>>`?
15:00 < bridge> <Jupstar ‚ú™> do all bans refer to the same ban or does it not matter?
15:00 < bridge> <Jupstar ‚ú™> do you only need up to 3 keys at once?
15:00 < bridge> <Jupstar ‚ú™> do all bans refer to the same ban or does it not matter?
15:00 < bridge> <Jupstar ‚ú™> do you need up to 3 keys at once?
15:00 < bridge> <kaffeine0> With 'buffer' the caller is responsible to send the message (both to the player and to the demo). And the buffer can contain only one string (e.g. translated). The caller can not send both original+translated string, and the callee has no way to prevent the caller from sending translated string to the recorded.
15:01 < bridge> <kaffeine0> With 'buffer' the caller is responsible to send the message (both to the player and to the demo). And the buffer can contain only one string (e.g. translated). The caller can not send both original+translated string, and the callee has no way to prevent the caller from sending translated string to the recorder.
15:01 < bridge> <heinrich5991> bans refer to an IP address (either IPv4 or IPv6) and/or a client fingerprint, and additionally an expiry timestamp
15:01 < bridge> <Jupstar ‚ú™> do all keys for the bans refer to the same ban or does it not matter?
15:01 < bridge> <Jupstar ‚ú™> do you need up to 3 keys at once?
15:01 < bridge> <learath2> When a `Ban` is deleted, replace it with a `FreeListNode` that is linked to a list of free nodes. That gives you O(1) insert, O(1) deletion
15:01 < bridge> <learath2> and the 3 hashtables give you O(1) lookup
15:01 < bridge> <heinrich5991> if I revert a ban, I want both the IP address and the client fingerprint to be gone, if both were given in the initial ban
15:02 < bridge> <heinrich5991> sounds good @learath2
15:02 < bridge> <Jupstar ‚ú™> mh to me it sounds like one client finger print can have multiple IPs. would these be distinct bans?
15:02 < bridge> <Jupstar ‚ú™> in your data structure
15:03 < bridge> <ryozuki> red‚Äìblack tree ? xd
15:04 < bridge> <heinrich5991> yes
15:04 < bridge> <heinrich5991> I guess Learath2's solution doesn't account for that yet
15:05 < bridge> <Jupstar ‚ú™> well that gets pretty hard xD
15:05 < bridge> <learath2> Wait so what is the primary key for a Ban?
15:05 < bridge> <heinrich5991> eh
15:06 < bridge> <heinrich5991> client id + address I guess
15:06 < bridge> <heinrich5991> but maybe I'm overcomplicating it
15:06 < bridge> <heinrich5991> let's just take @learath2's solution and only allow one ban per IP address
15:07 < bridge> <Jupstar ‚ú™> why would you ever want to merge these anyway?
15:07 < bridge> <Jupstar ‚ú™> 
15:07 < bridge> <Jupstar ‚ú™> what's bad about simply having a client id ban list and ip ban list
15:07 < bridge> <Jupstar ‚ú™> do you fear someone gets unlucky and hits a banned IP?
15:07 < bridge> <heinrich5991> no, I want unbans to work
15:07 < bridge> <heinrich5991> without figuring out both the fingerprint and the IP address
15:08 < bridge> <heinrich5991> but maybe that's misguided
15:08 < bridge> <Jupstar ‚ú™> but if they are only part of either of those lists
15:08 < bridge> <learath2> Now that I think about it my solution doesn't really account for the expiry date
15:08 < bridge> <_voxeldoesart> what are you guys banning
15:09 < bridge> <Jupstar ‚ú™> ppl with old hardware
15:09 < bridge> <Jupstar ‚ú™> üò¨
15:09 < bridge> <Jupstar ‚ú™> i guess heinrich works on his quic setup
15:09 < bridge> <_voxeldoesart> damn, heinrich with a change of heart
15:14 < bridge> <learath2> maybe a binaryheap to store the indices in order of soonest expiry?
15:14 < bridge> <Jupstar ‚ú™> linked hash map
15:14 < bridge> <Jupstar ‚ú™> the solution to every problem
15:15 < bridge> <learath2> But deleting from a binaryheap is awful, yeah maybe a linked list ordered in expiry order isn't the worst idea
15:17 < bridge> <learath2> An ordered hashmap ordered by expiry keyed by `Either<Ip, FingerPrint>`? üòÑ
15:28 < ChillerDragon> @kaffeine0 i think i got it now. You want chat messages in chinese for players while having the same in english as a server side demo?
15:29 < bridge> <heinrich5991> demos is a good argument for client-side translations btw
15:29 < bridge> <heinrich5991> this way, it can even be correctly translated for demos
15:30 < bridge> <Jupstar ‚ú™> yeah i implement (plan to implement) them as enums with additional (optional) way to allow wildcard strings
15:31 < ChillerDragon> client side translations would require an infclass client
15:31 < bridge> <Jupstar ‚ú™> depends
15:32 < ChillerDragon> @kaffeine0 seems like you are onto something bigger than the canjointeam buffer here. Maybe you can get some dope localisation framework into all of ddnet
15:32 < bridge> <Jupstar ‚ú™> maybe the problem lays somewhere else:
15:32 < bridge> <Jupstar ‚ú™> 
15:32 < bridge> <Jupstar ‚ú™> our language txts are always shipped with the client. a localization dictionary with online access could solve some problems
15:33 < bridge> <Jupstar ‚ú™> alternatively the server could offer localization files
15:33 < ChillerDragon> ou server sent loc files sounds nice
15:34 < ChillerDragon> but ye i better be quiet i do not have much interest in localization so i let you guys decide and discuss
15:34 < bridge> <Jupstar ‚ú™> server msgs currently are also not very flexible
15:34 < bridge> <Jupstar ‚ú™> 
15:34 < bridge> <Jupstar ‚ú™> always `*** text`
15:34 < bridge> <Jupstar ‚ú™> custom layouts would be interesting
15:35 < bridge> <Jupstar ‚ú™> maybe i should allow to parse it inside the wasm module üòè
15:36 < ChillerDragon> i translated 5 words to russian and called ddnet++ international https://github.com/DDNetPP/DDNetPP/blob/cb7606e097111114a844b3d9ecc1ac586e54826b/src/game/server/ddpp/loc.cpp
15:39 < ChillerDragon> has anyone ever used some hotcompiling setup?
15:39 < ChillerDragon> like ``watch make`` to always compile with one core in the bg while editing the code
15:39 < ChillerDragon> or listen for file changes and even auto run the server/client
15:40 < bridge> <heinrich5991> haven't done that except for python development, I think
15:40 < bridge> <heinrich5991> haven't done that except for development using python, I think
15:40 < ChillerDragon> yea its common for scripting langs should work for ddnet too
15:43 < bridge> <Jupstar ‚ú™> for cpp i've used:
15:43 < bridge> <Jupstar ‚ú™> https://github.com/ddovod/jet-live
15:43 < bridge> <Jupstar ‚ú™> works quite ok, but if u have globale state, u doomed
15:48 < ChillerDragon> oh you mean hotreload only parts of the code without even rebooting the app?
15:48 < ChillerDragon> i was more thinking about the less complicated precompiling and rebooting the thing
15:48 < ChillerDragon> so you do not have to compile the whole thing from 0 everytime you wanna test something
15:52 < bridge> <Fussel> anyone knows where the `CComponents` are loaded?
15:53 < bridge> <Fussel> anyone knows where the `CComponent`s are loaded?
15:56 < bridge> <heinrich5991> wdym by loaded?
15:56 < bridge> <heinrich5991> they're part of `CGameClient` IIRC
15:59 < bridge> <Fussel> and what calls there virtuals like `OnInit` etc.?
16:00 < bridge> <Fussel> just if you know without having to look
16:00 < bridge> <heinrich5991> `CGameClient`
16:00 < bridge> <heinrich5991> , too
16:00 < bridge> <TsFreddie> <a:amogus:876956004674338848>
16:00 < bridge> <Fussel> and what calls their virtuals like `OnInit` etc.?
16:01 < bridge> <Fussel> k, i'll see after a coffee ^^
16:02 < bridge> <kaffeine0> Do you use and IDE? It takes an half second to know the callers of a method. E.g. in Qt Creator use can use `Ctrl+Shift+U` to find the usages.
16:02 < bridge> <kaffeine0> Do you use an IDE? It takes an half second to know the callers of a method. E.g. in Qt Creator use can use `Ctrl+Shift+U` to find the usages.
16:02 < bridge> <TsFreddie> forgot timezone existed. wondered for a second why someone would have coffee at 11pm
16:02 < bridge> <kaffeine0> Do you use an IDE? It takes an half second to know the callers of a method. E.g. in Qt Creator you can use `Ctrl+Shift+U` to find the usages.
16:02 < bridge> <Fussel> no beer left would be a reason :p
16:03 < bridge> <TsFreddie> i would just search in files when i was using notepad++
16:03 < bridge> <TsFreddie> :kek:
16:03 < bridge> <heinrich5991> or in clion, you'd ctrl-click the function name
16:03 < bridge> <ryozuki> im at 3 coffees
16:04 < bridge> <heinrich5991> or in the terminal, you'd do `rg OnInit`, although that might have false positives
16:04 < bridge> <ryozuki> in vscode u can do the same given u have clangd
16:04 < bridge> <TsFreddie> whats rg
16:04 < bridge> <ryozuki> ripgrep
16:04 < bridge> <ryozuki> rust grep
16:04 < bridge> <ryozuki> faster
16:04 < bridge> <ryozuki> git aware
16:04 < bridge> <TsFreddie> oh
16:05 < bridge> <TsFreddie> ~~typical non linux user questions~~
16:05 < bridge> <TsFreddie> actually netease is trying to make everyone use ubuntu
16:06 < bridge> <Jupstar ‚ú™> non linux related xd
16:06 < bridge> <TsFreddie> for whatever reason
16:06 < bridge> <ryozuki> wow
16:06 < bridge> <ryozuki> grep is insanely slower
16:06 < bridge> <ryozuki> > ‚ùØ hyperfine --warmup 10 'rg OnInit' 'grep -R OnInit src/'
16:06 < bridge> <ryozuki> > Benchmark 1: rg OnInit
16:06 < bridge> <ryozuki> >   Time (mean ¬± œÉ):       5.5 ms ¬±   0.6 ms    [User: 6.0 ms, System: 9.5 ms]
16:06 < bridge> <ryozuki> >   Range (min ‚Ä¶ max):     4.5 ms ‚Ä¶   7.9 ms    530 runs
16:06 < bridge> <ryozuki> > 
16:06 < bridge> <ryozuki> >   Warning: Command took less than 5 ms to complete. Note that the results might be inaccurate because hyperfine can not calibrate the shell startup time much more precise than this limit. You can try to use the `-N`/`--shell=none` option to disable the shell completely.
16:06 < bridge> <ryozuki> > 
16:06 < bridge> <ryozuki> > Benchmark 2: grep -R OnInit src/
16:06 < bridge> <ryozuki> >   Time (mean ¬± œÉ):     860.2 ms ¬±   3.6 ms    [User: 784.3 ms, System: 75.5 ms]
16:06 < bridge> <ryozuki> >   Range (min ‚Ä¶ max):   855.3 ms ‚Ä¶ 865.3 ms    10 runs
16:06 < bridge> <ryozuki> even ignoring lot of folders
16:06 < bridge> <ryozuki> on grep
16:06 < bridge> <ryozuki> XD
16:06 < bridge> <TsFreddie> why is grep slow
16:07 < bridge> <ryozuki> old
16:07 < bridge> <TsFreddie> cool
16:07 < bridge> <heinrich5991> https://blog.burntsushi.net/ripgrep/
16:08 < bridge> <TsFreddie> why is it still slow tho. any reason that these command lin utilities cant be updated?
16:08 < bridge> <TsFreddie> :owo:
16:08 < bridge> <heinrich5991> can be updated
16:08 < bridge> <heinrich5991> 1) but someone has to do it
16:08 < bridge> <heinrich5991> 2) it's harder to do parallelism in C/C++ vs Rust
16:09 < bridge> <TsFreddie> <a:Catxplosion:1082715870893195274> oh that make sense
16:09 < bridge> <ryozuki> :brownbear:
16:09 < bridge> <ryozuki> + burntsushi is a awesome dev
16:09 < bridge> <ryozuki> https://github.com/BurntSushi
16:09 < bridge> <TsFreddie> is there a thing/movement/packages that is replacing system utilities with rust reimplementations
16:10 < bridge> <ryozuki> @learath2 https://github.com/BurntSushi/aho-corasick
16:10 < bridge> <ryozuki> talking about that xd he made it
16:10 < bridge> <ryozuki> there is
16:10 < bridge> <ryozuki> but sadly it uses MIT
16:10 < bridge> <heinrich5991> not really. but there's a thing to make some fast tools in rust, I guess
16:10 < bridge> <ryozuki> instead of GPL
16:10 < bridge> <learath2> I think you posted this before
16:10 < bridge> <ryozuki> ah
16:10 < bridge> <ryozuki> i understood the question wrong
16:10 < bridge> <ryozuki> i meant coreutils
16:10 < bridge> <heinrich5991> there's also `fd`, not sure if that's rust, too
16:10 < bridge> <ryozuki> it is rust!
16:10 < bridge> <ryozuki> fd is cool i use it
16:10 < bridge> <ryozuki> there https://edgarluque.com/blog/modernize-your-tools/
16:11 < bridge> <ryozuki> i made this long ago
16:11 < bridge> <ryozuki> maybe a bit cringy
16:11 < bridge> <learath2> Btw after that day I googled around a bit and there actually isn't a aho-corasick automata generator for compile time for any language
16:11 < bridge> <TsFreddie> meanwhile me pressing ctrl+shift+f for search
16:11 < bridge> <ryozuki> @heinrich5991 i also use this https://github.com/dandavison/delta
16:11 < bridge> <TsFreddie> :kek:
16:11 < bridge> <ryozuki> as a diff for gentoo
16:11 < bridge> <ryozuki> i made dispatch-conf use it
16:11 < bridge> <ryozuki> and git too
16:12 < bridge> <TsFreddie> is rust easy to cross compile btw.
16:13 < bridge> <heinrich5991> kinda, unless you need C dependencies
16:13 < bridge> <learath2> @heinrich5991 wouldn't this be pretty cool for the antibot?
16:13 < bridge> <TsFreddie> like android libs with extern symbols so i can call them in unity
16:13 < bridge> <Fussel> I'm using geany. Its only disadvantage is, that it parses only open files
16:13 < bridge> <ryozuki> also this exists https://github.com/cross-rs/cross
16:14 < bridge> <heinrich5991> the idea is cool. it has the potential of crashing a running server though
16:14 < bridge> <heinrich5991> vs crashing a starting server, which is preferable
16:14 < bridge> <TsFreddie> unity burst compiler is basically stopping me from ever touching native just for performance actually
16:14 < bridge> <learath2> Hm, and now that I think about it the antibot has crucial state. It can't really afford to just start from the middle without context
16:14 < bridge> <TsFreddie> i used to write c code to offload heavy processing to native in unity
16:15 < bridge> <heinrich5991> oh, that too
16:15 < bridge> <TsFreddie> burst is basically native at this point
16:18 < bridge> <learath2> What is a burst?
16:19 < bridge> <ryozuki> https://knock.app/blog/zero-downtime-postgres-upgrades
16:20 < bridge> <TsFreddie> Unity's custom C# compiler
16:20 < bridge> <ryozuki> curious name
16:20 < bridge> <ryozuki> i can only think bad things
16:20 < bridge> <TsFreddie> actually it's a IL compiler. IL to native
16:20 < bridge> <ryozuki> xd
16:20 < bridge> <ryozuki> IL?
16:20 < bridge> <ryozuki> or IR?
16:20 < bridge> <TsFreddie> i think it is IL
16:20 < bridge> <ryozuki> well its probs the same
16:21 < bridge> <TsFreddie> probably
16:21 < bridge> <TsFreddie> .NET call them IL
16:21 < bridge> <ryozuki> did u know rust has like 3
16:21 < bridge> <ryozuki> HIR MIR LIR
16:21 < bridge> <ryozuki> iirc
16:21 < bridge> <TsFreddie> i think for .NET IL is just the byte code for their VM
16:21 < bridge> <TsFreddie> i'm probably wrong
16:21 < bridge> <ryozuki> https://rustc-dev-guide.rust-lang.org/hir.html
16:21 < bridge> <ryozuki> yes probs
16:22 < bridge> <TsFreddie> anyway burst just compiles IL to native code and find SIMD oppertunities along the way
16:22 < bridge> <TsFreddie> probably
16:22 < bridge> <TsFreddie> <a:HUH:1178720004980605089>
16:23 < bridge> <ryozuki> well any optimizing compiler does that
16:23 < bridge> <ryozuki> auto vectorization
16:24 < bridge> <TsFreddie> ye it's just that but Unity only
16:24 < bridge> <TsFreddie> i mean it is just LLVM
16:24 < bridge> <ryozuki> would be cool to have a c# frontend with llvm
16:24 < bridge> <ryozuki> is it rly?
16:24 < bridge> <TsFreddie> > Burst is a compiler that you can use with Unity's job system to create code that enhances and improves your application's performance. It translates your code from IL/.NET bytecode to optimized native CPU code that uses the LLVM compiler.
16:24 < bridge> <ryozuki> Originally implemented for C and C++, the language-agnostic design of LLVM has since spawned a wide variety of frontends: languages with compilers that use LLVM (or which do not directly use LLVM but can generate compiled programs as LLVM IR) include ActionScript, Ada, C# for .NET, Common Lisp, PicoLisp, Crystal, CUDA
16:24 < bridge> <ryozuki> true
16:25 < bridge> <TsFreddie> burst only supports a very small subset of C# tho
16:25 < bridge> <TsFreddie> it's basically unity's own language that lives in a C# codebase
16:26 < bridge> <learath2> This is still very meh. It's so hard for compilers to vectorize
16:26 < bridge> <ryozuki> i think with MLIR it would be easier
16:27 < bridge> <TsFreddie> burst also provide intrinsic but you'll have to call it in burst code
16:27 < bridge> <TsFreddie> it is weird that microsoft's C# does have intrinsics now but unity's C# don't
16:27 < bridge> <learath2> Do you enjoy C#?
16:27 < bridge> <ryozuki> MLIR has a memref dialect which allows doing allocations with shapes
16:28 < bridge> <ryozuki> `%0 = memref.alloc() : memref<8x64xf32, 1>`
16:28 < bridge> <TsFreddie> For Unity or for other stuff
16:28 < bridge> <learath2> In general
16:28 < bridge> <TsFreddie> also define enjoy
16:28 < bridge> <learath2> Not hate
16:28 < bridge> <zyzhiyou> :owo:
16:29 < bridge> <TsFreddie> then probably yes
16:29 < bridge> <TsFreddie> i don't know. it is fine.
16:29 < bridge> <TsFreddie> i mean i like typescript
16:29 < bridge> <TsFreddie> it is not that different from any other "OOP" stuff
16:29 < bridge> <TsFreddie> it's better than java i guess
16:29 < bridge> <learath2> Would it ever be your choice if you were given a job where you could decide the language?
16:29 < bridge> <TsFreddie> C#?
16:29 < bridge> <TsFreddie> probably not for string works
16:30 < bridge> <ryozuki> for strings i would choose rust
16:30 < bridge> <TsFreddie> so web and json stuff probably not
16:30 < bridge> <ryozuki> for serializing i would choose rust
16:30 < bridge> <ryozuki> for a http server i would choose rust (axum)
16:30 < bridge> <ryozuki> for serializing i would choose rust (serde)
16:30 < bridge> <TsFreddie> I don't like everything has to have schema when working with strings and networked objects
16:30 < bridge> <ryozuki> for frontend i would choose svelte
16:30 < bridge> <ryozuki> with typescript
16:30 < bridge> <TsFreddie> sveltekit or svelte
16:31 < bridge> <ryozuki> because wasm is not there yet
16:31 < bridge> <ryozuki> sveltekit
16:31 < bridge> <TsFreddie> svelte is fine. sveltekit is quite undercooked
16:31 < bridge> <ryozuki> https://ddstats.org/ is made with sveltekit
16:31 < bridge> <ryozuki> https://market.xivhub.org/
16:31 < bridge> <ryozuki> too
16:31 < bridge> <TsFreddie> i get SSR, but sveltekit made it feel like it can do backends
16:31 < bridge> <ryozuki> it can but its mostly to do ssr
16:32 < bridge> <ryozuki> the second link i sent
16:32 < bridge> <ryozuki> the backend is in rust
16:32 < bridge> <ryozuki> axum
16:32 < bridge> <ryozuki> my postgres db has a few million records
16:32 < bridge> <TsFreddie> but you don't have any control over the connections. you can't just disconnect a client from chewing your endpoints
16:32 < bridge> <TsFreddie> it is weird to me that backends and SSR are seperate applications
16:33 < bridge> <TsFreddie> for small projects at least
16:34 < bridge> <TsFreddie> I might put svelte in unity once Unity's UITK is good enough.
16:34 < bridge> <TsFreddie> If I could decide the language, it would be the one our team are more familiar with. (lmao)
16:35 < bridge> <TsFreddie> Unless it can be done in TypeScript (:TrollDespair: :TrollDespair: :TrollDespair: :TrollDespair:
16:36 < bridge> <TsFreddie> now that I think of it. I might just force my team to learn typescript
16:36 < bridge> <TsFreddie> if I have the chance
16:37 < ChillerDragon> @heinrich5991 sos can u abort https://github.com/ddnet/ddnet/pull/7602
16:37 < bridge> <TsFreddie> what did you do
16:38 < ChillerDragon> https://github.com/ddnet/ddnet/pull/7602#issuecomment-1854162090
16:38 < ChillerDragon> ah poggies i have disable merge powers
16:38 < ChillerDragon> githubberdragon
16:38 < bridge> <TsFreddie> how does that work
16:39 < ChillerDragon> you have to be verified githubber
16:39 < bridge> <TsFreddie> oh github has it's own merge thingy now?
16:39 < ChillerDragon> ye
16:39 < ChillerDragon> bors ded
16:39 < bridge> <furo321> It will still get merged, because it's in merge queue :D
16:39 < bridge> <TsFreddie> i thought we were still on bors
16:40 < ChillerDragon> ohno furo
16:40 < ChillerDragon> https://zillyhuhn.com/cs/.1702482086.png
16:40 < ChillerDragon> panicc
16:40 < bridge> <TsFreddie> I mean.. revert commit isn't that scary
16:40 < ChillerDragon> bloated git history
16:41 < bridge> <TsFreddie> more like ChillerDragon did this forever noted in history
16:41 < ChillerDragon> anyone with github powers here?
16:41 < ChillerDragon> sos
16:41 < bridge> <TsFreddie> :justatest:
16:42 < bridge> <_voxeldoesart> least troll chillerdragon github message
16:42 < bridge> <TsFreddie> what if you push to a queued pr
16:42 < bridge> <TsFreddie> does it just ignores it
16:43 < bridge> <TsFreddie> <a:Catxplosion:1082715870893195274> or draft it
16:43 < bridge> <TsFreddie> or close it
16:43 < bridge> <TsFreddie> idk. seems a lot of edge cases can be tested with merger
16:44 < bridge> <TsFreddie> https://cdn.discordapp.com/attachments/293493549758939136/1184521196834922527/image.png?ex=658c4654&is=6579d154&hm=7ef7f5ee24015fc9b60d49b20d6aa76f64087530d1af436aff0ae8bbc1197667&
16:44 < bridge> <TsFreddie> you did it
16:45 < bridge> <TsFreddie> actually
16:46 < bridge> <TsFreddie> do we have gamedevs here
16:46 < bridge> <TsFreddie> i always wanted to know if there is a better version control for gamedevs than git
16:47 < bridge> <TsFreddie> cuz git + LFS is giving me a lot of headache just managing artists and designers bad commit
16:47 < bridge> <TsFreddie> and LFS just breaks too easily
16:47 < bridge> <TsFreddie> actually, team members aren't that good with git either, and the PR workflow is too slow for prototyping
16:49 < bridge> <TsFreddie> :TrollDespair: I've been sending our interns to fix artists' local repository a few times too many for the past months
16:51 < bridge> <Jupstar ‚ú™> u can use a submodule and make it so, that it only fetches a single commit instead of the full history
16:52 < bridge> <TsFreddie> can you push with partial history>
16:53 < bridge> <heinrich5991> ChillerDragon: what happened?
16:53 < bridge> <Jupstar ‚ú™> i dunno
16:53 < bridge> <TsFreddie> https://github.com/ddnet/ddnet/pull/7602#issuecomment-1854162090
16:54 < bridge> <TsFreddie> :TrollDespair: I might try submodules
16:54 < bridge> <TsFreddie> they still break LFS for whatever reasons tho
16:54 < bridge> <meeu> have you tried unity version control?
16:55 < bridge> <TsFreddie> yes, but it has been closed off since PlasticSCM is gone now.
16:55 < bridge> <TsFreddie> i don't think company would let us host our content on a third party server
16:56 < bridge> <meeu> oh weird I thought they still have the on premise option
16:56 < bridge> <TsFreddie> no they killed that
16:57 < bridge> <TsFreddie> pretty dumb move, no idea why they would do that
16:57 < bridge> <TsFreddie> I think AAA companies uses Perforce
16:57 < bridge> <TsFreddie> I know Valve use them
16:58 < bridge> <Fussel> which NetMsg is 'player left'?
16:59 < bridge> <meeu> apparently u gotta contact them for the on premise one
16:59 < bridge> <TsFreddie> probably not cheaper than Perforce
16:59 < bridge> <blaiszephyr> aight i contributed, where dev role
16:59 < bridge> <blaiszephyr> ._.
