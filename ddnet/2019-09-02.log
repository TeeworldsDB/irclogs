13:36 <+bridge> [ddnet] <fokkonaut> @Learath2 Could the locale also ne the reason file score did not work everytime for me?
13:36 <+bridge> [ddnet] <fokkonaut> Because it doesnt save a rank everytime (dont know if its fixed now)
13:37 <+bridge> [ddnet] <fokkonaut> In DDNetPP it works, and between 9.0.2 and now is not much changed
13:37 <+bridge> [ddnet] <fokkonaut> in that file
13:37 <+Learath2> hmm, i'm not completely sure if locale would affect a file we opened
13:37 <+bridge> [ddnet] <fokkonaut> Maybe there is a problem with teams.cpp? Because from there we call savescore
13:37 <+Learath2> I'd take a look at the standard on how ostream behaves and whether it involves any locale-defined behaviour
13:38 <+bridge> [ddnet] <fokkonaut> Mh
13:38 <+bridge> [ddnet] <fokkonaut> Well, I dont even know where the problem is, because I get the "x finished in y" message everytime
13:38 <+bridge> [ddnet] <fokkonaut> so its most likely in file_score.cpp
13:39 <+bridge> [ddnet] <fokkonaut> But as I said, in 9.0.2 it works obviously (ChillerDragons mod has no problems)
14:47 <+bridge> [ddnet] <NeXus> I dont have permission for http://phpwomen.org/ bcs i am a men. This is sexist
14:47 <+bridge> [ddnet] <archimede67> omg
14:50 <+bridge> [ddnet] <fokkonaut> Why do Freeze Inputs not work reliably with vanilla client?
15:02 <@deen> because the client has to send the direct input more often to trigger it reliably
15:02 <@deen> can be simulated by altering the direct input very quickly with some tools, which pros did, which is why DDNet client implemented it a bit more reliably, even though still hacky
15:09 <@deen> https://github.com/ddnet/ddnet/commit/c4118a3878bbba1584c054bd53fccb453273af6d
15:50 <+bridge> [ddnet] <fokkonaut> Can we make this serverside?
17:40 <+bridge> [ddnet] <deen> it used to be
17:41 <+bridge> [ddnet] <deen> then i switched it to clientside since we didn't control most servers unfortunately
17:57 <+bridge> [ddnet] <fokkonaut> But in my case (0.7) it would be good to have it serverside. Can you provide a fix from the history somewhere?
18:38 <+bridge> [ddnet] <Learath2> That old fix checking for ninja should probably be replaced with the m_Freeze flag from the extended object
18:42 <@heinrich5991> Learath2: "int m_Type = {};"?
18:50 <@heinrich5991> what does that do?
18:50 <@heinrich5991> default-initialize the variable? (i.e. do nothing for int)
19:02 <+Learath2> heinrich5991: that zero-initializes the variable
19:02 <+Learath2> (as defined by the c++ standard that is)
19:02 <+Learath2> in the case of int it'd set it 0
20:26 <+bridge> [ddnet] <deen> why not = 0? Looks simpler.
20:27 <+bridge> [ddnet] <deen> int m_Type{0}; should be used in class definition if you want it initialized the same way in every constructor
20:38 <@heinrich5991> why not int `m_Type = 0;`?
20:38 <@heinrich5991> which c++ standard btw?
20:41 <@heinrich5991> where can I read about that?
21:33 <@heinrich5991> deen: is there a reason why we ship a bundled libcurl on linux? it seems that it is installed everywhere
21:34 <@heinrich5991> e.g.: https://popcon.debian.org/stable/by_inst
21:48 <+Learath2> I think I read it in C++14, but I don't think the types of initialization changed between standards
21:49 <+Learath2> Section 8.5
21:57 <@heinrich5991> wait
21:57 <@heinrich5991> is int() == 0?
21:57 <@heinrich5991> or int a();
21:58 <@heinrich5991> nah, the latter is a function declaration
22:03 <@heinrich5991> 8.5.4, paragraph 3:
22:03 <@heinrich5991> List-initialization of an object or reference of type T is defined as follows:
22:03 <@heinrich5991> — If T is an aggregate, aggregate initialization is performed (8.5.1).
22:03 <@heinrich5991> …
22:03 <@heinrich5991> — Otherwise, if the initializer list has no elements, the object is value-initialized.
22:04 <@heinrich5991> example: int** pp {}; // initialized to null pointer
22:17 <+Learath2> 8.5p8 tells you why those end up getting zero initialized
22:18 <@heinrich5991> yep
23:01 <+bridge> [ddnet] <deen> so that ddnet keeps the same dependencies as vanilla
23:03 <@heinrich5991> sounds like we could drop our custom lib if it's basically installed everywhere
23:25 <@heinrich5991> debian oldoldstable provides libcurl.so.4, which is the so version we link to: https://packages.debian.org/jessie/amd64/libcurl3/filelist
