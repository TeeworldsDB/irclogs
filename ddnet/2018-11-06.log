00:07 <+bridge> [ddnet] <Learath2> Okay, whoever does dig into this the `SecurityToken` argument of `int CNetConnection::Feed` is b8. It never gets called with anything except `SECURITY_TOKEN_UNSUPPORTED` thus the debugging line underneath the `m_SecurityToken = SecurityToken;` is also b8 . And I'm pretty convinced `int CNetConnection::Feed` actually serves no purpose at all...
03:21 <+bridge_> [ddnet] <redix> At least the
03:21 <+bridge_> [ddnet] <redix> ```
03:21 <+bridge_> [ddnet] <redix>             if(State() == NET_CONNSTATE_OFFLINE)
03:21 <+bridge_> [ddnet] <redix>             {
03:21 <+bridge_> [ddnet] <redix>                 if(CtrlMsg == NET_CTRLMSG_CONNECT)
03:21 <+bridge_> [ddnet] <redix>                 {
03:21 <+bridge_> [ddnet] <redix> ```
03:21 <+bridge_> [ddnet] <redix> blocks seems to be useless. The connection establishment is handled by the `CNetServer` and `CNetConnection::Feed` is only called when there is already a connection, so the case offline and connect cannot happen.
03:21 <+bridge_> [ddnet] <redix> This also makes the `SecurityToken` parameter for `CNetConnection::Feed` and `NET_CONNSTATE_PENDING` unnecessary.
03:22 <+bridge_> [ddnet] <redix> At least the
03:22 <+bridge_> [ddnet] <redix> ```
03:22 <+bridge_> [ddnet] <redix>             if(State() == NET_CONNSTATE_OFFLINE)
03:22 <+bridge_> [ddnet] <redix>             {
03:22 <+bridge_> [ddnet] <redix>                 if(CtrlMsg == NET_CTRLMSG_CONNECT)
03:22 <+bridge_> [ddnet] <redix>                 {
03:22 <+bridge_> [ddnet] <redix>                     ...
03:22 <+bridge_> [ddnet] <redix>                 }
03:22 <+bridge_> [ddnet] <redix>             }
03:22 <+bridge_> [ddnet] <redix> ```
03:22 <+bridge_> [ddnet] <redix> blocks seems to be useless. The connection establishment is handled by the `CNetServer` and `CNetConnection::Feed` is only called when there is already a connection, so the case offline and connect cannot happen.
03:22 <+bridge_> [ddnet] <redix> This also makes the `SecurityToken` parameter for `CNetConnection::Feed` and `NET_CONNSTATE_PENDING` unnecessary.
03:24 <+bridge_> [ddnet] <redix> At least the
03:24 <+bridge_> [ddnet] <redix> ```
03:24 <+bridge_> [ddnet] <redix>             if(State() == NET_CONNSTATE_OFFLINE)
03:24 <+bridge_> [ddnet] <redix>             {
03:24 <+bridge_> [ddnet] <redix>                 if(CtrlMsg == NET_CTRLMSG_CONNECT)
03:24 <+bridge_> [ddnet] <redix>                 {
03:24 <+bridge_> [ddnet] <redix>                     ...
03:25 <+bridge_> [ddnet] <redix>                 }
03:25 <+bridge_> [ddnet] <redix>             }
03:25 <+bridge_> [ddnet] <redix> ```
03:25 <+bridge_> [ddnet] <redix> blocks seems to be useless. The connection establishment is handled by the `CNetServer` and `CNetConnection::Feed` is only called when there already is a connection, so the case offline and connect cannot happen.
03:25 <+bridge_> [ddnet] <redix> This also makes the `SecurityToken` parameter for `CNetConnection::Feed` and `NET_CONNSTATE_PENDING` unnecessary.
17:51 <+bridge_> [ddnet] <Im 'corneum> why does red teleporter transfer ninja speed?
18:04 <+bridge_> [ddnet] <fokkonaut> ninja speed is always there, if you go against a wall for example you will see it
18:05 <+bridge_> [ddnet] <Im 'corneum> so it doesnt push me once but for the whole time i move?
18:05 <+bridge_> [ddnet] <fokkonaut> yes
18:17 <+bridge_> [ddnet] <fokkonaut> @Im 'corneum place shield inside the teleporter to stop momentum
18:19 <+bridge_> [ddnet] <Learath2> And a ninja tile on the other side if you want them to keep ninja
18:19 <+bridge_> [ddnet] <fokkonaut> thats what i just wanted to say
18:19 <+bridge_> [ddnet] <Im 'corneum> i didnt need it for a part, i was just wondering.   i even took use of it now ðŸ˜„
