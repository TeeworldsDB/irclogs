00:39 < Voxel> Hi! I'm just joining in really quickly to ask a question about a possible new update. It's for the ZIP file asset update, and I don't know if implimenting it will hinder preformance, since it will be dealing with a lot more singular images, instead of one big texture atlas.
07:54 < bridge> <jxsl13> hello voxel
07:54 < bridge> <ryozuki> morning
07:54 < bridge> <jxsl13> morning
07:55 < bridge> <ryozuki> yesterday i spilled coffee on part of the keyboard
07:56 < bridge> <ryozuki> luckily it isnt affected
07:56 < bridge> <ryozuki> :Catsweat:
07:56 < bridge> <ryozuki> its just a 200‚Ç¨ keyboard :justatest:
07:58 < bridge> <jxsl13> putting my drinks always as far away from anything electrical as possible on my desk. spilled tea once, luckily it had no sugar in it. never doing that again üòÑ
08:28 < bridge> <learath2> What kbd do you use?
08:40 < bridge> <fokkonaut> üòåüòÅ
08:55 < bridge> <kekomonter> I can't spill tea on my keyboard because it's Lily58 pro :troll: 
08:55 < bridge> <kekomonter> https://github.com/kata0510/Lily58
09:39 < bridge> <ryozuki> corsair k70 rgb pro
09:40 < bridge> <Ewan> scam
09:41 < bridge> <milkeeycat> If a keyboard name has "pro" in it it gives +50% skill and 30% fps
09:41 < bridge> <milkeeycat> If a keyboard name has "pro" in it it gives +50% skill and +30% fps
09:41 < bridge> <Ewan> what about macbook
09:42 < bridge> <milkeeycat> -65% money :lol:
10:15 < bridge> <Ewan> not if ur work gets it for u
10:15 < bridge> <Ewan> I got thunderbolt out the ass
10:15 < bridge> <Ewan> m3 pro
10:27 < bridge> <totar> I wonder if the teeworlds networking model was based on this exact paper. It seems like a lot of somewhat arbitrary details are nearly identical https://mrelusive.com/publications/papers/The-DOOM-III-Network-Architecture.pdf
11:17 < bridge> <heinrich5991> this gives a type error. do you mean `foo_mut(&mut j);`? then I get an error for the `drop(y);` but that one has nothing to do with lifetimes. it's simply that `x` has been dropped and thus `y` is no longer valid
11:18 < bridge> <heinrich5991> I remember people saying it was based on quake networking
11:18 < bridge> <heinrich5991> what is that map, what do you need it for? üôÇ
11:56 < bridge> <jxsl13> true
12:04 < bridge> <cyberfrighter> imagine a keyboard that actually boosts fps
12:04 < bridge> <milkeeycat> Idk what I was smoking when I wrote that yesterday, here's new code xd:
12:04 < bridge> <milkeeycat> ```rust
12:04 < bridge> <milkeeycat> fn foo_mut<'a>(_: &'a mut &'a String) {
12:05 < bridge> <milkeeycat>     // This function signature means take an exclusive reference for the entire rest of it's validity
12:05 < bridge> <milkeeycat> }
12:05 < bridge> <milkeeycat> fn foo<'a>(_: &'a &'a String) {}
12:05 < bridge> <milkeeycat> 
12:05 < bridge> <milkeeycat> fn main() {
12:05 < bridge> <milkeeycat>     let x = String::new();
12:05 < bridge> <milkeeycat>     let y: &String = &x;
12:05 < bridge> <milkeeycat> 
12:05 < bridge> <milkeeycat>     foo(&y);
12:05 < bridge> <milkeeycat>     foo(&y); // It's passes something like &'smol &'big and &T is covariant so it can downgrade(?) 'big to 'smol, and with that you can call it as many times as you want
12:05 < bridge> <milkeeycat> 
12:05 < bridge> <milkeeycat>     foo_mut(&mut y);
12:05 < bridge> <milkeeycat>     // Reference is eaten and still in use, so it's not possible to use `y`
12:05 < bridge> <milkeeycat>     // Something about &mut T being invariant  over T but covariant over 'a
12:05 < bridge> <milkeeycat> 
12:05 < bridge> <milkeeycat>     drop(y);
12:05 < bridge> <milkeeycat> }
12:05 < bridge> <milkeeycat> ```
12:16 < bridge> <lsdglsgdflk> how can I check the connection status to the server in ddnet src (i.e. for example, is the map currently being downloaded or is the connection completely complete)
12:23 < bridge> <lsdglsgdflk> e.g. m_IsConnected()
12:32 < ws-client1> <ChillerDragon> @lsdglsgdflk ``Client()->State()`` can be one of those ``STATE_OFFLINE, STATE_CONNECTING,  STATE_LOADING, STATE_ONLINE, STATE_DEMOPLAYBACK, STATE_QUITTING, STATE_RESTARTING``
12:33 < ws-client1> <ChillerDragon> @doickzashmoukanaiazaza do you need anything specific? :D 
12:35 < bridge> <lsdglsgdflk> ty brooo
12:36 < ws-client1> <ChillerDragon> @deathgood you can use the ``logfile`` command in the client and server console or config which takes a filename as argument. It will create a text file with all the logs including chat. There is also ``dump_local_console``
12:46 < bridge> <deathgood> ‚úÖ
13:13 < bridge> <heinrich5991> `let y` must be `let mut y`. do you even compile your examples? you should! the compiler gives better errors than the language server
13:14 < bridge> <Jupstar ‚ú™> Really? For me it gives the same errors, except maybe for some insane macros üòÑ
13:14 < bridge> <heinrich5991> especially in tricky cases (and I think we already saw these in @milkeeycat's examples), yes
13:15 < bridge> <ryozuki> ```rust
13:15 < bridge> <ryozuki>     use iced_x86::code_asm::*;
13:15 < bridge> <ryozuki> 
13:15 < bridge> <ryozuki>     let mut a = CodeAssembler::new(64)?;
13:15 < bridge> <ryozuki> 
13:15 < bridge> <ryozuki>     /*
13:15 < bridge> <ryozuki>         endbr64
13:15 < bridge> <ryozuki>         push   rbp
13:15 < bridge> <ryozuki>         mov    rbp,rsp
13:15 < bridge> <ryozuki>         mov    DWORD PTR [rbp-0x4],0x0
13:16 < bridge> <ryozuki>         mov    eax,0x2
13:16 < bridge> <ryozuki>         pop    rbp
13:16 < bridge> <ryozuki>         ret
13:16 < bridge> <ryozuki>     */
13:16 < bridge> <ryozuki>     a.endbr64()?;
13:16 < bridge> <ryozuki>     a.push(rbp)?;
13:16 < bridge> <ryozuki>     a.mov(rbp, rsp).unwrap();
13:16 < bridge> <ryozuki>     a.mov(dword_ptr(rbp - 0x4), 0).unwrap();
13:16 < bridge> <ryozuki>     a.mov(eax, 2u32).unwrap();
13:16 < bridge> <ryozuki>     a.pop(rbp)?;
13:16 < bridge> <ryozuki>     a.ret()?;
13:16 < bridge> <ryozuki> ```
13:16 < bridge> <ryozuki> this crate is awesome
13:16 < bridge> <ryozuki> https://docs.rs/iced-x86/1.21.0/iced_x86/#assemble-instructions
13:16 < bridge> <Jupstar ‚ú™> Why sometimes unwrap and sometimes ? xd
13:16 < bridge> <ryozuki> cuz i was debugigng
13:16 < bridge> <ryozuki> xd
13:16 < bridge> <ryozuki> ```rust
13:16 < bridge> <ryozuki>     use iced_x86::code_asm::*;
13:16 < bridge> <ryozuki> 
13:16 < bridge> <ryozuki>     let mut a = CodeAssembler::new(64)?;
13:16 < bridge> <ryozuki> 
13:16 < bridge> <ryozuki>     /*
13:16 < bridge> <ryozuki>         endbr64
13:16 < bridge> <ryozuki>         push   rbp
13:16 < bridge> <ryozuki>         mov    rbp,rsp
13:16 < bridge> <ryozuki>         mov    DWORD PTR [rbp-0x4],0x0
13:16 < bridge> <ryozuki>         mov    eax,0x2
13:16 < bridge> <ryozuki>         pop    rbp
13:17 < bridge> <ryozuki>         ret
13:17 < bridge> <ryozuki>     */
13:17 < bridge> <ryozuki>     a.endbr64()?;
13:17 < bridge> <ryozuki>     a.push(rbp)?;
13:17 < bridge> <ryozuki>     a.mov(rbp, rsp)?;
13:17 < bridge> <ryozuki>     a.mov(dword_ptr(rbp - 0x4), 0)?;
13:17 < bridge> <ryozuki>     a.mov(eax, 2u32)?;
13:17 < bridge> <ryozuki>     a.pop(rbp)?;
13:17 < bridge> <ryozuki>     a.ret()?;
13:17 < bridge> <ryozuki> ```
13:17 < bridge> <ryozuki> fixed
13:17 < bridge> <Jupstar ‚ú™> Ryo today is friday
13:17 < bridge> <ryozuki> yeah
13:17 < bridge> <Jupstar ‚ú™> Back in the days, fridays were legendary
13:17 < bridge> <ryozuki> i generated and created the relocatable elf file myself then passed it to linker
13:17 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1299330979281895474/out?ex=671ccfc5&is=671b7e45&hm=5c2eb1eb223123c0b0d2abc9840750ef03af657d6fc5bfd958723fa38c25dfe5&
13:17 < bridge> <ryozuki> pog
13:17 < bridge> <ryozuki> now i have the base to make my codegen backend
13:19 < bridge> <heinrich5991> what error can `a.ret()` return?
13:23 < bridge> <Jupstar ‚ú™> I wasted the last two days thinking about how I can make the vanilla mod easier to use code wise and failed. At some point it just gets messy.
13:23 < bridge> <Jupstar ‚ú™> 
13:23 < bridge> <Jupstar ‚ú™> You either have global states all over your code base, or you have lots of parameter passing and forget to change some stuff somewhere, or your code simply isn't easy to follow anymore.
13:23 < bridge> <Jupstar ‚ú™> 
13:23 < bridge> <Jupstar ‚ú™> It's kinda funny how engine programming is easier than coding a game.
13:23 < bridge> <Jupstar ‚ú™> Engines are so deterministic, while game coding always involves some weird hacks
13:30 < bridge> <milkeeycat> just look on the second error xd
13:31 < bridge> <milkeeycat> Idk what I was smoking when I wrote that yesterday, here's new code xd:
13:31 < bridge> <milkeeycat> ```rust
13:31 < bridge> <milkeeycat> fn foo_mut<'a>(_: &'a mut &'a String) {
13:31 < bridge> <milkeeycat>     // This function signature means take an exclusive reference for the entire rest of it's validity
13:31 < bridge> <milkeeycat> }
13:31 < bridge> <milkeeycat> fn foo<'a>(_: &'a &'a String) {}
13:31 < bridge> <milkeeycat> 
13:31 < bridge> <milkeeycat> fn main() {
13:31 < bridge> <milkeeycat>     let x = String::new();
13:31 < bridge> <milkeeycat>     let mut y: &String = &x;
13:31 < bridge> <milkeeycat> 
13:31 < bridge> <milkeeycat>     foo(&y);
13:31 < bridge> <milkeeycat>     foo(&y); // It's passes something like &'smol &'big and &T is covariant so it can downgrade(?) 'big to 'smol, and with that you can call it as many times as you want
13:31 < bridge> <milkeeycat> 
13:31 < bridge> <milkeeycat>     foo_mut(&mut y);
13:31 < bridge> <milkeeycat>     // Reference is eaten and still in use, so it's not possible to use `y`
13:32 < bridge> <milkeeycat>     // Something about &mut T being invariant  over T but covariant over 'a
13:32 < bridge> <milkeeycat> 
13:32 < bridge> <milkeeycat>     drop(y);
13:32 < bridge> <milkeeycat> }
13:32 < bridge> <milkeeycat> ```
13:50 < bridge> <ryozuki> its not executing the instruction its just generating the opcode in a buffer
13:51 < bridge> <ryozuki> and then i encode it and put it in the .text section of the generated elf file
13:51 < bridge> <ryozuki> and make some symbols
13:51 < bridge> <ryozuki> maybe its invalid to ret in some place idk xd
13:51 < bridge> <ryozuki> or maybe its just cuz a gerneric trait
13:53 < bridge> <Jupstar ‚ú™> Time to stalk Ryo GitHub for his new projects xd
13:53 < bridge> <Jupstar ‚ú™> Oh you are no fish anymore
13:55 < bridge> <ryozuki> @jupeyy_keks whats fish?
13:55 < bridge> <ryozuki> i added it here https://github.com/edg-l/codegen
13:55 < bridge> <ryozuki> i need a good name
13:55 < bridge> <Jupstar ‚ú™> Your pfp
13:56 < bridge> <ryozuki> it doesnt rly have much rn
13:56 < bridge> <Jupstar ‚ú™> ez
14:09 < bridge> <heinrich5991> why can that fail though, what's the possible erorr?
14:10 < bridge> <ryozuki> ```rust
14:10 < bridge> <ryozuki> pub(crate) fn add_instr(&mut self, mut instruction: Instruction) -> Result<(), IcedError> {
14:10 < bridge> <ryozuki>         if !self.current_label.is_empty() && self.defined_anon_label {
14:10 < bridge> <ryozuki>             return Err(IcedError::new("You can't create both an anonymous label and a normal label"));
14:10 < bridge> <ryozuki>         }
14:10 < bridge> <ryozuki>         if !self.current_label.is_empty() {
14:10 < bridge> <ryozuki>             instruction.set_ip(self.current_label.id());
14:10 < bridge> <ryozuki>         } else if self.defined_anon_label {
14:10 < bridge> <ryozuki>             instruction.set_ip(self.current_anon_label.id());
14:10 < bridge> <ryozuki>         }
14:10 < bridge> <ryozuki> 
14:10 < bridge> <ryozuki>         if self.prefix_flags != 0 {
14:10 < bridge> <ryozuki>             if (self.prefix_flags & PrefixFlags::LOCK) != 0 {
14:10 < bridge> <ryozuki>                 instruction.set_has_lock_prefix(true);
14:10 < bridge> <ryozuki>             }
14:10 < bridge> <ryozuki>             if (self.prefix_flags & PrefixFlags::REPE) != 0 {
14:10 < bridge> <ryozuki>                 instruction.set_has_repe_prefix(true);
14:10 < bridge> <ryozuki>             } else if (self.prefix_flags & PrefixFlags::REPNE) != 0 {
14:10 < bridge> <ryozuki>                 instruction.set_has_repne_prefix(true);
14:10 < bridge> <ryozuki>             }
14:10 < bridge> <ryozuki>             if (self.prefix_flags & PrefixFlags::NOTRACK) != 0 {
14:10 < bridge> <ryozuki>                 instruction.set_segment_prefix(Register::DS);
14:10 < bridge> <ryozuki>             }
14:10 < bridge> <ryozuki>         }
14:10 < bridge> <ryozuki> 
14:10 < bridge> <ryozuki>         self.instructions.push(instruction);
14:10 < bridge> <ryozuki>         self.current_label = CodeLabel::default();
14:10 < bridge> <ryozuki>         self.defined_anon_label = false;
14:11 < bridge> <ryozuki>         self.prefix_flags = PrefixFlags::NONE;
14:11 < bridge> <ryozuki>         Ok(())
14:11 < bridge> <ryozuki>     }
14:11 < bridge> <ryozuki> i think it comes to this func
14:11 < bridge> <ryozuki> its just a generic interface to always return a error
14:11 < bridge> <ryozuki> i guess
14:15 < bridge> <heinrich5991> the reference is not in use beyond `foo_mut`, but `foo_mut` constarains how long the inner reference `y` is valid, I think. but I'm not entirely sure about this
14:16 < bridge> <heinrich5991> hmm. looks like the errors are programming errors
14:16 < bridge> <heinrich5991> you should probably `.unwrap()` instead of using `?`? not sure
14:17 < bridge> <ryozuki> yeah
14:46 < bridge> <milkeeycat> The more I try to understand it the less I understand, I thought it would not be possible to drop `x` but it is :\
14:47 < bridge> <milkeeycat> The lesson is: don't use `&'a T<'a>` or you are a bad person
14:48 < bridge> <milkeeycat> The lesson is: don't use `&'a mut T<'a>` or you are a bad person
14:48 < bridge> <heinrich5991> I think that lesson is good (until "or")
15:31 < bridge> <aroxwex> hi
15:31 < bridge> <aroxwex> how can i set only strong or only weak hooks on everyone
15:32 < bridge> <Jupstar ‚ú™> `sv_no_weak_hook 1`
15:32 < bridge> <Jupstar ‚ú™> 
15:32 < bridge> <Jupstar ‚ú™> https://ddnet.org/settingscommands/
15:32 < bridge> <aroxwex> its not work
15:32 < bridge> <Jupstar ‚ú™> also pls use #questions
15:32 < bridge> <Jupstar ‚ú™> thanks
15:32 < bridge> <aroxwex> oh okey
15:32 < bridge> <Jupstar ‚ú™> why should it not work
15:34 < bridge> <aroxwex> the hook indicator still shows differently
15:34 < bridge> <Jupstar ‚ú™> Then the indicator is simply wrong
15:35 < bridge> <aroxwex> okey thx
15:35 < bridge> <aroxwex> So how can I make everyone a weak hook?
15:35 < bridge> <Jupstar ‚ú™> That doesn't exist
15:50 < bridge> <jxsl13> Chillerdragon, got a merge request open
16:39 < zhn> yo guys, i don't know how i did miss it, but teeworlds was a target of being turned into [game hosted on i2p](https://www.teeworlds.com/forum/viewtopic.php?id=20664)
16:40 < zhn> i have nothing to add to this, just wanted to share it with you
16:41 < bridge> <Jupstar ‚ú™> u'r alive
16:42 < zhn> yeah, kinda
16:43 < zhn> was messing around with awful reg.ru support tickets that don't work in general, you have to spam f5 in case you want to create one xd
16:44 < zhn> i wonder if they'll open 25 port, im going to move to another hosting + domain name registrar otherwise
16:45 < bridge> <Jupstar ‚ú™> what are you registering? discord.ru?
16:46 < zhn> nah, discord.ru is taken and its awful troll site, never visit it
16:46 < bridge> <Jupstar ‚ú™> oh xd didnt know
16:46 < zhn> teeworlds.ru, but especially forum.teeworlds.ru
16:47 < bridge> <Jupstar ‚ú™> so russian ppl can have a forum again to talk to each other?
16:47 < zhn> yeah, we had teedes.ru and z-team.org.ru before, but now they're gone, completely
16:47 < zhn> i didn't find any person related to project that has any backups
16:47 < zhn> projects*
16:48 < bridge> <Jupstar ‚ú™> rip, but nice
16:49 < zhn> i don't expect anything from this project, rus community just has to have atleast 1 content dumpster that everyone can visit easily
16:49 < zhn> 1 tb space is ready to take anything :P
16:53 < zhn> twice!
16:59 < zhn> another warm [post](https://www.teeworlds.com/forum/viewtopic.php?id=13328) from teeworlds.com
17:30 < bridge> <heinrich5991> @learath2 ping finish server
17:37 < bridge> <milkeeycat> @heinrich5991 last question xd. If I drop `x` instead of `y`, will it be the place where `y` will not be valid anymore
17:37 < bridge> <heinrich5991> yes
17:38 < bridge> <milkeeycat> okaaaaaaaay
17:38 < bridge> <milkeeycat> I think I finally got it
17:38 < bridge> <milkeeycat> Thank you so much :heartw:
18:27 < bridge> <ryozuki> https://en.wikipedia.org/wiki/Shadow_stack
18:48 < bridge> <louis> isnt that basically a canary
18:49 < bridge> <louis> but in shadow memory (whatever that is :greenthing: )
18:54 < bridge> <ryozuki> no
18:54 < bridge> <ryozuki> its better
18:54 < bridge> <ryozuki> > Shadow stacks provide more protection for return addresses than stack canaries, which rely on the secrecy of the canary value and are vulnerable to non-contiguous write attacks.[5] Shadow stacks themselves can be protected with guard pages[6] or with information hiding, such that an attacker would also need to locate the shadow stack to overwrite a return address stored there.
20:32 < bridge> <lsdglsgdflk> how can i make a timer for example with a delay of 50 milliseconds regular timers from c++ break the game
20:34 < bridge> <kebscs> `std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()`
20:34 < bridge> <lsdglsgdflk> ok wait
20:36 < bridge> <lsdglsgdflk> tyyy
20:37 < bridge> <kebscs> np
20:38 < bridge> <lsdglsgdflk> one more thing how can i call console command for example cl_showfps 1 or say hello etc.
20:39 < bridge> <kebscs> with code?
20:40 < bridge> <lsdglsgdflk> yh
20:40 < bridge> <lsdglsgdflk> example from own command
20:41 < bridge> <lsdglsgdflk> Sorry if it doesn't sound clear
20:41 < bridge> <kebscs> `Console()->ExecuteLine("say /pause");`
20:42 < bridge> <lsdglsgdflk> AHHH
20:42 < bridge> <kebscs> or when commands are registered this is their callback
20:42 < bridge> <kebscs> https://cdn.discordapp.com/attachments/293493549758939136/1299443076565045318/image.png?ex=671d382b&is=671be6ab&hm=657036d71f360441fd82b7a1640ea27029cf7df0436f992166ba89300b60cdd2&
20:42 < bridge> <lsdglsgdflk> Before this I tried console with a small letter...
20:43 < bridge> <kebscs> you can usually call the callback or something inside it that does the same
20:43 < bridge> <lsdglsgdflk> ok
20:44 < bridge> <lsdglsgdflk> hm
20:44 < bridge> <Jupstar ‚ú™> a timer and automated command execution
20:44 < bridge> <Jupstar ‚ú™> why do i smell cheats
20:44 < bridge> <lsdglsgdflk> are in client.cpp Console() need use with pself?
20:45 < bridge> <lsdglsgdflk> https://cdn.discordapp.com/attachments/293493549758939136/1299443633648304199/image.png?ex=671d38b0&is=671be730&hm=d2c588a7aac7806c65396de1d9d905772993259954789721e2a80fc97e556bd7&
20:45 < bridge> <kebscs> idk search around for similar code
20:45 < bridge> <kebscs> in that file
20:45 < bridge> <lsdglsgdflk> https://cdn.discordapp.com/attachments/293493549758939136/1299443680830033961/image.png?ex=671d38bc&is=671be73c&hm=d0758c74bedfea268a421a8f58329cf58b92b6782d90ef8cc46e2a6e4c986054&
20:47 < bridge> <kebscs> ctrl+f for console
20:47 < bridge> <kebscs> m_pConsole->function
20:47 < bridge> <kebscs> in client.cpp
20:48 < bridge> <lsdglsgdflk> ty
21:08 < bridge> <lsdglsgdflk> auto delayStart = std::chrono::steady_clock::now();
21:08 < bridge> <lsdglsgdflk>         while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - delayStart).count() < 6000) {
21:08 < bridge> <lsdglsgdflk>         }
21:08 < bridge> <lsdglsgdflk> are this true? when the cycle starts the game just freezes
21:20 < bridge> <kebscs> Make start static and don't use while
21:20 < bridge> <kebscs> Just if time<6000 do stuff
21:22 < bridge> <kebscs> If you want to do it every 6s now just once after 6s, do start=now inside if
21:22 < bridge> <kebscs> If you want to do it every 6s not just once after 6s, do start=now inside if
21:29 < bridge> <lsdglsgdflk> static auto delayStart = std::chrono::steady_clock::now();
21:29 < bridge> <lsdglsgdflk> auto now = std::chrono::steady_clock::now();
21:30 < bridge> <lsdglsgdflk> 
21:30 < bridge> <lsdglsgdflk> if (std::chrono::duration_cast<std::chrono::milliseconds>(now - delayStart).count() < 6000) {
21:30 < bridge> <lsdglsgdflk> } else {
21:30 < bridge> <lsdglsgdflk>     delayStart = now;
21:30 < bridge> <lsdglsgdflk> }
21:30 < bridge> <lsdglsgdflk> true?
22:09 < bridge> <ryozuki> when you gotta use c++ after using rust all time
22:09 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1299464770138673184/Gau1LGuXgAATdhd.png?ex=671d4c60&is=671bfae0&hm=0541486b8de0e1288ea5eeb44d4b34e1555d3b19ca6293705b237823f8874727&
22:10 < bridge> <melo∆û> i've been coding in nix for the last 3 days, i feel far superior than any rust programmer
22:10 < bridge> <melo∆û> (i'm not)
22:11 < bridge> <ryozuki> im doing my own compiler backend
22:11 < bridge> <ryozuki> i have the power of ELFs
22:11 < bridge> <melo∆û> nixOS member :brownbear:
22:11 < bridge> <melo∆û> https://cdn.discordapp.com/attachments/293493549758939136/1299465352719368192/image.png?ex=671d4cea&is=671bfb6a&hm=ee127a7d0badd08dab8d48a8a90373ad4abf7aa2b5c9757fbbe6330f18975b9e&
22:11 < bridge> <ryozuki> i contributed to llvm and rust
22:11 < bridge> <ryozuki> :gigachad:
22:11 < bridge> <melo∆û> i contributed to the zed editor and ddnet :gigachad:
22:12 < bridge> <ryozuki> even my tech lead in my company
22:12 < bridge> <ryozuki> said he is proud of me as i am a llvm contributor
22:12 < bridge> <ryozuki> :gigachad:
22:12 < bridge> <melo∆û> gigachad
22:12 < bridge> <reitw> @blaiszephyr Come
22:12 < bridge> <ryozuki> come where
22:12 < bridge> <ryozuki> we are here
22:12 < bridge> <melo∆û> oh god
22:12 < bridge> <melo∆û> help
22:12 < bridge> <melo∆û> he found me
22:12 < bridge> <inv41idu53rn4m3> any kernel devs in here?
22:12 < bridge> <reitw> Can't talk , harf wirh ond hand
22:12 < bridge> <ryozuki> not but someday, but what do u need help
22:12 < bridge> <ryozuki> im a gentoo user
22:12 < bridge> <melo∆û> :kekw:
22:12 < bridge> <reitw> Ask ur question
22:13 < bridge> <inv41idu53rn4m3> I was just asking to know the level of insanity in this community
22:13 < bridge> <ryozuki> ah cuz kernel maintainer status was revoked from russians?
22:13 < bridge> <melo∆û> ._.
22:13 < bridge> <reitw> They start to use rust, good people
22:13 < bridge> <inv41idu53rn4m3> no, just because LLVM contributor is high tier but kernel contributor is higher
22:13 < bridge> <ryozuki> i think being a llvm dev is higher than some kernel devs
22:13 < bridge> <ryozuki> if u are a llvm dev and contributed to the instdag ur a god
22:14 < bridge> <inv41idu53rn4m3> definitely higher than the people who are only kernel devs by technicality
22:14 < bridge> <ryozuki> im deifnitly sure llvm has more loc than kernel
22:14 < bridge> <ryozuki> xd
22:14 < bridge> <ryozuki> i compile kernel in like 2 mins
22:14 < bridge> <ryozuki> llvm in 8
22:15 < bridge> <ryozuki> but i have a 24 core 5.6ghz cpu
22:15 < bridge> <inv41idu53rn4m3> makes sense, a kernel should be pretty minimal... but then you realize how bloated Linux is and you get a bit scared
22:15 < bridge> <ryozuki> actually
22:15 < bridge> <ryozuki> im sure the kernel is like 10% code and the other is 80% amd drivers
22:16 < bridge> <ryozuki> but yeah kernel locs are mostly drivers
22:16 < bridge> <inv41idu53rn4m3> yeah
22:16 < bridge> <inv41idu53rn4m3> I'd assume drivers would compile relatively fast though, since they have rather simple dependency graphs
22:17 < bridge> <ryozuki> its not a problem because kernel as a pretty dope config system
22:17 < bridge> <ryozuki> u enable only drivers u need
22:17 < bridge> <ryozuki> its why its so modular
22:17 < bridge> <ryozuki> and why gentoo is so good
22:17 < bridge> <inv41idu53rn4m3> yeah I've compiled a kernel once or twice
22:17 < bridge> <ryozuki> in debian distros and generic normie distros all drivers are enabled most of time
22:17 < bridge> <ryozuki> on gentoo u only enable what u need
22:17 < bridge> <inv41idu53rn4m3> I even installed Gentoo but still using pleb Arch day to day
22:17 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1299466981518348339/image.png?ex=671d4e6f&is=671bfcef&hm=17dc8c0ad8bc952d2605d7ab71420180bc7996ff918685816b1bd1ab00addb5c&
22:18 < bridge> <inv41idu53rn4m3> Arch packaging is either based or bloated depending on how you view it
22:18 < bridge> <inv41idu53rn4m3> you install an application and it installs all the related libraries and headers
22:18 < bridge> <inv41idu53rn4m3> no -dev packages
22:19 < bridge> <inv41idu53rn4m3> it's practical and comfy but a bit heavy on space
22:20 < bridge> <inv41idu53rn4m3> You need a particular CUDA library? Here you go, take the `cuda` package, 4.8GB installed size
22:20 < bridge> <inv41idu53rn4m3> okay that's probably the most egregious example I can think of
22:24 < bridge> <melo∆û> what is that 1 flatpak package
22:24 < bridge> <melo∆û> :kekw:
22:24 < bridge> <ryozuki> xd
22:24 < bridge> <ryozuki> idk
22:24 < bridge> <melo∆û> thats why i like nix and the nix/store so much, even if stuff is bloated, you just dump your nix/store and everythings tidy again
22:25 < bridge> <melo∆û> all unused deps are cached and stored and dumped when you tell them to be dumped - it's great
22:25 < bridge> <melo∆û> speaking off - let me clean my store
22:25 < bridge> <ryozuki> gentoo also caches
22:25 < bridge> <reitw> Reading kernel code is easier than nobyC
22:25 < bridge> <ryozuki> nobyC is based
22:25 < bridge> <inv41idu53rn4m3> Doesn't every decent package manager cache?
22:26 < bridge> <melo∆û> nix packages can't collide with each other because either you reuse a cached version or you lock it to it's own - it's great
22:26 < bridge> <ryozuki> xd
22:26 < bridge> <ryozuki> this reminds me
22:26 < bridge> <melo∆û> i'm capable of having every single node version available at once without problems :gigachad:
22:26 < bridge> <milkeeycat> nix mentioned
22:26 < bridge> <ryozuki> the hardest problem in programming
22:26 < bridge> <melo∆û> ofc we talkin about kernels and package managers and you appear
22:26 < bridge> <inv41idu53rn4m3> naming things
22:26 < bridge> <melo∆û> how your lang looking
22:26 < bridge> <inv41idu53rn4m3> and cache invalidation
22:26 < bridge> <ryozuki> https://surfingcomplexity.blog/2022/11/25/cache-invalidation-really-is-one-of-the-hardest-things-in-computer-science/
22:27 < bridge> <ryozuki> > there are famously two hard problems in computer science: cache invalidation, naming things, and off by one errors.
22:27 < bridge> <inv41idu53rn4m3> old but gold
22:27 < bridge> <milkeeycat> I spent 2 days trying to understand `&'a T<'a>` and still didn't check repo's code of what I wanted to check at the first place
22:28 < bridge> <melo∆û> :kekw:
22:28 < bridge> <ryozuki> ocaml
22:28 < bridge> <ryozuki> i see cammels
22:28 < bridge> <ryozuki> ill do advent of code in ocaml
22:28 < bridge> <melo∆û> i'll do it in nixlang
22:28 < bridge> <melo∆û> noone can stop me
22:28 < bridge> <ryozuki> isnt nixlang like haskell
22:28 < bridge> <melo∆û> (i guess the lang can)
22:28 < bridge> <melo∆û> oh god...
22:28 < bridge> <melo∆û> https://cdn.discordapp.com/attachments/293493549758939136/1299469727378444430/image.png?ex=671d50fd&is=671bff7d&hm=03e92a5d822a3bd20ba49233cb9e271cef39d54d6130509f2b73d5bf3c506485&
22:28 < bridge> <melo∆û> 50gb more storage for free
22:28 < bridge> <ryozuki> bloat lol
22:29 < bridge> <reitw> One day I've learned that UML is not only a modeling language
22:29 < bridge> <melo∆û> to be fair i tested like 300 different apps today and i didnt clean up after myself xD
22:29 < bridge> <melo∆û> the 50gb are basically i3wm, awesomewm, plasma 5, plasma 6, hyprland and cosmos combined
22:29 < bridge> <melo∆û> (i stuck with plasma 6)
22:29 < bridge> <milkeeycat> rust devs when they run `cargo clean`
22:30 < bridge> <melo∆û> just `rm -rf result`
22:30 < bridge> <melo∆û> ez
22:30 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1299470197215985856/image.png?ex=671d516e&is=671bffee&hm=6c5f5800405425383cda5d13644601dbce44a9a9eed3173987cc41d81ea4e935&
22:30 < bridge> <inv41idu53rn4m3> it is also a curse upon this world
22:30 < bridge> <melo∆û> windows
22:30 < bridge> <melo∆û> shame.
22:30 < bridge> <ryozuki> they are rust crates
22:31 < bridge> <ryozuki> rust pulled
22:31 < bridge> <ryozuki> idk why
22:31 < bridge> <melo∆û> damn rust
22:31 < bridge> <inv41idu53rn4m3> NPM
22:31 < bridge> <inv41idu53rn4m3> We're walking in circles!
22:32 < bridge> <ryozuki> @blaiszephyr to be fair, these are source files
22:32 < bridge> <ryozuki> i dont store bin files
22:32 < bridge> <ryozuki> but i could
22:32 < bridge> <ryozuki> but it doesnt make sense for me
22:32 < bridge> <inv41idu53rn4m3> node_modules
22:32 < bridge> <reitw> User Mode Linux
22:32 < bridge> <inv41idu53rn4m3> ah
22:33 < bridge> <melo∆û> every project i work on is basically sandboxed with it's own nix .lock files so i bloat it up on purpose basically
22:33 < bridge> <reitw> https://en.m.wikipedia.org/wiki/User-mode_Linux
22:33 < bridge> <melo∆û> every project i work on is basically sandboxed with it's own nix .lock files so i bloat it up on purpose
22:33 < bridge> <melo∆û> not like i'll run out of storage any time soon :greenthing:
22:33 < bridge> <melo∆û> https://cdn.discordapp.com/attachments/293493549758939136/1299470978761621536/image.png?ex=671d5228&is=671c00a8&hm=f709e68aca597ba42ed6800dfa49ad1e94b408967ffc96e70a3d675170b90a9a&
22:34 < bridge> <reitw> U want some of our 3Pb remaining? :issou:
22:34 < bridge> <inv41idu53rn4m3> on one hand I like the idea of sandboxing
22:35 < bridge> <inv41idu53rn4m3> on the other hand it's just containers for the desktop eugh
22:35 < bridge> <inv41idu53rn4m3> more microservices than users istg
22:36 < bridge> <reitw> @blaiszephyr
22:36 < bridge> <reitw> https://cdn.discordapp.com/attachments/293493549758939136/1299471552005279824/image.png?ex=671d52b1&is=671c0131&hm=b402ca5c90afb77a31889d9d38fa69d05f5becd0d00a93ad2881bcceedaa9b53&
22:36 < bridge> <melo∆û> this is what i need to build, compile and debug ddnet for example :)
22:36 < bridge> <melo∆û> https://cdn.discordapp.com/attachments/293493549758939136/1299471555419443251/image.png?ex=671d52b1&is=671c0131&hm=f02fe4db1dfa312a19233920104cc975e0dd5b9d3b38950cba3d0cf0992112b5&
22:36 < bridge> <reitw> Best pic
22:36 < bridge> <melo∆û> you make me sick.. :kekw:
22:36 < bridge> <ryozuki> tf
22:36 < bridge> <melo∆û> a storage container specifing their space in PiB is already crazy enough, but having 5PiB used...
22:36 < bridge> <reitw> I manage NetApp clusters
22:37 < bridge> <ryozuki> u sysadmin?
22:37 < bridge> <reitw> I manage some NetApp clusters
22:37 < bridge> <reitw> Yes
22:37 < bridge> <reitw> Net and sys
22:37 < bridge> <ryozuki> nice
22:37 < bridge> <ryozuki> do u use something like tailscale to ssh?
22:38 < bridge> <reitw> Nop
22:38 < bridge> <ryozuki> u just ssh?
22:38 < bridge> <reitw> Just openssh and expect
22:38 < bridge> <ryozuki> what is expect
22:39 < bridge> <reitw> I use expect to setup my ssh env on NetApp ONTAP
22:39 < bridge> <ryozuki> i just connect to some dev servers at my company
22:39 < bridge> <ryozuki> but they require tailscale
22:39 < bridge> <ryozuki> which requires a SSO login
22:39 < bridge> <ryozuki> xd
22:39 < bridge> <reitw> expect is a scripting language allowing you to send commands etc.. to the remote session, then take control of the input
22:40 < bridge> <reitw> On a linux server I don't use expect as you can just call /bin/bash at the end and will spawn your shell. Can't do that on ONTAP
22:40 < bridge> <ryozuki> idk what ontap is
22:41 < bridge> <reitw> NetApp's software for unified storage
22:41 < bridge> <reitw> Their operating system tho
22:41 < bridge> <ryozuki> pog
22:42 < bridge> <reitw> ```tcl
22:43 < bridge> <reitw> #!/usr/bin/expect
22:43 < bridge> <reitw> 
22:43 < bridge> <reitw> # Define the variables
22:43 < bridge> <reitw> set timeout -1
22:43 < bridge> <reitw> set host [lindex $argv 0];
22:43 < bridge> <reitw> set user "user"
22:43 < bridge> <reitw> 
22:43 < bridge> <reitw> # Catch password
22:43 < bridge> <reitw> stty -echo
22:43 < bridge> <reitw> send_user -- "Password for $user@$host: "
22:43 < bridge> <reitw> expect_user -re "(.*)\n"
22:43 < bridge> <reitw> send_user "\n"
22:43 < bridge> <reitw> stty echo
22:43 < bridge> <reitw> set password $expect_out(1,string)
22:43 < bridge> <reitw> 
22:43 < bridge> <reitw> set timestamp [timestamp -format %Y-%m-%d_%H:%M]
22:43 < bridge> <reitw> set logfile $env(HOME)/ssh_logs/session_$timestamp.log
22:43 < bridge> <reitw> log_file -a $logfile
22:43 < bridge> <reitw> 
22:43 < bridge> <reitw> # Start the SSH session
22:43 < bridge> <reitw> spawn ssh $user@$host
22:43 < bridge> <reitw> expect "Access restricted to authorized users"
22:43 < bridge> <reitw> 
22:43 < bridge> <reitw> #¬†Handle the password prompt
22:43 < bridge> <reitw> stty -echo
22:43 < bridge> <reitw> expect {
22:43 < bridge> <reitw>     "assword:" {
22:43 < bridge> <reitw>         send "$password\r"
22:43 < bridge> <reitw>     }
22:43 < bridge> <reitw> }
22:43 < bridge> <reitw> Can even log all you do
22:44 < bridge> <reitw> Never heard of it, will check
22:44 < bridge> <reitw> Ah but it's just a vpn
22:44 < bridge> <ryozuki> ye
22:44 < bridge> <ryozuki> xd
22:44 < bridge> <reitw> We have one too
22:45 < bridge> <reitw> But cisco
22:45 < bridge> <ryozuki> @reitw https://www.theguardian.com/uk-news/2020/nov/06/companies-house-forces-business-name-change-to-prevent-security-risk
22:45 < bridge> <ryozuki> > UK Company named "><SCRIPT SRC=HTTPS://MJT.XSS.HT> LTD" forced to change it (theguardian.com)
22:46 < bridge> <reitw> Lmaoo
22:46 < bridge> <reitw> Genius and idiot at the same time
23:05 < bridge> <ryozuki> https://blog.trailofbits.com/2024/10/25/a-deep-dive-into-linuxs-new-mseal-syscall/
23:08 < bridge> <pathos3005> I want to submit the map to Unique FastCap map pool, they are missing a few crucial maps, and would be really nice for some players to train on these few maps. Besides, the racers in general just want more maps haha
23:12 < bridge> <reitw> Oh lol really interesting
23:14 < bridge> <kollpotato> libtw2 is freaking awesome
23:14 < bridge> <kollpotato> thanks to whoever made it
23:14 < bridge> <kollpotato> i love u
23:18 < bridge> <reitw> https://github.com/heinrich5991/libtw2/graphs/contributors
23:18 < bridge> <reitw> Oh no
23:25 < bridge> <totar> that's crazy how obviously it shows up in the cpu utilization, awesome article
23:36 < bridge> <totar> this post also has more details https://netflixtechblog.com/seeing-through-hardware-counters-a-journey-to-threefold-performance-increase-2721924a2822
