00:05 <+bridge> [ddnet] <deen> why store the cskin as a unique_ptr in unordered_map anyway? If itâ€˜s just a cskin you can emplace and only the map allocates anything
00:06 <+bridge> [ddnet] <Learath2> Yeah, thatâ€™s sort of what I was thinking, but I decided Iâ€™ll just wait and see on the PR since it was a bit too vague of a question for me
06:53 <+bridge> [ddnet] <Jupstar âœª> And what do you use as key?
06:53 <+bridge> [ddnet] <Jupstar âœª> You could overload the hash to work with cskin
06:57 <+bridge> [ddnet] <Jupstar âœª> Tho the hash might calculate before inserting takes place
08:49 <+bridge> [ddnet] <deen> fixed size array with a cstr of the name of skin.
08:56 <+bridge> [ddnet] <Jupstar âœª> But then the string must be a heap object
08:58 <+bridge> [ddnet] <Jupstar âœª> I think arrays doent have std hash support
08:58 <+bridge> [ddnet] <Jupstar âœª> But if u have time to implement what u mean do it, bcs reading code is easier xd
09:00 <+bridge> [ddnet] <Jupstar âœª> In the end it doesn't matter too much. If it creates two pointers plus cskin in heap vs cskin and a 24 bytes array
11:05 <+bridge> [ddnet] <MÊŽÉ¹ ã‚·> Why are all source files in ddnet CMakeLists written manually and not e.g. using file()?
11:19 <+bridge> [ddnet] <destroyed230> i have brought new SSD and just installed windows and some software. I tried to run DDNet but it doesn't start, maybe i have no software like directX, visual C++, Framework, etc?
11:19 <+bridge> [ddnet] <destroyed230> https://cdn.discordapp.com/attachments/293493549758939136/1030047192028827648/unknown.png
11:24 <+bridge> [ddnet] <Jupstar âœª> Amd GPU?
11:24 <+bridge> [ddnet] <Jupstar âœª> https://ddnet.org/news/amd-beta-opengl-crash/
11:24 <+bridge> [ddnet] <Jupstar âœª> We don't use any redistributable
11:25 <+bridge> [ddnet] <Jupstar âœª> Ddnet is not compiled with windows tools
11:27 <+bridge> [ddnet] <destroyed230> i don't see settings_ddnet.cfg there
11:27 <+bridge> [ddnet] <destroyed230> https://cdn.discordapp.com/attachments/293493549758939136/1030049012323201084/unknown.png
11:27 <+bridge> [ddnet] <Jupstar âœª> Create it
11:31 <+bridge> [ddnet] <destroyed230> worked, thx)
12:43 <+bridge> [ddnet] <Learath2> Youâ€™ll have to ask @heinrich5991 but I think this was the recommended approach by cmake docs.
15:42 <+bridge> [ddnet] <Anime.pdf> Found ictf based on ddnet, it has antispoof, you can host it
15:42 <+bridge> [ddnet] <Anime.pdf> https://github.com/teeworlds-instagib-elo/iCTFX
15:48 <+bridge> [ddnet] <Anime.pdf> however need to be modified
15:48 <+bridge> [ddnet] <Anime.pdf> however needs to be modified
16:01 <+bridge> [ddnet] <heinrich5991> because that works better when the set of files change
16:01 <+bridge> [ddnet] <heinrich5991> is there an issue with it?
16:02 <+bridge> [ddnet] <Ryozuki> https://www.youtube.com/watch?v=Vhh_GeBPOhs
16:03 <+bridge> [ddnet] <Anime.pdf> too lazy to add new files in alphabetic order ðŸ’¤
16:04 <+bridge> [ddnet] <heinrich5991> I put the alphabetic order so we don't argue about the order ^^
16:06 <+bridge> [ddnet] <MÊŽÉ¹ ã‚·> No, just question
16:19 <+bridge> [ddnet] <Jupstar âœª> But it's a different alphabetic order than vscode uses. If it wasn't changed already xd and that sucks xd
16:30 <+bridge> [ddnet] <Learath2> Vscodes is the weird one out iirc :/
16:35 <+bridge> [ddnet] <gerdoe> it works good otherwise too xd
16:36 <+bridge> [ddnet] <Chairn> let's puz reverse alphabetic order to even things
16:36 <+bridge> [ddnet] <Chairn> alwyas A first, never Z
16:37 <+bridge> [ddnet] <Jupstar âœª> I dunno i think had todo with underscores and stuff. It's more likely someone from vscode thought about a reason than us or not. But I'd need to check kde behaviour ^^
16:38 <+bridge> [ddnet] <Learath2> It's not that complicated iirc. Vscode uses a locale when sorting. Cmake uses ascii order
16:39 <+bridge> [ddnet] <Jupstar âœª> Ok
16:39 <+bridge> [ddnet] <Ryozuki> Ok
16:40 <+bridge> [ddnet] <Learath2> Ok
16:41 <+bridge> [ddnet] <Ryozuki> is it ok to not have virtual destructors here?
16:41 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1030128188640206856/unknown.png
16:42 <+bridge> [ddnet] <Ryozuki> > Destructor of 'CLinearScrollbarScale' is public and non-virtual (fix available)clang-tidy(cppcoreguidelines-virtual-class-destructor)
16:47 <+bridge> [ddnet] <Learath2> Can you delete IScrollBarScale's destructor and see if it still complains?
16:47 <+bridge> [ddnet] <Learath2> I'll admit this is one thing I'm not too familiar with
16:47 <+bridge> [ddnet] <Learath2> I know you need a virtual destructor if you delete through the base class
16:49 <+bridge> [ddnet] <Ryozuki> if i add virtual ~IScrollbarScale() = delete;
16:49 <+bridge> [ddnet] <Ryozuki> to it
16:49 <+bridge> [ddnet] <Ryozuki> it doesnt complain
16:49 <+bridge> [ddnet] <Ryozuki> Attempt to use a deleted functionclang(deleted_function_use)
16:49 <+bridge> [ddnet] <Ryozuki> ui.h(37, 10): '~IScrollbarScale' has been explicitly marked deleted here
16:49 <+bridge> [ddnet] <Learath2> Try without the virtual
16:49 <+bridge> [ddnet] <Ryozuki> but CLogarithmicScrollbarScale breaks
16:49 <+bridge> [ddnet] <Ryozuki> without virtual it complains
16:50 <+bridge> [ddnet] <Learath2> Hm, why is the default destructor even needed for a pure virtual class I wonder
16:50 <+bridge> [ddnet] <Learath2> Yeah idk, I find OOP disgusting anyway
16:50 <+bridge> [ddnet] <Ryozuki> https://stackoverflow.com/questions/1219607/why-do-we-need-a-pure-virtual-destructor-in-c
16:50 <+bridge> [ddnet] <Ryozuki> yeah rust  better
16:53 <+bridge> [ddnet] <Jupstar âœª> Oop best
16:54 <+bridge> [ddnet] <Jupstar âœª> After vulkan
16:54 <+bridge> [ddnet] <Chairn> :oop:
16:54 <+bridge> [ddnet] <Jupstar âœª> Which is better than rust
16:55 <+bridge> [ddnet] <Jupstar âœª> It's do good we even added an emote for it
16:55 <+bridge> [ddnet] <Jupstar âœª> Soo
16:56 <+bridge> [ddnet] <Chairn> we need a rusty emote when old players come back to game after some time
16:56 <+bridge> [ddnet] <Chairn> :rust:
16:57 <+ChillerDragon> :rustlang:
16:59 <+bridge> [ddnet] <MÊŽÉ¹ ã‚·> Then the question is, how does adding files manually work better than using file()?
17:02 <+bridge> [ddnet] <Chairn> you can copy files to have local modification without changing their extension
17:04 <+bridge> [ddnet] <MÊŽÉ¹ ã‚·> Wdym?
17:33 <+bridge> [ddnet] <Chairn> create file named test.c, test.c is not compiled with explicit file list
18:57 <+bridge> [ddnet] <Teero> does someone have an idea on how to efficiently check how far a player on a map is?
18:57 <+bridge> [ddnet] <Teero> given : an std::vector<vec2> which stores the best path from start to finish and a vec2 which stores the position of the player.
18:57 <+bridge> [ddnet] <Teero> ive tried to just to just loop over the vector and then return the smallest distance but its slow af...(even without square roots)
19:00 <+bridge> [ddnet] <Jupstar âœª> how about u make a structure that splits the map in chunks
19:00 <+bridge> [ddnet] <Jupstar âœª> then u only need to iterate over a few chunks, which only store a few std::vector<vec2>
19:01 <+bridge> [ddnet] <Teero> and then keeping track of which chunk the player is in?
19:01 <+bridge> [ddnet] <Jupstar âœª> u can simply calculate it on fly
19:02 <+bridge> [ddnet] <Jupstar âœª> smth like x % chunkwidth + y / chunkheight * chunkwidth
19:02 <+bridge> [ddnet] <Teero> nice idea
19:02 <+bridge> [ddnet] <Jupstar âœª> dunno how much resources or programming time u want to spent
19:03 <+bridge> [ddnet] <Jupstar âœª> but if u go all in pre calculate which is the closest checkpoint for every tile ðŸ˜„
19:03 <+bridge> [ddnet] <Jupstar âœª> that would be almost instant at runtime
19:04 <+bridge> [ddnet] <Teero> just making a fitness function for my ai rn
19:05 <+bridge> [ddnet] <Jupstar âœª> ah nice
19:05 <+bridge> [ddnet] <Jupstar âœª> well then i'd precalculate as much as u can, bcs runtime is expensive for AI probs
20:50 <+bridge> [ddnet] <Teero> what if the chunk the player is in doesnt have any pathtiles?
20:51 <+bridge> [ddnet] <Teero> what if the chunk the player is in doesnt have any pathtiles? what chunk should it choose then?
20:56 <+bridge> [ddnet] <Mr.Gh0s7> Supervised or RL?
20:56 <+bridge> [ddnet] <Teero> rl
20:56 <+bridge> [ddnet] <Mr.Gh0s7> nice :D
20:56 <+bridge> [ddnet] <Teero> using NEAT
20:56 <+bridge> [ddnet] <Mr.Gh0s7> I am using PPO
20:57 <+bridge> [ddnet] <Jupstar âœª> neighbour chunks, or save in the chunks which have one
20:58 <+bridge> [ddnet] <Jupstar âœª> but tbh, just do it per tile and save the closest index of vector<vec2> per tile
20:59 <+bridge> [ddnet] <Ryozuki> is this some machine learning blockchain buzzwords i dont know about?
21:00 <+bridge> [ddnet] <Ryozuki> xd
21:01 <+bridge> [ddnet] <Teero> for what kind of mas are you doing it? gores,ddnet? or pvp?
21:01 <+bridge> [ddnet] <Teero> for what kind of maps are you doing it? gores,ddnet? or pvp?
21:01 <+bridge> [ddnet] <Mr.Gh0s7> xD I am suprised too I only knew me and some other guys were working on ML but apparently there is Teero and someone else
21:01 <+bridge> [ddnet] <Mr.Gh0s7> gores
21:01 <+bridge> [ddnet] <Teero> finished aip gores yet? xD
21:02 <+bridge> [ddnet] <Mr.Gh0s7> nope
21:02 <+bridge> [ddnet] <Mr.Gh0s7> still fixing the enviroment
21:02 <+bridge> [ddnet] <Teero> in what language?
21:02 <+bridge> [ddnet] <Mr.Gh0s7> python sb3
21:02 <+bridge> [ddnet] <Teero> did you just rewrite tw in python? xD
21:03 <+bridge> [ddnet] <Mr.Gh0s7> ah no the ddnet works in C/C++
21:03 <+bridge> [ddnet] <Mr.Gh0s7> and the input ouput is handled by fifo files between the python and the ddnet
21:03 <+bridge> [ddnet] <Teero> oh
21:05 <+bridge> [ddnet] <Teero> i just made a new client with only the necessary physics and a gui with imgui and vulkan in cpp
21:05 <+bridge> [ddnet] <Mr.Gh0s7> wow nice
21:08 <+bridge> [ddnet] <Teero> btw this eliminates 75% of the iterations. its nice
21:12 <+bridge> [ddnet] <Tater> Use flow field pathfinding @Teero
21:23 <+bridge> [ddnet] <Teero> what are the benefits?
21:23 <+bridge> [ddnet] <Tater> It gives you direction to go and distance to finish
21:23 <+bridge> [ddnet] <Tater> And fast
21:24 <+bridge> [ddnet] <Teero> hmm
21:37 <+bridge> [ddnet] <Teero> i would have to mix A* and flow field pathfinding
21:38 <+bridge> [ddnet] <Tater> is it for gores?
21:38 <+bridge> [ddnet] <Teero> y
21:38 <+bridge> [ddnet] <Tater> Idk otherwise it's harder lol
21:38 <+bridge> [ddnet] <Tater> Gores pathing is easy
21:38 <+bridge> [ddnet] <Tater> Well unless there is unfreeze parts
21:39 <+bridge> [ddnet] <Tater> Just ignore those
21:46 <+bridge> [ddnet] <Teero> what if we had something like this?
21:46 <+bridge> [ddnet] <Teero> only the bottom part would be affected, right?
21:46 <+bridge> [ddnet] <Teero> https://cdn.discordapp.com/attachments/293493549758939136/1030204788882800730/unknown.png
21:46 <+bridge> [ddnet] <Teero> @Tater
21:47 <+bridge> [ddnet] <Tater> it should work fine for that map
21:48 <+bridge> [ddnet] <Teero> to my knowledge its just a grid of vectors which all point to their neighbor with the lowest cost, right?
21:49 <+bridge> [ddnet] <Tater> sure but you can also store distance in that grid because
21:49 <+bridge> [ddnet] <Tater> you start from the finish and then expand outwards by 1 tile at a time incrementing by one each pass
21:50 <+bridge> [ddnet] <Tater> then you get a grid that has distance and you can do some checks to figure out where to go
21:57 <+bridge> [ddnet] <Chairn> how big is your vector for it to be slow?
21:57 <+bridge> [ddnet] <Chairn> even with a million entry, it should be fine (i.e. no more than few ms)
21:57 <+bridge> [ddnet] <Chairn> even with a million entry, it should be fine (i.e. no more than few 10s ms)
22:00 <+bridge> [ddnet] <Jupstar âœª> but with a AI u probs want to run as many entities as possible at once
22:01 <+bridge> [ddnet] <Jupstar âœª> or is it a simple AI
22:01 <+bridge> [ddnet] <Jupstar âœª> a "stupid" one ðŸ˜„
22:02 <+bridge> [ddnet] <Jupstar âœª> maybe i live too much in a deeplearning bubble lol
22:03 <+bridge> [ddnet] <Jupstar âœª> ah no he said RL, so yeah makes sense to optimize it
22:09 <+bridge> [ddnet] <Teero> @Tater ig i can just use the already made a* to guide the flow to the finish
22:10 <+bridge> [ddnet] <Teero> anyways
22:10 <+bridge> [ddnet] <Teero> gn
23:02 <+bridge> [ddnet] <deen> cmake has some problems with rebuilds and detecting changed files
23:06 <+bridge> [ddnet] <MÊŽÉ¹ ã‚·> A, okey
