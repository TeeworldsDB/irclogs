03:51 <+bridge> [ddnet] <WAV> have you changed something to the servers? i get ping spikes suddenly
07:39 <+bridge> [ddnet] <Ducks N' Animus> idk if i should ask this question here but is there a way to manually call -fire? how does +fire work anyways
07:46 <+bridge> [ddnet] <Learath2> Nope. +commands are special in that they get called on both strokes
08:43 <+bridge> [ddnet] <Ducks N' Animus> as in, +fire is called when m1down and m1up? or there's an internal -fire called when m1up
09:51 <+bridge> [ddnet] <Ryozuki> https://wiki.ddnet.tw/wiki/Binds#Toggles
09:51 <+bridge> [ddnet] <Ryozuki> :greenthing:
09:55 <+bridge> [ddnet] <Zwelf> Maybe we could create a channel for discussions about the wiki again and encourage to ask there if in doubt.
09:58 <+bridge> [ddnet] <Ryozuki> yeah
09:58 <+bridge> [ddnet] <Ryozuki> @murpi your decision
09:58 <+bridge> [ddnet] <Ryozuki> or any other admin
09:59 <+bridge> [ddnet] <murpi> we could enable threads for this, if this is something you'd like
09:59 <+bridge> [ddnet] <Ryozuki> i dont think threads help with this, we just need a wiki channel
10:00 <+bridge> [ddnet] <Ryozuki> it will make more ppl aware it exists and maybe even make ppl contribute, and if they have doubts how to do x thing we can help there
10:01 <+bridge> [ddnet] <Ryozuki> ( how to do x in the wiki*)
11:16 <+ChillerDragon> how can a language without tenary operator be so popular...
11:16 <+ChillerDragon> i mean bash also has none but its not really missing there
11:26 <+bridge> [ddnet] <Ryozuki> if u talk about rust its fine tbh
11:26 <+bridge> [ddnet] <Ryozuki> and u can make a macro if u rly want it
11:26 <+bridge> [ddnet] <Ryozuki> ```rust
11:26 <+bridge> [ddnet] <Ryozuki> macro_rules! either {
11:26 <+bridge> [ddnet] <Ryozuki>     ($test:expr => $true_expr:expr; $false_expr:expr) => {
11:26 <+bridge> [ddnet] <Ryozuki>         if $test {
11:26 <+bridge> [ddnet] <Ryozuki>             $true_expr
11:26 <+bridge> [ddnet] <Ryozuki>         }
11:26 <+bridge> [ddnet] <Ryozuki>         else {
11:26 <+bridge> [ddnet] <Ryozuki>             $false_expr
11:26 <+bridge> [ddnet] <Ryozuki>         }
11:26 <+bridge> [ddnet] <Ryozuki>     }
11:26 <+bridge> [ddnet] <Ryozuki> }
11:26 <+bridge> [ddnet] <Ryozuki> ```
11:28 <+bridge> [ddnet] <Ryozuki> or https://doc.rust-lang.org/rust-by-example/flow_control/match.html
11:28 <+bridge> [ddnet] <Ryozuki> in fact
11:28 <+bridge> [ddnet] <Ryozuki> match is way better than a ternary operator specially if u have would chain them
11:38 <+ChillerDragon> hahaha ofc the rust fanboi jumps in
11:39 <+ChillerDragon> rust is pain in the ass to read some tenary aint gonna save it also except the few hardcore fans rus isnt tooo popular.. i was talking about python
12:10 <+bridge> [ddnet] <Ryozuki> lmao
12:10 <+bridge> [ddnet] <Ryozuki> its not a pain in the ass
12:10 <+bridge> [ddnet] <Ryozuki> bash is a pain in the ass to read
12:11 <+bridge> [ddnet] <Ryozuki> but in python u can do if x else y in one line
12:11 <+bridge> [ddnet] <Ryozuki> a = b if b else c
12:12 <+bridge> [ddnet] <Ryozuki> a = b if cond else c
12:18 <+bridge> [ddnet] <chillerdragon> yea thats no tenary
12:28 <+bridge> [ddnet] <Ryozuki> its the same
12:28 <+bridge> [ddnet] <Ryozuki> ur just obstinated
12:29 <+bridge> [ddnet] <chillerdragon> dafuq is obstinated
12:29 <+bridge> [ddnet] <chillerdragon> u use some crazy words bro
12:29 <+bridge> [ddnet] <chillerdragon> are you the new learath?
12:29 <+bridge> [ddnet] <lynn> https://cdn.discordapp.com/attachments/293493549758939136/871338857302482974/unknown.png
12:29 <+bridge> [ddnet] <chillerdragon> ty
12:29 <+bridge> [ddnet] <lynn> i didnt know it either
12:29 <+bridge> [ddnet] <chillerdragon> fancy
12:39 <+bridge> [ddnet] <Ryozuki> :greenthing:
12:39 <+bridge> [ddnet] <Ryozuki> i know it cuz in spanish its more common
12:39 <+bridge> [ddnet] <Ryozuki> and found out it exists in english
12:40 <+bridge> [ddnet] <chillerdragon> cheat
12:41 <+bridge> [ddnet] <chillerdragon> imagine me using words like wunderkind, wanderlust or hamster
12:41 <+bridge> [ddnet] <Ryozuki> hamster?
12:43 <+bridge> [ddnet] <chillerdragon> whats in english again
12:43 <+bridge> [ddnet] <chillerdragon> the smol mouse
12:43 <+bridge> [ddnet] <chillerdragon> https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.nMid6B9zReHuiTuelddApQHaE7%26pid%3DApi&f=1
12:43 <+bridge> [ddnet] <chillerdragon> thats a hamster
12:44 <+bridge> [ddnet] <Ryozuki> ye
12:51 <+bridge> [ddnet] <Learath2> Internally if you register a command starting with `+` it will get the stroke direction as it's first argument, and it'll be called on both strokes
12:52 <+bridge> [ddnet] <Learath2> It's so, soooo, soooo annoying and it's imo just rust people trying to distance themselves from C
12:53 <+bridge> [ddnet] <Learath2> Same with the pre/post-in/de crement operators
12:53 <+bridge> [ddnet] <chillerdragon> are you using the discord reply feature? \:(
12:53 <+bridge> [ddnet] <chillerdragon> when do we get a bridge with reply support
12:53 <+bridge> [ddnet] <Ryozuki> actually there arearguments that pre post operators are bad
12:54 <+bridge> [ddnet] <Ryozuki> btw he is talking about python
12:54 <+bridge> [ddnet] <Learath2> ofc there are, computer science people can shit out 50 arguments against any feature half useful
12:55 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/871345355806109696/unknown.png
12:55 <+bridge> [ddnet] <Ryozuki> https://github.com/dtolnay/rust-faq#why-doesnt-rust-have-increment-and-decrement-operators
12:55 <+bridge> [ddnet] <Learath2> ofc the most common of them, people are stupid
12:56 <+bridge> [ddnet] <Ryozuki> :poggers:
12:56 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/871345638980341760/unknown.png
12:56 <+bridge> [ddnet] <Learath2> people are stupid so we have decided to reduce our language to english which will be evaluated through gpt3 to generate the bytecode
12:56 <+bridge> [ddnet] <Ryozuki> :poggers:
12:57 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/871345763924467752/unknown.png
12:58 <+bridge> [ddnet] <Ryozuki> im in favour of this not being in rust
12:59 <+bridge> [ddnet] <Learath2> ofc you are, you are the prime advocate of people are stupid camp
12:59 <+bridge> [ddnet] <Learath2> I would kill for assignments to be expressions too but that is also too complicated for the new breed of developer we all seem to want to encourage
12:59 <+bridge> [ddnet] <Ryozuki> even a master C developer will eventually have  a bug due to this too
12:59 <+bridge> [ddnet] <Ryozuki> im sure
13:00 <+bridge> [ddnet] <Ryozuki> and rust main selling point is not shooting urself in the foot
13:01 <+bridge> [ddnet] <Learath2> There is no way a MASTER C developer misses a sequence point after however many years of development
13:01 <+bridge> [ddnet] <Ryozuki> there is
13:01 <+bridge> [ddnet] <Learath2> ofc there is because you'd rather treat everyone as babies
13:01 <+bridge> [ddnet] <Learath2> if my grandma can't code with her 0 years of experience it's a bad language
13:01 <+bridge> [ddnet] <Ryozuki> i treat everyone as being able to make mistakes
13:01 <+bridge> [ddnet] <Ryozuki> and even at the most professional level people do mistakes
13:01 <+bridge> [ddnet] <Ryozuki> not just in programming
13:02 <+bridge> [ddnet] <Learath2> The compiler catches it even, you are being a goof
13:02 <+bridge> [ddnet] <Ryozuki> if this is the argument level of this convo then we can stop
13:04 <+bridge> [ddnet] <Learath2> Your argument is that everyone can make mistakes thus a MASTER C developer with his 10 years or so of experience will miss the most basic sequence point mistake ever we can indeed stop, you are arguing in bad faith
13:04 <+bridge> [ddnet] <Ryozuki> no im not
13:04 <+bridge> [ddnet] <Learath2> s\/^/if /
13:06 <+bridge> [ddnet] <Learath2> Besides the operators themselves don't have to require UB, you can if you hate optimization just put sequence points after each use of the operators
13:06 <+bridge> [ddnet] <Learath2> There you go, baby-proof version of the operator
13:06 <+bridge> [ddnet] <Ryozuki> yes rust devs are babies and c are chads
13:06 <+bridge> [ddnet] <Ryozuki> have fun
13:07 <+bridge> [ddnet] <Learath2> or just include one of them, with the post version, even baby-proofer version of them
13:07 <+bridge> [ddnet] <Learath2> you call me out on my shitty argument and you boil mine down to a meme, good job
13:07 <+bridge> [ddnet] <Ryozuki> u keep calling baby tyhis baby that its hard to take it serious
13:08 <+bridge> [ddnet] <Learath2> So sorry my words offend you, I'll use alternative terminology if it will make you actuall engage in the argument
13:09 <+bridge> [ddnet] <chillerdragon> can i turn off werror when running cmake/make ?
13:09 <+bridge> [ddnet] <Learath2> Just including the post-crement and post-decrement operators, and inserting a sequence point after them makes it so that you can't "shoot urself in the foot"
13:10 <+bridge> [ddnet] <Learath2> @ChillerDragon Why? You can always edit CMakeLists if you have to, but why not fix the warning or suppress it properly if it's a false-positive?
13:10 <+bridge> [ddnet] <Ryozuki> > I don't think we should support i++. If we do, it would need to be an expression that returns the pre-incremented value, like it does in C, and that would therefore only be usable with implicitly-copyable types. But x += 1 can work with non-implicitly-copyable types, and I think it's a bad idea to have cases where x += 1 works but x++ doesn't.
13:11 <+bridge> [ddnet] <chillerdragon> fixing the warnings adds unneccesary additional complexity imo
13:11 <+bridge> [ddnet] <Ryozuki> https://github.com/rust-lang/rust/issues/12111
13:11 <+bridge> [ddnet] <chillerdragon> cant i pass something to cmake?
13:12 <+bridge> [ddnet] <Learath2> Why is that a bad idea? I don't see anything implicitly wrong with that
17:21 <+bridge> [ddnet] <heinrich5991> chillerdragon: can you give an example of a warning you don't want to fix?
17:26 <+bridge> [ddnet] <chillerdragon> already solved see the passing pipeline \:)
17:28 <+bridge> [ddnet] <chillerdragon> @heinrich5991\:the gfx strip comments out almost all graphic function bodys and thus generates some unused warnings of static methods and global variables see https://github.com/ddnet/ddnet/runs/3213592364#step:10:435  but `cmake -env CXXFLAGS=''` works like a charm
17:28 <+bridge> [ddnet] <chillerdragon> @heinrich5991\:the gfx strip comments out almost all graphic function bodys and thus generates some unused warnings of static methods and global variables see https://github.com/ddnet/ddnet/runs/3213592364#step:10:435  but `cmake -E env CXXFLAGS=''` works like a charm
17:55 <+bridge> [ddnet] <Learath2> @chillerdragon maybe just suppress those that are fine so your stripped build is also checked
18:22 <+bridge> [ddnet] <chillerdragon> @Learath2\: oky lemme try
18:26 <+bridge> [ddnet] <chillerdragon> ok looks like CXXFLAGS='-Werror -Wno-error=unused-function -Wno-error=unused-variable' does the job
18:27 <+bridge> [ddnet] <Nouaa> the path should be ok, when i press wind+r and past the same path that open the good map
18:27 <+bridge> [ddnet] <Nouaa> https://cdn.discordapp.com/attachments/293493549758939136/871428830722666598/unknown.png
18:31 <+bridge> [ddnet] <conny> Idk if that has been asked already but how come there is no toggle-tile for doors? Seems so intuitive to have. Making slightly complex door parts is a mess...
18:32 <+bridge> [ddnet] <chillerdragon> I think its something like it has always been like that. Who knows who invented those doors back in the middle ages. Was it greyfox while he was drunk? maybe..
18:33 <+bridge> [ddnet] <chillerdragon> i didnt map something door related in years but i can not remember missing something. Can't u achieve a toggle using 2 tiles?
18:35 <+bridge> [ddnet] <conny> ofc but in some scenarios a toggle is so much cleaner.
19:35 <+bridge> [ddnet] <Ducks N' Animus> "Internally if you register a command starting with + it will get the stroke direction as it's first argument, and it'll be called on both strokes"
19:35 <+bridge> [ddnet] <Ducks N' Animus> Maybe my cs knowledge is insufficient to understand this but, how can you call a +fire twice without calling -fire first? +fire means to "fire, and then keep holding it" right?
19:35 <+bridge> [ddnet] <Ducks N' Animus> I previously mentioned a problem which can be replicated like this:
19:35 <+bridge> [ddnet] <Ducks N' Animus> Define 2 modes: 
19:35 <+bridge> [ddnet] <Ducks N' Animus> 1. Half deepfly - "bind a bind mouse1 '+toggle cl_dummy_hammer 1 0'"
19:35 <+bridge> [ddnet] <Ducks N' Animus> 2. Deepfly - "bind b bind mouse1 '+fire; +toggle cl_dummy_hammer 1 0'"
19:35 <+bridge> [ddnet] <Ducks N' Animus> if you connect your dummy, and press the keys in the following order:
19:35 <+bridge> [ddnet] <Ducks N' Animus> b m1down a m1up m1down m1up b *m1down* (<- supposed to be +fire and +toggle cl_dummy_hammer 1 0, but try it, your main wouldn't actually +fire) 
19:35 <+bridge> [ddnet] <Ducks N' Animus> The problem is when you switch to Half deepfly mode, the "+fire" has been removed from mouse1, so I assume the second stroke wouldn't be registered, so your main is stuck in the +fire status
19:37 <+bridge> [ddnet] <Ducks N' Animus> so during the last transition (...b *m1down*) you need to click twice (*m1down* m1up m1down) for your main to actually hammer once
19:37 <+bridge> [ddnet] <Ducks N' Animus> is there any way to solve this problem?
20:05 <+bridge> [ddnet] <Learath2> @Ducks N' Animus ok so you can pretend the stroke direction is an extra argument. So when you press +fire. There is a sort of internal "fire" command that gets called as "fire 1". And when you let go "fire 0"
20:06 <+bridge> [ddnet] <Ducks N' Animus> ah that makes more sense, thanks!
21:10 <+bridge> [ddnet] <Learath2> No idea
21:11 <+bridge> [ddnet] <anonymous()> What happens when you put fire instead of +fire?
21:11 <+bridge> [ddnet] <anonymous()> Never tried it
21:12 <+bridge> [ddnet] <Learath2> It won't work. That's why I said "sort of". In reality "fire" is just not exposed to the console
21:14 <+bridge> [ddnet] <anonymous()> Oh k
