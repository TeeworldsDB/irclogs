00:19 < bridge> <chillerdragon> @miguilim: maybe worth to mention next to your snap crc pseudocode is that C++ has integer overflows. So it’s just adding values to some integer if the snap is too big that might overflow. If you take the same code to other languages it might not overflow in the same way. But I’m not super sure here. It’s just something someone mentioned in the \#developer channel once iirc. I do not know if snaps can even be big enough for that. Maybe 
00:21 < bridge> <chairn> lol, again some people still don't use common time & date libraries ?
00:21 < bridge> <chillerdragon> ?
00:23 < bridge> <chillerdragon> Epic meme. I would love to know how he scrapes everything without even a phone number. Many websites require phone numbers just for accessing their content.
00:26 < bridge> <chillerdragon> This is a solved problem. Jxsl built a Econ vpn banner in go. And I did build one in python. Just search ddnet econ or teeworlds Econ on GitHub.
00:27 < bridge> <chillerdragon> What’s wrong with Econ? It’s the most portable and works across hosts. FIFO only works for ddnet and if you are on the same server.
00:35 < bridge> <fokkonaut> chillerdragon: u online on wire ?
00:50 < bridge> <learath2> problem with econ is that the output is interleaved, so spotting the output to your commands is rather annoying
01:19 < bridge> <chillerdragon> Yes that’s true. So what do you suggest? FIFO doesn’t solve it does it?
01:19 < bridge> <chillerdragon> Later maybe I gtg now
01:26 < bridge> <miguilim> Yes you
01:27 < bridge> <miguilim> Yes you're correct. C++ crc int is int32, when it reaches 0x7FFFFFFF it will change the number to negative. This "issue" can easily be achieved by packing the client info snap
01:27 < bridge> <miguilim> I will add a comment there
01:31 < bridge> <miguilim> Thanks for the hint
01:43 < bridge> <meloƞ> what about an actual rcon-cli ? i can see this beeing a thing for 0.7 aswell
01:45 < bridge> <peter44h> Actually, it's straight UB and that isn't assured (without asking the compiler to, like with -fwrapv)
01:45 < bridge> <peter44h> Better to cast the numbers to unsigned and do the calculation like that if it matters
01:45 < bridge> <peter44h> Or use something like __builtin_*_overflow
01:45 < bridge> <peter44h> Actually, it's straight UB and that isn't assured (without asking the compiler to, like with -fwrapv)
01:45 < bridge> <peter44h> Better to cast the numbers to unsigned and do the calculation like that if it matters, then cast back
01:45 < bridge> <peter44h> Or use something like __builtin_*_overflow
01:45 < bridge> <peter44h> Actually, it's straight UB and that isn't assured (without asking the compiler to, like with -fwrapv)
01:45 < bridge> <peter44h> Better to cast the numbers to unsigned and do the calculation like that if it matters, then cast back
01:45 < bridge> <peter44h> Or use something like _\_builtin_\*_overflow
01:45 < bridge> <peter44h> Actually, it's straight UB and that isn't assured (without asking the compiler to, like with -fwrapv)
01:45 < bridge> <peter44h> Better to cast the numbers to unsigned and do the calculation like that if it matters, then cast back
01:45 < bridge> <peter44h> Or use something like \_\_builtin_\*\_overflow
01:46 < bridge> <learath2> Nope, however the new interface I'm trying to build does solve it if I ever figure it out :CelebratoryToast_fae:
01:46 < bridge> <learath2> Nope, however the new interface I'm trying to build does solve it if I ever figure it out <a:celebrate:974542362460164126>
01:51 < bridge> <peter44h> Actually, it's straight UB and that isn't assured (without asking the compiler to, like with -fwrapv)
01:51 < bridge> <peter44h> Better to cast the numbers to unsigned and do the calculation like that if it matters, then cast back
01:51 < bridge> <peter44h> Or use something like \_\_builtin_\*\_overflow
01:51 < bridge> <peter44h> Unless I don't understand because 7FFFFFFF is INT_MAX
08:17 < bridge> <chillerdragon> Nice
08:19 < bridge> <chillerdragon> But that doesn’t exist. He was asking for the most portable way which does not require reimplementing it for every server. That is Econ and not fifo. And it’s also not rolling your own.
09:23 < bridge> <zhn> econ output differs from version to version, and it requires reimplementing for each kind
11:16 < bridge> <TsFreddie> im tired
11:17 < bridge> <TsFreddie> hi tired, im chillerdragon
11:53 < bridge> <Jupstar ✪> Today on ffr
11:54 < bridge> <Jupstar ✪> I read this
11:54 < bridge> <Jupstar ✪> https://graydon2.dreamwidth.org/307291.html
11:54 < bridge> <Jupstar ✪> It's kinda funny to say it, but probably it was good for rusts success that the original author lost influence on it
11:55 < bridge> <Jupstar ✪> Tho some stuff sounds interesting
12:27 < bridge> <heinrich5991> correct, you need to do a wrapping addition for the snap "crc"
12:30 < bridge> <heinrich5991> seems like we're doing it with an unsigned integer already: https://github.com/ddnet/ddnet/blob/16feff41de1f46cb8a3f0d852035c51e27403521/src/engine/shared/snapshot.cpp#L103
12:32 < bridge> <ryozuki> does c++ have saturated add?
12:35 < bridge> <heinrich5991> doubt it has it in the standard library
12:35 < bridge> <heinrich5991> but you can write the three lines of code for it yourself, I guess
12:36 < bridge> <heinrich5991> https://en.cppreference.com/w/cpp/numeric/add_sat
12:36 < bridge> <heinrich5991> "since c++26" 😄
12:37 < bridge> <heinrich5991> ```c++
12:37 < bridge> <heinrich5991>     constexpr unsigned char c = std::add_sat(UCHAR_MAX, 4); // not saturated, T = int
12:37 < bridge> <heinrich5991>         // add_sat(int, int) returns int tmp == 259,
12:37 < bridge> <heinrich5991>         // then assignment truncates 259 % 256 == 3
12:38 < bridge> <heinrich5991>     static_assert(c == 3);
12:38 < bridge> <heinrich5991> ```
12:38 < bridge> <heinrich5991> amazing
12:44 < bridge> <teero777> what
12:52 < bridge> <ryozuki> adding casts soon to edlang
12:52 < bridge> <ryozuki> and then it will be somewhat useful
12:52 < bridge> <ryozuki> structs + extern fns
12:52 < bridge> <ryozuki> so u can use libc
12:52 < bridge> <heinrich5991> nice 🙂
12:53 < bridge> <ryozuki> then i think ill add some basic generics
12:53 < bridge> <ryozuki> so i can make a allocator api
12:53 < bridge> <ryozuki> alloc<T>()
12:53 < bridge> <ryozuki> and hide malloc
12:53 < bridge> <heinrich5991> generics are hard ^^
12:54 < bridge> <ryozuki> yeah thats why i said basic
12:54 < bridge> <ryozuki> i guess it will be like only sized and no trait bounds for now
12:54 < bridge> <ryozuki> there are no traits yet anyway xd
12:55 < bridge> <heinrich5991> will it be like C++ templates or more like rust generics?
12:55 < bridge> <heinrich5991> i.e. will you decide at declaration time that a template type-checks or at instantiation time?
12:58 < bridge> <Jupstar ✪> Make a multi layer compilation. So that proc macros have additional information like the data type of symbols etc.
12:58 < bridge> <Jupstar ✪> 
12:58 < bridge> <Jupstar ✪> If u do that cleanly your respect increases
12:59 < bridge> <Jupstar ✪> Make object safe dyn with compile constant values :lol:
13:00 < bridge> <Jupstar ✪> That would be insanely cool. But I've no idea if that would be even possible
13:00 < bridge> <Jupstar ✪> Maybe if initialization is transparent to the compiler somehow
13:01 < bridge> <Jupstar ✪> Also dyn without box pls
13:01 < bridge> <Jupstar ✪> While u at the impossible stuff
13:01 < bridge> <ryozuki> rust
13:01 < bridge> <ryozuki> i like a lot rust traits
13:02 < bridge> <ryozuki> what i wanna try is some new borrow checker techniques
13:02 < bridge> <ryozuki> when i have a solid language
13:02 < bridge> <Jupstar ✪> Do u also like dyn?
13:02 < bridge> <ryozuki> https://verdagon.dev/blog/zero-cost-borrowing-regions-overview
13:02 < bridge> <Jupstar ✪> Tbh I try as good as possible not to use it without making generics explode over the whole code base
13:03 < bridge> <ryozuki> yes i like being able to do dynamic dispatch too
13:03 < bridge> <ryozuki> u can do the technique i explained several times
13:03 < bridge> <ryozuki> make the generic function small and a call to a non generic one
13:03 < bridge> <ryozuki> like std does a lot
13:04 < bridge> <ryozuki> ```rust
13:04 < bridge> <ryozuki> fn a<T: Into<PathBuf>(x: T) {
13:04 < bridge> <ryozuki>   b(x.into())
13:04 < bridge> <ryozuki> }
13:04 < bridge> <ryozuki> 
13:04 < bridge> <ryozuki> fn b(x: PathBuf) { big here }
13:04 < bridge> <ryozuki> ```
13:04 < bridge> <ryozuki> pseudocode
13:04 < bridge> <Jupstar ✪> But I don't mean generic functions
13:04 < bridge> <Jupstar ✪> I mean data types
13:04 < bridge> <ryozuki> ah
13:05 < bridge> <Jupstar ✪> But their impl ofc is generic too
13:05 < bridge> <Jupstar ✪> I also don't have a problem with generics
13:05 < bridge> <Jupstar ✪> It's just that it's much more code to write often
13:05 < bridge> <Jupstar ✪> So very rarely I use dynamic dispatch.
13:05 < bridge> <Jupstar ✪> But I try to minimize that
13:06 < bridge> <Jupstar ✪> Dyn is basically polymorphism 😬
13:06 < bridge> <Jupstar ✪> Hate me for that
13:08 < bridge> <ryozuki> dyn is fat pointer
13:17 < bridge> <heinrich5991> in rust. in C++, the vtable poiner is part of the object itself
13:17 < bridge> <heinrich5991> in rust. in C++, the vtable pointer is part of the object itself
13:18 < bridge> <Jupstar ✪> Yeah that's a clever design choice by rust
13:18 < bridge> <Jupstar ✪> But when ryo always says he doesn't like polymorphism, then I doubt it is because of this argument xd
13:21 < bridge> <ryozuki> @jupeyy_keks why u should report ur rust analyzer crashes: https://github.com/rust-lang/rust-analyzer/issues/16656#event-11960074836
13:21 < bridge> <ryozuki> i reported this one and they fixed it
13:22 < bridge> <ryozuki> i was using nightly idk why but im using stable
13:22 < bridge> <ryozuki> the nightly crashed xd
13:22 < bridge> <Jupstar ✪> I reported some stuff there already. They only fix it if it's a regression
13:22 < bridge> <Jupstar ✪> Design flaws are carried on for ever xd
13:22 < bridge> <Jupstar ✪> Understandable, but annoying
13:23 < bridge> <ryozuki> xd
13:24 < bridge> <Jupstar ✪> But I blame Intel and amd. They should give me 64 cores clocked at 10ghz
13:25 < bridge> <ryozuki> yes
13:25 < bridge> <ryozuki> when blazingly fast speed
13:25 < bridge> <Jupstar ✪> On my desktop rust analyzer is usable. But on my second PC it's horrible xd
13:25 < bridge> <ryozuki> xd
13:25 < bridge> <ryozuki> i thnk vscode makes rust-analyzer slower tbh
13:25 < bridge> <ryozuki> i think its faster on nvim or zed
13:25 < bridge> <ryozuki> or lapce
13:25 < bridge> <Jupstar ✪> I think so too
13:26 < bridge> <Jupstar ✪> Lapce works somehow better. But then again it's too unstable xd
13:26 < bridge> <Ewan> qt creator
13:26 < bridge> <Jupstar ✪> I really don't want to say vscodr is good perf wise. But anything else just works better xD
13:27 < bridge> <Jupstar ✪> I tried so many in my CPP times already. At creator, eclipse, clion, visual studio
13:27 < bridge> <Jupstar ✪> All used for at least one month
13:27 < bridge> <Jupstar ✪> Vs felt best coding wise, but windows is slow
13:28 < bridge> <Jupstar ✪> Vscode second plus faster thanks to Linux😏
13:28 < bridge> <Jupstar ✪> Eclipse was always buggy  xdd
13:28 < bridge> <Jupstar ✪> I used it for 2 years actually
13:29 < bridge> <heinrich5991> jetbrains IDEs always seemed better than eclipse to me
13:30 < bridge> <Jupstar ✪> Is android studio based on intellij?
13:30 < bridge> <Ewan> yes
13:31 < bridge> <Jupstar ✪> Then I don't like it. But at least android studio is stable
13:31 < bridge> <Jupstar ✪> But only wrote Java in it
13:31 < bridge> <Jupstar ✪> So I'm already biased against it xdd
13:32 < bridge> <heinrich5991> I think android studio was heavier than the other IDEs
13:32 < bridge> <heinrich5991> it's not by jetbrains directly, I think, but google(?)
13:35 < bridge> <Jupstar ✪> So did u try rustrover already? Xd
13:35 < bridge> <heinrich5991> yes, I'm actually using it to navigate big rust codebases
13:35 < bridge> <heinrich5991> I like it
13:35 < bridge> <Jupstar ✪> I guess it costs money?
13:37 < bridge> <Jupstar ✪> They video looks almost like vscode xd
13:37 < bridge> <heinrich5991> it's closed source. it currently does not cost money, and you personally will probably be able to use it for free after it'll cost something because you're a contributor to ddnet
13:38 < bridge> <Jupstar ✪> Epyc
13:41 < bridge> <ryozuki> google paid jetbrains to make it and it uses their framework
13:41 < bridge> <ryozuki> same for me?
13:41 < bridge> <heinrich5991> probably
13:41 < bridge> <heinrich5991> you also have edlang 😉
13:42 < bridge> <nouaa> morning :monkaCoffee:
13:42 < bridge> <heinrich5991> did jetbrains develop android studio on top of intellij or did jetbrains develop android studio on top of intellij?
13:42 < bridge> <heinrich5991> I thought it was the first one
13:42 < bridge> <ryozuki> :PES3_SadCoffee:
13:42 < bridge> <ryozuki> jetbrains has like their framework in which they make all their ides
13:42 < bridge> <ryozuki> thats why they all look same
13:42 < bridge> <heinrich5991> yes
13:43 < bridge> <ryozuki> but its probs heavily based on intellij
13:43 < bridge> <ryozuki> i like android studio btw
13:43 < bridge> <heinrich5991> I know that this is the case
13:43 < bridge> <nouaa> why u sad :saddybear:
13:43 < bridge> <heinrich5991> but I was wondering who developed android studio on top of that framework or on top of intellij
13:43 < bridge> <ryozuki> used it with flutter
13:43 < bridge> <heinrich5991> was it google or jetbrains?
13:43 < bridge> <ryozuki> > Android Studio is the official integrated development environment (IDE) for Android application development. It is based on IntelliJ IDEA, a Java integrated development environment for software, and incorporates its code editing and developer tools.
13:43 < bridge> <ryozuki> https://developer.android.com/studio/intro
13:43 < bridge> <ryozuki> > Android Studio is the official Integrated Development Environment (IDE) for Android app development. Based on the powerful code editor and developer tools from IntelliJ IDEA , Android Studio offers even more features that enhance your productivity when building Android apps, such as:
13:43 < bridge> <ryozuki> > 
13:43 < bridge> <ryozuki> >     A flexible Gradle-based build system
13:44 < bridge> <ryozuki> >     A fast and feature-rich emulator
13:44 < bridge> <ryozuki> >     A unified environment where you can develop for all Android devices
13:44 < bridge> <ryozuki> >     Live Edit to update composables in emulators and physical devices in real time
13:44 < bridge> <ryozuki> >     Code templates and GitHub integration to help you build common app features and import sample code
13:44 < bridge> <ryozuki> >     Extensive testing tools and frameworks
13:44 < bridge> <ryozuki> >     Lint tools to catch performance, usability, version compatibility, and other problems
13:44 < bridge> <ryozuki> >     C++ and NDK support
13:44 < bridge> <ryozuki> >     Built-in support for Google Cloud Platform, making it easy to integrate Google Cloud Messaging and App Engine
13:44 < bridge> <heinrich5991> not sure if you're trying to answer my question, but you're not
13:44 < bridge> <ryozuki> google also pushes for kotlin
13:44 < bridge> <heinrich5991> if you are, it feels like talking to a language model
13:44 < bridge> <ryozuki> because java issues with licensing or smth
13:44 < bridge> <ryozuki> @heinrich5991 xd
13:44 < bridge> <ryozuki> this is the new 2024 insult or smth? kek
13:44 < bridge> <ryozuki> but answering ur question: idk
13:45 < bridge> <heinrich5991> ok, you're not trying, then it's fine ^^
13:45 < bridge> <heinrich5991> I was trying to describe my experience. I was asking a question and you kept posting large quotes that are vaguely related to the terms I used, but not at all to the question I asked
13:45 < bridge> <ryozuki> my bet is jetbrains
13:45 < bridge> <heinrich5991> doubt it's that
13:46 < bridge> <ryozuki> i dont think jetbrains would give their code for google to use
13:46 < bridge> <ryozuki> to make android studio
13:46 < bridge> <heinrich5991> why not? if they're paid, as you say
13:46 < bridge> <heinrich5991> I think they are pushing kotlin because it has a better developer experience
13:47 < bridge> <heinrich5991> in unrelated news: https://cloudinary.com/blog/jpeg-xl-and-the-pareto-front
13:47 < bridge> <heinrich5991> jpeg xl seems like a really nice format
13:47 < bridge> <Jupstar ✪> I hope there will be unbiased benchmarks
13:47 < bridge> <Jupstar ✪> I only found like 2 blogs back then
13:48 < bridge> <Jupstar ✪> Back when chrome removed it :lol:
13:48 < bridge> <heinrich5991> the blog post looks sane to me
13:49 < bridge> <ryozuki> i need a good name for my cargo for edlang
13:49 < bridge> <ryozuki> or maybe just make it all edlang
13:49 < bridge> <ryozuki> pkg.ed-lang.org
13:49 < bridge> <ryozuki> docs.ed-lang.org
13:52 < bridge> <Jupstar ✪> Almost looks to good to be true. But tbf it's hard for me to understand the relevance of these graphs. But if it's so much better in both lossless and lossy, wtf have formats done in the past to be so bad xdd
13:53 < bridge> <heinrich5991> it's kinda like zstd, it's also much better than the rest
13:54 < bridge> <heinrich5991> ok, not mch better than the rest: https://gregoryszorc.com/blog/2017/03/07/better-compression-with-zstandard/
13:55 < bridge> <heinrich5991> but strictly better than gzip
13:55 < bridge> <heinrich5991> yet a lot of stuff still uses gzip
13:59 < bridge> <heinrich5991> btw @ryozuki: https://www.jetbrains.com/community/opensource/#support
14:01 < bridge> <ryozuki> i go by https://www.gnu.org/philosophy/free-sw.en.html
14:01 < bridge> <ryozuki> :PES_NotCool:
14:02 < bridge> <ryozuki> @heinrich5991 
14:02 < bridge> <ryozuki> > 
14:02 < bridge> <ryozuki> > 9. License Must Not Restrict Other Software
14:02 < bridge> <ryozuki> > 
14:02 < bridge> <ryozuki> > The license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that all other programs distributed on the same medium must be open source software.
14:02 < bridge> <ryozuki> does this clash with agpl?
14:03 < bridge> <ryozuki> ok probs not
14:03 < bridge> <heinrich5991> that seems unrelated again ^^
14:03 < bridge> <ryozuki> i know but i wanted to post it
14:03 < bridge> <ryozuki> cuz i saw the word open source
14:03 < bridge> <heinrich5991> do better? ^^
14:03 < bridge> <ryozuki> what does that mean xD
14:04 < bridge> <heinrich5991> be more interesting. a person that consistently posts a certain link on a certain phrase is not interesting
14:05 < bridge> <ryozuki> what would you do
14:05 < bridge> <heinrich5991> try to follow the conversation, post the link if it's currently interesting
14:07 < bridge> <ryozuki> added the agpl logo to the edlang web
14:07 < bridge> <ryozuki> :brownbear:
14:07 < bridge> <heinrich5991> https://ed-lang.org/
14:07 < bridge> <heinrich5991> maybe put a code sample in there
14:07 < bridge> <heinrich5991> so people can see what it looks like 🙂
14:09 < bridge> <ryozuki> i havent fixed on my syntax yet so i didnt know whether to do that
14:10 < bridge> <ryozuki> added one xd
14:11 < bridge> <ryozuki> @heinrich5991 do u know how to make a link to the latest release artifact on github?
14:11 < bridge> <ryozuki> https://github.com/edg-l/edlang/releases/download/v0.0.1-alpha.11/edlang
14:11 < bridge> <ryozuki> this but for latest always
14:11 < bridge> <heinrich5991> just linking to /releases should work, no?
14:11 < bridge> <heinrich5991> ah
14:11 < bridge> <heinrich5991> the download
14:12 < ws-client> <ChillerDragon> jopsti would you call your coding style benchmark driven development?
14:12 < ws-client> <ChillerDragon> benchmark first then write code
14:12 < bridge> <heinrich5991> thanks for the code sample @ryozuki 🙂
14:16 < bridge> <heinrich5991> so no, don't have a solution
14:26 < bridge> <Jupstar ✪> For me brotli won, but I didn't use a custom directory
14:27 < bridge> <Jupstar ✪> But it also won by quite some margin. And even for binary files
14:28 < bridge> <Jupstar ✪> Chillerdragon: no, but for me stuff like compressions are easily to replace
14:28 < bridge> <heinrich5991> do you have some documentation on the numbers that you found? what kind of data did you compress?
14:28 < bridge> <Jupstar ✪> So I try to Bench such stuff
14:28 < bridge> <heinrich5991> that makes a lot of sense IMO
14:28 < bridge> <Jupstar ✪> Let me go on PC, but I shared them here
14:29 < bridge> <heinrich5991> here 🙂
14:30 < bridge> <Jupstar ✪> It was for a bincode encoded map file
14:30 < bridge> <Jupstar ✪> Tw map, but not like vanilla map files
14:30 < bridge> <Jupstar ✪> So it also contained lot of zeros
14:34 < bridge> <ryozuki> @heinrich5991 do u know if u can have ssh over cloudflare?
14:34 < bridge> <ryozuki> so i can enable  ssh on forgejo
14:35 < bridge> <ryozuki> https://git.edgarluque.com/
14:35 < bridge> <ryozuki> soon tm
14:35 < bridge> <heinrich5991> why do you want to have that?
14:35 < bridge> <ryozuki> https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/
14:35 < bridge> <heinrich5991> you can simply™ connect directly to the server IP address
14:36 < bridge> <ryozuki> i dont want users using my forgejo to know my ip
14:36 < bridge> <heinrich5991> aah
14:36 < bridge> <heinrich5991> not sure if that's possible
14:36 < bridge> <Jupstar ✪> @heinrich5991 
14:36 < bridge> <Jupstar ✪> https://pastebin.com/2NY0hg7E
14:36 < bridge> <heinrich5991> you seem to have read more than I did already
14:36 < bridge> <Jupstar ✪> Discord broken on PC dunno
14:37 < bridge> <heinrich5991> nice, thanks
14:37 < bridge> <heinrich5991> can you edit your message to include "brotli" so we can finid it in the future? ^^
14:42 < bridge> <Jupstar ✪> Pastebins are deleted afyrer time anyway aren't they?
14:42 < bridge> <matodor> pastila.nl
14:42 < bridge> <Ewan> ryo u can run a relay server
14:43 < bridge> <Ewan> in between the user and your server
14:43 < bridge> <Ewan> and expose that to cloudflare
14:43 < bridge> <Ewan> it communicates between the two independently
14:44 < bridge> <heinrich5991> don't think so
14:45 < bridge> <Jupstar ✪> @heinrich5991  
14:46 < bridge> <Jupstar ✪> https://pastebin.com/2NY0hg7E
14:46 < bridge> <Jupstar ✪> @heinrich5991  
14:46 < bridge> <Jupstar ✪> https://pastebin.com/2NY0hg7E   brotli
14:48 < bridge> <ryozuki> https://git.edgarluque.com/edg-l/edlang
14:48 < bridge> <ryozuki> epyc
15:04 < bridge> <ryozuki> apparently there is a cloudflare feature
15:04 < bridge> <ryozuki> <https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/>
15:04 < bridge> <ryozuki> ill look into it later
15:05 < bridge> <Ewan> cool
15:08 < bridge> <ryozuki> ill add later oauth with github
15:09 < bridge> <heinrich5991> is that actually proxied?
15:09 < bridge> <heinrich5991> or is it more like wireguard where you still connect to the target IP directly
15:10 < bridge> <heinrich5991> I couldn't tell from the page
15:25 < bridge> <ryozuki> i think proxied
15:25 < bridge> <ryozuki> with warp
15:27 < bridge> <ryozuki> meh
15:27 < bridge> <ryozuki> but this needs software on user side
15:27 < bridge> <ryozuki> so its a no
15:31 < bridge> <Jupstar ✪> when crates io
15:34 < bridge> <ryozuki> https://forgejo.org/2023-01-10-answering-forgejo-federation-questions/
15:34 < bridge> <ryozuki> forgejo has federation!
15:34 < bridge> <ryozuki> https://forgefed.org/
15:37 < bridge> <Jupstar ✪> @ryozuki when do we team up to create a rust-like language for GPUs
15:40 < bridge> <ryozuki> after i do edlang
15:40 < bridge> <ryozuki> btw forgejo allows creating a cargo repository
15:40 < bridge> <ryozuki> pog
15:42 < bridge> <ryozuki> @jupeyy_keks https://git.edgarluque.com/user/sign_up
15:42 < bridge> <ryozuki> can u signup
15:42 < bridge> <ryozuki> with ur github if u want
15:43 < bridge> <Jupstar ✪> xd
15:45 < bridge> <ryozuki> xd
15:45 < bridge> <ryozuki> whats funny xd
15:46 < bridge> <Jupstar ✪> it's not written in rust 😬 
15:46 < bridge> <Jupstar ✪> 
15:46 < bridge> <Jupstar ✪> ok no, i currently have no project to host there
15:47 < bridge> <ryozuki> sadge
15:47 < bridge> <Jupstar ✪> do you feel alone on your selfhosted git instance?
15:47 < bridge> <ryozuki> yes
15:47 < bridge> <ryozuki> @jupeyy_keks but apparently its federated
15:48 < bridge> <ryozuki> so u can create issues among forgejo instances
15:48 < bridge> <ryozuki> e.g i have my account in my instance
15:48 < bridge> <Jupstar ✪> ah cool
15:48 < bridge> <ryozuki> i can make a issue on another instance
15:48 < bridge> <ryozuki> idk how it works
15:52 < bridge> <ryozuki> https://git.edgarluque.com/edg-l/ddnet
15:52 < bridge> <ryozuki> pog
15:54 < bridge> <Jupstar ✪> the only thing i'd highly be interested in is better stats than gitlab
15:54 < bridge> <Jupstar ✪> contributor stats etc
15:55 < bridge> <ryozuki> my interest is not relying on microsoft github xd
15:55 < bridge> <Jupstar ✪> yeah understandable, but sadly also no very realistic if u want your project to have visibility
15:55 < bridge> <Jupstar ✪> except it's a really game changing project xd
15:56 < bridge> <ryozuki> yeah
15:56 < bridge> <ryozuki> im using this as mirror for now
15:57 < bridge> <ryozuki> @jupeyy_keks it has action runner support too
15:57 < bridge> <ryozuki> https://forgejo.org/docs/next/admin/actions/
16:10 < bridge> <Jupstar ✪> @robyt3 #8036 what do i need to do, does it always increase memory or any specific condition?
16:10 < bridge> <Jupstar ✪> 
16:10 < bridge> <Jupstar ✪> just open f1 console and it starts?
16:10 < bridge> <Jupstar ✪> 
16:10 < bridge> <Jupstar ✪> does chat msg also work?
16:10 < bridge> <DDNet> https://github.com/ddnet/ddnet/issues/8036
16:10 < bridge> <robyt3> yes, just open console or active chat and it should start (with Vulkan)
16:10 < bridge> <robyt3> Somehow increases faster if there is less text in the console, so maybe linked to frame rate
16:12 < bridge> <Jupstar ✪> VRAM or RAM?
16:13 < bridge> <robyt3> RAM I assume, it's the normal value in task manager
16:14 < bridge> <Jupstar ✪> how long do i need to wait xd
16:14 < bridge> <Jupstar ✪> for me it doesnt increase by 1 byte xD
16:14 < bridge> <robyt3> It should start immediately
16:15 < bridge> <robyt3> Maybe it's Windows only again, or are you already on Windows?
16:15 < bridge> <Jupstar ✪> i have chat + console open
16:15 < bridge> <Jupstar ✪> nah
16:16 < bridge> <robyt3> It also behaves different in release and debug mode, but memory keeps increasing in both
16:16 < bridge> <Jupstar ✪> im in debug rn
16:16 < bridge> <robyt3> In release mode I get large lag spikes when the memory is freed, in debug I don't get the spikes for some reason
16:16 < bridge> <Jupstar ✪> and as soon as you close it, the RAM drops?
16:17 < bridge> <robyt3> yeah, it goes back to the normal value again, so everything is properly freed
16:17 < bridge> <robyt3> but it keeps allocating something
16:17 < bridge> <Jupstar ✪> sounds more like a IME thing
16:17 < bridge> <Jupstar ✪> xd
16:17 < bridge> <Jupstar ✪> how did u find out it's ONE TIME SUBMIT?
16:17 < bridge> <robyt3> If you remove `TextEx` calls it works
16:17 < bridge> <robyt3> If you only remove the flag it also works
16:17 < bridge> <robyt3> But then the memory usage keeps fluctuating
16:18 < bridge> <robyt3> But it does not increase over time
16:18 < bridge> <Jupstar ✪> maybe it's the shared pointer in the text containers?
16:18 < bridge> <Jupstar ✪> std::shared_ptr<STextContainerUsages> m_UseCount =
16:18 < bridge> <Jupstar ✪>         std::make_shared<STextContainerUsages>(STextContainerUsages());
16:18 < bridge> <Jupstar ✪> this one
16:18 < bridge> <Jupstar ✪> but weird that i dont get the bug at all
16:19 < bridge> <Jupstar ✪> do u also use a different compiler?
16:19 < bridge> <Jupstar ✪> MSVC?
16:19 < bridge> <robyt3> yeah, I did debug with GCC and RelWithDebug with MSVC
16:19 < bridge> <Jupstar ✪> mh
16:19 < bridge> <robyt3> I used MSVC profiler to find out that these allocations/frees are on the hot path
16:20 < bridge> <Jupstar ✪> that would probably also speak for the shared ptr
16:20 < bridge> <Jupstar ✪> but on the other hand side u said only on vk
16:21 < bridge> <Jupstar ✪> i'm just surprised that it's not visible, does windows task manager by chance also track VRAM xD
16:22 < bridge> <sour6465> ok
16:22 < bridge> <robyt3> yeah, but not per process I think, I'll test
16:24 < bridge> <robyt3> VRAM stays unchanged
16:24 < bridge> <robyt3> Simply removing the shared ptr did not fix it
16:25 < bridge> <Jupstar ✪> but u are 100% certain it only happens with vk?
16:25 < bridge> <Jupstar ✪> can u press CTRL shift D and see if the memory usage spikes in the top
16:25 < bridge> <Jupstar ✪> esp the "streamed" one
16:26 < bridge> <robyt3> all stays unchanged while the console is open
16:27 < bridge> <Jupstar ✪> what confuses me most is that the memory does not leak
16:27 < bridge> <robyt3> yeah, with OpenGL memory usage does not increase
16:27 < bridge> <ryozuki> <https://git.edgarluque.com/edg-l/test/actions> pog actions on my ryzen server
16:28 < bridge> <ryozuki> <.<
16:28 < bridge> <Jupstar ✪> that's why there should be NO globals
16:28 < bridge> <Jupstar ✪> not even global allocators
16:29 < bridge> <Jupstar ✪> would be ez to debug with local ones
16:29 < bridge> <Jupstar ✪> 😏
16:30 < bridge> <Jupstar ✪> @robyt3 i dunno how to debug, since i dont have it xd
16:30 < bridge> <Jupstar ✪> my ram decreased a bit since we started talking xD
16:32 < bridge> <robyt3> Really weird how this only affects line inputs which are active
16:32 < bridge> <robyt3> Seems almost like IME playes a role somehow
16:32 < bridge> <robyt3> Seems almost like IME plays a role somehow
16:32 < bridge> <diariesvexar> you talking about drop fps when chat is active ?
16:32 < bridge> <Jupstar ✪> when u close it
16:32 < bridge> <Jupstar ✪> but yes
16:32 < bridge> <diariesvexar> in debug mode on windows it's happened with chat or open console
16:33 < bridge> <Jupstar ✪> yeah
16:33 < bridge> <diariesvexar> on release build it's fine
16:33 < bridge> <Jupstar ✪> mh ok
16:33 < bridge> <robyt3> Hmmm, that's the opposite of my experience
16:33 < bridge> <diariesvexar> then it's weird
16:33 < bridge> <Jupstar ✪> lmao
16:33 < bridge> <diariesvexar> win 11 64 bit what about you ?
16:34 < bridge> <diariesvexar> i'm win 11 64 bit what about you ?
16:34 < bridge> <robyt3> win 10 64 bit
16:34 < bridge> <robyt3> NVIDIA
16:34 < bridge> <diariesvexar> same
16:34 < bridge> <robyt3> Does the memory usage keep going up for you in the task manager while the console is open and DDNet is active?
16:35 < bridge> <diariesvexar> I noticed about it when I tried to add chat emoji that drop my fps to 60 or 50 then I had to remove it and couldn't fix it
16:35 < bridge> <diariesvexar> let me check with latest ddnet source
16:37 < bridge> <milkeeycat> https://github.com/ddnet/ddnet/blob/16feff41de1f46cb8a3f0d852035c51e27403521/src/engine/client/graphics_threaded.cpp#L129C2-L129C21 where the hell is this value gets set on window resize
16:38 < bridge> <robyt3> `GetViewportSize`
16:39 < bridge> <milkeeycat> omg i was expecting to see &m_ScreenWidth somewhere and wasnt checking other methods
16:39 < bridge> <heinrich5991> yes, that's an annoying feature of references 😦
16:40 < bridge> <heinrich5991> you don't see where stuff is passed by reference and where by value
16:41 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1213149090607534150/image.png?ex=65f46c22&is=65e1f722&hm=e2c55290e390f56aa12261af07303efdf8004793ec038466f059ca7913987d58&
16:41 < bridge> <Jupstar ✪> for me it at least shows as phantom code
16:41 < bridge> <Jupstar ✪> but yeah seraching doesnt help here
16:41 < bridge> <Jupstar ✪> but yeah searching doesnt help here
16:42 < bridge> <Jupstar ✪> can u just disable IME to check
16:42 < bridge> <Jupstar ✪> before we look everywhere else
16:43 < bridge> <heinrich5991> code should also be somewhat readable without an IDE: we do it when reviewing PRs, for example
16:43 < bridge> <robyt3> I tried commenting out the IME code in lineinput but that didn't make any difference
16:44 < bridge> <Jupstar ✪> well every language has it's hiddenness tho
16:44 < bridge> <Jupstar ✪> in rust u most often dont type out types either
16:44 < bridge> <heinrich5991> yes. some more and some less
16:44 < bridge> <milkeeycat> isnt't why there's these `m_vpAll` prefixes and stuff
16:44 < bridge> <milkeeycat> so others can write code in notepad
16:44 < bridge> <diariesvexar> @robyt3 on menu cpu using 2-9% with open console it's goes 30+%
16:44 < bridge> <Jupstar ✪> it also wouldnt hurt if github adds inlay hints
16:44 < bridge> <Jupstar ✪> 😄
16:44 < bridge> <heinrich5991> yep
16:45 < bridge> <heinrich5991> but for the common case, you see that stuff is modified, you explicitly pass `&mut`
16:45 < bridge> <robyt3> I mean the memory usage. If you are in the menu it should stay the same, if you have the console open it seems to keep increasing for me (with Vulkan)
16:45 < bridge> <Jupstar ✪> true, but often i create the &mut before
16:45 < bridge> <heinrich5991> I kinda prefer pointers over references for mutable stuff, for this reason
16:45 < bridge> <heinrich5991> in C++
16:45 < bridge> <Jupstar ✪> depends on the situation i guess
16:45 < bridge> <diariesvexar> oh I checked cpu let me see
16:45 < bridge> <heinrich5991> in python, it's the worst
16:45 < bridge> <heinrich5991> any object can be modified anywhere
16:46 < bridge> <milkeeycat> it's a feature 😏
16:46 < bridge> <Jupstar ✪> yeah we had that discussion, i guess i'm 60:40 for refs
16:46 < bridge> <Jupstar ✪> 
16:46 < bridge> <Jupstar ✪> the passing is an argument, but pointers loose context etc.
16:46 < bridge> <Jupstar ✪> checking for null also kinda sucks
16:46 < bridge> <Jupstar ✪> or expecting to checking it
16:46 < bridge> <robyt3> If you start the memory usage might change a bit, but in the menu is should stay constant after maybe 30 seconds at most
16:46 < bridge> <zhn> loose context?
16:46 < bridge> <diariesvexar> nope memory is 321mb and doesn't change
16:46 < bridge> <robyt3> And you use Vulkan?
16:47 < bridge> <Jupstar ✪> refs have a lifetime & are less prone to const removness
16:47 < bridge> <diariesvexar> and now increasing wtf
16:47 < bridge> <heinrich5991> yea, I'd treat every pointer that is not documented to be nullable as non-null
16:47 < bridge> <diariesvexar> yeah on Vulkan
16:47 < bridge> <Jupstar ✪> but checking docs also sucks xD
16:47 < bridge> <robyt3> In remote console it should increase faster than in local console
16:48 < bridge> <heinrich5991> maybe one could create a `Nullable<>` template. any pointer not in a `Nullable` must be non-null
16:48 < bridge> <Jupstar ✪> mh that sucks ofc
16:48 < bridge> <diariesvexar> I don't see much different between them both increase with same speed
16:49 < bridge> <Jupstar ✪> so how about you create a template and call it ref, but pass a pointer 😏 
16:49 < bridge> <Jupstar ✪> 
16:49 < bridge> <Jupstar ✪> but anyway, in cpp there is no diff between mut and const anyway in the call, also not for pointers
16:50 < bridge> <Jupstar ✪> i wouldn't hurt my head too much for this
16:50 < bridge> <heinrich5991> also not for references. but it documents stuff ^^
16:51 < bridge> <heinrich5991> I guess
16:53 < bridge> <Jupstar ✪> @robyt3 i dunno i also cant find any related allocation if i set a breakpoint in the paths where vk allocations happen (or pushing to the buffer objects)
16:53 < bridge> <Jupstar ✪> if u remove the ONE TIME SUBMIT flag it will simply create "normal" buffer objects
16:53 < bridge> <Jupstar ✪> so the code path for a leak is pretty small
16:53 < bridge> <Jupstar ✪> bcs they share the same code
16:53 < bridge> <Jupstar ✪> except a few `if` statements
16:54 < bridge> <diariesvexar> https://gist.github.com/jokertarot/7583938
16:54 < bridge> <diariesvexar> is it possible to have on DDNet ?
16:54 < bridge> <Jupstar ✪> i think we already tried emojis once and they were disliked
16:54 < bridge> <Jupstar ✪> better invest into more SHIFT emojis
16:55 < bridge> <robyt3> Somehow these code paths are only triggered for active line inputs though, even though the `TextEx` function is also called in other places like the scoreboard, which does not cause this issue
16:55 < bridge> <Jupstar ✪> xd that just makes IME so likely
16:55 < bridge> <Jupstar ✪> weird that it isnt the cause (probably)
16:56 < bridge> <Jupstar ✪> @robyt3 r u on fullscreen
16:56 < bridge> <Jupstar ✪> or windowed
16:56 < bridge> <Jupstar ✪> with fullscreen i mean real one
16:56 < bridge> <zhn> :troll:
16:56 < bridge> <robyt3> Windowed
16:56 < bridge> <diariesvexar> I tried to use that emoji system that use png but got huge drop fps on latest DDNet 17.1+
16:56 < bridge> <Jupstar ✪> why that
16:57 < bridge> <Jupstar ✪> what about it should cause huge fps drops.. are the emojis 4k? XD
16:57 < bridge> <robyt3> Also happens with other fullscreen modes
16:57 < bridge> <Jupstar ✪> i expected it to happen only with fullscreen :lol:
16:57 < bridge> <Jupstar ✪> so nvm
16:57 < bridge> <diariesvexar> maybe I ruined somewhere don't know 😄
16:57 < bridge> <diariesvexar> I tested fullscreen and still increase memory and cpu usage
16:58 < bridge> <Jupstar ✪> ok
16:58 < bridge> <Jupstar ✪> what can we try... older SDL?
16:58 < bridge> <Jupstar ✪> it doesnt happen in OpenGL for you too @diariesvexar ?
16:58 < bridge> <diariesvexar> let me test it
17:00 < bridge> <robyt3> Also happens with SDL 2.0.16, which was used with DDNet 16.9 that still worked
17:00 < bridge> <diariesvexar> with opengl it's seem to be fine
17:01 < bridge> <robyt3> Will not be fixed by updating to SDL 2.28.5 either
17:02 < bridge> <robyt3> I noticed another thing though, the memory usage increases significantly faster when you've selected all lines of the local console
17:02 < bridge> <Peakies> yep it's stable with OpenGL3.3 + borderless window with 200mb ram usage
17:04 < bridge> <Jupstar ✪> ok i'll try that
17:04 < bridge> <robyt3> It's definitely caused by cursor/selection rendering
17:04 < bridge> <Peakies> Yes mine too
17:05 < bridge> <robyt3> Disabling text selection and cursor rendering fixes it
17:06 < bridge> <Peakies> Yeah it's stop increasing memory usage when disabling text selection
17:07 < bridge> <Jupstar ✪> so it's specifically about that nice
17:07 < bridge> <robyt3> I guess the selection quads are leaking?
17:08 < bridge> <Jupstar ✪> but also freed at some point right?
17:08 < bridge> <robyt3> yeah, when the console is closed
17:08 < bridge> <Jupstar ✪> so only partially leaking
17:08 < bridge> <robyt3> but it keeps allocating more and storing them somewhere
17:08 < bridge> <Jupstar ✪> ok
17:08 < bridge> <Jupstar ✪> if(TextContainer.m_StringInfo.m_SelectionQuadContainerIndex == -1)
17:08 < bridge> <Jupstar ✪>                 TextContainer.m_StringInfo.m_SelectionQuadContainerIndex = Graphics()->CreateQuadContainer(false);
17:08 < bridge> <Jupstar ✪> this looks sus
17:08 < bridge> <Jupstar ✪> it only creates it if not created
17:08 < bridge> <Jupstar ✪> so maybe it appends it forever?
17:09 < bridge> <Jupstar ✪> is that even the code path we talk about?
17:09 < bridge> <robyt3> I'm not sure which kind of allocations `QuadContainerAddQuads` causes
17:10 < bridge> <Jupstar ✪> it adds the stuff to a vec and uploads everythign (even previous quads added)
17:10 < bridge> <robyt3> Seems like it leads to the code paths where BufferObjects are created
17:10 < bridge> <Peakies> I added breakpoint for `TextContainer.m_StringInfo.m_SelectionQuadContainerIndex = Graphics()->CreateQuadContainer(false);` and it's happening even that I just opened console is it fine ?
17:11 < bridge> <Jupstar ✪> but that still doesnt explain the unrelated ONE TIME SUBMIT flag xD
17:11 < bridge> <robyt3> yeah, it renders the blinking cursor
17:11 < bridge> <Peakies> oh right
17:17 < bridge> <Jupstar ✪> but why can i not reprod xd
17:17 < bridge> <Jupstar ✪> sometimes memory increases but then it stops forever
17:18 < bridge> <Peakies> I don't know how to explain it but without that gray highlight of selection still memory increasment happening
17:20 < bridge> <Jupstar ✪> @robyt3 where exactly did u disable selection?
17:20 < bridge> <Jupstar ✪> 
17:20 < bridge> <Jupstar ✪> in text.cpp?
17:20 < bridge> <robyt3> lineinput.cpp, lines 450-484
17:21 < bridge> <robyt3> comment out all `Cursor.m_* = *` lines
17:22 < bridge> <robyt3> commenting out usage of `m_SelectionQuadContainerIndex` in `text.cpp` also fixes it
17:25 < bridge> <robyt3> commenting out only the two `QuadContainerAddQuads` calls is enough
17:28 < bridge> <Jupstar ✪> is linux reporting memory changes only once per hour or what am i doing wrong
17:28 < bridge> <Peakies> `Container.m_QuadBufferObjectIndex = CreateBufferObject(UploadDataSize, Container.m_vQuads.data(), 0);`
17:28 < bridge> <Jupstar ✪> i do
17:28 < bridge> <Jupstar ✪> 
17:28 < bridge> <Jupstar ✪> ```
17:28 < bridge> <Jupstar ✪> watch -n 0.1 'sudo pmap -x 78543 | grep "gesamt"'  
17:28 < bridge> <Jupstar ✪> ```
17:28 < bridge> <Jupstar ✪> 
17:28 < bridge> <Jupstar ✪> where 78543 is my pid of DDNet
17:28 < bridge> <Jupstar ✪> the ram doesnt change even a single byte xD
17:29 < bridge> <robyt3> Do you reach the two lines `m_Elements.erase(...)` in `backend_vulkan.cpp`?
17:29 < bridge> <Jupstar ✪> yes
17:29 < bridge> <robyt3> Does it work without grep?
17:30 < bridge> <Jupstar ✪> yes but it's very verbose
17:30 < bridge> <Jupstar ✪> i also have a "normal" taskmanager open
17:30 < bridge> <robyt3> I mean does grep update or does it only read the output once?
17:30 < bridge> <Jupstar ✪> where i also dont see any change in ram xd
17:30 < bridge> <Jupstar ✪> oh i dunno
17:30 < bridge> <Jupstar ✪> i thought watch -n  simply execs the whole command
17:31 < bridge> <heinrich5991> it does
17:32 < bridge> <heinrich5991> I'd recommend putting the sudo to the outside though, so it won't need to be re-executed
17:32 < bridge> <Jupstar ✪> ok when i move the ddnet window it instantly changes RAM
17:32 < bridge> <heinrich5991> `sudo watch -n 0.1 'pmap -x 78543 | grep "gesamt"'`
17:33 < bridge> <Jupstar ✪> but selection changes nothing at all
17:34 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1213162334160420928/testdc.mp4?ex=65f47877&is=65e20377&hm=755efc55465c41507a2945907f8e30f24122140bb4e5df51beae3717343c4ea7&
17:34 < bridge> <Jupstar ✪> well anyway, i have to go now, hope u find the fix or cause xd
17:49 < bridge> <ryozuki> @learath2 next try
17:49 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1213166235219529748/PXL_20240301_164906809.MP.jpg?ex=65f47c1a&is=65e2071a&hm=75aa8f79eff9d85dc3eb860c515de0ddd52731c3107913051f18fbf406413b41&
17:50 < bridge> <zhn> bro's gonna buy every dac he sees to test if it works with linux powered pc (it will not)
17:51 < bridge> <zhn> anyway share the results :P
17:53 < bridge> <ryozuki> i hope this works cuz im not gonna try more xd
17:54 < bridge> <ryozuki> i have a k3 and it works
17:54 < bridge> <ryozuki> size diference
17:54 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1213167412791214090/PXL_20240301_165351382.jpg?ex=65f47d32&is=65e20832&hm=d103b93d450e874d892c6b203e5542f6db41a00e0cd3fc537164bfae371085d9&
18:05 < bridge> <ryozuki> it seems to work
18:05 < bridge> <ryozuki> like the others if i replug it will not until a reboot
18:05 < bridge> <ryozuki> which is probs a bug in the driver
18:06 < bridge> <ryozuki> but oh well
18:23 < bridge> <ryozuki> epic
18:23 < bridge> <ryozuki> it has bluetooth too
18:48 < bridge> <heinrich5991> https://blog.rust-lang.org/inside-rust/2022/08/16/diagnostic-effort.html
18:48 < bridge> <milkeeycat> Is this the right way to draw a rectangle with a texture? ```cpp
18:48 < bridge> <milkeeycat> char aBuf[128];
18:48 < bridge> <milkeeycat> CImageInfo Info;
18:48 < bridge> <milkeeycat> str_format(aBuf, sizeof(aBuf), "/path/to/file.png");
18:48 < bridge> <milkeeycat> Graphics()->LoadPNG(&Info, aBuf, IStorage::TYPE_ABSOLUTE);
18:48 < bridge> <milkeeycat> auto Handle = Graphics()->LoadTextureRaw(Info.m_Width, Info.m_Height, Info.m_Format, Info.m_pData, 0);
18:48 < bridge> <milkeeycat> Graphics()->TextureSet(Handle);
18:48 < bridge> <milkeeycat> 
18:48 < bridge> <milkeeycat> Graphics()->QuadsBegin();
18:48 < bridge> <milkeeycat> Graphics()->DrawRectExt(100, 100, 100, 100, 0, 0);
18:48 < bridge> <milkeeycat> Graphics()->QuadsEnd();
18:48 < bridge> <milkeeycat> ```
18:49 < bridge> <ryozuki> time for catalan
19:38 < bridge> <furo321> I personally wouldn't call `LoadPNG` every frame, but you do you! :D
19:58 < bridge> <ryozuki> owned
19:58 < bridge> <ryozuki> rekt
19:58 < bridge> <ryozuki> https://www.youtube.com/watch?v=e3uOMCfopR8
20:07 < bridge> <learath2> this is bizarre though
20:07 < bridge> <ryozuki> this one seems to work better now
20:07 < bridge> <ryozuki> even after changing input modes
20:07 < bridge> <ryozuki> i like it has rca in and out
20:07 < bridge> <learath2> Have you tried restarting pipewire and seeing if it's maybe an issue in pipewire?
20:07 < bridge> <ryozuki> so i can connect my mixer table permanently
20:08 < bridge> <ryozuki> i doubt because dmesg shows the things i told u
20:08 < bridge> <learath2> but not when you plug it in the first time?
20:08 < bridge> <ryozuki> but well so far it works
20:08 < bridge> <ryozuki> hmm idk
20:08 < bridge> <ryozuki> im not gonna try it now
20:08 < bridge> <ryozuki> cuz its working
20:08 < bridge> <ryozuki> and i like it working
20:08 < bridge> <ryozuki> :SmileWink:
20:08 < bridge> <learath2> yeah just something to check before your next shutdown
20:08 < bridge> <ryozuki> true
20:09 < bridge> <ryozuki> ill probs forget
20:09 < bridge> <ryozuki> cuz some friends coming over and drinks and such
20:09 < bridge> <ryozuki> kek
20:09 < bridge> <ryozuki> @learath2 btw when u coming to barcelona
20:09 < bridge> <learath2> `std::string_view` is such a meh abstraction over strings, not guaranteeing null termination was such a bad idea, it's basically completely useless for interoperability with any already existing code
20:10 < bridge> <learath2> Depends on when I get a reason to come over 😄
20:10 < bridge> <ryozuki> xd
20:10 < bridge> <ryozuki> u said u would come in the next 2 months
20:10 < bridge> <ryozuki> or were u drunk
20:10 < bridge> <learath2> I was planning on going to the nier concert, but I caught the one in berlin instead
20:11 < bridge> <learath2> lemme see if there is anything interesting in barcelona
20:13 < bridge> <learath2> I guess I could always just hop over for food
20:13 < bridge> <ryozuki> true
20:13 < bridge> <heinrich5991> where's a place in C/C++ where you need null termination?
20:14 < bridge> <heinrich5991> not guaranteeing null termination is pretty essential, otherwise you can't have substrings without mutable access
20:14 < bridge> <learath2> Interacting with all legacy code requires null termination, can't even compare string views safely
20:14 < bridge> <heinrich5991> can you give an example?
20:15 < bridge> <heinrich5991> `a.len() == b.len() || memcmp(a.data(), b.data(), a.len()) == 0`
20:15 < bridge> <heinrich5991> `a.len() == b.len() && memcmp(a.data(), b.data(), a.len()) == 0`
20:17 < bridge> <peter44h> Opening a file (the open syscall requires it null terminated)
20:17 < bridge> <peter44h> I agree null termination is total trash and your life gets much better if you can drop it
20:17 < bridge> <learath2> I guess that's the correct way to do it, but you still can't use it in conjunction with old stuff, like the constructors of `ifstream`
20:17 < bridge> <peter44h> No copy substrings are a big deal
20:17 < bridge> <peter44h> And most data is not null terminated
20:17 < bridge> <ryozuki> 🤝
20:18 < bridge> <learath2> Null termination is eternal, trying to avoid it without replacing the entire OS is just extra overhead everywhere
20:18 < bridge> <ryozuki> no
20:18 < bridge> <learath2> You need to embrace null termination and make it nice to work with instead
20:18 < bridge> <learath2> I'd like to see you pass your fancy rust string to `open(2)`
20:19 < bridge> <ryozuki> just wait till ryOS
20:19 < bridge> <heinrich5991> I bet doing null termination only at the OS boundary is more performant than not having read-only substrings in programs
20:19 < bridge> <peter44h> For C I also drop them
20:19 < bridge> <peter44h> I prefer a type like this:
20:19 < bridge> <peter44h> 
20:19 < bridge> <peter44h> ```c
20:19 < bridge> <peter44h> typedef struct
20:19 < bridge> <peter44h> {
20:19 < bridge> <peter44h>     ptrdiff_t len;
20:19 < bridge> <peter44h>     unsigned char* str;
20:19 < bridge> <peter44h> } s8;
20:19 < bridge> <peter44h> #define s8(s) (s8) { ((ptrdiff_t) sizeof(s)-1), (unsigned char*)s }
20:19 < bridge> <peter44h> ```
20:19 < bridge> <peter44h> It absolutely is
20:19 < bridge> <peter44h> strlen is O(n)
20:19 < bridge> <peter44h> Calling it often is really, really bad
20:19 < bridge> <ryozuki> ye
20:19 < bridge> <ryozuki> rust str len is o1
20:20 < bridge> <ryozuki> and comparision at best case can be o1 too if len doesnt match
20:20 < bridge> <learath2> I love the random speculation. Ok let me make one too, my programs don't substring filenames except at the end, thus your strings perform much worse for my usecase
20:20 < bridge> <heinrich5991> rust allocates it on the stack for short strings, and on the heap for long ones IIRC
20:20 < bridge> <ryozuki> rust stack strings look funny iirc they are all concatenated in a single place in memory
20:20 < bridge> <learath2> Mine even has the benefit of being a 100% correct for my own use even though it's not generic
20:21 < bridge> <peter44h> Imagine the use case of "take a filename and return the extension"
20:21 < bridge> <peter44h> With a null terminated string you have to copy it, it's an allocation that can fail, and you have to free
20:21 < bridge> <peter44h> If you store the length it's absolutely trivial
20:21 < bridge> <peter44h> You can do things like reading tokens straight out of memory mapped files as well
20:21 < bridge> <heinrich5991> bad example. substrings at the end work with null termination
20:21 < bridge> <learath2> Actually, returning the extension requires no allocation
20:21 < bridge> <ryozuki> i bet most subprograms substring at start
20:21 < bridge> <ryozuki> tokenization
20:21 < bridge> <ryozuki> filenames
20:21 < bridge> <ryozuki> etc
20:21 < bridge> <peter44h> Ah okay yeah my bad
20:22 < bridge> <learath2> Mine doesn't so your strings objectively perform worse for me
20:22 < bridge> <ryozuki> :owo:
20:22 < bridge> <peter44h> But returning the filename without the extension would
20:22 < bridge> <learath2> It's almost as if there isn't one perfect solution, I wonder why
20:22 < bridge> <peter44h> There's a good reason nothing other than C chooses it
20:22 < bridge> <ryozuki> nothing other than c and interfaces to c*
20:22 < bridge> <peter44h> The perfect solution is only concerning yourself with the null terminated BS when it matters
20:22 < bridge> <ryozuki> C is not a language anymore
20:23 < bridge> <ryozuki> its a protocol
20:23 < bridge> <ryozuki> that we are forced to use
20:23 < bridge> <learath2> If you have a mutable string at hand, it's only a matter of replacing the dot with a null character
20:23 < bridge> <peter44h> Well yeah... that's an allocation + copy
20:23 < bridge> <learath2> I disagree, the perfect solution is only concerning with length-prefixed strings when it matters
20:23 < bridge> <learath2> Do you see the issue with this line of argumentation? I can do the exact same thing
20:24 < bridge> <peter44h> No, because length is more generally useful
20:24 < bridge> <learath2> And which council decides what is "more generally useful"
20:25 < bridge> <peter44h> See gta online json parser as an example where null termination goes wrong
20:25 < bridge> <heinrich5991> let's try to come up with ideas on how to quantitively determine which option is better
20:25 < bridge> <ryozuki> whats the substring method for C?
20:25 < bridge> <peter44h> Null termination is also how you end up with extremely stupid APIs like strtok
20:25 < bridge> <ryozuki> lets grep
20:26 < bridge> <ryozuki> the ddnet dev council
20:26 < bridge> <learath2> Not my fault some programmers are inept. You can write bad code in any language with any performance characteristic you desire. You can have `O(n)` strlen in Rust too
20:26 < bridge> <ryozuki> :NekoDrink:
20:26 < bridge> <ryozuki> but its opt in in rust
20:26 < bridge> <peter44h> You need the length every time you want to iterate the string
20:26 < bridge> <peter44h> Surely that's a general thing to do?
20:27 < bridge> <learath2> Nope, you don't unless you have to iterate backwards
20:27 < bridge> <peter44h> You still need the length to know where the end is
20:27 < bridge> <learath2> Not for null terminated strings
20:27 < bridge> <ryozuki> but u cant slice nicely
20:27 < bridge> <learath2> The end is where the null terminator is
20:28 < bridge> <peter44h> Okay, well you need to do an O(n) operation to know that info then
20:28 < bridge> <ryozuki> aaaaaaab
20:28 < bridge> <ryozuki> aaaaaaabb
20:28 < bridge> <ryozuki> 
20:28 < bridge> <ryozuki> o1 in rust
20:28 < bridge> <ryozuki> o(n) in c
20:28 < bridge> <ryozuki> right?
20:28 < bridge> <learath2> Yes, that is the main difference. strlen is `O(n)` for one type of string and `O(1)` for the other. If you don't need strlen for your "operation" it's not a cost you pay
20:28 < bridge> <ryozuki> comparision
20:29 < bridge> <learath2> What does that mean?
20:29 < bridge> <ryozuki> comparing those 2 strings
20:29 < bridge> <peter44h> And you need it, practically every time you want to manipulate one
20:29 < bridge> <peter44h> Yeah if you store the length you can just compare the two and reject immediately
20:30 < bridge> <peter44h> That's one advantage I didn't think, thanks for mentioning it
20:30 < bridge> <learath2> Yes
20:30 < bridge> <learath2> If the lengths were the same, both are O(n) though
20:31 < bridge> <ryozuki> what if u do a comparision in rust comparing first and last
20:31 < bridge> <ryozuki> going inwards
20:31 < bridge> <ryozuki> ?
20:31 < bridge> <ryozuki> u cant do that efficiently in c
20:31 < bridge> <ryozuki> like in rust when knowing len
20:32 < bridge> <learath2> Not really, if your algorithm will be iterating forwards through a string (many are including the strtok you don't like), you don't need to know the length a priori
20:32 < bridge> <peter44h> Strtok has to write into your string to work
20:32 < bridge> <peter44h> That's what's so bad about it
20:32 < bridge> <peter44h> Also it doesn't return the length of the token (why???)
20:33 < bridge> <learath2> You can't do that efficiently barring space-computers, any modern architecture with any amount of cache relies on prefetch to have efficient strlen
20:33 < bridge> <peter44h> Yet more loops just to figure out info the function already had to calculate
20:33 < bridge> <ryozuki> llvm has its own string
20:33 < bridge> <ryozuki> with length
20:33 < bridge> <ryozuki> surely they had a reason
20:34 < bridge> <learath2> So? It's still the same O(1) in space that any other tokenization algorithm you would like
20:34 < bridge> <ryozuki> https://llvm.org/doxygen/classllvm_1_1StringRef.html
20:34 < bridge> <learath2> I don't like appeals to authority, but there is indeed value to having length-prefixed strings. I'd only use them when I need those benefits, like when tokenizing
20:34 < bridge> <ryozuki> ```cpp
20:34 < bridge> <ryozuki> class LLVM_GSL_POINTER StringRef {
20:34 < bridge> <ryozuki>   public:
20:34 < bridge> <ryozuki>     static constexpr size_t npos = ~size_t(0);
20:34 < bridge> <ryozuki>  
20:35 < bridge> <ryozuki>     using iterator = const char *;
20:35 < bridge> <ryozuki>     using const_iterator = const char *;
20:35 < bridge> <ryozuki>     using size_type = size_t;
20:35 < bridge> <ryozuki>  
20:35 < bridge> <ryozuki>   private:
20:35 < bridge> <ryozuki>     /// The start of the string, in an external buffer.
20:35 < bridge> <ryozuki>     const char *Data = nullptr;
20:35 < bridge> <ryozuki>  
20:35 < bridge> <ryozuki>     /// The length of the string.
20:35 < bridge> <ryozuki>     size_t Length = 0;
20:35 < bridge> <ryozuki>  
20:35 < bridge> <ryozuki>     // Workaround memcmp issue with null pointers (undefined behavior)
20:35 < bridge> <ryozuki>     // by providing a specialized version
20:35 < bridge> <ryozuki>     static int compareMemory(const char *Lhs, const char *Rhs, size_t Length) {
20:35 < bridge> <ryozuki>       if (Length == 0) { return 0; }
20:35 < bridge> <ryozuki>       return ::memcmp(Lhs,Rhs,Length);
20:35 < bridge> <ryozuki>     }
20:35 < bridge> <ryozuki> ```
20:35 < bridge> <peter44h> The function doesn't tell you how long the token is so you're stuck calling strlen *again*
20:35 < bridge> <peter44h> When the function "knew" before it returned
20:35 < bridge> <heinrich5991> I'd guess if we look into the ddnet codebase, we'd see a lot of places that would be improved if naively replaced by strings that carry their lengths
20:35 < bridge> <learath2> Well designed languages that don't enjoy butting heads with the nature of legacy code have either both types of string available or do both
20:36 < bridge> <ryozuki> rust has both (?)
20:36 < bridge> <ryozuki> CStr
20:36 < bridge> <peter44h> I'm not saying "don't have both available"... just "don't use null terminated unless you need to interact with legacy"
20:36 < bridge> <learath2> I'd guess if we look at API boundries of the ddnet codebase, we'd see a lot of places that would be degraded if naively replaced by strings that carry their lengths
20:36 < bridge> <ryozuki> this
20:36 < bridge> <ryozuki> lets do this
20:36 < bridge> <ryozuki> a rework
20:36 < bridge> <ryozuki> and then we compare
20:36 < bridge> <heinrich5991> I'd bet if we count how often these are executed, we'd see more of my kind
20:37 < bridge> <learath2> I doubt that very much, I can probably count on one hand the amount of substringing there is in the ddnet codebase
20:38 < bridge> <learath2> substringing is just not a common operation for a game, nowhere near as common as it is in other problem spaces
20:38 < bridge> <heinrich5991> it's also string concatenation
20:39 < bridge> <learath2> I default to zero terminated strings and use lenght-prefixed ones where needed
20:39 < bridge> <heinrich5991> every use of strcat and similar are a lot faster with strings whose length you know
20:39 < bridge> <peter44h> strcat is another huge mistake
20:39 < bridge> <peter44h> You can often find quadratic code using it
20:40 < bridge> <ryozuki> guys just use assembly
20:41 < bridge> <peter44h> Why strcat doesn't just return a pointer to the end of the concatenated string is beyond me
20:41 < bridge> <peter44h> It's nothing but a performance W
20:41 < bridge> <ryozuki> https://www.zarl.dev/articles/enums
20:41 < bridge> <ryozuki> xd
20:41 < bridge> <ryozuki> https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Why-do-we-need-a-Undefined-Behavior-Annex-for-the-C-standard/post/1574397
20:42 < bridge> <peter44h> I'm sure it's better to just copy some amount of bytes at once rather than having to iterate by byte and check for a null terminator each time
20:42 < bridge> <peter44h> strcpy is useless and no one should be calling it
20:45 < bridge> <learath2> Thankfully modern cpus are very good at doing this operation in a vectorized manner, instead of pretending the 7 decades of legacy computing didn't exist
20:45 < bridge> <ryozuki> @heinrich5991 the mail bro with a offer sent another mail
20:45 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1213210442575384666/image.png?ex=65f4a545&is=65e23045&hm=c40e04ea308d25be164b598dbb4cd2c5aae5a984448e5c24c890c80399e7da62&
20:45 < bridge> <ryozuki> do u still think its automated?
20:45 < bridge> <heinrich5991> I think the first thing was automated, yes
20:45 < bridge> <heinrich5991> maybe you're talking to a human now
20:46 < bridge> <peter44h> How are you supposed to vectorize strcpy? Doesn't sound very amenable to it
20:46 < bridge> <heinrich5991> probably is vectorized in glibc, I'd guess
20:46 < bridge> <learath2> Same way you "vectorize" strlen, you do it in blocks
20:46 < bridge> <heinrich5991> still would guess memcpy performs better
20:47 < bridge> <peter44h> I'm pretty sure you'd have to read one byte at a time and can't read past the string
20:47 < bridge> <heinrich5991> vectorized strlen reads past
20:47 < bridge> <heinrich5991> not sure how to do strcpy though, writing past is bad
20:47 < bridge> <peter44h> That's allowed? Huh
20:47 < bridge> <miguilim> Does someone know why the SnapIDPool has a timeout system?
20:47 < bridge> <heinrich5991> "allowed"
20:48 < bridge> <peter44h> Just because I can't think how to do it doesn't mean it's not possible, obviously
20:49 < bridge> <learath2> Well you can just calculate `strlen` vectorized, and after that it's equivalent to whatever you'd do with length prefixed strings
20:49 < bridge> <heinrich5991> that soudns super bad for performance
20:49 < bridge> <heinrich5991> I doubt strcpy does that
20:49 < bridge> <heinrich5991> in glibc
20:49 < bridge> <learath2> I would be surprised if it doesn't do that, because as you said, writing past is bad
20:51 < bridge> <learath2> It's much better than going char by char for any string longer than some N atleast
20:51 < bridge> <heinrich5991> it abuses the fact that reading past end isn't bad
20:51 < bridge> <heinrich5991> wanna bet? ^^ haven't looked yet 😄
20:52 < bridge> <heinrich5991> as long as you stay within the same page
20:52 < bridge> <learath2> That going char by char is worse for most n > N? I don't know how we check
20:52 < bridge> <heinrich5991> no, glibc strcpy not precalculating the strlen
20:52 < bridge> <learath2> Oh, I'm fairly confident it would as I don't see a way to avoid the write past end either
20:53 < bridge> <Jupstar ✪> Wazzup, @robyt3 found anything?
20:54 < bridge> <heinrich5991> precalculate the strlen for hte entire string before starting to write?
20:54 < bridge> <ryozuki> @jupeyy_keks i have a video for u
20:54 < bridge> <learath2> Yep
20:54 < bridge> <heinrich5991> ok, I bet against
20:54 < bridge> <Jupstar ✪> Send in 1h
20:54 < bridge> <heinrich5991> let's figure it out, default impl for x86_64
20:54 < bridge> <Jupstar ✪> Then I'm
20:54 < bridge> <Jupstar ✪> home
20:54 < bridge> <learath2> let us check
20:54 < bridge> <ryozuki> https://www.youtube.com/watch?v=wE1ZoMGIZHM
20:55 < bridge> <ryozuki> its about gpus
20:56 < bridge> <Jupstar ✪> I think I heard about that too
20:57 < bridge> <Jupstar ✪> But dunno in which context
20:57 < bridge> <ryozuki> > George Francis Hotz, alias geohot, is an American security hacker, entrepreneur, and software engineer. He is known for developing iOS jailbreaks, reverse engineering the PlayStation 3, and for the subsequent lawsuit brought against him by Sony.
20:57 < bridge> <learath2> @heinrich5991 you win I guess 😄
20:57 < bridge> <Jupstar ✪> But it did  some mix of SIMD and normal processing
20:59 < bridge> <Jupstar ✪> Is it interesting? That podcast always sounds like some manager talks
20:59 < bridge> <Jupstar ✪> Usually trash
20:59 < bridge> <learath2> Unless I'm misreading the assembly it doesn't calculate the len first
20:59 < bridge> <ryozuki> ye because mostly george talks xd
20:59 < bridge> <heinrich5991> haven't figured it out yet
20:59 < bridge> <heinrich5991> which assembly impl do you look at?
20:59 < bridge> <heinrich5991> avx?
20:59 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1213214084237885521/image.png?ex=65f4a8aa&is=65e233aa&hm=f9f6b5bc140222da8e61d6db11b14902afff1a7d3321e168934e5d22ebc02ac6&
20:59 < bridge> <ryozuki> 95'
21:00 < bridge> <Jupstar ✪> Epyc
21:00 < bridge> <ryozuki> https://mcyoung.xyz/2023/08/01/llvm-ir/
21:01 < bridge> <Jupstar ✪> @ryozuki when do u give me a job at Intel or amd. Now that you are a famous compiler dev
21:04 < bridge> <Jupstar ✪> True
21:04 < bridge> <ryozuki> dont set too high bar for writing
21:04 < bridge> <ryozuki> because even if u think its trivial others may find it rly interesting
21:05 < bridge> <Jupstar ✪> I could write a blog about synchronization between render passes xd
21:05 < bridge> <ryozuki> do it
21:05 < bridge> <Jupstar ✪> Ez
21:05 < bridge> <zhn> i'll read anything you would write
21:05 < bridge> <zhn> just share the link kekw
21:05 < bridge> <ryozuki> also do one about how rust helped u
21:05 < bridge> <Jupstar ✪> I start on mobile
21:05 < bridge> <ryozuki> (and expect a blank check from rust-lang kek)
21:05 < bridge> <ryozuki> im joking
21:05 < bridge> <Jupstar ✪> Xd
21:05 < bridge> <ryozuki> Xd
21:07 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1213216080978251897/GHm0Cy8XYAEL328.png?ex=65f4aa86&is=65e23586&hm=a10393f94b2bf08a9a172f16ce440d5c146b7535587d66f022a103451a40b47e&
21:07 < bridge> <ryozuki> game news lmao
21:08 < bridge> <miguilim> can someone pls help me with this?
21:17 < bridge> <Jupstar ✪> In vulkan it's a bug to ignore memory alignment requirements, even if you don't allocate (aka split your existing allocation into sub allocations)
21:17 < bridge> <Jupstar ✪> 
21:17 < bridge> <Jupstar ✪> You have to dynamically fetch the alignment requirements for every memory you will use. I guess the compiler can guarantee Smth similar for aligned allocations and for unaligned falls back to a different method.
21:17 < bridge> <Jupstar ✪> 
21:17 < bridge> <Jupstar ✪> For strncpy it knows the size and can do a similar method
21:19 < bridge> <Jupstar ✪> Also it can provably recover overwritten values if it keeps it in the registers
21:30 < bridge> <Jupstar ✪> @learath2 
21:30 < bridge> <Jupstar ✪> https://freebsdfoundation.org/blog/a-sneak-peek-simd-enhanced-string-functions-for-amd64/
21:30 < bridge> <Jupstar ✪> This is interesting for you
21:30 < bridge> <Jupstar ✪> I clearly have nothing better to so right now xdd
21:32 < bridge> <Jupstar ✪> I wonder if their approach is really the fastest
21:32 < bridge> <Jupstar ✪> Dynamically checking for nul as part of the SIMD process sounds slow
21:34 < bridge> <Jupstar ✪> I should write the fastest strcpy using vk and make a blog post
21:45 < bridge> <Jupstar ✪> @learath2 if we assume using a alignment of 128 for every single allocation u ever do would lead to 20% faster str operations. would you say the wasted RAM is worth it?
21:57 < bridge> <heinrich5991> how would it affect whole-program performance?
21:59 < bridge> <Jupstar ✪> i dunno, if u dont allocate too much, probably quite few
22:01 < bridge> <Jupstar ✪> i guess the allocation size isn't significant enough, ofc considering it's not the limiting factor
22:01 < bridge> <Jupstar ✪> 
22:01 < bridge> <Jupstar ✪> but would be a funny experiment
22:01 < bridge> <Jupstar ✪> but now that learath is a vulkan pro, he'll need to accept that wasting memory gets into a completely new class :lol:
22:02 < bridge> <Jupstar ✪> the memory alignment requirements for some allocations are absurd
22:04 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1213230303875964940/image.png?ex=65f4b7c5&is=65e242c5&hm=babff6bde04ccb10d860a7204e86d28b4e7148cd627376fd088742305644a05e&
22:04 < bridge> <Jupstar ✪> one example
22:07 < bridge> <meloƞ> aw man sad i really wanted that
22:08 < bridge> <heinrich5991> oh wow 😮
22:16 < bridge> <Jupstar ✪> ah yeah, gpu programming is simpler but also harder bcs it's easier to not make it epicly fast
22:16 < bridge> <Jupstar ✪> 
22:16 < bridge> <Jupstar ✪> it's indeed interesting how CPUs compare to GPUs
22:17 < bridge> <Jupstar ✪> i should really learn vulkan compute
22:20 < bridge> <Jupstar ✪> ah lol now that makes sense
22:20 < bridge> <Jupstar ✪> but tbh
22:20 < bridge> <Jupstar ✪> 
22:20 < bridge> <Jupstar ✪> RISC vs CISC is an endless debate
22:20 < bridge> <Jupstar ✪> RISC processors than get extensions like SIMD opcodes to be faster
22:20 < bridge> <Jupstar ✪> and some day they are so bloated with extensions that they are just CISC xd
22:20 < bridge> <Jupstar ✪> the story of ARM
22:20 < bridge> <Jupstar ✪> xdddd
22:24 < bridge> <Jupstar ✪> @chairn btw read the convo, you an expert on this stuff, teach us
22:25 < bridge> <Jupstar ✪> @peter44h who are u btw? renamed or new?
22:25 < bridge> <Jupstar ✪> 
22:25 < bridge> <Jupstar ✪> i've only seen u recently
22:25 < bridge> <teero777> Can you make vulkan write directly to `/dev/fb0`? @jupeyy_keks
22:25 < bridge> <Jupstar ✪> i've no idea xdd
22:25 < bridge> <Jupstar ✪> probably not
22:26 < bridge> <teero777> just thinking running ddnet in tty
22:26 < bridge> <teero777> idk
22:26 < bridge> <zhn> VLIW!
22:26 < bridge> <Jupstar ✪> i mean u could copy stuff around
22:26 < bridge> <Jupstar ✪> but natively forcing vk... u'd probably need to write your own vulkan surface extension
22:26 < bridge> <Jupstar ✪> then _maybe_
22:28 < bridge> <peter44h> is there really a distinction now? that there are the "micro ops" that all the instructions turned to
22:28 < bridge> <peter44h> new
22:30 < bridge> <Jupstar ✪> tbh i dunno. maybe u could say GPUs are still "real" RISC
22:30 < bridge> <teero777> dafuq my rpi says it has no kernel but everything works fine?
22:30 < bridge> <teero777> what?
22:31 < bridge> <Jupstar ✪> kernels are so 21th century
22:31 < bridge> <Jupstar ✪> welcome to 22
22:31 < bridge> <teero777> yea
22:31 < bridge> <teero777> who needs those anyways
22:32 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1213237507744075776/IMG_20240301_223153890.jpg?ex=65f4be7a&is=65e2497a&hm=8143f10982f44b7f93aebe2f3a7bcb31d7ac1afa364d7e9dd2cb77b429492f2c&
22:32 < bridge> <teero777> It boots just fine
22:33 < bridge> <teero777> fk. how do i exit vim on an american layout???
22:33 < bridge> <teero777> wheres the double colon
22:34 < bridge> <teero777> okay i got it
22:34 < bridge> <Jupstar ✪> Is it rasp 4?
22:34 < bridge> <teero777> zero w
22:35 < bridge> <teero777> little boi
22:35 < bridge> <Jupstar ✪> Does it have vk driver or does it suck
22:35 < bridge> <teero777> i have no idea
22:35 < bridge> <Jupstar ✪> Zero sounds so powerless
22:36 < bridge> <Jupstar ✪> I'd not buy a washing machine without vk support again
22:36 < bridge> <teero777> you say its powerless but you can't even divide by it
22:36 < bridge> <Jupstar ✪> Ngl
22:36 < bridge> <teero777> still haven't got compute shaders to work :justatest:
22:36 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1213238543950942329/image.png?ex=65f4bf71&is=65e24a71&hm=2d5ce8951f3191e33d5f705baa4974180e4455dae2438106a29252f71cb6ec1d&
22:36 < bridge> <teero777> exactly
22:37 < bridge> <teero777> 0/0 = infinity
22:37 < bridge> <teero777> nvm 0/0 is not a number
22:37 < bridge> <teero777> 1/0 is inf
22:37 < bridge> <Jupstar ✪> Xddd
22:37 < bridge> <milkeeycat> i thought it would throw an error
22:37 < bridge> <milkeeycat> 🤷‍♂️
22:37 < bridge> <Jupstar ✪> Problem is
22:37 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1213238827355865098/image.png?ex=65f4bfb5&is=65e24ab5&hm=33c53223ed0314242e6cc3bf1e030ebc32defff3e545c1b578637b76d1a5282d&
22:38 < bridge> <Jupstar ✪> Math != computer science in this case
22:38 < bridge> <Jupstar ✪> 0 doesn't really exist, so they assume an infinite small number
22:38 < bridge> <milkeeycat> based pyson
22:38 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1213238976387883088/image.png?ex=65f4bfd8&is=65e24ad8&hm=a7f91f6fd5bf287b1f0b33dea1f0517fe522e4feafecce4d1972186ca493beda&
22:38 < bridge> <Jupstar ✪> And then it goes against inf
22:39 < bridge> <teero777> okay i have a little LCD screen connected to the gpio pins. can i somehow use it as a primary display? prbly need drivers but there isn't even a company name on the screen xd
22:39 < bridge> <teero777> gotta setup ssh first
22:39 < bridge> <teero777> brb
22:45 < bridge> <teero777> wait do i need a user?
22:45 < bridge> <Jupstar ✪> try 1.0/0.0
22:45 < bridge> <Jupstar ✪> integer is different
22:45 < bridge> <Jupstar ✪> ZeroDivisionError: float division by zero
22:45 < bridge> <milkeeycat> pyson doesnt think so
22:45 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1213240780076875826/image.png?ex=65f4c186&is=65e24c86&hm=520a0aea05a9a612677ca2d7298a235472f96f2cebcf2702698567f9e0dc409c&
22:45 < bridge> <Jupstar ✪> kek
22:45 < bridge> <Jupstar ✪> sudo apt purge python
22:45 < bridge> <Jupstar ✪> yes
22:46 < bridge> <Jupstar ✪> do you really want to uninstall your whole system?
22:46 < bridge> <Jupstar ✪> ah shit, here we go again
22:46 < bridge> <Jupstar ✪> well at least the root i guess? xd
22:47 < bridge> <teero777> root is there but i can't login to root over ssh it seems
22:47 < bridge> <teero777> i created a user and it works
22:48 < bridge> <Jupstar ✪> ```
22:48 < bridge> <Jupstar ✪> >>> 1.0/0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22:48 < bridge> <Jupstar ✪> Traceback (most recent call last):
22:48 < bridge> <Jupstar ✪>   File "<stdin>", line 1, in <module>
22:48 < bridge> <Jupstar ✪> ZeroDivisionError: float division by zero
22:48 < bridge> <Jupstar ✪> ```
22:48 < bridge> <Jupstar ✪> 
22:48 < bridge> <Jupstar ✪> not really bro, not really
22:48 < bridge> <Jupstar ✪> 😬
22:48 < bridge> <teero777> who could have guessed xd
22:48 < bridge> <teero777> just use brüche
22:49 < bridge> <Jupstar ✪> ```
22:49 < bridge> <Jupstar ✪> >>> 
22:49 < bridge> <Jupstar ✪> KeyboardInterrupt
22:49 < bridge> <Jupstar ✪> >>> 
22:49 < bridge> <Jupstar ✪> KeyboardInterrupt
22:49 < bridge> <Jupstar ✪> >>> 
22:49 < bridge> <Jupstar ✪> KeyboardInterrupt
22:49 < bridge> <Jupstar ✪> >>> 
22:49 < bridge> <Jupstar ✪> KeyboardInterrupt
22:49 < bridge> <Jupstar ✪> >>> quit
22:49 < bridge> <Jupstar ✪> Use quit() or Ctrl-D (i.e. EOF) to exit
22:49 < bridge> <Jupstar ✪> ```
22:49 < bridge> <Jupstar ✪> 
22:49 < bridge> <Jupstar ✪> LMAO
22:49 < bridge> <Jupstar ✪> python elite
22:51 < bridge> <Jupstar ✪> if user_arg == "quit" print message how to quit
22:51 < bridge> <Jupstar ✪> nice special casing
22:51 < bridge> <Jupstar ✪> nice special case`ing
23:02 < bridge> <teero777> ah i forgot to edit the config. there is an option to enable root
23:09 < bridge> <teero777> wait does ddnet even run on arm?
23:09 < bridge> <teero777> should be cuz of android version right?
23:14 < bridge> <peter44h> I think it does, just no builds are provided
23:14 < bridge> <Jupstar ✪> it does, but compile with -fsigned-char
23:14 < bridge> <teero777> thx
23:14 < bridge> <Jupstar ✪> we should add that to our cmake xd
23:14 < bridge> <Jupstar ✪> now that arm is more common
23:14 < bridge> <teero777> xDDDD
23:14 < bridge> <teero777> yea everyone plays ddnet on an rpi nowadays
23:17 < bridge> <Jupstar ✪> I meant arm cloud/vps
23:17 < bridge> <Jupstar ✪> But RPI is better than the PC of some ppl here
23:37 < bridge> <teero777> xDDD
23:37 < bridge> <peter44h> might well be for me (after I bricked my motherboard with a BIOS update)
23:37 < bridge> <teero777> sadge
23:37 < bridge> <peter44h> still angry about that
23:38 < bridge> <peter44h> haven't had the willpower to fix it
23:38 < bridge> <teero777> i bought the parts for my little project more than half a year ago. i hope it works and i don't have to buy new things
23:39 < bridge> <teero777> just putting an rpi zero w into my school calculator
23:39 < bridge> <teero777> imagine gpt on calculator xdd
23:40 < bridge> <peter44h> my current laptop is "indefinitely borrowed" from a school
23:40 < bridge> <teero777> xDD
23:40 < bridge> <teero777> nice
23:41 < bridge> <teero777> well, not nice but....
23:41 < bridge> <teero777> well actually not nice but....
23:41 < bridge> <peter44h> apparently it wasn't getting used so it's nice
23:59 < bridge> <learath2> Let me give you one last reason to use zero-terminated strings. They don't have a length limit
