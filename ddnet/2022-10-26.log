00:34 <+bridge> [ddnet] <deen> @Chairn you should have `bors r+` permissions now
00:53 <+bridge> [ddnet] <heinrich5991> https://github.com/rust-diplomat/diplomat
00:53 <+bridge> [ddnet] <heinrich5991> looks very interesting
01:47 <+bridge> [ddnet] <Learath2> I want to do some text "analysis", stuff like most used language, most used word, most used n-grams. I'm considering Lucene for it (technically PyLucene so I can avoid Java). Anyone else have experience with any other "database" of this sort? Probably more of a search engine than a db tbf
08:04 <+bridge> [ddnet] <Ryozuki> The tool requires literally 0 maintenance but ok
08:04 <+bridge> [ddnet] <Ryozuki> What a boomer
08:04 <+bridge> [ddnet] <Ryozuki> @Not Keks no labels :sadge:
08:05 <+bridge> [ddnet] <Ryozuki> https://github.com/quickwit-oss/tantivy
08:05 <+bridge> [ddnet] <Ryozuki> @Learath2
08:21 <+bridge> [ddnet] <Jupstar âœª> Does this also exist for issues?
08:27 <+bridge> [ddnet] <Ryozuki> you cant auto label issues because they dont change files
08:34 <+bridge> [ddnet] <Ryozuki> @heinrich5991 i see ur huffman rust impl is focused on looking C-like
08:35 <+bridge> [ddnet] <Ryozuki> i guess this is why most of the code there looks ugly  to me
08:35 <+bridge> [ddnet] <Ryozuki> also you dont like newlines right? you put every function as close as possible to each other
08:36 <+bridge> [ddnet] <Ryozuki> btw bit_vec is an amazing crate
08:39 <+bridge> [ddnet] <Ryozuki> why didnt you use a binaryheap from the std for the priority queue?
08:39 <+bridge> [ddnet] <Ryozuki> and why the focus on fixed size arrays vs using std collections while reserving capacity?
09:02 <+bridge> [ddnet] <ReiTW> ls
09:02 <+bridge> [ddnet] <ReiTW> ups
09:08 <+ChillerDragon> lmao ryo nagging heinrich about rust code again :D
09:08 <+ChillerDragon> @Ryozuki stop bullying
09:08 <+bridge> [ddnet] <Jupstar âœª> Too bad, we need some nice gpt ai that does everything for us
09:10 <+bridge> [ddnet] <Ryozuki> I just cant help it
09:10 <+bridge> [ddnet] <Ryozuki> Xd
09:11 <+bridge> [ddnet] <Ryozuki> @Not Keks but we had a tool for prs that does it and hein closed it
09:11 <+bridge> [ddnet] <Ryozuki> :bluestripe:
09:11 <+bridge> [ddnet] <Ryozuki> .
09:12 <+bridge> [ddnet] <Jupstar âœª> Well i cannot judge how well it worked, but if it worked well it's a loss
09:12 <+bridge> [ddnet] <Jupstar âœª> Also code design bitching most annoying thing xd
09:12 <+bridge> [ddnet] <Ryozuki> U set labels according to which files changes
09:12 <+bridge> [ddnet] <Ryozuki> Well it sets the labels auto
09:13 <+bridge> [ddnet] <Jupstar âœª> No life maintainers that need to find a reason to trigger a review so that xddd
09:13 <+bridge> [ddnet] <Ryozuki> Idk but heinrich code style in rust os smth i dislike xd
09:13 <+bridge> [ddnet] <Jupstar âœª> Do
09:13 <+bridge> [ddnet] <Ryozuki> But i didnt open a pr
09:13 <+bridge> [ddnet] <Ryozuki> For that
09:13 <+bridge> [ddnet] <Jupstar âœª> He did the same in ddnet btw
09:14 <+bridge> [ddnet] <Jupstar âœª> With the new lives
09:14 <+bridge> [ddnet] <Jupstar âœª> Lines
09:14 <+bridge> [ddnet] <Ryozuki> Yeah
09:14 <+bridge> [ddnet] <Ryozuki> But i wont fight the authority
09:14 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
09:14 <+bridge> [ddnet] <Ryozuki> And ddnet is cpp which is ugly already
09:15 <+bridge> [ddnet] <Jupstar âœª> Chill
09:16 <+bridge> [ddnet] <Jupstar âœª> But yeah Heinrich is dictator
09:16 <+bridge> [ddnet] <Jupstar âœª> But chill
09:18 <+bridge> [ddnet] <Ryozuki> He asks motivation for my prs but he himself doesnt give any on most  he does
09:19 <+bridge> [ddnet] <Ryozuki> Chill but things end up going his way 90% of the time
09:20 <+bridge> [ddnet] <Ryozuki> Or 99
09:20 <+bridge> [ddnet] <Jupstar âœª> Anyway don't be mad bcs of these labels. We can still always add them if we feel like it
09:20 <+bridge> [ddnet] <Jupstar âœª> Yeah 99.99%
09:21 <+bridge> [ddnet] <Ryozuki> But the pr adds a ci action that does it auto
09:21 <+bridge> [ddnet] <Ryozuki> It helps the future
09:22 <+bridge> [ddnet] <Ryozuki> You gotta fight ur prs till the end, its how u get things added
09:22 <+bridge> [ddnet] <Ryozuki> I had to do this endlessly for telegun
09:22 <+bridge> [ddnet] <Ryozuki> :BASED:
09:22 <+bridge> [ddnet] <Jupstar âœª> But theoretically that tool should be able to do it for previous prs too.. maybe it can't rn. But in the end it analyses the files changed^^
09:23 <+bridge> [ddnet] <Ryozuki> It uses ci actions to trigger itself on the pr so
09:23 <+bridge> [ddnet] <Ryozuki> But a tool that uses the api and checks changed files on prs should be able to do it
10:16 <+bridge> [ddnet] <Learath2> Fixed size arrays are sexy, heap allocations not, get rekt zoomer. Pls hmu if you need any more coding advice
10:17 <+bridge> [ddnet] <Matodor> ðŸ¥¹
10:28 <+bridge> [ddnet] <Ryozuki> Nein
11:19 <+bridge> [ddnet] <heinrich5991> hm. I probably read it before, but I only looked at the documentation I wrote while implementing it
11:20 <+bridge> [ddnet] <heinrich5991> newlines push other code off the screen. unless I actively want to separate something, I won't add a newline
11:20 <+bridge> [ddnet] <heinrich5991> because I want to avoid allocations, I wanted to show that I can make the code as allocation-less as the C code
11:22 <+bridge> [ddnet] <heinrich5991> you're interested in these labels and would actually use them?
11:23 <+bridge> [ddnet] <heinrich5991> I preferred swift closing over letting the PR rot for a couple of months while I don't merge it
11:28 <+bridge> [ddnet] <heinrich5991> can you give an example?
11:42 <+bridge> [ddnet] <Ryozuki> They also improve readability
11:42 <+bridge> [ddnet] <Ryozuki> I guess we will never be on friendly terms when it comes to style
11:43 <+bridge> [ddnet] <Ryozuki> Yeah closing a pr is a way to make sure it truly dies and rots
11:45 <+bridge> [ddnet] <heinrich5991> did I not respond to your comment (regardless of whether it was closed)?
11:45 <+bridge> [ddnet] <Ryozuki> You did
11:45 <+bridge> [ddnet] <Ryozuki> But it makes everyone else instantly lose interest on it
11:45 <+bridge> [ddnet] <Ryozuki> And nobody looks at closed prs
11:46 <+bridge> [ddnet] <heinrich5991> I look at every comment posted on the ddnet/ddnet repo
11:46 <+bridge> [ddnet] <heinrich5991> I guess you mean 'most people except those subscribed'
11:47 <+bridge> [ddnet] <Ryozuki> A stack allocation is still an allocation right? And if u store the tree in a vector, whether stack allocated or not, it has the same cache locality which is what matters here for perf right?
11:47 <+bridge> [ddnet] <Ryozuki> I rly wanna know if it being allocated on the stack gives visible perf improvements
11:47 <+bridge> [ddnet] <heinrich5991> a stack allocation is basically free
11:48 <+bridge> [ddnet] <Ryozuki> The allocation of the tree mostly happens once given a proper capacity
11:48 <+bridge> [ddnet] <Ryozuki> It should be free as in relative time spend compressing or not
11:48 <+bridge> [ddnet] <heinrich5991> it's done when the function is entered, the only thing that changes is the operand of the stack subtraction used for creating the function frame
11:48 <+bridge> [ddnet] <heinrich5991> it might be negligible
11:49 <+bridge> [ddnet] <heinrich5991> but you're redefining free here ^^
11:49 <+bridge> [ddnet] <heinrich5991> but yea, using a vector there wouldn't degrade performance
11:49 <+bridge> [ddnet] <Ryozuki> Is your inpl limited by a frequency table of size N
11:49 <+bridge> [ddnet] <Ryozuki> ?
11:50 <+bridge> [ddnet] <Ryozuki> Can it be a freq table with 1000000 different values?
11:50 <+bridge> [ddnet] <heinrich5991> no, only 256
11:50 <+bridge> [ddnet] <Ryozuki> Impl*
11:50 <+bridge> [ddnet] <Ryozuki> I see
11:50 <+bridge> [ddnet] <heinrich5991> it's basically limited to compressing bytes like the teeworlds impl
11:51 <+bridge> [ddnet] <Ryozuki> Well mine is more general oriented, i also wanna try make it streaming
11:51 <+bridge> [ddnet] <heinrich5991> ah ðŸ™‚
11:52 <+bridge> [ddnet] <heinrich5991> ah, one benefit of the static array thing: I can compile in the table used for TW, no need to build it at runtime: https://github.com/heinrich5991/libtw2/blob/ded871091bb984f0419cac605b85ecf438c6fbcd/huffman/src/instances/teeworlds.rs
11:52 <+bridge> [ddnet] <Ryozuki> Does ur impl handpe the funny case with a freq table with only 1 element?
11:52 <+bridge> [ddnet] <Ryozuki> I found mine didnt with proptesting
11:52 <+bridge> [ddnet] <Ryozuki> Fixed it xd
11:52 <+bridge> [ddnet] <heinrich5991> no, it can only compress bytes ^^
11:52 <+bridge> [ddnet] <heinrich5991> it only accepts frequency tables of the size 256
11:52 <+bridge> [ddnet] <Ryozuki> Not less ?
11:52 <+bridge> [ddnet] <Ryozuki> I see
11:53 <+bridge> [ddnet] <heinrich5991> not less
11:53 <+bridge> [ddnet] <heinrich5991> have you benchmarked your compression against the default implementation? mine was slower. I didn't implement the LUT optimization
11:54 <+bridge> [ddnet] <Ryozuki> Mine has a look up table to find the   leaf node indexes on the tree vector
11:54 <+bridge> [ddnet] <Ryozuki> Idk if thats the LUT
11:55 <+bridge> [ddnet] <heinrich5991> LUT is lookup table, ye
11:56 <+bridge> [ddnet] <heinrich5991> basically, the teeworlds implementation has a map (table) for 8-bit sequences to the symbol they represent
11:56 <+bridge> [ddnet] <Ryozuki> And a binary heap for the priority queue
11:57 <+bridge> [ddnet] <Ryozuki> The wiki said to use 2 priority queues, but i did it with 1
11:57 <+bridge> [ddnet] <heinrich5991> is this for building the huffman representation?
11:57 <+bridge> [ddnet] <Ryozuki> Yeah
11:57 <+bridge> [ddnet] <heinrich5991> ah
11:57 <+bridge> [ddnet] <Ryozuki> I used rc refcell to store the nodes at the queue and the tree vector at the same time
11:57 <+bridge> [ddnet] <Ryozuki> But maybe it can be avoided, but idk
11:58 <+bridge> [ddnet] <Ryozuki> https://github.com/edg-l/rustyman/blob/f8e093a19be2da26a4701ac0cc2845e5fe9f60b8/src/lib.rs#L128
11:58 <+bridge> [ddnet] <Ryozuki> my first time implementing such thing so xd
12:02 <+bridge> [ddnet] <heinrich5991> you could try benchmarking your version against the TW implementation
12:04 <+bridge> [ddnet] <Ryozuki> Yeah
12:15 <+bridge> [ddnet] <Ryozuki> Now that i think about it
12:16 <+bridge> [ddnet] <Ryozuki> Limiting it to bytes only makes sense
12:16 <+bridge> [ddnet] <Ryozuki> Im dumb
12:16 <+bridge> [ddnet] <Ryozuki> Iirc the freq table will be 256 and the tree will be 256 + 256 - 1 right?
12:18 <+bridge> [ddnet] <Ryozuki> ` A finished tree has up to n n leaf nodes and n âˆ’ 1 n-1 internal nodes. A Huffman tree that omits unused symbols produces the most optimal code lengths. `
12:18 <+bridge> [ddnet] <Ryozuki> ` A finished tree has up to n leaf nodes and n-1 internal nodes. A Huffman tree that omits unused symbols produces the most optimal code lengths. `
12:19 <+bridge> [ddnet] <Jupstar âœª> I haven't yet thought about them
12:30 <+bridge> [ddnet] <heinrich5991> yup
13:20 <+bridge> [ddnet] <Ryozuki> I went to stack based tree and table
13:20 <+bridge> [ddnet] <Ryozuki> Perf improved
13:21 <+bridge> [ddnet] <Ryozuki> 18% but ther may be some noise
13:21 <+bridge> [ddnet] <Ryozuki> But i think i did another optimization
13:21 <+bridge> [ddnet] <Learath2> Go back to heap based. Stack is for old people like me
13:22 <+bridge> [ddnet] <Ryozuki> The thing about knowing beforehand the size of the tree helps
13:22 <+bridge> [ddnet] <Learath2> Maybe allocate on the cloud instead ðŸ¤”
13:22 <+bridge> [ddnet] <Ryozuki> @Learath2 why hate the heap so much
13:22 <+bridge> [ddnet] <Chairn> use real tree and plant them in your garden with the correct alignment ðŸ™‚
13:23 <+bridge> [ddnet] <Chairn> use real trees and plant them in your garden with the correct alignment ðŸ™‚
13:23 <+bridge> [ddnet] <Learath2> Because I'm old duh. Even with modern arena allocators heap allocations are slow
13:23 <+bridge> [ddnet] <Ryozuki> I made the lut be inside the tree too, first 256 elements inside the tree vec correspond to the bytes
13:23 <+bridge> [ddnet] <heinrich5991> if it works on the stack, why not do it there. it's at least as performant, maybe even more performant
13:23 <+bridge> [ddnet] <Ryozuki> Idk if correct but my tests passed
13:24 <+bridge> [ddnet] <Ryozuki> E.g to quickly find the leaf node for byte x i index on the tree[x]
13:24 <+bridge> [ddnet] <Ryozuki> Cuz i built it with that in mind
13:25 <+bridge> [ddnet] <Ryozuki> Learning huffman was fun
13:25 <+bridge> [ddnet] <heinrich5991> I also have some quick access for that, probably
13:26 <+bridge> [ddnet] <Learath2> Huffman is a pretty nice learning tool. Simple enough to understand and implement, yet still good enough to be practically useful
13:26 <+bridge> [ddnet] <Ryozuki> Yeah
13:26 <+bridge> [ddnet] <Ryozuki> Iirc it goes near the shannon limit
13:26 <+bridge> [ddnet] <Ryozuki> For smth
13:26 <+bridge> [ddnet] <Ryozuki> I forgot
13:27 <+bridge> [ddnet] <heinrich5991> it's optimal for symbols that are multiples of bits long
13:27 <+bridge> [ddnet] <heinrich5991> arithmetic coding is the optimal one if you ignore that restriction
13:27 <+bridge> [ddnet] <heinrich5991> but it has had some patent issues. the patents expired recently, I think
13:28 <+bridge> [ddnet] <Learath2> Patents <a:pepeW:818574752892452925>
13:29 <+bridge> [ddnet] <heinrich5991> only an issue in the free united states of america
13:29 <+bridge> [ddnet] <heinrich5991> europe doesn't have software patents
13:29 <+bridge> [ddnet] <heinrich5991> (although the USA tries to sneak them into trade agreements every once in a while)
13:30 <+bridge> [ddnet] <Ryozuki> Sneaking in freedom
13:31 <+bridge> [ddnet] <Learath2> If only we could restrict people from using knowledge we could be freer in europe aswell
14:23 <+ChillerDragon> politics
14:28 <+bridge> [ddnet] <Learath2> Sorry
15:03 <+ChillerDragon> is it legal to say that the input packet is a keepalive packet?
15:13 <+bridge> [ddnet] <Chairn> hypocrisy at its finest
15:13 <+bridge> [ddnet] <Chairn> https://www.reddit.com/r/technology/comments/ydovb9/apple_confirms_the_iphone_is_getting_usbc_but/
15:25 <+bridge> [ddnet] <Ryozuki> <https://github.com/edg-l/rustyman/commit/7bbc325eb7a440f618dfee0915fba8113f0a97f8>
15:25 <+bridge> [ddnet] <Ryozuki> the commit to use more stack
15:25 <+bridge> [ddnet] <Ryozuki> instead of the bad evil heap
15:46 <+bridge> [ddnet] <heinrich5991> no, there's also an actual keep-alive packet, ChillerDargon
15:52 <+bridge> [ddnet] <Ryozuki> Its ilegal and ill call the cops
16:47 <+ChillerDragon> thanks @heinrich5991 :) but does sending input replace the keep alive? in my dump it looks like the inputs are being sent by the client even if i am afk
17:40 <+bridge> [ddnet] <ReiTW> discord sux
17:40 <+bridge> [ddnet] <ReiTW> https://cdn.discordapp.com/attachments/293493549758939136/1034854146119057560/unknown.png
17:41 <+bridge> [ddnet] <ReiTW> I am the only one with that tf
17:41 <+bridge> [ddnet] <Ryozuki> @ReiTW its new
17:41 <+bridge> [ddnet] <ReiTW> oh ok they added profile theme
17:41 <+bridge> [ddnet] <Ryozuki> U can change color
17:41 <+bridge> [ddnet] <Ryozuki> Mine is p cool
17:41 <+bridge> [ddnet] <ReiTW> again a so useful feature
17:41 <+bridge> [ddnet] <Ryozuki> Its nitro
17:41 <+bridge> [ddnet] <Ryozuki> I like it
17:41 <+bridge> [ddnet] <ReiTW> still useless
17:41 <+bridge> [ddnet] <Ryozuki> I can dab on the plebs
17:42 <+bridge> [ddnet] <Ryozuki> :BASED:
17:42 <+bridge> [ddnet] <ReiTW> damn
17:42 <+bridge> [ddnet] <ReiTW> https://cdn.discordapp.com/attachments/293493549758939136/1034854603008790538/unknown.png
17:43 <+bridge> [ddnet] <Ryozuki> xd
17:51 <+bridge> [ddnet] <heinrich5991> ChillerDragon: the keep-alive packet is only sent when no other packet is sent in 1? second
17:51 <+bridge> [ddnet] <heinrich5991> thus the input packets do keep the connection alive
18:00 <+ChillerDragon> okay thanks
18:08 <+bridge> [ddnet] <Ravie Senpai> Juil
18:33 <+bridge> [ddnet] <7mzom alonso> how can but multeasy map in my server
18:33 <+bridge> [ddnet] <7mzom alonso> :)
18:37 <+bridge> [ddnet] <Ravie Senpai> #questions
21:58 <+bridge> [ddnet] <ReiTW> @Ryozuki wtf
21:58 <+bridge> [ddnet] <ReiTW> https://cdn.discordapp.com/attachments/293493549758939136/1034918898614665277/unknown.png
21:58 <+bridge> [ddnet] <Ryozuki> oh yeah
21:58 <+bridge> [ddnet] <Ryozuki> its where they make the battleships
21:58 <+bridge> [ddnet] <Ryozuki> its just floof tho
21:58 <+bridge> [ddnet] <Ryozuki> but fun
22:00 <+bridge> [ddnet] <ReiTW> I wonder how you can find zones where they come to fight
22:00 <+bridge> [ddnet] <ReiTW> or when pirates takes control over one of the battleship
22:00 <+bridge> [ddnet] <Ryozuki> go to a system at war
22:00 <+bridge> [ddnet] <Ryozuki> filter
22:00 <+bridge> [ddnet] <Ryozuki> btw
22:00 <+bridge> [ddnet] <Ryozuki> https://inara.cz
22:00 <+bridge> [ddnet] <Ryozuki> this is ur web for all things elite
22:00 <+bridge> [ddnet] <Ryozuki> https://inara.cz/elite/cmdr/323299/
22:00 <+bridge> [ddnet] <Ryozuki> this is me
22:02 <+bridge> [ddnet] <ReiTW> can't find myself
22:02 <+bridge> [ddnet] <ReiTW> lo
22:02 <+bridge> [ddnet] <ReiTW> lol
22:03 <+bridge> [ddnet] <Ryozuki> cuz u need to make a account
22:03 <+bridge> [ddnet] <ReiTW> ah
22:03 <+bridge> [ddnet] <Ryozuki> and link
22:03 <+bridge> [ddnet] <ReiTW> lazty
22:03 <+bridge> [ddnet] <ReiTW> lazy
22:03 <+bridge> [ddnet] <Ryozuki> its the best for trade routes
22:03 <+bridge> [ddnet] <Ryozuki> and blueprints
22:03 <+bridge> [ddnet] <ReiTW> have you ever attempted to do the golden road
22:03 <+bridge> [ddnet] <ReiTW> idk how it is called in english
22:03 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1034920332949200976/unknown.png
22:04 <+bridge> [ddnet] <Ryozuki> nah
22:04 <+bridge> [ddnet] <ReiTW> the famous very long jumps to be rich lmao
22:04 <+bridge> [ddnet] <Ryozuki> yeah but u dont rly get rich
22:04 <+bridge> [ddnet] <Ryozuki> trading is fastest
22:04 <+bridge> [ddnet] <ReiTW> ig i'll make an acc
22:04 <+bridge> [ddnet] <Ryozuki> i get 30 million on each run
22:04 <+bridge> [ddnet] <Ryozuki> from a to b and back
22:05 <+bridge> [ddnet] <Ryozuki> i made about 230 million per hour?
22:05 <+bridge> [ddnet] <ReiTW> tf
22:05 <+bridge> [ddnet] <Ryozuki> but there are ways to get more
22:05 <+bridge> [ddnet] <Ryozuki> i think stacking missions
22:05 <+bridge> [ddnet] <Ryozuki> to kill
22:05 <+bridge> [ddnet] <Ryozuki> but u gotta do research
22:06 <+bridge> [ddnet] <ReiTW> k k
22:06 <+bridge> [ddnet] <ReiTW> we'll test that out lol wtf
22:06 <+bridge> [ddnet] <Ryozuki> but i get 30 million cuz i trade with my space cow
22:06 <+bridge> [ddnet] <Ryozuki> aka type-9 heavy
22:06 <+bridge> [ddnet] <ReiTW> ah
22:07 <+bridge> [ddnet] <ReiTW> I have an anaconda and my mate a imperial cutter
22:07 <+bridge> [ddnet] <Ryozuki> i got this
22:07 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1034921175387738142/unknown.png
22:07 <+bridge> [ddnet] <ReiTW> yea I see what it is
22:15 <+bridge> [ddnet] <ReiTW> https://cdn.discordapp.com/attachments/293493549758939136/1034923236158361771/unknown.png
22:15 <+bridge> [ddnet] <ReiTW> rtx be like
22:43 <+bridge> [ddnet] <Anime.pdf> @Ryozuki im a bit confused by crates.io ui, can you tell me where i can find source code of this crate: https://crates.io/crates/ddnet-map-gen
22:44 <+bridge> [ddnet] <Ryozuki> its cuz i didnt link it on the cargo.toml cuz i forgot xd
22:44 <+bridge> [ddnet] <Anime.pdf> forgor ðŸ’€
22:44 <+bridge> [ddnet] <Ryozuki> https://github.com/edg-l/ddnet-map-gen
22:44 <+bridge> [ddnet] <Anime.pdf> thanks
22:47 <+bridge> [ddnet] <Yek> I want to host something just like that
23:08 <+bridge> [ddnet] <Meekrioz> I think i will never understand aggregations
23:08 <+bridge> [ddnet] <Meekrioz> :PU_pepeFlowerSad:
