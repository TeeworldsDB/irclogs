00:08 <+ddnet-discord> <heinrich5991> @HMH now here
03:47 < ddnet-commits> [ddnet] Jupeyy opened pull request #917: Add DPI awareness support for MSVC compiling for Win8.1 and Win10 (master...master) https://git.io/vdNzN
20:37 <@heinrich5991> Learath2: https://github.com/ddnet/ddnet/pull/910#issuecomment-338499164
21:32 <+ddnet-discord> <Learath2> damn infinite scroll on appveyor :/
21:32 <+ddnet-discord> <Learath2> @heinrich5991 canmerge
21:38 <+ddnet-discord> <Learath2> except one asyncio test not passing on windows 64bit build???
21:44 < ddnet-commits> [ddnet] heinrich5991 closed pull request #910: Run the server on CI (master...dd_pr_sanity) https://git.io/vd54D
21:44 <+ddnet-discord> <Learath2> @heinrich5991 not using bors anymore?
21:44 <@heinrich5991> didn't want to push this non-squashed :D
21:45 <@heinrich5991> 6 commits for a 8 line change
21:45 <+ddnet-discord> <Learath2> hmm need our own bors that just checks if it compiles after a merge and has the ability to squash
21:45 <@heinrich5991> gonna ask in the forums if squashing would be possible
21:46 <+ddnet-discord> <Learath2> did you figure out what was going on that time it timed out and why it needs staging.tmp?
21:46 <+ddnet-discord> <heinrich5991> the timeout is simple
21:46 <+ddnet-discord> <heinrich5991> mac travis took too long
21:46 <+ddnet-discord> <heinrich5991> we could just increase the timeout
21:46 <+ddnet-discord> <Learath2> oh it actually did timeout ðŸ˜„
21:46 <+ddnet-discord> <heinrich5991> https://forum.bors.tech/t/what-is-the-staging-tmp-branch-used-for/65/2
21:48 <+ddnet-discord> <Learath2> makes sense
21:48 <+ddnet-discord> <heinrich5991> sounded like that if we host our own bors, we could code that feature without `staging.tmp`
21:50 <+ddnet-discord> <heinrich5991> https://forum.bors.tech/t/would-squashing-be-possible/69
21:50 <+ddnet-discord> <heinrich5991> @Learath2 do you have concerns about using bors?
21:51 <+ddnet-discord> <Learath2> It kinda spams my github activity and this channel
21:53 <+ddnet-discord> <Learath2> but I'm all for having master always passing CI
21:54 <+ddnet-discord> <jao> if it's about this channel being spammed you can move github logs to its own channel
21:55 <+ddnet-discord> <Learath2> It's kinda nice getting the one notification for the merge tho ðŸ˜ƒ
21:58 <+ddnet-discord> <Savander> i don't see sense to make a channel for github logs
21:59 <+ddnet-discord> <Savander> No one will check
22:00 <+ddnet-discord> <jao> why not? ðŸ˜„
22:01 <+ddnet-discord> <Savander> you have log stream on github directly, and i bet most people just stay on one channel
22:01 <+ddnet-discord> <Savander> boris spammed, but without him it was k
22:13 <+ddnet-discord> <Learath2> this ghost diff is so huge...
22:13 <+ddnet-discord> <heinrich5991> my teehistorian diff wasn't small either, sorry for that btw ^^
22:13 <+ddnet-discord> <Learath2> well yours was quite readable as I kinda knew what it was trying
22:14 <+ddnet-discord> <Learath2> if(IsDDRace(&ServerInfo)) StartTick--; // the client recognizes the start one tick earlier than ddrace servers
22:14 <+ddnet-discord> <Learath2> `if(IsDDRace(&ServerInfo)) StartTick--; // the client recognizes the start one tick earlier than ddrace servers`
22:14 <+ddnet-discord> <Learath2> this one has magic like that
22:14 <+ddnet-discord> <heinrich5991> :/
22:14 <+ddnet-discord> <heinrich5991> still using `IsDDRace`
22:15 <+ddnet-discord> <Learath2> if only redix was around to kinda give me a walkthrough
22:16 <+ddnet-discord> <heinrich5991> maybe you could ask him to get on the discord server (or IRC)
22:16 <+ddnet-discord> <heinrich5991> would also be a good idea for the blocker thing
22:17 <+ddnet-discord> <jao> he is here
22:17 <+ddnet-discord> <heinrich5991> oh, indeed
22:17 <+ddnet-discord> <Learath2> @redix o/
22:19 <+ddnet-discord> <heinrich5991> @Learath2 did you see my comment on your use-after-free thing?
22:19 <+ddnet-discord> <Learath2> I'm thinking of using `shared_ptr` on that
22:20 <+ddnet-discord> <Learath2> If you want I can also introduce a lock instead of that
22:20 <+ddnet-discord> <heinrich5991> idc, `shared_ptr` isn't bad I'd think
22:21 <+ddnet-discord> <Learath2> as soon as I figure out how to use them
22:21 <+ddnet-discord> <Learath2> ðŸ˜›
22:23 <+ddnet-discord> <heinrich5991> it's not that hard ^^
22:23 <+ddnet-discord> <heinrich5991> sth specific you want to know or should I just give a quick example? ^^
22:23 <+ddnet-discord> <Learath2> quick example pls
22:25 <+ddnet-discord> <Learath2> `s_RenderingStartedByServer` feels like there should be a message somewhere but It's calculated only using local variables :/
22:27 <+ddnet-discord> <heinrich5991> ```
22:27 <+ddnet-discord> <heinrich5991> #include <memory>
22:27 <+ddnet-discord> <heinrich5991> std::shared_ptr<int> pShared = std::make_shared<int>(1);
22:28 <+ddnet-discord> <heinrich5991> std::shared_ptr<int> pSecondPointer = pShared;
22:28 <+ddnet-discord> <heinrich5991> ```
22:28 <+ddnet-discord> <heinrich5991> @Learath2 now `pShared` and `pSecondPointer` point to the same object
22:28 <+ddnet-discord> <heinrich5991> which will be deallocated when both references are gone
22:29 <+ddnet-discord> <Learath2> how does it deallocate? 'delete'?
22:29 <+ddnet-discord> <Learath2> how does it deallocate? `delete`?
22:29 <+ddnet-discord> <heinrich5991> yes
22:29 <+ddnet-discord> <heinrich5991> does that matter?
22:30 <+ddnet-discord> <Learath2> I have a pointer to I`FetchTask`, which actually points to an allocated `CFetchTask`. Would delete work in this case?
22:30 <+ddnet-discord> <Learath2> I have a pointer to `IFetchTask`, which actually points to an allocated `CFetchTask`. Would delete work in this case?
22:30 <+ddnet-discord> <heinrich5991> if the destructor is virtual in `IFetchTask`, yes
22:32 <+ddnet-discord> <Learath2> only virtual or pure virtual?
22:32 <+ddnet-discord> <heinrich5991> virtual is sufficient
22:33 <+ddnet-discord> <Learath2> and if it's virtual and I don't define a destructor for CFetchTask it'll all work out fine right?
22:33 <+ddnet-discord> <Learath2> and if it's virtual and I don't define a destructor for `CFetchTask` it'll all work out fine right?
22:33 <+ddnet-discord> <heinrich5991> should be
22:33 <+ddnet-discord> <Learath2> I'll give it a go
22:34 <+ddnet-discord> <Learath2> btw I hope @redix's blocker stuff works fine, always wanted to get rid of all that ugly code ðŸ˜›
23:19 <+ddnet-discord> <Learath2> @heinrich5991 it needs to be held in a shared_ptr for this to actually work right?
23:19 <+ddnet-discord> <heinrich5991> yes
23:20 <+ddnet-discord> <Learath2> I don't like it :/
23:20 <+ddnet-discord> <heinrich5991> struct MyFancyJobHandle { std::shared_ptr<IFetchTask> m_pTask; } ?
23:20 <+ddnet-discord> <heinrich5991> `struct MyFancyJobHandle { std::shared_ptr<IFetchTask> m_pTask; }` ?
23:21 <+ddnet-discord> <Learath2> yeah exactly too many wrappers ðŸ˜›
23:22 <+ddnet-discord> <Learath2> also the user sets his to nullptr to indicate he doesn't give 2shits anymore, if the user doesn't give a shit anymore `IFetchTask::Abort()` needs to be called
23:23 <+ddnet-discord> <Learath2> and it still won't fix my problem b/c as soon as I'm out of FetcherThread the fetcher has also given up his shared_ptr
23:24 <+ddnet-discord> <HMH> hmm, the problem is that the jobpool does not take ownership of whatever you give it I guess ?
23:24 <+ddnet-discord> <Learath2> yeah
23:25 <+ddnet-discord> <Learath2> the job needs to be a seperate entity from the CFetchTask
23:25 <+ddnet-discord> <Learath2> at which point i have to solve the same problem again
23:25 <+ddnet-discord> <Learath2> the CJob needs to be a seperate entity from the CFetchTask
23:26 <+ddnet-discord> <Learath2> damn object oriented multithreaded programming
23:26 <+ddnet-discord> <HMH> give the jobpool a shared pointer allocated on heap and let it delete this pointer using another shared pointer within the task ðŸ˜„
23:26 <+ddnet-discord> <HMH> or rewrite the jobpool to make it take ownership of the stuff you give to it
23:27 <+ddnet-discord> <Learath2> whatever I do introduces some complexity to CJobPool
23:27 <+ddnet-discord> <HMH> maybe someone can also have a look at this: https://github.com/ddnet/ddnet/pull/897
23:28 <+ddnet-discord> <heinrich5991> @HMH have you thought about where we can use that? ^^
23:28 <+ddnet-discord> <heinrich5991> it currently just adds a queue that is used nowhere
23:28 <+ddnet-discord> <HMH> finally do /save and /load right
23:28 <+ddnet-discord> <HMH> and maybe also the jobpool thing
23:30 <+ddnet-discord> <Learath2> if one thread only writes to a variable and another thread only reads from it, is there really undefined behaviour involved? especially if the read is only a boolean check?
23:30 <+ddnet-discord> <heinrich5991> yes
23:30 <+ddnet-discord> <heinrich5991> AFAIK, that is
23:30 <+ddnet-discord> <heinrich5991> it needs to be an atomic access somehow if you do that
23:30 <+ddnet-discord> <Learath2> do you see a nice way out of this mess?
23:31 <+ddnet-discord> <heinrich5991> use a lock if you don't want to use `shared_ptr`
23:31 <+ddnet-discord> <Learath2> don't want is sth different to can't possibru
23:32 <+ddnet-discord> <Learath2> even after all the wrapping with shared_ptr there is still the CJob I need to take care of, it's either part of CFetchTask and it's deleted before the job is marked done causing a use after free, or it's dynamically allocated which means I'm leaking it which means I either need a callback or need CJobPool to hold a shared_ptr to it aswell
23:37 <+Learath2> thanks for the insight... I'll figure it out
