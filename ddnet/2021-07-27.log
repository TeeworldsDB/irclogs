08:19 <+bridge> [ddnet] <HellClown> kangarro
08:58 <+bridge> [ddnet] <Learath2> Anyone have any idea how I can figure out what some program is blocking on?
09:03 <+bridge> [ddnet] <Learath2> pro-tip-update: not if you are io bound :
09:03 <+bridge> [ddnet] <Learath2> (
09:04 <+bridge> [ddnet] <Learath2> fs bound*
09:05 <+bridge> [ddnet] <Learath2> I so hoped exfat would be enough but the insane number of files we have in data/ger killed it
09:05 <+bridge> [ddnet] <Learath2> each time it tries to check if a file exists it now needs to travel down the linked list of files
09:09 <+bridge> [ddnet] <Learath2> I have a 64 megabyte directory entry, beat that ðŸ˜›
13:10 <+bridge> [ddnet] <Learath2> Q: Does anyone know whether I can create a ext4 filesystem inside a file?
13:11 <+bridge> [ddnet] <heinrich5991> I see no reason why not
13:12 <+bridge> [ddnet] <Learath2> mh, @heinrich5991 do you know any fs with good cross platform support?
13:14 <+bridge> [ddnet] <heinrich5991> any *good* fs? ^^
13:14 <+bridge> [ddnet] <heinrich5991> fat32 has very good cross platform support
13:14 <+bridge> [ddnet] <heinrich5991> dunno about exfat, maybe that?
13:14 <+bridge> [ddnet] <Learath2> yes ðŸ˜„
13:14 <+bridge> [ddnet] <Learath2> Exfat uses linked lists, it's absolutely awful for lookups
13:14 <+bridge> [ddnet] <heinrich5991> what does cross-platform mean for you? windows/linux? or windows/macos/linux?
13:15 <+bridge> [ddnet] <heinrich5991> perhaps even ntfs?
13:15 <+bridge> [ddnet] <Learath2> windows/macos/linux is preferable but I'm okay with macos/linux
13:15 <+bridge> [ddnet] <Learath2> maybe zfs has a macOS port, it's born in bsd too
13:15 <+bridge> [ddnet] <heinrich5991> it does, I think
13:15 <+bridge> [ddnet] <heinrich5991> just windows has bad support
13:15 <+bridge> [ddnet] <heinrich5991> lemme google
13:16 <+bridge> [ddnet] <Learath2> windows needs minimal support, if I can browse files and copy, files on windows that's a win, I'd mainly be using this on macOS and linux
13:16 <+bridge> [ddnet] <heinrich5991> https://openzfsonwindows.org/
13:17 <+bridge> [ddnet] <heinrich5991> https://cdn.discordapp.com/attachments/293493549758939136/869538887721177108/logo.png
13:17 <+bridge> [ddnet] <gerdoe> :kek:
13:17 <+bridge> [ddnet] <Learath2> I guess zfs it is, ext4 on macOS is annoying af
13:17 <+bridge> [ddnet] <heinrich5991> try it first!
13:17 <+bridge> [ddnet] <heinrich5991> before settling
13:18 <+bridge> [ddnet] <Learath2> it will take me so long to copy these files off of the exfat partition ðŸ˜¦
13:21 <+bridge> [ddnet] <Patiga> @Learath2 if its not too much of a hassle, could you build the twmap binaries from source (master branch)?
13:21 <+bridge> [ddnet] <Patiga> I want to get a fix in but I don't want to spam versions
13:21 <+bridge> [ddnet] <Learath2> Sure
13:22 <+bridge> [ddnet] <Patiga> awesome :)
13:24 <+bridge> [ddnet] <Learath2> I'm trying to decide whether to upgrade to Big Sur or not
13:28 <+bridge> [ddnet] <Learath2> exfat partitions can't be resized....
13:29 <+bridge> [ddnet] <Learath2> @Patiga updated to master
13:29 <+bridge> [ddnet] <Patiga> nice!
15:28 <+bridge> [ddnet] <Ryozuki> @Patiga u know u can add -alpha.0
15:28 <+bridge> [ddnet] <Ryozuki> -alpha.1
15:28 <+bridge> [ddnet] <Ryozuki> -beta.0
15:28 <+bridge> [ddnet] <Ryozuki> for versions you dont think are ready
15:28 <+bridge> [ddnet] <Ryozuki> on cargo
15:28 <+bridge> [ddnet] <Ryozuki> they will be marked as pre released
15:29 <+bridge> [ddnet] <Ryozuki> and wont show up by default
15:29 <+bridge> [ddnet] <Patiga> ah I didn't know that, interesting
15:29 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/869572323890565170/unknown.png
15:30 <+bridge> [ddnet] <Ryozuki> https://crates.io/crates/paypal-rs
15:30 <+bridge> [ddnet] <Ryozuki> example
15:30 <+bridge> [ddnet] <Patiga> although my problem isn't that I don't think that those versions are incomplete, its just that I don't see the point in spamming them
15:31 <+bridge> [ddnet] <Ryozuki> i think if u have a fix and itsi mportant it should be released tho
15:33 <+bridge> [ddnet] <Patiga> eh I don't think anyone except for the ddnet bot is using that right now, and its not improbable that I need to do another small fix again in the next few days
15:33 <+bridge> [ddnet] <Ryozuki> ah ok
15:34 <+bridge> [ddnet] <Patiga> but yeah, if it was used more a quick release would be good
15:43 <+bridge> [ddnet] <Learath2> @heinrich5991 for some reason libtw2 doesn't expose `server_version` in th files
17:14 <+bridge> [ddnet] <arch1t3cht30> https://github.com/e2tools/e2tools has some userspace programs to interact with ext2/ext3 filesystems in files
17:15 <+bridge> [ddnet] <arch1t3cht30> but ofc you can also mkfs or mount any file just like you do /dev/sd?? nodes
18:08 <+bridge> [ddnet] <Ryozuki> someone knows a good name for a "CMS" focused on blogging (and not a static generator) made in rust
18:08 <+bridge> [ddnet] <Ryozuki> project
18:18 <+bridge> [ddnet] <NeXus> sentencepress
18:18 <+bridge> [ddnet] <NeXus> SentencePress
18:19 <+bridge> [ddnet] <NeXus> SentencePress :Kapp:
18:35 <+bridge> [ddnet] <Ryozuki> :monkaS:
19:25 <+bridge> [ddnet] <ScReeNy> Static content Rust element extention Network yielder
19:26 <+bridge> [ddnet] <Sorah> Request:  Editor feature that allows  to duplicate existing layers  but not what is mapped in them just the layer values
19:31 <+bridge> [ddnet] <Ryozuki> secure password hashing :monkaS:
19:31 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/869633002290937896/unknown.png
19:32 <+bridge> [ddnet] <gerdoe> oh brand-new(tm) hashing algo xd
19:33 <+bridge> [ddnet] <Ryozuki> @gerdoe from 2015
19:33 <+bridge> [ddnet] <chillerdragon> @Ryozuki\: for wat u code pw hashing in rust?
19:33 <+bridge> [ddnet] <Ryozuki> u should use it
19:33 <+bridge> [ddnet] <Ryozuki> whenever u can
19:33 <+bridge> [ddnet] <Ryozuki> @gerdoe https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
19:34 <+bridge> [ddnet] <Ryozuki> https://www.password-hashing.net/
19:34 <+bridge> [ddnet] <gerdoe> do you know any *better* and newer algo xd
19:34 <+bridge> [ddnet] <Ryozuki> no
19:34 <+bridge> [ddnet] <Ryozuki> argon2 is the best
19:34 <+bridge> [ddnet] <Ryozuki> maybe nsa has something hidden
19:34 <+bridge> [ddnet] <gerdoe> that's why i called it brand-new
19:34 <+bridge> [ddnet] <Ryozuki> argon2 is brand new
19:34 <+bridge> [ddnet] <Ryozuki> by crypto standards
19:34 <+bridge> [ddnet] <gerdoe> ye
19:35 <+bridge> [ddnet] <chillerdragon> ?
19:36 <+bridge> [ddnet] <Ryozuki> @ChillerDragon do u see why i asked a name for a cms earlier
19:36 <+bridge> [ddnet] <Ryozuki> xd
19:36 <+bridge> [ddnet] <Ryozuki> im coding it rn
19:36 <+bridge> [ddnet] <chillerdragon> watrs a cms
19:36 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
19:37 <+bridge> [ddnet] <Ryozuki> content management system
19:37 <+bridge> [ddnet] <Ryozuki> the most famous is wordpress
19:37 <+bridge> [ddnet] <Ryozuki> im making my own in rust
19:37 <+bridge> [ddnet] <chillerdragon> content management system
19:37 <+bridge> [ddnet] <chillerdragon> ah sure
19:37 <+bridge> [ddnet] <chillerdragon> i was about to say use wordpress xd
19:37 <+bridge> [ddnet] <Ryozuki> rustpress ftw
19:38 <+bridge> [ddnet] <chillerdragon> coming sooon https://github.com/edg-l/rustpress
19:38 <+bridge> [ddnet] <chillerdragon> image.png
19:38 <+bridge> [ddnet] <chillerdragon> https://cdn.discordapp.com/attachments/293493549758939136/869634948942954566/image.png
19:38 <+bridge> [ddnet] <chillerdragon> lol
19:39 <+bridge> [ddnet] <Ryozuki> xd
19:39 <+bridge> [ddnet] <chillerdragon> its fake domain!
19:39 <+bridge> [ddnet] <chillerdragon> u scammer?
19:39 <+bridge> [ddnet] <Ryozuki> yes
19:40 <+bridge> [ddnet] <chillerdragon> Ryo = indian tech support
19:40 <+bridge> [ddnet] <Ryozuki> lol no
19:41 <+bridge> [ddnet] <Ryozuki> ryo = pro based rust programmer
19:41 <+bridge> [ddnet] <Ryozuki> :greenthing:
19:42 <+bridge> [ddnet] <gerdoe> based
19:43 <+bridge> [ddnet] <Learath2> I have found another thing that needs immediate attention in rust
19:43 <+bridge> [ddnet] <gerdoe> @heinrich5991 when we are using `net_addr_from_str(...)` for ipv4 parsing, should we set `addr->port = 0` when no port is given?
19:44 <+bridge> [ddnet] <Learath2> The Read trait needs a bit of a redesign to expose whether it's buffered and needs a way to read into uninitialized buffers while at it
19:44 <+bridge> [ddnet] <chillerdragon> if u set port to 0 u get uid 0 and have a local root exploit over your NAT
19:44 <+bridge> [ddnet] <Ryozuki> nothing can be uninit in rust
19:45 <+bridge> [ddnet] <Ryozuki> also its not buffeded unless u use bufwriter
19:45 <+bridge> [ddnet] <Ryozuki> bufreader
19:45 <+bridge> [ddnet] <gerdoe> same with ipv6 right?
19:45 <+bridge> [ddnet] <Ryozuki> https://doc.rust-lang.org/std/io/struct.BufWriter.html
19:45 <+bridge> [ddnet] <Learath2> Yes einstein. Thus I said it needs attention :D
19:45 <+bridge> [ddnet] <Ryozuki> no its perfect
19:46 <+bridge> [ddnet] <Learath2> You are so drunk on koolaid :D
19:46 <+bridge> [ddnet] <Ryozuki> xd
19:46 <+bridge> [ddnet] <Ryozuki> im messing with u
19:46 <+bridge> [ddnet] <Ryozuki> but i dont see anything wrong rn tbh
19:46 <+bridge> [ddnet] <Ryozuki> i know when im using a bufwriter
19:46 <+bridge> [ddnet] <Ryozuki> and there is https://doc.rust-lang.org/std/mem/union.MaybeUninit.html
19:46 <+bridge> [ddnet] <chillerdragon> @Ryozuki\:  is not the only weeb doing rust https://www.youtube.com/watch?v=7LX6WIEtfog
19:46 <+bridge> [ddnet] <Ryozuki> omg chillerdragon
19:46 <+bridge> [ddnet] <Ryozuki> ur video embed is too big
19:47 <+bridge> [ddnet] <chillerdragon> axaxaxax
19:47 <+bridge> [ddnet] <Learath2> If you can't know whether something implementing Read is buffered. So your apis performance characteristics vary widely
19:47 <+bridge> [ddnet] <Ryozuki> @Learath2
19:47 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/869637084816736336/unknown.png
19:47 <+bridge> [ddnet] <Ryozuki> !!!!!!
19:47 <+bridge> [ddnet] <chillerdragon> not only my video embed is big if you know what i mean ;)
19:47 <+bridge> [ddnet] <Ryozuki> how u cant know?
19:47 <+bridge> [ddnet] <Ryozuki> the idiom here is to just accept a object that has a Write impl
19:47 <+bridge> [ddnet] <Ryozuki> and user decided to use bufwrite
19:47 <+bridge> [ddnet] <Ryozuki> or
19:47 <+bridge> [ddnet] <Ryozuki> u can wrap it urself
19:47 <+bridge> [ddnet] <Ryozuki> u always know if its buffered
19:48 <+bridge> [ddnet] <Ryozuki> user can decide to use*
19:48 <+bridge> [ddnet] <Learath2> The initialized thing heinrich already wrote a solution to and the std uses an adhoc variant of it. You can initialize the buffer as you go to preserve safety
19:49 <+bridge> [ddnet] <Ryozuki> to this day i have yet to use unsafe
19:49 <+bridge> [ddnet] <Ryozuki> :greenthing:
19:49 <+bridge> [ddnet] <Learath2> You can always wrap, but then you need to accept double wrapping too, which increases overhead. serde_json is rolling an extra function to get around it
19:49 <+bridge> [ddnet] <gerdoe> use alkahest instead serde_json!11!
19:50 <+bridge> [ddnet] <Ryozuki> wat
19:50 <+bridge> [ddnet] <Learath2> Who is an alkahest?
19:50 <+bridge> [ddnet] <Ryozuki> you can achieve zero copy json serialization with serde iirc
19:50 <+bridge> [ddnet] <Ryozuki> serde already is perfomant
19:50 <+bridge> [ddnet] <Learath2> Xingese alkahestry to deserialize json?
19:51 <+bridge> [ddnet] <Ryozuki> https://crates.io/crates/alkahest
19:51 <+bridge> [ddnet] <Ryozuki> i guess he means this
19:51 <+bridge> [ddnet] <Ryozuki> > Key differences of Alkahest from other popular serialization crates is zero-overhead serialization and zero-copy lazy deserialization.
19:51 <+bridge> [ddnet] <Learath2> Heh, check out how the buffered reader issue makes serde json 10 times slower than pythons shitty json lib :D
19:52 <+bridge> [ddnet] <Ryozuki> sources?
19:52 <+bridge> [ddnet] <Learath2> It's an edge case. If you load the file entirely first it faaar outperforms python
19:53 <+bridge> [ddnet] <Learath2> https://github.com/serde-rs/json/issues/160
19:53 <+bridge> [ddnet] <Learath2> Maybe specializations will get stable some day, that'd help this too
19:54 <+bridge> [ddnet] <Ryozuki> btw serde_json::from_str is the one u will end up using most
19:54 <+bridge> [ddnet] <Ryozuki> specially in web apps
19:54 <+bridge> [ddnet] <Ryozuki> iirc
19:55 <+bridge> [ddnet] <Learath2> And rust#78485 is the uninit thing I mentioned. I used heinrichs nice wrapper for now
19:55 <+bridge> [ddnet] <Ryozuki> im 2 lazy to check
19:55 <+bridge> [ddnet] <Ryozuki> if u dont give a link
19:55 <+bridge> [ddnet] <Ryozuki> :greenthing:
19:55 <+bridge> [ddnet] <gerdoe> https://github.com/zakarumych/alkahest
19:55 <+bridge> [ddnet] <gerdoe> https://crates.io/crates/alkahest
19:55 <+bridge> [ddnet] <gerdoe> 
19:55 <+bridge> [ddnet] <gerdoe> https://github.com/zakarumych/rust_serialization_benchmark
19:55 <+bridge> [ddnet] <Ryozuki> kill the embeds
19:55 <+bridge> [ddnet] <Ryozuki> xd
19:55 <+bridge> [ddnet] <gerdoe> u
19:56 <+bridge> [ddnet] <Learath2> https://github.com/rust-lang/rust/issues/78485 ur like chiller ryo. Big lazy
19:56 <+bridge> [ddnet] <Ryozuki> considering the amount of features serde has
19:56 <+bridge> [ddnet] <Ryozuki> and how general it is
19:56 <+bridge> [ddnet] <Ryozuki> its impressive its this fast
19:56 <+bridge> [ddnet] <Ryozuki> its some black magic
19:57 <+bridge> [ddnet] <Learath2> Macromagix and some very tight optimization to limit the amount of llvm ir emited to begin with
19:57 <+bridge> [ddnet] <Ryozuki> > The current design of the Read trait is nonoptimal as it requires that the buffer passed to its various methods be pre-initialized even though the contents will be immediately overwritten. This RFC proposes an interface to allow implementors and consumers of Read types to robustly and soundly work with uninitialized buffers.
19:57 <+bridge> [ddnet] <Ryozuki> ok i agree
19:57 <+bridge> [ddnet] <Ryozuki> i hope they implement something
19:58 <+bridge> [ddnet] <Ryozuki> good thing about rust being a community
19:58 <+bridge> [ddnet] <Learath2> I browsed around it serde source a bit today. Learned some very nice rust trixx
19:58 <+bridge> [ddnet] <Ryozuki> :greenthing:
19:58 <+bridge> [ddnet] <gerdoe> oh lol he didn't insert his own crate as benchmark object
19:58 <+bridge> [ddnet] <Ryozuki> i should too
19:58 <+bridge> [ddnet] <Ryozuki> but im 2 lazy
19:58 <+bridge> [ddnet] <Ryozuki> its true when u work coding u lose some passion to do it in free time
19:58 <+bridge> [ddnet] <Ryozuki> but i still code rust
19:58 <+bridge> [ddnet] <Ryozuki> :feelsbadman:
19:59 <+bridge> [ddnet] <Ryozuki> lmao
19:59 <+bridge> [ddnet] <gerdoe> actualyy he sent me results
19:59 <+bridge> [ddnet] <gerdoe> xd
19:59 <+bridge> [ddnet] <gerdoe> so thought it's here
19:59 <+bridge> [ddnet] <Ryozuki> :monkaS: not enough tabs
19:59 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/869640240011292692/unknown.png
19:59 <+bridge> [ddnet] <gerdoe> actually he sent me results
20:00 <+bridge> [ddnet] <Ryozuki> @Learath2 cool post about the future rust features
20:00 <+bridge> [ddnet] <Ryozuki> https://lazy.codes/posts/awesome-unstable-rust-features/
20:00 <+bridge> [ddnet] <gerdoe> tabs gang xd
20:00 <+bridge> [ddnet] <gerdoe> https://cdn.discordapp.com/attachments/293493549758939136/869640380998619136/unknown.png
20:00 <+bridge> [ddnet] <Ryozuki> lmao
20:00 <+bridge> [ddnet] <Ryozuki> 2 small
20:00 <+bridge> [ddnet] <Ryozuki> press ctrl-w
21:37 <+bridge> [ddnet] <Learath2> 15 damn hours I ran rsync and it's not even close to being done with copying
21:37 <+bridge> [ddnet] <Learath2> GOD
21:38 <+bridge> [ddnet] <lynn> are they not SSDs?
21:38 <+bridge> [ddnet] <Learath2> No it's not even the drives speed that's the issue...
21:38 <+bridge> [ddnet] <Learath2> it's exfat
21:38 <+bridge> [ddnet] <lynn> oh right
21:38 <+bridge> [ddnet] <lynn> :kek:
21:38 <+bridge> [ddnet] <lynn> kinda funny how for a while that was the flash drive standard
21:38 <+bridge> [ddnet] <lynn> or was
21:39 <+bridge> [ddnet] <lynn> and it's just painfully slow
21:39 <+bridge> [ddnet] <Learath2> I think I'll just download it again, there is no way this copy from disk to disk will end
21:39 <+bridge> [ddnet] <Learath2> nor is there anyway I can copy it back
21:39 <+bridge> [ddnet] <lynn> doesn't btrfs also suck tho
21:39 <+bridge> [ddnet] <lynn> is ext4 king
21:39 <+bridge> [ddnet] <Learath2> don't say anything about btrfs, sounds like something @Ryozuki would like
21:41 <+bridge> [ddnet] <Ryozuki> i heard its not as mature, i just used it once to have a shared folder with windows
21:41 <+bridge> [ddnet] <Ryozuki> i didnt want to use a propietary format like ntfs
21:41 <+bridge> [ddnet] <Ryozuki> hail stallman
21:42 <+bridge> [ddnet] <lynn> i think it has security/stability issues last i checked
21:42 <+bridge> [ddnet] <lynn> but maybe it's better now
21:43 <+bridge> [ddnet] <Ryozuki> ext4 isnt perfect either
21:43 <+bridge> [ddnet] <Ryozuki> filesystems are hard
21:44 <+bridge> [ddnet] <Learath2> I'm this close to just keeping a chart of offsets on the wall and writing to the disk raw
21:45 <+bridge> [ddnet] <Ryozuki> :monkaS:
21:45 <+bridge> [ddnet] <lynn> how large is it
21:45 <+bridge> [ddnet] <Ryozuki> @Learath2 exfat uses linked lists right?
21:45 <+bridge> [ddnet] <Ryozuki> so btrfs uses b trees
21:45 <+bridge> [ddnet] <lynn> b trees :POG:
21:46 <+bridge> [ddnet] <Ryozuki> reading some kernel lore i read stuff like red black tree
21:46 <+bridge> [ddnet] <Ryozuki> gotta figure out what it is
21:47 <+bridge> [ddnet] <Ryozuki> https://en.wikipedia.org/wiki/Red%E2%80%93black_tree
21:47 <+bridge> [ddnet] <Ryozuki> must be this
21:47 <+bridge> [ddnet] <Ryozuki> > In computer science, a redâ€“black tree is a kind of self-balancing binary search tree. Each node stores an extra bit representing "color" ("red" or "black"), used to ensure that the tree remains balanced during insertions and deletions
21:47 <+bridge> [ddnet] <Ryozuki> fancy names
21:49 <+bridge> [ddnet] <lynn> yea red-black trees are cool
21:49 <+bridge> [ddnet] <lynn> im a sucker for anything strictly efficient but annoying to implement
21:50 <+bridge> [ddnet] <lynn> i think we learned to do red-black trees on paper in college
21:50 <+bridge> [ddnet] <lynn> but i have no idea how now lol
21:50 <+bridge> [ddnet] <Ryozuki> i always get the urge to impl these kind of stuff but rust is nto friendly for this
21:50 <+bridge> [ddnet] <Ryozuki> and i dont want to touch c right now
21:51 <+bridge> [ddnet] <lynn> all languages suck
21:51 <+bridge> [ddnet] <lynn> use zig/nim
21:52 <+bridge> [ddnet] <Ryozuki> no
21:52 <+bridge> [ddnet] <Ryozuki> rust is the best
21:53 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/869668772775075930/unknown.png
21:53 <+bridge> [ddnet] <Ryozuki> :greenthing:
21:55 <+bridge> [ddnet] <lynn> bar to entry is too high, and im not even sure it's entirely worthwhile when competing languages have improved safety/correctness alongside it
21:56 <+bridge> [ddnet] <lynn> still, rust is the best for what it set out to achieve, but i think if you're working on a project that requires people with a general CS background, it makes sense to use something else
21:56 <+bridge> [ddnet] <lynn> my opinion will probably change a bit when i learn rust, but i doubt it will be by much
21:57 <+bridge> [ddnet] <Ryozuki> which
21:57 <+bridge> [ddnet] <Ryozuki> lol i think ppl with a general cs background fit even more
21:58 <+bridge> [ddnet] <Ryozuki> i didnt like rust the first time i tried it, some months passed and i tried it again
21:58 <+bridge> [ddnet] <Ryozuki> i got hooked
22:00 <+bridge> [ddnet] <lynn> i actually might be wrong about this, my impression was that nim and zig had some safety improvements but i find nothing about safety specifically when i search for it
22:00 <+bridge> [ddnet] <Ryozuki> if u tried c++
22:00 <+bridge> [ddnet] <Ryozuki> u should learn rust
22:01 <+bridge> [ddnet] <Ryozuki> u will know why ppl love it
22:01 <+bridge> [ddnet] <lynn> i dont know either lol
22:01 <+bridge> [ddnet] <Ryozuki> rip
22:01 <+bridge> [ddnet] <lynn> my background is java, python, js, php, lua
22:01 <+bridge> [ddnet] <Ryozuki> the thing about rust is that it provides safety while having c++ speed
22:01 <+bridge> [ddnet] <lynn> eh python first
22:01 <+bridge> [ddnet] <Ryozuki> c*
22:01 <+bridge> [ddnet] <lynn> and then it's in order
22:01 <+bridge> [ddnet] <Ryozuki> they say programmers mature towards static languages
22:01 <+bridge> [ddnet] <lynn> i mean tons of languages have c speed nowadays.
22:01 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
22:02 <+bridge> [ddnet] <lynn> saying "use rust" because c speed is silly
22:02 <+bridge> [ddnet] <lynn> crystal, nim, zig
22:02 <+bridge> [ddnet] <Ryozuki> use rust cuz its safe
22:02 <+bridge> [ddnet] <lynn> right yea
22:02 <+bridge> [ddnet] <lynn> but im just saying
22:02 <+bridge> [ddnet] <Ryozuki> if u dont use unsafe and do a program in rust it wont crash
22:02 <+bridge> [ddnet] <lynn> speed is no longer really an issue
22:02 <+bridge> [ddnet] <Ryozuki> u can also have thread safety
22:02 <+bridge> [ddnet] <lynn> tons of compiled langs now that outperform c even
22:02 <+bridge> [ddnet] <Ryozuki> and the type system is amazing
22:02 <+bridge> [ddnet] <Ryozuki> ? which
22:02 <+bridge> [ddnet] <Ryozuki> thats not true
22:03 <+bridge> [ddnet] <Ryozuki> most compiled langs use gc
22:03 <+bridge> [ddnet] <lynn> in like 5 years people will be like why do we hold c to be the gold standard
22:03 <+bridge> [ddnet] <Ryozuki> go
22:03 <+bridge> [ddnet] <Sherlock Holmes [EU]> hi  I have a question Who can look private
22:03 <+bridge> [ddnet] <Ryozuki> anyway i gotta focus on my dota ranked
22:03 <+bridge> [ddnet] <Ryozuki> brb
22:05 <+bridge> [ddnet] <lynn> i gotta get back to work but i saw some benchmarks that showed crystal was really fast
22:05 <+bridge> [ddnet] <lynn> also if you want a technical, totally not practical case, for numeric/array computations fortran is still better than c
22:17 <+bridge> [ddnet] <Learath2> One of the linked lists is 64 megabytes now
22:17 <+bridge> [ddnet] <Learath2> writing a new file takes about a minute to traverse down
22:17 <+bridge> [ddnet] <lynn> jeez
22:20 <+bridge> [ddnet] <Learath2> just 1.5 million files to kill exfat
22:20 <+bridge> [ddnet] <Learath2> I'm like so close to just deleting the entire thing
22:21 <+bridge> [ddnet] <lynn> i would not hold it against you
22:21 <+bridge> [ddnet] <lynn> what data is on it?
22:21 <+bridge> [ddnet] <Learath2> the first 3 years of teehistorian
22:21 <+bridge> [ddnet] <lynn> .......ehhhhhhh xD
22:21 <+bridge> [ddnet] <lynn> who knows if it will be useful
22:22 <+bridge> [ddnet] <Learath2> deen and heinrich also have copies, so it wouldn't be gone either, but at this point I wasted 3 days messing around with this and am annoyed
22:23 <+bridge> [ddnet] <gerdoe> are you on vacation currently?
22:25 <+bridge> [ddnet] <Learath2> I'm about to go on one and if I don't archive some files before I go my server will be very sad
22:25 <+bridge> [ddnet] <Learath2> no disk space = no good
22:26 <+bridge> [ddnet] <Learath2> I wrote 3 tools to parse and collect information about files inside exfat directories, so there is that
23:40 <+bridge> [ddnet] <gerdoe> c-enum is pain wooaah
23:44 <+bridge> [ddnet] <gerdoe> literally thought about splitting enums in mapitems.h
23:44 <+bridge> [ddnet] <gerdoe> and now stuck on validating enums
