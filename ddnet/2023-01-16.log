05:56 <+bridge> <yep> free robux https://discord.gg/PjuGcHgpzD (you can check #proof) (****100% REAL****)
05:56 <+bridge> <yep> free robux https://discord.gg/PjuGcHgpzD (you can check #proof) (****100% REAL****)
05:56 <+bridge> <yep> free robux https://discord.gg/PjuGcHgpzD (you can check #proof) (****100% REAL****)
09:10 <+bridge> <ReiTW> who moved developer channel
09:10 <+bridge> <ReiTW> wasn't that far down
09:12 <+bridge> <Jupstar ‚ú™> This isn't developer. Please use #showroom
09:47 <+bridge> <uwu> oh no now i have to retrain my muscle memory to enter developer channel without seeing any tower clips
09:58 <+bridge> <Ryozuki> Ye sucks
10:44 <+ChillerDragon> ctrl+k is a think isnt it?
10:45 <+ChillerDragon> imagine using a mouse
11:07 <+bridge> <ReiTW> that's a main feature on Windows :giga_chad:
12:05 <+bridge> <fokkonaut> üê≠
13:46 <+bridge> <Wartoz> You might consider adding a key other than the spacebar in the new version to open the page of the editor's game layer.
13:46 <+bridge> <Wartoz> -Like Alt.ü§®
14:41 <+bridge> <Ryozuki> https://misskey-hub.net/en/
14:41 <+bridge> <Ryozuki> leaving this for later
16:20 <+bridge> <Ryozuki> @Jupeyy_Keks since c++ puts the struct,class fields in the order u define them, u think reordering the fields, can achieve better pef?
16:20 <+bridge> <Ryozuki> perf
16:20 <+bridge> <Jupstar ‚ú™> Yes
16:20 <+bridge> <Ryozuki> rust automatically uses the best layout to have less padding and alignment
16:20 <+bridge> <Jupstar ‚ú™> But smith different
16:20 <+bridge> <Jupstar ‚ú™> Smth
16:20 <+bridge> <Ryozuki> i think we dont put thought in ddnet
16:20 <+bridge> <Ryozuki> when putting fields
16:20 <+bridge> <Ryozuki> xd
16:21 <+bridge> <Jupstar ‚ú™> If compiler can reorder it then it can also make it more cache friendly
16:21 <+bridge> <Ryozuki> i think biggest to smallest
16:21 <+bridge> <Ryozuki> is the easy way
16:21 <+bridge> <Jupstar ‚ú™> Less padding alignment  is not always best tho
16:21 <+bridge> <Jupstar ‚ú™> Sometimes the opposite is true actually
16:22 <+bridge> <Ryozuki> well less padding idk
16:22 <+bridge> <Ryozuki> i think it chooses the best layout
16:22 <+bridge> <Ryozuki> idk if it has less padding xd
16:22 <+bridge> <Jupstar ‚ú™> When it knows stuff is accessed concurrently it can create so much alignment that no cache flushes are needed
16:23 <+bridge> <Jupstar ‚ú™> GPUs always have insane alignments xd
16:23 <+bridge> <Ryozuki> ```
16:23 <+bridge> <Ryozuki> The only data layout guarantees made by this representation are those required for soundness. They are:
16:23 <+bridge> <Ryozuki> 
16:23 <+bridge> <Ryozuki>     The fields are properly aligned.
16:23 <+bridge> <Ryozuki>     The fields do not overlap.
16:23 <+bridge> <Ryozuki>     The alignment of the type is at least the maximum alignment of its fields.
16:23 <+bridge> <Ryozuki> 
16:23 <+bridge> <Ryozuki> Formally, the first guarantee means that the offset of any field is divisible by that field's alignment. The second guarantee means that the fields can be ordered such that the offset plus the size of any field is less than or equal to the offset of the next field in the ordering. The ordering does not have to be the same as the order in which the fields are specified in the declaration of the type.
16:23 <+bridge> <Ryozuki> 
16:23 <+bridge> <Ryozuki> Be aware that the second guarantee does not imply that the fields have distinct addresses: zero-sized types may have the same address as other fields in the same struct.
16:23 <+bridge> <Ryozuki> 
16:23 <+bridge> <Ryozuki> There are no other guarantees of data layout made by this representation.
16:23 <+bridge> <Ryozuki> ```
16:24 <+bridge> <Ryozuki> these are the only guarantees
16:24 <+bridge> <Ryozuki> in rust
16:24 <+bridge> <Jupstar ‚ú™> Yes it was a really good idea from rust to design it like this
16:24 <+bridge> <deen> You can use `clang-reorder-fields`
16:24 <+bridge> <Jupstar ‚ú™> And static linking
16:24 <+bridge> <Learath2> Mh, idk if one can rigorously define an "optimal" layout. A lot of bizarre alignment considerations, cache considerations must be made. The nature of the access is also probably important
16:25 <+bridge> <Ryozuki> well i guess
16:25 <+bridge> <Ryozuki> rust doesnt define it as the most optimal, it just says these are the guarantees
16:25 <+bridge> <Jupstar ‚ú™> But still per architecture it can assume certain stuff
16:25 <+bridge> <Ryozuki> aka u must not rely on the order u define them
16:25 <+bridge> <Ryozuki> unlike c
16:25 <+bridge> <Jupstar ‚ú™> Arch=native for enjoyers
16:26 <+bridge> <Ryozuki> based
16:26 <+bridge> <Learath2> You can benchmark to see if it's optimal, but I don't think you can just by knowing the architecture guess the best layout unless you are like the designer of the cpu
16:28 <+bridge> <Learath2> Does rust allow iteration of struct fields btw? I don't remember
16:30 <+bridge> <Ryozuki> wdym by that
16:30 <+bridge> <Ryozuki> like python __dict__?
16:30 <+bridge> <Ryozuki> xd
16:30 <+bridge> <Ryozuki> `__dict__`
16:30 <+bridge> <Ryozuki> @Learath2 u can do this at compile time with macros
16:30 <+bridge> <Ryozuki> ast macros ez
16:31 <+bridge> <Ryozuki> since macros operato on ast, u can know whats a struct field
16:31 <+bridge> <Learath2> Yeah, or js ones
16:31 <+bridge> <Ryozuki> serde is so powerful and fast cuz that
16:31 <+bridge> <Ryozuki> proc macros*
16:31 <+bridge> <Learath2> So you just generate an iterator that yields them in order?
16:32 <+bridge> <Ryozuki> idk what serde does
16:32 <+bridge> <Ryozuki> but they need to do what u want to serialize fieldss
16:32 <+bridge> <Ryozuki> iirc
16:32 <+bridge> <Ryozuki> https://github.com/dtolnay/syn/issues/516#issuecomment-431637005
16:32 <+bridge> <Ryozuki> read this
16:33 <+bridge> <Ryozuki> written by the magician
16:33 <+bridge> <Ryozuki> who wrote syn, quote
16:34 <+bridge> <Ryozuki> i am always amazed by how powerful serde is
16:34 <+bridge> <Ryozuki> and its perfomant af
16:34 <+bridge> <Ryozuki> its crazy
16:34 <+bridge> <Ryozuki> one of rust biggest achievements
16:35 <+bridge> <Ryozuki> #rustad
16:36 <+bridge> <Ryozuki> js sux tho
16:36 <+bridge> <Ryozuki> if u dont use a Map
16:36 <+bridge> <Ryozuki> the iterator over objects may give u unwanted stuff
16:38 <+bridge> <Ryozuki> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps
16:38 <+bridge> <Ryozuki> > An Object has a prototype, so it contains default keys that could collide with your own keys if you're not careful.
16:38 <+bridge> <Ryozuki> most ppl in js world use object instead of maps
16:38 <+bridge> <ReiTW> rip influxdb crate
16:38 <+bridge> <Ryozuki> cuz they dont even know what a map is lmao
16:39 <+bridge> <heinrich5991> @Learath2 no, but you can annotate the struct with a macro that can read the struct fields and generate methods based on that
16:39 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1064569686638985306/image.png
16:40 <+bridge> <murpi> Should we just move this channel, including bugs into it's own category? The channel being so far down is extremely odd to me üòÑ
16:40 <+bridge> <Ryozuki> omg
16:41 <+bridge> <Ryozuki> so it wasnt u who moved it
16:41 <+bridge> <Ryozuki> do it
16:41 <+bridge> <Ryozuki> and put it on top
16:41 <+bridge> <Ryozuki> top priority
16:41 <+bridge> <Ryozuki> @Learath2 https://github.com/edg-l/formy
16:41 <+bridge> <Ryozuki> this reminds me i did this
16:41 <+bridge> <Ryozuki> a abandoned project
16:41 <+bridge> <Ryozuki> ```rust
16:41 <+bridge> <Ryozuki> use formy::Form;
16:41 <+bridge> <Ryozuki> 
16:41 <+bridge> <Ryozuki> #[derive(Form)]
16:41 <+bridge> <Ryozuki> struct UserLogin {
16:41 <+bridge> <Ryozuki>     #[input(pattern = r"[\w]+")]
16:41 <+bridge> <Ryozuki>     #[label = "Username:"]
16:41 <+bridge> <Ryozuki>     username: String,
16:41 <+bridge> <Ryozuki>     #[input(type = "email", name = "real_email", class="py-4", id = "email")]
16:41 <+bridge> <Ryozuki>     email: String,
16:41 <+bridge> <Ryozuki>     #[input(type = "password")]
16:41 <+bridge> <Ryozuki>     #[label = "Password:"]
16:41 <+bridge> <Ryozuki>     password: String,
16:41 <+bridge> <Ryozuki>     some_field: String,
16:42 <+bridge> <Ryozuki> }
16:42 <+bridge> <Ryozuki> 
16:42 <+bridge> <Ryozuki> let form = UserLogin::to_form();
16:42 <+bridge> <Ryozuki> ```
16:42 <+bridge> <Ryozuki> i make a html form with this macro
16:45 <+bridge> <Jupstar ‚ú™> Sounds good then I can minimize the useless channels xd
16:55 <+bridge> <heinrich5991> Jupstar's point is good, I guess. I also like people stumbling upon the developer channel though, I'd guess this would reduce the chance of that happening
17:18 <+bridge> <Ryozuki> ye thats a point i made
17:18 <+bridge> <Ryozuki> thats why it being 2nd is good
17:18 <+bridge> <Ryozuki> we need more devs
17:18 <+bridge> <Ryozuki> and im sure its interesting for ppl to look at
17:18 <+bridge> <Ryozuki> event if they dont comment
17:18 <+bridge> <Ryozuki> im pretty sure
17:18 <+bridge> <Ryozuki> dev channels in games are the most interesting
17:18 <+bridge> <Ryozuki> source: me
17:32 <+bridge> <Chairn> im afraid this break some mem_copy between different struct. They do have similar layout, but can it guarentee it reorders similarly?
17:38 <+bridge> <deen> apparently it does nothing automatically üòÑ you have to specify the order you want, so not that useful
18:21 <+bridge> <Ryozuki> https://servo.org/blog/2023/01/16/servo-2023/
18:27 <+ChillerDragon> does someone know if https://github.com/0xfaulty is on this discord? :) 
18:42 <+bridge> <deen> @Faulty ^?
18:57 <+bridge> <Ryozuki> https://every.to/superorganizers/gpt-3-is-the-best-journal-you-ve-ever-used
18:57 <+bridge> <Ryozuki> @Jupeyy_Keks
18:57 <+bridge> <Ryozuki> GPT-3 as therapy modality expert
18:57 <+bridge> <Ryozuki> @Learath2 use gpt to get therapy
18:58 <+bridge> <Ryozuki> tell him to become socrates
18:58 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1064604682883960882/optimized_zHbrCmLxzmL7IQRVLAOSD4QwtpY73bmm3QTgWkT-amhhqIkSCFD1JhgAf0xifTWppr07P7BlPLn08zn40LibOS6MQB6FKtdgMMpK3s0aPvWSzUT_fef9pFPbofgTHVeIYH4UwhaO_pVHirw-t5DFC-428YcPTNb-zuOS_g-P2Kya5lErTNUYZsRhET8Xhg.png
19:00 <+bridge> <Jupstar ‚ú™> the best therapy is to get addicted to smth xd
19:19 <+bridge> <chillerdragon> Sounds good thanks deen \:)Ello faulty is that you?
19:19 <+bridge> <chillerdragon> (@deen)
19:38 <+bridge> <Ryozuki> https://godotengine.org/article/whats-missing-in-godot-for-aaa/
19:43 <+bridge> <murpi> should the new category be below chat or above chat?
19:45 <+bridge> <Jupstar ‚ú™> well if u ask here: above
19:45 <+bridge> <Jupstar ‚ú™> xd
19:46 <+bridge> <Learath2> GPT can't fix me
19:46 <+bridge> <Learath2> Definitely below
19:47 <+bridge> <Learath2> Well imo
19:47 <+bridge> <Ryozuki> Above
19:47 <+bridge> <Ryozuki> Most important chat
19:55 <+bridge> <louis> below
19:55 <+bridge> <Ryozuki> Only devs may answer
19:55 <+bridge> <Ryozuki> :kek: :gigachad:
19:55 <+bridge> <louis> well in that case idk why bot cmds or reports are in chat category
19:56 <+bridge> <louis> i've made pull requests ‚òùÔ∏è ü§ì
19:58 <+bridge> <louis> but i think the old order all in 1 category was fine
19:58 <+bridge> <Faulty> me
20:27 <+bridge> <Voxel> :soulless:
20:56 <+bridge> <HestiaSpider> anyone knowing how to compile a modded client with 0.6 on it ?
22:30 <+bridge> <Nouaa> what client?
22:33 <+bridge> <Nouaa> I can guess which client you are talking about only by checking our mutual friend
22:33 <+bridge> <Chairn> yes i know, just read the README file
22:36 <+bridge> <Nouaa> cheat clients rarely have instructions on the build process
22:52 <+bridge> <HestiaSpider> Nicf
22:52 <+bridge> <HestiaSpider> Nice
22:52 <+bridge> <HestiaSpider> That's why I'm asking here, maybe someone knows how to do it
23:20 <+bridge> <Annie Bills> https://t.me/+UcYGEjBQwa7gIPN1
23:20 <+bridge> <Annie Bills> (@Ryozuki)
23:23 <+bridge> <Ryozuki> did someonen ping me
23:24 <+bridge> <Ryozuki> why did it disapear
23:24 <+bridge> <murpi> Scam links ^^
