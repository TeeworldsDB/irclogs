00:40 <+bridge> <heinrich5991> https://64.github.io/cmake-raytracer/
00:43 <+bridge> <Learath2> The real gem in that post is this reference https://raytracing.github.io/
00:44 <+bridge> <Learath2> but the rest is bizarre too, overall I rate this post 7/10
00:45 <+bridge> <Learath2> fairly interesting
05:45 <+bridge> <Ewan> anyone know who runs the unique servers
06:16 <+bridge> <Alexander> Unique clan
06:17 <+bridge> <Alexander> https://uniqueclan.net/
06:17 <+bridge> <Ewan> sweet
06:17 <+bridge> <Alexander> Unique Â© 2014-2023
06:17 <+bridge> <Alexander> 
06:17 <+bridge> <Alexander> Tezcan, timakro & Ryozuki
06:20 <+bridge> <Ewan> i wanna see about hosting a usa server
08:32 <+bridge> <Ryozuki> https://github.com/rust-lang/compiler-team/issues/631
08:33 <+bridge> <Ryozuki> interesting
09:17 <+bridge> <Ewan> did u guys fix that timeptr crash in the editor
09:17 <+bridge> <Ewan> (which doesn't happen on mingw)
09:17 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106117986730909696/RDT_20230511_0917245259652005544222668.jpg
09:19 <+bridge> <Jupstar âœª> No
10:19 <+bridge> <Ewan> thoughts on this ryozuki
10:19 <+bridge> <Ewan> i posted in the unique server as well
10:19 <+bridge> <Ewan> idk how involved u are xd
10:19 <+bridge> <Ewan> idk who's in charge over there
10:22 <+bridge> <Ryozuki> @Jupeyy_Keks lol contributors is updated on the gh app but not browser for me
10:22 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106134295472504902/Screenshot_2023-05-11-10-22-30-795_com.github.android.jpg
10:22 <+bridge> <Ryozuki> or idk
10:23 <+bridge> <Ryozuki> timakro hosts the sv
10:23 <+bridge> <Ewan> ðŸ˜ƒ
10:24 <+bridge> <Jupstar âœª> Looks like before to me
10:27 <+bridge> <Jupstar âœª> Ok you are more up
10:27 <+bridge> <Jupstar âœª> Gg
10:39 <+bridge> <Ryozuki> Thu May 11 10:38:18 2023 >>> www-client/firefox-113.0
10:39 <+bridge> <Ryozuki>        merge time: 13 minutes and 8 seconds.
10:39 <+bridge> <Ryozuki> not bad
10:39 <+bridge> <Ryozuki> hi from latest firefox
10:42 <+bridge> <Ryozuki> i would be after learath in the web
10:42 <+bridge> <Jupstar âœª> Uff 13 min
10:42 <+bridge> <Ryozuki> idk how long the cache lasts
10:42 <+bridge> <Ryozuki> its pretty good for firefox
10:42 <+bridge> <Jupstar âœª> 13 min for few code changes xd
10:42 <+bridge> <Ryozuki> i compile it on a tmpfs too
10:42 <+bridge> <Ryozuki> xd ye
10:42 <+bridge> <Ryozuki> @Jupeyy_Keks well i havent looked if firefox supports ccache
10:43 <+bridge> <Jupstar âœª> I really wonder what the journey of browsers will be xd
10:44 <+bridge> <Ryozuki> im gonna continue my work adding postgresql support for ddnet
10:44 <+bridge> <Jupstar âœª> Adding infinite features can't work for ever
10:44 <+bridge> <Ryozuki> maybe that also allows deen materialized views stuff since its psql related
10:44 <+bridge> <Ryozuki> xd
10:44 <+bridge> <Jupstar âœª> Epic
10:44 <+bridge> <Ryozuki> i thought about maybe using a bit of rust here
10:44 <+bridge> <Ryozuki> but idk if this will make it more complicated
10:44 <+bridge> <Ryozuki> it would be awesome to get a tokio runtime running in the sv
10:45 <+bridge> <Ryozuki> (i know its not needed for the db)
10:45 <+bridge> <Ryozuki> tokio runtime would allow us to have easy multithreaded http requests, database, and maybe even grpc
10:45 <+bridge> <Jupstar âœª> Depends. Should be okish if the split from db code and game logic is clean enough
10:46 <+bridge> <Ryozuki> it is not bad rn
10:46 <+bridge> <Ryozuki> the db interface is not badf
10:46 <+bridge> <Ryozuki> also the psql C api looks wayyy better than the mysql
10:46 <+bridge> <Ryozuki> for  instance u dont need to init anything and manage if u inited or not with a atomic/lock xd
10:47 <+bridge> <Ryozuki> and its thread safe  iirc
10:47 <+bridge> <Ryozuki> > libpq is thread-safe as of PostgreSQL 7.0, so long as no two threads attempt to manipulate the same PGconn object at the same time.
10:49 <+bridge> <Ryozuki> https://en.wikipedia.org/wiki/Protocol_Wars
11:31 <+bridge> <Jupstar âœª> But obv u would never touch this api
11:31 <+bridge> <Jupstar âœª> That would be a self kill
11:33 <+bridge> <Ewan> Bindings don't make themselves
11:35 <+bridge> <Ryozuki> i touched the api
11:35 <+bridge> <Ryozuki> :justatest:
11:35 <+bridge> <Jupstar âœª> Whhaat
11:35 <+bridge> <Jupstar âœª> It's not even rust
11:35 <+bridge> <Jupstar âœª> Fake ryo
11:35 <+bridge> <Ewan> Im morbing
11:48 <+bridge> <Ryozuki> @Jupeyy_Keks new mesa released
11:48 <+bridge> <Ryozuki> it has rusticl
11:48 <+bridge> <Ryozuki> a opencl driver in rust
11:48 <+bridge> <Ryozuki> https://docs.mesa3d.org/rusticl.html
11:48 <+bridge> <Jupstar âœª> Sad only that opencl is basically dead xd
11:48 <+bridge> <Ryozuki> xd
11:49 <+bridge> <Jupstar âœª> Maybe gimp still uses it xd
11:49 <+bridge> <Jupstar âœª> Blender dropped it xd
11:49 <+bridge> <Jupstar âœª> Who needs opencl if u have Vulkan xd
11:50 <+bridge> <Ryozuki> xd
11:50 <+bridge> <Ewan> yeah opencl death is sad
11:50 <+bridge> <Ryozuki> note that its not opengl its opencl
11:50 <+bridge> <Ewan> yeah
11:50 <+bridge> <Ryozuki> just clarifying
11:51 <+bridge> <Ewan> vulkan can do compute shaders
11:51 <+bridge> <Ewan> if that's why ur clarifying
11:51 <+bridge> <Ryozuki> yeye
11:51 <+bridge> <Ryozuki> well opengl death may be near too xd
11:51 <+bridge> <Jupstar âœª> Opencl has some cool features. But i guess u can emulate most stuff
11:51 <+bridge> <Jupstar âœª> Yeah just like ogl
11:52 <+bridge> <Jupstar âœª> Zink for me is already opengl driver replacement
11:52 <+bridge> <Jupstar âœª> The 10% perf u loose is traded by next gen hardware
11:52 <+bridge> <Jupstar âœª> And if u target ogl, u probably are ok with not having the best performance anyway
11:58 <+bridge> <Learath2> Funny how the best they could do was to still just translate it to C ABI. We really need OS people onboard if we want a proper new ABI
12:06 <+bridge> <Ryozuki> @Learath2 c is a plague kek
12:06 <+bridge> <Ryozuki> found this comment down too
12:06 <+bridge> <Ryozuki> > we arrived at the conclusion that the notion of a "C ABI" is somewhat of an existential question, because the C Standard does not define a C ABI, and currently our extern "C" does not even support all Standard C types, like long double and _Complex. And the C language can add new types, of course (it in fact did in C23, non-optionally, a new type that all compilers will now be expected to support in order to claim they support C23). Thus saying "
12:08 <+bridge> <Learath2> Eh I fail to see much value in trying to get a different name for it, everyone knows C doesn't define an ABI
12:08 <+bridge> <Ryozuki> crabi is not c abi tho
12:08 <+bridge> <Ryozuki> i love the name
12:08 <+bridge> <Ryozuki> i hope it exists someday xd
12:08 <+bridge> <Ryozuki> a abi for safe interop
12:09 <+bridge> <Ryozuki> > crABI could define a symbol naming scheme, to allow identifying symbols that
12:09 <+bridge> <Ryozuki> > use crABI. However, crABI must be compatible with languages that only support C
12:09 <+bridge> <Ryozuki> > FFI and do not have native crABI support, and which must thus reference the
12:09 <+bridge> <Ryozuki> > symbol via its name; therefore, crABI should not have a complex or non-obvious
12:09 <+bridge> <Ryozuki> > mangling scheme.
12:11 <+bridge> <Ryozuki> anyway its an interesting experiment, its not even a rfc yet
12:11 <+bridge> <Ryozuki> will see how it goes
12:11 <+bridge> <Learath2> It's a brand of spreadables in Turkey ðŸ˜›
12:11 <+bridge> <Ryozuki> i think crabi is a pokemon
12:12 <+bridge> <Learath2> I can't read it without thinking of nutella derivatives
12:12 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106161832802140210/098.png
12:12 <+bridge> <Ryozuki> krabby
13:30 <+bridge> <ReiTW> if nobody used xbox game pass
13:30 <+bridge> <ReiTW> 43X74-62G7X-2PPHR-9JWD6-R2TCZ
13:30 <+bridge> <ReiTW> 2 months
13:52 <+bridge> <Ewan> What a bro
13:57 <+bridge> <Ryozuki> im implementing a hashmap with open addressing in llvm ir
13:57 <+bridge> <Ryozuki> :poggers2:
14:05 <+bridge> <Learath2> quadratic probing?
14:05 <+bridge> <Ryozuki> im doing it simple for now
14:05 <+bridge> <Ryozuki> linear probs xd
14:41 <+bridge> <Ryozuki> @Learath2 do u think there will be ever another knuth
14:41 <+bridge> <Ryozuki> the man is too legend
14:42 <+bridge> <Ryozuki> reading into the open addressing thing made me go down the wiki rabbit hole xd
14:42 <+bridge> <Ryozuki> > In the 1970s the publishers of TAOCP abandoned Monotype in favor of phototypesetting. Knuth became so frustrated with the inability of the latter system to approach the quality of the previous volumes, which were typeset using the older system, that he took time out to work on digital typesetting and created TeX and Metafont.[37]
14:42 <+bridge> <Ryozuki> chaddest
14:48 <+bridge> <Jupstar âœª> Yes, you;)
14:48 <+bridge> <Jupstar âœª> Is it a complex topic?
14:50 <+bridge> <Ryozuki> im already old and i dont have a uni degree xd
14:50 <+bridge> <Ryozuki> https://en.wikipedia.org/wiki/Open_addressing
14:51 <+bridge> <Ryozuki> idk its just how hashmaps are made
14:51 <+bridge> <Ryozuki> rust uses quadratic simd probing
14:51 <+bridge> <Jupstar âœª> Yeah I meant in llvm ir
14:51 <+bridge> <Jupstar âœª> Why do u even implement it there directly, don't u have a higher level language?
14:52 <+bridge> <Ryozuki> the lang has a dict as a builtin
14:52 <+bridge> <Ryozuki> well maybe i can interface with rust, but idk if i wanna bother with that
14:53 <+bridge> <Ryozuki> i dont think its too complicated
14:53 <+bridge> <Ryozuki> llvm is fairly high level ngl
14:53 <+bridge> <Ryozuki> llvm-ir*
14:53 <+bridge> <Ryozuki> it even has a switch
14:54 <+bridge> <Ryozuki> i will use a hash function from rust tho
14:54 <+bridge> <Ryozuki> im just not sure about using rust hashmap and lifetimes in here
14:54 <+bridge> <Ryozuki> and its an interesting thing to implement
14:55 <+bridge> <Learath2> No, all new programmers hate goto, too close minded, they can never be knuth
14:57 <+bridge> <Jupstar âœª> I even hate returns that are mid function
14:57 <+bridge> <Jupstar âœª> Always speaks of bad design for me
14:57 <+bridge> <Learath2> See, you can't be Knuth
14:57 <+bridge> <Jupstar âœª> Math doesn't know jumping around
14:58 <+bridge> <Learath2> Thank god we aren't mathematicians ðŸ˜›
14:58 <+bridge> <Jupstar âœª> No but seriously, it makes it harder to not add bugs imho. E.g. if I add smth at the end of a function that should be called regardless or similar
14:59 <+bridge> <Jupstar âœª> I like it code has flow
14:59 <+bridge> <Jupstar âœª> If
15:00 <+bridge> <Learath2> Well it's pretty subjective. I never had much trouble with that and I find the early bail much much easier to read than infinite nesting or extremely long conditions
15:01 <+bridge> <Jupstar âœª> Yep, but in that case I'd move the nesting out to a new function
15:01 <+bridge> <Learath2> > If you need to nest so much maybe factor it out into a function
15:01 <+bridge> <Jupstar âœª> Xd
15:04 <+bridge> <Learath2> I also hate one use functions, jumping around while reading is far more annoying than early bails
15:04 <+bridge> <Learath2> But anyways, very very subjective thing peddaled by computer science people as if it's objective
15:04 <+bridge> <Jupstar âœª> Acceptable, but depends on the size of the function too
15:04 <+bridge> <Jupstar âœª> The name of the function is already kind of a documentation xd
15:04 <+bridge> <Jupstar âœª> I agree
15:04 <+bridge> <Learath2> Maybe in 1861 their compilers had trouble optimizing when there is more than one return and it was objectively better back then but thank god we live in 2023
15:04 <+bridge> <Jupstar âœª> I still couldn't tell if i prefer long lines over small for example
15:04 <+bridge> <Jupstar âœª> Both have pros and cons
15:04 <+bridge> <Learath2> One thing I've been appreciating lately is functional programming. There is clearly a place for it. It's great for a lot of tasks
15:05 <+bridge> <Learath2> I try to stay below 80 columns if at all possible, but I won't break a line unreasonably if there is no good place to break it
15:12 <+bridge> <Ewan> clang format deals with that for me
15:12 <+bridge> <Ewan> works well
15:25 <+bridge> <Ryozuki> ? is early return btw
15:26 <+bridge> <Ryozuki> 120 for me
15:27 <+bridge> <Learath2> Yeah a better default since we are all on widescreens nowadays, not ancient terminals ðŸ˜„
15:27 <+bridge> <Jupstar âœª> Wat
15:27 <+bridge> <Jupstar âœª> U mean rust error
15:28 <+bridge> <Jupstar âœª> Yeah
15:30 <+bridge> <Ryozuki> be a functional lang purist
15:30 <+bridge> <Ryozuki> fold, map, reverse
15:30 <+bridge> <Ryozuki> all u need
15:30 <+bridge> <Jupstar âœª> But u can use it anywhere in the function can't u
15:30 <+bridge> <Jupstar âœª> Like not really early
15:31 <+bridge> <Ryozuki> learning functional langs made me realize that doing functions that are tail call optimizable, u need to call reverse() always on the end result, which is where the overhead may sometimes not be worth it
15:31 <+bridge> <Learath2> Wym? You can use ? pretty much anywhere
15:31 <+bridge> <Jupstar âœª> Yeah
15:31 <+bridge> <Jupstar âœª> I'd say depends on function size if I'd use it
15:32 <+bridge> <Learath2> Like at the very start of this function I have `let config = Config::from_env()?`
15:32 <+bridge> <Learath2> That's a very very very early bail in this 80~ line function ðŸ˜„
15:32 <+bridge> <Ryozuki> @Jupeyy_Keks ? can not just be used on errors
15:32 <+bridge> <Ryozuki> it can be used on any type that implements https://doc.rust-lang.org/std/ops/trait.Try.html
15:32 <+bridge> <Ryozuki> which is only result rn
15:32 <+bridge> <Ryozuki> and only in nightly u can impl it for others xd
15:33 <+bridge> <Learath2> Also Option, no?
15:33 <+bridge> <Ryozuki> https://doc.rust-lang.org/std/ops/enum.ControlFlow.html
15:33 <+bridge> <Ryozuki> this more specifically
15:33 <+bridge> <Ryozuki> yeah iirc
15:33 <+bridge> <Learath2> https://doc.rust-lang.org/src/core/option.rs.html#2531 seems tso
15:34 <+bridge> <Learath2> s\/tso$/so/
15:34 <+bridge> <Ryozuki> in functions where u return option
15:34 <+bridge> <Ryozuki> u can use ? on options iirc
15:34 <+bridge> <Ryozuki> to return none
15:34 <+bridge> <Jupstar âœª> Yeah yeah. If everything would follow a raii like design it's cool for sure. It if u manage some states it can easily lead to logic bugs
15:34 <+bridge> <Ryozuki> well in rust works nice
15:35 <+bridge> <Ryozuki> the most important raii things for me would be locks
15:35 <+bridge> <Ryozuki> and they work nicely
15:36 <+bridge> <Jupstar âœª> They are nice. I'm only saying it's complicated xd
15:37 <+bridge> <Ryozuki> ayoooooooo
15:37 <+bridge> <Ryozuki> https://www.githubstatus.com/
15:37 <+bridge> <Ryozuki> github is down agane
15:37 <+bridge> <Ryozuki> xd
15:37 <+bridge> <Ryozuki> billion dollar company btw
15:37 <+bridge> <Ryozuki> #azure #scaling #webscale
15:37 <+bridge> <Learath2> Idk what's going on with github nowadays
15:37 <+bridge> <Ryozuki> #kubernetes
15:38 <+bridge> <Learath2> Microsoft also isn't the kind of company that releases nice blogs about what went wrong
15:39 <+bridge> <Ryozuki> daily reminder my cgit still works https://git.edgarluque.com/
15:39 <+bridge> <Ryozuki> #baremetal #no-docker #no-k8s
15:39 <+bridge> <Ryozuki> #aptget
15:39 <+bridge> <Ryozuki> xddd
15:39 <+bridge> <Ryozuki> today i woke up funny sorry
15:40 <+bridge> <Ryozuki> true sad
15:40 <+bridge> <Ryozuki> maybe they want to extingish open source finally
15:40 <+bridge> <Ryozuki> bringing down gh
15:40 <+bridge> <Ryozuki> we at the 3rd phase
15:40 <+bridge> <Ryozuki> :justatest:
15:41 <+bridge> <Learath2> or they are just incompetent, I wouldn't put it beyond web-scale developers
15:41 <+bridge> <Ryozuki> xd
15:42 <+bridge> <Learath2> Maybe their mongodb instance finally just piped everything to `/dev/null` for better web scale performance
15:43 <+bridge> <Jupstar âœª> Maybe they accidentally fired their backend team
15:43 <+bridge> <Jupstar âœª> Now python devs take over
15:43 <+bridge> <Jupstar âœª> Let's rewrite in python
15:43 <+bridge> <Jupstar âœª> For performance
15:44 <+bridge> <YupHio> sudo su - root
15:44 <+bridge> <YupHio> rm -rf
15:44 <+bridge> <YupHio> 
15:44 <+bridge> <YupHio> Easy rookie mistake. Happens to the best of us
15:45 <+bridge> <Learath2> funny enough that gitlab incident couple months back was an accidental `rm -rf` on the wrong server
15:45 <+bridge> <Ewan> jeepers
15:46 <+bridge> <Learath2> The dude had two terminals one ssh'd into prod-1, the other into prod-2. He meant do delete the db on prod-2 and replicate prod-1 to it, he deleted it on prod-1 instead ðŸ˜›
15:47 <+bridge> <YupHio> Actually my buddy once did a "crontab -r" rather than a "crontab -e" because the letters are right next to each other. He deleted all the cron jobs from the production server and guess what was never put into Git? The crontab. Sort of stuff happens all the time lol, need to automate literally everything
15:47 <+bridge> <Learath2> lol
15:47 <+bridge> <Learath2> good idea to snapshot the entire fs from time to time
15:49 <+bridge> <YupHio> Walk of shame calling the data backups and recovery team at my company to get a snapshot restored in production. Saved us more than once.
15:50 <+bridge> <YupHio> Bigger issue is the new cloud hosting stuff is often "self-service" so it is on the dev teams now to architect their own backup solution on the platform. Training wheels are off when you no longer have an SI/SA to do that stuff for you anymore
15:50 <+bridge> <Ryozuki> this reminded me i need to backup my cron
15:51 <+bridge> <Ryozuki> lol
15:51 <+bridge> <Ryozuki> self service
15:51 <+bridge> <Ryozuki> this is how i did all my life
15:51 <+bridge> <Ryozuki> never depend on others
15:51 <+bridge> <Ryozuki> but well im not a company
15:51 <+bridge> <Ryozuki> companies like to depend on others, so they can direct the blame of their incompetency
15:52 <+bridge> <YupHio> Big companies have old processes that don't work well in the cloud. Hard to change direction of a big company
15:53 <+bridge> <YupHio> Hard to ensure developers are all competent at a big company*
15:54 <+bridge> <Ryozuki> first screening is easy: do you like js? yes = go out, no = proceed
15:54 <+bridge> <Ryozuki> (joke dont kill me)
15:55 <+bridge> <YupHio> If Microsoft has 500 developers working on this, you can pretty well guarantee that a few of them are knuckleheads lol. The odds increases as the numbers go up
15:55 <+bridge> <Ryozuki> tbh code tests live in a interview are the worst, they make any dev ability drop down to nothin
15:55 <+bridge> <Ryozuki> atleast for me
15:55 <+bridge> <Ryozuki> i get a blank mind even for simple stuff
15:55 <+bridge> <Ryozuki> its insane
15:55 <+bridge> <Ryozuki> xd
15:56 <+bridge> <Learath2> Can't invert a tree on a whiteboard? Get out of my sight
15:56 <+bridge> <YupHio> Same. My company stopped doing code tests in interviews, we care more about skills that are harder to teach (teamwork, communication, fit with the team). We figure we can teach any decent developer a new technology
15:56 <+bridge> <Learath2> Meanwhile their in house team is just copying it from stackoverflow
15:56 <+bridge> <Ryozuki> its been ages since i copied smth from so
15:57 <+bridge> <Ryozuki> the stuff i do isnt even there
15:57 <+bridge> <Ryozuki> :BASEDHALT:
15:57 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106218603059101726/image.png
15:57 <+bridge> <Ryozuki> :justatest:
15:58 <+bridge> <Ryozuki> unsurprisingly, the llvm sphere is rly small and self contained
15:58 <+bridge> <Ryozuki> its like the compiler knowledge is a precious thing not shared much
15:58 <+bridge> <Ryozuki> llvm specific
15:58 <+bridge> <Learath2> Honestly silly to ask people algorithms. Like who even implements them without double checking on a book or wikipedia?
15:59 <+bridge> <Ryozuki> true
15:59 <+bridge> <YupHio> https://cdn.discordapp.com/attachments/293493549758939136/1106218973915267072/Screenshot_20230511_095904_Chrome.jpg
15:59 <+bridge> <YupHio> Same bro, same
15:59 <+bridge> <Ryozuki> u got minus points
15:59 <+bridge> <Ryozuki> white themist
15:59 <+bridge> <Ryozuki> im white themist racist
16:00 <+bridge> <YupHio> Is daytime here, old eyes need to see
16:01 <+bridge> <Ryozuki> daytime too
16:01 <+bridge> <Ryozuki> coffee in hand
16:01 <+bridge> <Ryozuki> rust in display
16:01 <+bridge> <Ryozuki> life of a dev
16:01 <+bridge> <Ryozuki> tried to rithm but im bad
16:02 <+bridge> <Ryozuki> tried to rhyme but im bad
16:03 <+bridge> <ReiTW> have to test RustDesk
16:03 <+bridge> <YupHio> Curtains open
16:03 <+bridge> <YupHio> Sun shining in
16:03 <+bridge> <YupHio> Dark them broken
16:03 <+bridge> <YupHio> Ryozuki calls it sin
16:03 <+bridge> <YupHio> Curtains open
16:03 <+bridge> <YupHio> Sun shining in
16:03 <+bridge> <YupHio> Dark theme broken
16:03 <+bridge> <YupHio> Ryozuki calls it sin
16:03 <+bridge> <Ryozuki> nice xd
16:04 <+bridge> <ReiTW> the big mistake is to specify root when u don't need it :giga_chad:
16:04 <+bridge> <YupHio> This poem was not generated by an AI language model**
16:05 <+bridge> <YupHio> Do everything as root. Linux chad move.
16:05 <+bridge> <ReiTW> templeOS > all, less complexity
16:07 <+bridge> <ReiTW> funny thing is you can search for 
16:07 <+bridge> <ReiTW> `"Regenerate response" site:.com`
16:08 <+bridge> <ReiTW> and find some people who didn't copy-paste correctly
16:22 <+bridge> <Knuski> On the map "oco", which uses tunes and (fake) teles, recently a " "bug" " occured that doesnt let u finish the map anymore. Normally you would fall through that specific teleport there and continue the map. The last finish was 3 days ago. Does any of the developers know if there were any updates that could change this behavior?
16:22 <+bridge> <Knuski> https://cdn.discordapp.com/attachments/293493549758939136/1106224895689490442/oco_bug.demo.mp4
16:24 <+bridge> <Knuski> this is how it look in the editor for reference
16:24 <+bridge> <Knuski> https://cdn.discordapp.com/attachments/293493549758939136/1106225405393907763/image.png
16:25 <+bridge> <Ryozuki> #bugs is better cuz it may be lost
16:25 <+bridge> <Ryozuki> but maybe @Robyt3 knows
16:27 <+bridge> <Knuski> ok next time i will post it there, dont wanna spam it in #bugs again lol
16:36 <+bridge> <gerdoe> nah its just cheaper to delegate some work
16:42 <+bridge> <Ryozuki> ugh
16:42 <+bridge> <Ryozuki> trying to implement psql
16:43 <+bridge> <Ryozuki> FormatCreateRace and friends are not overrides, they depend on methos
16:43 <+bridge> <Ryozuki> the thing is, and i think psql does better, arguments use $1 $2 etc instead of ?, and some things change drastically, like insert or ignore being insert x into y on conflict ignore
17:02 <+bridge> <Chairn> haskell?
17:03 <+bridge> <Learath2> Nah, just messing around with it in js and rust. I know they are not truly functional languages but I find functional programming is only comfy with a subset of things one might want to do
17:05 <+bridge> <Chairn> algorithm tests would make more sense, don't you think?
17:06 <+bridge> <Chairn> i think it's more of an academic thing, i've seen tons of pure math-informatics researchers using it and extending it for their research
17:07 <+bridge> <Chairn> i was alwyas told that haskell is truly functional
17:08 <+bridge> <Chairn> you can pass functions to functions
17:08 <+bridge> <Chairn> you can pass functions to functions and it creates the mathematical composition of these
17:08 <+bridge> <Ryozuki> he means js and rust
17:11 <+bridge> <Ryozuki> ugh lookin at the psql thing, its too out of the norm with sqlite and mysql
17:11 <+bridge> <Ryozuki> my lazyness is already kicking it
17:11 <+bridge> <Ryozuki> cuz this requires a heavy rework
17:29 <+bridge> <Ryozuki> also psql manages statements by a given name
17:29 <+bridge> <Ryozuki> ```
17:29 <+bridge> <Ryozuki> PGresult *PQprepare(PGconn *conn,
17:29 <+bridge> <Ryozuki>                     const char *stmtName,
17:29 <+bridge> <Ryozuki>                     const char *query,
17:29 <+bridge> <Ryozuki>                     int nParams,
17:29 <+bridge> <Ryozuki>                     const Oid *paramTypes);
17:29 <+bridge> <Ryozuki> ```
17:49 <+bridge> <Cellegen | RiH> Being responsible in work be like
17:50 <+bridge> <Cellegen | RiH> Oops, I accidentally erased the whole repository, buuuut will I get my pay? :kek:
17:50 <+bridge> <Cellegen | RiH> "Oops, I accidentally erased the whole repository, buuuut will I get my pay?" :kek:
18:11 <+bridge> <Jupstar âœª> thx, how aggressive is missing docs?
18:11 <+bridge> <Jupstar âœª> 
18:11 <+bridge> <Jupstar âœª> only for exported stuff or every single function?
18:11 <+bridge> <Ryozuki> pub fn iirc
18:11 <+bridge> <Ryozuki> pedantic can be pedantic too xd
18:12 <+bridge> <Jupstar âœª> i'll try it out
18:12 <+bridge> <Ryozuki> #![deny(clippy::all)]
18:12 <+bridge> <Ryozuki> is a good start
18:12 <+bridge> <Ryozuki> it doesnt enable pedantic or nursery
18:12 <+bridge> <Jupstar âœª> i have 3000 warnings open anyway xdd
18:12 <+bridge> <Ryozuki> but treats all clippy warns as errors
18:12 <+bridge> <Jupstar âœª> and since the cargo fix tool is broken, i have to fix by hand
18:12 <+bridge> <Ryozuki> xdd
18:12 <+bridge> <Ryozuki> i found a ez pr to make for ddnet
18:12 <+bridge> <Ryozuki> wont tell cuz robyt will steal
18:12 <+bridge> <Ryozuki> :justatest:
18:13 <+bridge> <Jupstar âœª> that's not how it works
18:13 <+bridge> <Chairn> if it's ez, just do it?
18:13 <+bridge> <Ryozuki> ye im doing it
18:13 <+bridge> <Ryozuki> xd
18:13 <+bridge> <Ryozuki> thats why  i said that
18:13 <+bridge> <Jupstar âœª> I wish the UI would alpha support for the color picker, maybe i should implement
18:13 <+bridge> <Jupstar âœª> now wait 2 days
18:13 <+bridge> <Jupstar âœª> and robyte implemented it
18:14 <+bridge> <Jupstar âœª> robyte should get a job for the egui guy
18:25 <+bridge> <Jupstar âœª> @Ryozuki why no clippy::perf
18:25 <+bridge> <Jupstar âœª> performance is most important
18:25 <+bridge> <Ryozuki> there is some perf related
18:25 <+bridge> <Ryozuki> https://rust-lang.github.io/rust-clippy/master/index.html
18:25 <+bridge> <Ryozuki> go here
18:26 <+bridge> <Ryozuki> lint groups
18:26 <+bridge> <Ryozuki> perf
18:27 <+bridge> <Jupstar âœª> omg nice site
18:34 <+bridge> <Voxel> lint will never not sound funny
18:34 <+bridge> <Voxel> like why is it called that LOL
18:35 <+bridge> <Jupstar âœª> "The term "lint" was derived from lint, the name for the tiny bits of fiber and fluff shed by clothing, as the command should act like the lint trap in a clothes dryer, detecting small errors to great effect. "
18:35 <+bridge> <Jupstar âœª> just as stupid as bug xd
18:47 <+bridge> <Ryozuki> @Jupeyy_Keks do u know what the effect PowerupShine is?
18:47 <+bridge> <kio> @heinrich5991 u  know how to use http
18:48 <+bridge> <Ryozuki> ah its the ninja particles
18:48 <+bridge> <kio> @heinrich5991 u  know how to use http.h?
18:53 <+bridge> <Voxel> ah so it WAS intentional ok
19:20 <+bridge> <kio> @Learath2 @Jupeyy_Keks @Ryozuki someone know how works json and http libreries that are already included on the ddnet workspace?
19:22 <+bridge> <Jupstar âœª> just look at other code
19:22 <+bridge> <kio> im looking, is very confused
19:22 <+bridge> <kio> and im retarded
19:22 <+bridge> <kio> so
19:23 <+bridge> <Ryozuki> @Jupeyy_Keks omg ddnet is stupid
19:23 <+bridge> <Ryozuki> do we store the player id of who sent a damange indicator for example?
19:23 <+bridge> <Ryozuki> i think we dont
19:23 <+bridge> <Ryozuki> stupid old protocol
19:24 <+bridge> <Ryozuki> anyway i got opacity working for snowflakes, strong indicator, heart icon
19:25 <+bridge> <Voxel> huh
19:25 <+bridge> <Voxel> i thought they always workes
19:25 <+bridge> <Voxel> i thought they always worked
19:25 <+bridge> <Ryozuki> it never respected cl_show_others_alpha
19:25 <+bridge> <Ryozuki> https://github.com/ddnet/ddnet/issues/6520
19:26 <+bridge> <Voxel> OHH
19:29 <+bridge> <Voxel> yknow, why are there 3 damage indicator variants when only one is used
19:30 <+bridge> <Ryozuki> what u talking about
19:30 <+bridge> <Ryozuki> damage ind is the starts from gun
19:30 <+bridge> <Ryozuki> stars*
19:31 <+bridge> <Voxel> exactly
19:31 <+bridge> <Voxel> game.png has 3 variants of those stars
19:31 <+bridge> <Ryozuki> but i couldnt fix their opacity anyway, i just updated the code for the future
19:31 <+bridge> <Ryozuki> cuz damage ind carries no player id info
19:38 <+bridge> <Voxel> some day im going to clean up the pngs of ddnet
19:38 <+bridge> <Voxel> not as a PR but as an experiment
19:40 <+bridge> <Voxel> like take all the particles and put them into the particles.png
19:40 <+bridge> <Voxel> take all the weapons and make that its own image/collection of images
19:40 <+bridge> <Voxel> overall make everything cleaner
19:41 <+bridge> <gerdoe> yay another breaking change
19:41 <+bridge> <Voxel> read what i said
19:41 <+bridge> <Voxel> im not going to release it in vanilla
19:42 <+bridge> <Ryozuki> how is this a breaking change
19:42 <+bridge> <Ryozuki> well changing the structure means all exisiting particle edits cant be used
19:42 <+bridge> <Voxel> its only breaking if you have like, gameskins
19:42 <+bridge> <Ryozuki> thats probs the main reason nothing is done
19:42 <+bridge> <Ryozuki> xd
19:45 <+bridge> <Voxel> also a crazy idea i told louis once:
19:45 <+bridge> <Voxel> what if each weapon was split apart into separate images? like pistol.png, grenade_launcher.png, etc.? and some weapons had variants with actual split parts that could be moved in different states, like the tee animation? the weapon image could be paired with a python file with the same name that dealt with all the animation stuff
19:45 <+bridge> <Voxel> https://cdn.discordapp.com/attachments/852963051664834601/1034217299311345674/unknown.png
19:46 <+bridge> <gerdoe> like whole teedb would be dropped
19:46 <+bridge> <Ryozuki> yeye
19:46 <+bridge> <Ryozuki> its sad to be limited by existing stuff tho
19:46 <+bridge> <gerdoe> yeah something like that was implemented in minetee and nodes
19:47 <+bridge> <gerdoe> some real brainride was with ninslash
19:47 <+bridge> <Ryozuki> 0.7 skin personalization is the only good thing abut 0.7
19:47 <+bridge> <gerdoe> ddnet2.0
19:47 <+bridge> <Ryozuki> its better a single image
19:47 <+bridge> <Ryozuki> this is due to atlas and less memory usage
19:47 <+bridge> <Ryozuki> u just need to load 1 image
19:47 <+bridge> <Voxel> fair
19:48 <+bridge> <Robyt3> You can put the textures in an atlas after loading though
19:48 <+bridge> <Voxel> still, custom reload animations would be so fun
19:48 <+bridge> <Voxel> oh yea thats what tee skins do sometimes
19:48 <+bridge> <Ryozuki> but in ddnet u dont need to reload tho xd
19:48 <+bridge> <Voxel> i remember joining in as default and it takes a bit for me to become me
19:49 <+bridge> <Voxel> [fires grenade]
19:49 <+bridge> <Voxel> [wait half a second]
19:49 <+bridge> <Voxel> [fires grenade]
19:49 <+bridge> <Learath2> Which part are you having trouble with?
19:49 <+bridge> <Voxel> [fires grenade]
19:49 <+bridge> <Voxel> [wait half a second] << what im talking about
19:49 <+bridge> <Voxel> [fires grenade]
19:50 <+bridge> <Ryozuki> bro u got the most used lib in the world, curl, at ur disposal
19:53 <+bridge> <Voxel> when i rework the images im going to add something like this in. except not with shields, since some of these aren't UI elements
19:54 <+bridge> <Voxel> snowflake into particles.png, shields into game.png (which would be elements only seen on maps like hearts or normal shields)
19:54 <+bridge> <Voxel> snowflake into particles.png, shields into game.png (which would be elements only seen on maps like hearts or normal shields or flags)
20:00 <+bridge> <Voxel> god when i make my own client its going to be so heavy on the gpu with all these graphical edits i s2g LOLL
20:04 <+bridge> <louis> u should remove weapon shields :feelsamazingman:
20:10 <+bridge> <jao> thats great
20:11 <+bridge> <gerdoe> nah he should introduce new map format based on entity-component system where you can make key-value map of used tiles (tiles are constructable now, like no solind + hookable + freeze tile) so map is just array of index
20:11 <+bridge> <gerdoe> :troll:
20:12 <+bridge> <gerdoe> imagine z-layering in teeworlds
20:15 <+bridge> <Voxel> but if you have rifel and shotgun how do you only remove shotgun while still keep rifel without having to do some jank rifel next to shield stuff
20:17 <+bridge> <Cellegen | RiH> The same could apply to Tees but... we all knew where it was going with 0.7...
20:17 <+bridge> <kio> Already did but I would use http to try
20:18 <+bridge> <Cellegen | RiH> If you want it to be good, make it work, make it look good and don't make it buggy
20:19 <+bridge> <gerdoe> i would like to see animation customization in tw
20:19 <+bridge> <gerdoe> should try to do anything
20:19 <+bridge> <Cellegen | RiH> oof imagine using a formula for making your own animations
20:19 <+bridge> <Cellegen | RiH> ðŸ’€
20:19 <+bridge> <gerdoe> yeah thats what i want actually
20:19 <+bridge> <Cellegen | RiH> Like some circle radius bs
20:20 <+bridge> <gerdoe> like for every tee state you can make an animation
20:20 <+bridge> <gerdoe> so you given some variables about tee position velocity
20:20 <+bridge> <gerdoe> and state
20:20 <+bridge> <gerdoe> and key animation tool so you can do it yourself
20:21 <+bridge> <Cellegen | RiH> I tbh recommend using line distances as calculation, relative to your mouse position, so it doesn't become complicated
20:21 <+bridge> <Cellegen | RiH> then use that distance to be the default value, which you can use to move the weapon in any direction relative to the calculated value
20:21 <+bridge> <Cellegen | RiH> waaaay easier and more scalable, than using radius
20:21 <+bridge> <Cellegen | RiH> I tbh recommend using line distances as calculation, relative to your mouse position and angle, so it doesn't become complicated
20:21 <+bridge> <Cellegen | RiH> then use that distance to be the default value, which you can use to move the weapon in any direction relative to the calculated value
20:22 <+bridge> <Cellegen | RiH> I tbh recommend using line distances as calculation, relative to your mouse position and angle, so it doesn't become complicated
20:22 <+bridge> <Cellegen | RiH> then set yourown distance value, which you can use to move the weapon in any direction relative to the calculated value
20:22 <+bridge> <Cellegen | RiH> I tbh recommend using line distances as calculation, relative to your mouse position and angle, so it doesn't become complicated
20:22 <+bridge> <Cellegen | RiH> then set your own distance value, which you can use to move the weapon in any direction relative to the calculated value
20:23 <+bridge> <Cellegen | RiH> Well as long as somebody knows how gravity directions work in games, this shouldn't be a problem :Pepegalaugh:
20:24 <+bridge> <louis> if u need to do that and u dont have enougb space for 1 extra tile then ur part sucks anyways
20:25 <+bridge> <Cellegen | RiH> like a lua script, where you have conditions and values to modify, when conditions trigger
20:25 <+bridge> <Cellegen | RiH> f.e:
20:25 <+bridge> <Cellegen | RiH> 
20:25 <+bridge> <Cellegen | RiH> if weapon.just_fired():{
20:25 <+bridge> <Cellegen | RiH>     weapon.part.shield.play()
20:25 <+bridge> <Cellegen | RiH> }
20:26 <+bridge> <Cellegen | RiH> and then play() will get an Array of coordinations and timestamps, which represent on where to move and how delayed the lerping should be
20:26 <+bridge> <Cellegen | RiH> which moves the object accordingly
20:26 <+bridge> <gerdoe> yeah but its too much for current ddnet xd
20:27 <+bridge> <Cellegen | RiH> I mean, if we can scale it, like a TAS, then it's way easier to implement
20:27 <+bridge> <Cellegen | RiH> TAS uses a list of inputs and delays, it's the same thing with animations, but with positions instead
20:28 <+bridge> <Cellegen | RiH> The only concern I have is the way of animation easing
20:28 <+bridge> <Cellegen | RiH> like, without a visual editor, it's hard to pull any animation off
20:29 <+bridge> <Cellegen | RiH> (note to self: need to implement an animation editor for Godot 4.x)
20:33 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106288017578139709/RDT_20230511_2033202199537237745738218.jpg
20:34 <+bridge> <Robyt3> Anyone know what this visual studio error means?
20:34 <+bridge> <Robyt3> ```cpp
20:34 <+bridge> <Robyt3> 5>  CARGO_CFG_TARGET_FEATURE = Some("fxsr,sse,sse2")
20:34 <+bridge> <Robyt3> 5>  running: "g++.exe" "-O0" "-ffunction-sections" "-fdata-sections" "-g" "-fno-omit-frame-pointer" "-m64" "/MTd" "-o" "ddnet/build-visualstudio\\debug\\build\\link-cplusplus-eb210e6b989881d2\\out\\dummy.o" "-c" "ddnet/build-visualstudio\\debug\\build\\link-cplusplus-eb210e6b989881d2\\out\\dummy.cc"
20:34 <+bridge> <Robyt3> 5>  cargo:warning=g++.exe: warning: /MTd: linker input file unused because linking not done
20:34 <+bridge> <Robyt3> 5>  cargo:warning=g++.exe: error: /MTd: linker input file not found: No such file or directory
20:34 <+bridge> <Robyt3> 5>  exit code: 1
20:34 <+bridge> <Robyt3> 5>  --- stderr
20:34 <+bridge> <Robyt3> 5>CUSTOMBUILD : error occurred: Command "g++.exe" "-O0" "-ffunction-sections" "-fdata-sections" "-g" "-fno-omit-frame-pointer" "-m64" "/MTd" "-o" "ddnet/build-visualstudio\\debug\\build\\link-cplusplus-eb210e6b989881d2\\out\\dummy.o" "-c" "ddnet/build-visualstudio\\debug\\build\\link-cplusplus-eb210e6b989881d2\\out\\dummy.cc" with args "g++.exe" did not execute successfully (status code exit code: 1).```
20:34 <+bridge> <Robyt3> Does this happen to anyone else when compiling ddnet?
20:35 <+bridge> <Ryozuki> some file missing i guess
20:35 <+bridge> <Ryozuki> i dont compile on windows so idk there
20:36 <+bridge> <Robyt3> `TARGET = Some("x86_64-pc-windows-gnu")` what is target GNU? ... maybe it somehow trying to choose the gcc toolchain inside VS
20:36 <+bridge> <Ryozuki> clean build?
20:36 <+bridge> <Robyt3> yeah, all clean build, updated visual studio, cmake and msys2
20:36 <+bridge> <Ryozuki> there is a mscvc target iirc
20:36 <+bridge> <Ryozuki> gnu target is for mingw iirc
20:36 <+bridge> <Robyt3> it all started after updating msys2 for some reason (or randomly around that time)
20:37 <+bridge> <Robyt3> even though VS should be independent from msys2
20:37 <+bridge> <Ryozuki> rustup target default x86_64-pc-windows-msvc    64-bit MSVC (
20:37 <+bridge> <Ryozuki> i hate phones
20:37 <+bridge> <Ryozuki> rustup target default x86_64-pc-windows-msvc
20:38 <+bridge> <Robyt3> where to I run that command? I don't have rustup in path
20:38 <+bridge> <Ryozuki> https://doc.rust-lang.org/rustc/platform-support.html
20:38 <+bridge> <Ryozuki> how did u get rust?
20:38 <+bridge> <Robyt3> from MSYS2
20:38 <+bridge> <Ryozuki> nah
20:38 <+bridge> <Robyt3> so I guess VS also uses that
20:38 <+bridge> <Ryozuki> remove it
20:38 <+bridge> <Ryozuki> rustup is better
20:38 <+bridge> <gerdoe> ddnet2.0 xd
20:39 <+bridge> <Ryozuki> idk how to change ur toolchain with ur rust
20:39 <+bridge> <Robyt3> ok, let's hope it works with both VS and MinGW based compilation
20:39 <+bridge> <Robyt3> I don't want to default to MSVC toolchain though
20:39 <+bridge> <Ryozuki> rustup actually asks u to get msvc if it doesnt find it
20:39 <+bridge> <Robyt3> because I usually compile with MinGW and GNU toolchain
20:39 <+bridge> <Ryozuki> and uses that target
20:39 <+bridge> <Ryozuki> well u can choose
20:40 <+bridge> <Ryozuki> wait a moment
20:40 <+bridge> <Ryozuki> maybe with cargo u can override
20:41 <+bridge> <Ryozuki> hm u can but  rustup easier xd
20:41 <+bridge> <Ryozuki> the thing is rustup allows u to have both gnu and msvc and setup per dir overrides
20:42 <+bridge> <Robyt3> ok, that should do it
20:59 <+bridge> <Robyt3> now neither gnu nor msvc can find rust anymore
20:59 <+bridge> <Robyt3> rustc is available on the path
21:04 <+bridge> <Robyt3> ok, gnu build works again after fully cleaning everything, but visual studio gives the same error as before
21:40 <+bridge> <Ryozuki> hm no idea xd
22:53 <+bridge> <Cellegen | RiH> Yo, why aren't compressed PNGs not supported? I asked it one time, but didn't get any answer for it
22:53 <+bridge> <Cellegen | RiH> I even tried only changing the color dimension to a certain value and that also won't render it
22:57 <+bridge> <Jupstar âœª> Does your question make sense?
22:58 <+bridge> <Ryozuki> @Jupeyy_Keks how to get the team of the local player
22:58 <+bridge> <Ryozuki> idk why im struggling with this stupidty
22:58 <+bridge> <Cellegen | RiH> I asked this question, I wrote my problem and showed another screenshot on performance increase
22:58 <+bridge> <Jupstar âœª> Pretty much all pngs are supported, Heinrich purposely disabled this support because of back ward compability backed up by Learath. Blame them
22:58 <+bridge> <Cellegen | RiH> I asked this question, I wrote my problem and showed another screenshot on performance increase in a previous conversation
22:58 <+bridge> <Ryozuki> it says 0 when im in a team xd
22:58 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1106324505074339870/image.png
22:59 <+bridge> <Cellegen | RiH> :justatest: So you are saying is, they cannot do it cuz we still support vanilla?
22:59 <+bridge> <Jupstar âœª> Team unequal to DDrace team
22:59 <+bridge> <Jupstar âœª> Because of older ddnet clients
23:00 <+bridge> <Cellegen | RiH> Well that sucks
23:00 <+bridge> <Jupstar âœª> And is useless
23:00 <+bridge> <Cellegen | RiH> wdym, you guys have gbs of storage from Assets alone
23:00 <+bridge> <Cellegen | RiH> it would save a lot of space overall
23:00 <+bridge> <Jupstar âœª> Older clients will simply not load these images.. Nothing more
23:01 <+bridge> <Cellegen | RiH> and processes less memory
23:01 <+bridge> <Jupstar âœª> I know
23:01 <+bridge> <Cellegen | RiH> for older client, tbh
23:01 <+bridge> <Cellegen | RiH> fuck em
23:02 <+bridge> <Cellegen | RiH> use latest or perish, that is my belief :gigachad:
23:02 <+bridge> <Jupstar âœª> ðŸ˜Ž
23:02 <+bridge> <Ryozuki> m_Teams got it
23:02 <+bridge> <Cellegen | RiH> once we have ddnet 2.0 :copium:
23:03 <+bridge> <Jupstar âœª> Hype
23:39 <+bridge> <kio> guyz
23:39 <+bridge> <kio> https://kog.tw/api.php
23:39 <+bridge> <kio> someone know if there is the same with get method?
23:39 <+bridge> <kio> someone know if there is the same with GET method to get player info?
