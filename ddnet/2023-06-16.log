03:03 <+bridge> <Ewan> naming of source files in ddnet source doesn't seem to be consistent case-wise
03:04 <+bridge> <Ewan> there are some files that are bunched together (foobar.cpp/h) and there are some that are separated with underscores (foo_bar.cpp/h)
03:04 <+bridge> <Ewan> is either one recommended over the other
03:20 <+bridge> <Ewan> why/how is aio broken on windows. it looks like it just uses the existing thread stuff
03:21 <+bridge> <Ewan> i was gonna use it for the thing but if it's really broken on windows i need to either figure out why & fix/work around it or do a lower level approach
03:21 <+bridge> <Ewan> either way ig i can't rn
07:59 <+bridge> <Jupstar ✪> Throw on tsan and look if it's broken. Afaik it was always broken on old windows versions?
09:13 < ws-client> <Jupstar> OMG, today is friday for futurust.. almost forgot
09:13 < ws-client> <Jupstar> but i have no topic
09:16 < ws-client> <Jupstar> i have smth. yesterday i found a crate with an asshole maintainer xD
09:16 < ws-client> <ChillerDragon> "friday for futurust" that doesnt really work phoenetically
09:17 < ws-client> <Jupstar> !rust he used MIT/Apache for all his libs, but then changed one line of code to use a MPL license for that code line. causing all libs basically to be MPL bound
09:17 < chillerbot1> @Ryozuki
09:17 < ws-client> <ChillerDragon> <:rust:920765596289880074> 
09:17 < ws-client> <Jupstar> that's how evil this license and thought is
09:17 < ws-client> <ChillerDragon> jupsti u can now use the ping all rusters command
09:17 < ws-client> <ChillerDragon> one last time heinrich told me to remove the spammy commands :c
09:17 < ws-client> <Jupstar> what spam xd
09:18 < ws-client> <Jupstar> pinging 5 ppl at once
09:18 < ws-client> <Jupstar> sounds efficient
09:18 < ws-client> <ChillerDragon> stuff like !c and !rust and !jup
09:18 < ws-client> <Jupstar> heinrich hates everything that makes fun for others
09:18 < ws-client> <ChillerDragon> xd
09:18 < ws-client> <ChillerDragon> he big boss im scared he ban ma ass
09:18 < ws-client> <ChillerDragon> so when i get time ill kick the commands
09:19 < ws-client> <Jupstar> no
09:20 < ws-client> <Jupstar> don't bow for dictator heinrich
09:21 < ws-client> <ChillerDragon> he runs the bridge to my only social interaction he got me at the balls
09:22 <+bridge> <ryozuki> idk
09:22 <+bridge> <ryozuki> agpl best
09:22 <+bridge> <ryozuki> idc*
09:22 < ws-client> <Jupstar> but asshole move non than less
09:22 < ws-client> <ChillerDragon> bsd best
09:22 < ws-client> <Jupstar> better than agpl at least 😂 
09:22 <+bridge> <ryozuki> changing license after fact is a bit meh ye
09:22 <+bridge> <ryozuki> and one line is being troll xd
09:23 <+bridge> <ryozuki> chiller put some rust at the balls
09:23 <+bridge> <ryozuki> so atleast they are memory safe
09:23 < ws-client> <ChillerDragon> e wot xd
09:23 <+bridge> <ryozuki> :poggers2:
09:23 < ws-client> <ChillerDragon> balls of steel
09:23 < ws-client> <ChillerDragon> get rusty
10:59 <+bridge> <heinrich5991> I'm sorry for hosting and maintaining the IRC bridge?
11:02 <+bridge> <ryozuki> idk why i got  the ich to implement my own hashmap in rust and c
11:03 <+bridge> <ryozuki> are there existing stack based hashmaps on rust?
11:03 <+bridge> <ryozuki> can be fun
11:04 <+bridge> <ryozuki> like smallvec but smallmap
11:10 < ws-client> <ChillerDragon> @heinrich5991 ...
11:11 <+bridge> <heinrich5991> what is it?
11:11 < ws-client> <ChillerDragon> your comment :D
11:11 < ws-client> <ChillerDragon> nobody complained about you hosting the bridge
11:11 < ws-client> <Jupstar> its the first time i seen him express some kind of sadness
11:11 < ws-client> <ChillerDragon> i appreciate that
11:12 < ws-client> <Jupstar> we r on a good way
11:13 <+bridge> <heinrich5991> https://crates.io/crates/micromap
11:13 <+bridge> <heinrich5991> apparently it's just an array without any hashing
11:13 <+bridge> <heinrich5991> but thinking about it, it makes sense
11:14 <+bridge> <heinrich5991> if it's small, you can forego the hash part of the hashmap
11:14 <+bridge> <ryozuki> true
11:14 <+bridge> <ryozuki> does it make sense to make one with hashing and stack based
11:14 <+bridge> <ryozuki> but the stack doesnt need to be small
11:14 <+bridge> <ryozuki> well i wanna make it for fun
11:14 <+bridge> <ryozuki> can be useful to learn unsafe
11:14 <+bridge> <heinrich5991> then just do it I guess ^^
11:16 <+bridge> <ryozuki> i see the hashless aproach just works till 20
11:19 <+bridge> <heinrich5991> yea, just till some constant
11:44 <+bridge> <Jupstar ✪> @ryozuki if u like working on hashmaps and have no hobbies. I have a feature request for a create i use xdd
11:45 <+bridge> <Jupstar ✪> @ryozuki if u like working on hashmaps and have no hobbies. I have a feature request for a crate i use xdd
11:46 <+bridge> <ryozuki> xd
11:46 <+bridge> <Jupstar ✪> I pay u 5€ 😬
11:46 <+bridge> <ryozuki> i dont need 5€
11:46 <+bridge> <ryozuki> :ez:
11:47 <+bridge> <Jupstar ✪> 🥹
11:47 <+bridge> <Jupstar ✪> Then i need to do it, shit xd
12:07 <+bridge> <heinrich5991> @Jupeyy_Keks what's the feature request?
12:10 < ws-client> <Jupstar> @heinrich5991 i use a crate called hashlink its basically a hashmap but with a linked list, which is nice to keep the order, even when calling remove. For the iterator i'd find it useful to have a "skip_to_key".. since its a linked list it could easily start the iterator at a different point in the linked list, which is ultimately nice if i want to drop an element and inform all elements after the element that there was a
12:10 < ws-client> change
12:10 <+bridge> <heinrich5991> ah, like the hashmap in python
12:13 <+bridge> <heinrich5991> I guess that would only be possible on iterator creation
12:14 <+bridge> <heinrich5991> although that's probably not an issue for you?
12:14 < ws-client> <Jupstar> yeah its not an issue
12:16 <+bridge> <heinrich5991> ah!
12:16 <+bridge> <heinrich5991> the iterator implements `ExactSizeIterator`
12:16 <+bridge> <heinrich5991> that's probably not possible for yours
12:16 < ws-client> <Jupstar> yes i know
12:17 < ws-client> <Jupstar> but it could simply be another iterator
12:17 < ws-client> <Jupstar> that doesnt implement it
12:17 <+bridge> <heinrich5991> yea
12:17 <+bridge> <heinrich5991> but that makes it a little more complicated to convince the maintainers to implement it
12:17 < ws-client> <Jupstar> yeah :D
12:18 < ws-client> <Jupstar> But if i wrap the iterator in a "skip" struct.. 
12:19 < ws-client> <Jupstar> similar to how map etc. to it with iterators
12:19 < ws-client> <Jupstar> would maybe make the code dublication less
12:20 < ws-client> <Jupstar> dup
12:46 < ws-client> <ChillerDragon> !jup @Jupstar ✪  @heinrich5991 name ping commands are off now :c
12:46 < ws-client> <ChillerDragon> !ping
12:46 < chillerbot1> pong
12:46 < ws-client> <ChillerDragon> only this stayed for testing
12:49 <+bridge> <Jupstar ✪> !rust d
12:49 <+bridge> <Jupstar ✪> Mhh
12:49 <+bridge> <Jupstar ✪> Sucks
12:50 <+bridge> <Jupstar ✪> Now I have to type out ChillerDragons way too long name again xD
12:50 < ws-client> <ChillerDragon> do @c<tab> on webchat axaxax
12:51 < ws-client> <ChillerDragon> also my name is easier to type than fakin ✪
12:55 <+bridge> <Jupstar ✪> Then map DragonBall to my name. Then we ChillerDragonBall
12:59 < ws-client> <ChillerDragon> lol
13:03 < ws-client> <Jupstar > !c test
13:10 <+bridge> <ryozuki> ```rust
13:10 <+bridge> <ryozuki> impl<K, V, const N: usize, S> SmolMap<K, V, N, S>
13:10 <+bridge> <ryozuki> where
13:10 <+bridge> <ryozuki>     K: Eq + Hash,
13:10 <+bridge> <ryozuki>     S: BuildHasher,
13:10 <+bridge> <ryozuki> {
13:10 <+bridge> <ryozuki>     /// # Panics
13:10 <+bridge> <ryozuki>     /// If length == N
13:10 <+bridge> <ryozuki>     pub fn insert(&mut self, key: K, value: V) -> Option<V> {
13:10 <+bridge> <ryozuki>         assert_ne!(self.len, N);
13:10 <+bridge> <ryozuki> 
13:10 <+bridge> <ryozuki>         let mut hasher = self.state.build_hasher();
13:10 <+bridge> <ryozuki>         key.hash(&mut hasher);
13:10 <+bridge> <ryozuki>         let start_idx = hasher.finish() as usize;
13:10 <+bridge> <ryozuki>         let mut iter_idx = 0;
13:10 <+bridge> <ryozuki> 
13:10 <+bridge> <ryozuki>         loop {
13:10 <+bridge> <ryozuki>             let idx_mod: usize = (start_idx + iter_idx * iter_idx) % self.storage.len();
13:10 <+bridge> <ryozuki> 
13:10 <+bridge> <ryozuki>             if self.storage[idx_mod].0 {
13:10 <+bridge> <ryozuki>                 if unsafe { self.storage[idx_mod].1.assume_init_ref() }
13:10 <+bridge> <ryozuki>                     .0
13:10 <+bridge> <ryozuki>                     .eq(&key)
13:10 <+bridge> <ryozuki>                 {
13:11 <+bridge> <ryozuki>                     let new_val = MaybeUninit::new((key, value));
13:11 <+bridge> <ryozuki>                     let old_val = std::mem::replace(&mut self.storage[idx_mod].1, new_val);
13:11 <+bridge> <ryozuki>                     return Some(unsafe { old_val.assume_init().1 });
13:11 <+bridge> <ryozuki>                 }
13:11 <+bridge> <ryozuki>             } else {
13:11 <+bridge> <ryozuki>                 let new_val = MaybeUninit::new((key, value));
13:11 <+bridge> <ryozuki>                 self.storage[idx_mod].0 = true;
13:11 <+bridge> <ryozuki> ```rust
13:11 <+bridge> <ryozuki> #[derive(Debug)]
13:11 <+bridge> <ryozuki> pub struct SmolMap<K, V, const N: usize, S = RandomState> {
13:11 <+bridge> <ryozuki>     storage: [(bool, MaybeUninit<(K, V)>); N],
13:11 <+bridge> <ryozuki>     len: usize,
13:11 <+bridge> <ryozuki>     state: S,
13:11 <+bridge> <ryozuki> }
13:11 <+bridge> <ryozuki> ```
13:11 <+bridge> <heinrich5991> `(bool, T)` → `Option<T>`
13:11 <+bridge> <heinrich5991> would make it safe and potentially smaller
13:11 <+bridge> <ryozuki> hmm i thought about ye
13:11 <+bridge> <ryozuki> i guess in this case maybeuninit is not faster xd
13:12 <+bridge> <ryozuki> but i wanted to play with maybeuninit
13:12 <+bridge> <ryozuki> ill change it to option tho
13:12 <+bridge> <heinrich5991> `Option<T>` is literally `(bool, MaybeUninit<T>)` ^^
13:12 <+bridge> <ryozuki> xD
13:12 <+bridge> <heinrich5991> except saafe
13:12 <+bridge> <heinrich5991> except safe
13:12 <+bridge> <heinrich5991> hmm
13:12 <+bridge> <heinrich5991> you could put the bools into another array
13:12 <+bridge> <heinrich5991> then it's not useless anymore
13:12 <+bridge> <heinrich5991> SoA instead of AoS
13:13 <+bridge> <ryozuki> whats better
13:13 <+bridge> <heinrich5991> SoA
13:13 <+bridge> <ryozuki> so bools in another array?
13:13 <+bridge> <ryozuki> ima try
13:14 <+bridge> <heinrich5991> yes
13:14 <+bridge> <heinrich5991> you could separate keys from values while you're at it
13:14 <+bridge> <ryozuki> this also allows me to make new() const
13:14 <+bridge> <ryozuki> pog
13:15 <+bridge> <ryozuki> ```rust
13:15 <+bridge> <ryozuki>  pub fn new(hasher: S) -> Self {
13:15 <+bridge> <ryozuki>         let data = std::array::from_fn(|_| (false, MaybeUninit::uninit()));
13:15 <+bridge> <ryozuki> 
13:15 <+bridge> <ryozuki>         Self {
13:15 <+bridge> <ryozuki>             storage: data,
13:15 <+bridge> <ryozuki>             len: 0,
13:15 <+bridge> <ryozuki>             state: hasher,
13:15 <+bridge> <ryozuki>         }
13:15 <+bridge> <ryozuki>     }
13:15 <+bridge> <ryozuki> 
13:15 <+bridge> <ryozuki>     pub const fn new(hasher: S) -> Self {
13:15 <+bridge> <ryozuki>         Self {
13:15 <+bridge> <ryozuki>             storage: unsafe {
13:15 <+bridge> <ryozuki>                 MaybeUninit::uninit().assume_init()
13:15 <+bridge> <ryozuki>             },
13:15 <+bridge> <ryozuki>             tags: [false; N],
13:15 <+bridge> <ryozuki>             len: 0,
13:15 <+bridge> <ryozuki>             state: hasher,
13:15 <+bridge> <ryozuki>         }
13:15 <+bridge> <ryozuki>     }
13:15 <+bridge> <ryozuki> ```
13:15 <+bridge> <ryozuki> before - after
13:17 <+bridge> <ryozuki> ```rust
13:17 <+bridge> <ryozuki>     /// # Panics
13:17 <+bridge> <ryozuki>     /// If length == N
13:17 <+bridge> <ryozuki>     pub fn insert(&mut self, key: K, value: V) -> Option<V> {
13:17 <+bridge> <ryozuki>         assert_ne!(self.len, N);
13:17 <+bridge> <ryozuki> 
13:17 <+bridge> <ryozuki>         let mut hasher = self.state.build_hasher();
13:17 <+bridge> <ryozuki>         key.hash(&mut hasher);
13:17 <+bridge> <ryozuki>         let start_idx = hasher.finish() as usize;
13:17 <+bridge> <ryozuki>         let mut iter_idx = 0;
13:17 <+bridge> <ryozuki> 
13:17 <+bridge> <ryozuki>         loop {
13:18 <+bridge> <ryozuki>             let idx_mod: usize = (start_idx + iter_idx * iter_idx) % self.storage.len();
13:18 <+bridge> <ryozuki> 
13:18 <+bridge> <ryozuki>             if self.tags[idx_mod] {
13:18 <+bridge> <ryozuki>                 if unsafe { self.storage[idx_mod].assume_init_ref() }
13:18 <+bridge> <ryozuki>                     .0
13:18 <+bridge> <ryozuki>                     .eq(&key)
13:18 <+bridge> <ryozuki>                 {
13:18 <+bridge> <ryozuki>                     let new_val = MaybeUninit::new((key, value));
13:18 <+bridge> <ryozuki>                     let old_val = std::mem::replace(&mut self.storage[idx_mod], new_val);
13:18 <+bridge> <ryozuki>                     return Some(unsafe { old_val.assume_init().1 });
13:18 <+bridge> <ryozuki>                 }
13:18 <+bridge> <ryozuki>             } else {
13:18 <+bridge> <ryozuki>                 let new_val = MaybeUninit::new((key, value));
13:18 <+bridge> <ryozuki>                 self.tags[idx_mod] = true;
13:18 <+bridge> <ryozuki>                 self.storage[idx_mod] = new_val;
13:18 <+bridge> <ryozuki>                 self.len += 1;
13:18 <+bridge> <ryozuki>                 return None;
13:18 <+bridge> <ryozuki>             }
13:18 <+bridge> <ryozuki> 
13:18 <+bridge> <ryozuki> i guess this probs optimizes better
13:18 <+bridge> <heinrich5991> > ``     /// # Panics
13:18 <+bridge> <heinrich5991> >     /// If length == N
13:18 <+bridge> <ryozuki> i dont even need len
13:18 <+bridge> <ryozuki> oh
13:18 <+bridge> <ryozuki> i do
13:18 <+bridge> <ryozuki> xD
13:18 <+bridge> <ryozuki> whats wrong?
13:18 <+bridge> <heinrich5991> it should only panic if the key is not already in there, right?
13:19 <+bridge> <ryozuki> true
13:19 <+bridge> <ryozuki> if it needs to find a new slot
13:19 <+bridge> <ryozuki> unused*
13:19 <+bridge> <ryozuki> moved the assert to the else
13:19 <+bridge> <ryozuki> hmm
13:20 <+bridge> <ryozuki> wait maybe i should just loop N
13:20 <+bridge> <ryozuki> not inifnite
13:21 <+bridge> <heinrich5991> are you guaranteed to hit every bucket like that btw?
13:21 <+bridge> <ryozuki> i would guess yes
13:21 <+bridge> <ryozuki> but idk rly xD
13:22 <+bridge> <ryozuki> ok looping N is not enough
13:22 <+bridge> <ryozuki> cuz it may need more loops
13:22 <+bridge> <ryozuki> hm
13:23 <+bridge> <ryozuki> ok it looks like it eventually hits every bucket
13:23 <+bridge> <ryozuki> but i got a very long runtime xD
13:25 <+bridge> <ryozuki> > Unfortunately, quadratic probing has the disadvantage that typically not all hash table slots will be on the probe sequence. Using p(K, i) = i2 gives particularly inconsistent results. For many hash table sizes, this probe function will cycle through a relatively small number of slots. If all slots on that cycle happen to be full, this means that the record cannot be inserted at all! For example, if our hash table has three slots, then records th
13:26 <+bridge> <ryozuki> hmm
13:26 <+bridge> <ryozuki> since i cant do resize, which is usually done when the load factor aproaches 0.75 (iirc) maybe linear probing is best used here
13:28 <+bridge> <ryozuki> ```rust
13:28 <+bridge> <ryozuki> pub fn insert(&mut self, key: K, value: V) -> Option<V> {
13:28 <+bridge> <ryozuki>         let mut hasher = self.state.build_hasher();
13:28 <+bridge> <ryozuki>         key.hash(&mut hasher);
13:28 <+bridge> <ryozuki>         let start_idx = hasher.finish() as usize;
13:28 <+bridge> <ryozuki>         let mut iter_idx = 0;
13:28 <+bridge> <ryozuki> 
13:28 <+bridge> <ryozuki>         while iter_idx < N {
13:28 <+bridge> <ryozuki>             let idx_mod: usize = (start_idx + iter_idx) % self.storage.len();
13:28 <+bridge> <ryozuki> 
13:28 <+bridge> <ryozuki>             if self.tags[idx_mod] {
13:28 <+bridge> <ryozuki>                 if unsafe { self.storage[idx_mod].assume_init_ref() }
13:28 <+bridge> <ryozuki>                     .0
13:28 <+bridge> <ryozuki>                     .eq(&key)
13:28 <+bridge> <ryozuki>                 {
13:28 <+bridge> <ryozuki>                     let new_val = MaybeUninit::new((key, value));
13:28 <+bridge> <ryozuki>                     let old_val = std::mem::replace(&mut self.storage[idx_mod], new_val);
13:29 <+bridge> <ryozuki>                     return Some(unsafe { old_val.assume_init().1 });
13:29 <+bridge> <ryozuki>                 }
13:29 <+bridge> <ryozuki>             } else {
13:29 <+bridge> <ryozuki>                 let new_val = MaybeUninit::new((key, value));
13:29 <+bridge> <ryozuki>                 self.tags[idx_mod] = true;
13:29 <+bridge> <ryozuki>                 self.storage[idx_mod] = new_val;
13:29 <+bridge> <ryozuki>                 self.len += 1;
13:29 <+bridge> <ryozuki>                 return None;
13:29 <+bridge> <ryozuki>             }
13:29 <+bridge> <ryozuki> 
13:29 <+bridge> <ryozuki>             iter_idx += 1;
13:29 <+bridge> <ryozuki>         }
13:29 <+bridge> <ryozuki> 
13:29 <+bridge> <ryozuki>         panic!("no slot could be found")
13:29 <+bridge> <ryozuki> final result
13:29 <+bridge> <ryozuki> ill probs change it to a result
13:32 <+bridge> <heinrich5991> as the hash map gets fuller, it makes no sense to keep it as a hash map I guess
13:33 <+bridge> <heinrich5991> you'd have to manually ensure that it stays below the load factor
13:33 <+bridge> <ryozuki> ye thats why resize happens
13:33 <+bridge> <heinrich5991> otherwise linear probing would be beneficial
13:33 <+bridge> <heinrich5991> without any hash
13:33 <+bridge> <ryozuki> but i cant resize  with stack based storage
13:33 <+bridge> <heinrich5991> yes
13:34 <+bridge> <heinrich5991> perhaps a tree based map would make more sense?
13:34 <+bridge> <ryozuki> whats that?
13:34 <+bridge> <heinrich5991> `std::map` in C++
13:34 <+bridge> <heinrich5991> or `BTreeMap` in rust
13:34 <+bridge> <heinrich5991> it works by constructing a tree
13:34 <+bridge> <heinrich5991> you have a `<` relation on the key type
13:37 <+bridge> <ryozuki> i see
13:37 <+bridge> <ryozuki> well maybe next time xd
13:38 <+bridge> <learath2> Self balancing rb trees, go go
13:53 <+bridge> <ryozuki> i hear red black trees are pain
14:15 <+bridge> <learath2> They are cool tho
14:16 <+bridge> <_voxeldoesart> red black tees
14:30 <+bridge> <ryozuki> it seems my simple hashmap passes miri
14:30 <+bridge> <ryozuki> but maybe i need more tests xd
14:38 <+bridge> <ryozuki> ```
14:38 <+bridge> <ryozuki> smolmap get 1000        time:   [7.6065 ns 7.6679 ns 7.7887 ns]
14:38 <+bridge> <ryozuki> Found 10 outliers among 100 measurements (10.00%)
14:38 <+bridge> <ryozuki>   5 (5.00%) high mild
14:38 <+bridge> <ryozuki>   5 (5.00%) high severe
14:38 <+bridge> <ryozuki> 
14:38 <+bridge> <ryozuki> hashmap get 1000        time:   [8.9185 ns 8.9328 ns 8.9479 ns]
14:38 <+bridge> <ryozuki> Found 1 outliers among 100 measurements (1.00%)
14:38 <+bridge> <ryozuki>   1 (1.00%) high severe
14:38 <+bridge> <ryozuki> ```
14:38 <+bridge> <ryozuki> pog
14:39 <+bridge> <deen> Another miri fan? 😄
14:39 <+bridge> <ryozuki> well miri is nice to check if ur unsafe  is ok
14:39 <+bridge> <ryozuki> its the main reason it exists i think
14:40 <+bridge> <ryozuki> ```
14:40 <+bridge> <ryozuki> The implementation of the Rust abstract machine - miri - stops execution of Rust programs when they exhibit undefined behavior.
14:40 <+bridge> <ryozuki> 
14:40 <+bridge> <ryozuki> C, C++, etc. don't even have implementations of their abstract machines. They don't have one existing as a goal. And they are happy to make certain operations exhibit undefined behavior even if that implies that it would make an implementation of the abstract machine that traps impossible.
14:40 <+bridge> <ryozuki> 
14:40 <+bridge> <ryozuki> This is why even if you were to combine valgrind with address sanitizer, memory sanitizer, thread sanitizer, undefined-behavior-sanitizer, and other existing C and C++ tools, there is still a lot of classes of undefined behavior that these tools can't detect.
14:40 <+bridge> <ryozuki> 
14:40 <+bridge> <ryozuki> That's fine in C and C++, but not fine in Rust. In Rust, if we add a new type of undefined behavior, the constraint is that it should be (demonstrably) possible to extend miri to detect it, such that if a user doesn't know whether some program exhibits undefined behavior for some inputs, they can just run it under miri, and miri will precisely pinpoint which part of their code exhibited undefined behavior and why, and how their program execution go
14:40 <+bridge> <ryozuki> ```
14:40 <+bridge> <ryozuki> i love this quote
14:40 <+bridge> <deen> I know, I filed a few bugs with it yesterday
14:41 <+bridge> <heinrich5991> where did you file bugs with it?
14:41 <+bridge> <ryozuki> i guess his work
14:51 <+bridge> <ryozuki> sad thing is miri doesnt work with futures
14:52 <+bridge> <ryozuki> but well most unsafe  code *tm is usually not in async
14:52 <+bridge> <ryozuki> or u can isolate it
14:52 <+bridge> <ryozuki> idk
14:52 <+bridge> <deen> async started working recently I think
14:53 <+bridge> <deen> epoll_wait has been implemented: https://github.com/rust-lang/miri/pull/2764, that was blocking it in my cases
14:53 <+bridge> <ryozuki> oh
14:53 <+bridge> <ryozuki> thats epic
15:20 <+bridge> <ryozuki> @learath2 if i implement a red black tree can i get into google?
15:20 <+bridge> <ryozuki> :gigachad:
15:22 <+bridge> <Jupstar ✪> maybe if its a red, yellow, green, blue tree
15:23 <+bridge> <ryozuki> lgbt tree
15:23 <+bridge> <Jupstar ✪> https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/1200px-Google_%22G%22_Logo.svg.png
15:23 <+bridge> <ryozuki> oh lmao
15:23 <+bridge> <Jupstar ✪> xd
15:23 <+bridge> <ryozuki> i heard google asked to implement rd trees
15:23 <+bridge> <gerdoe> the real g
15:23 <+bridge> <ryozuki> and a guy who made something in javascript and was famous for it failed
15:23 <+bridge> <ryozuki> and he complained in social media
15:23 <+bridge> <ryozuki> xd
15:24 <+bridge> <ryozuki> https://twitter.com/mxcl/status/608682016205344768?lang=en
15:31 <+bridge> <learath2> Why would you want to be a corporate slave?
15:31 <+bridge> <ryozuki> to get 500k$ per year
15:31 <+bridge> <ryozuki> i just work 1 year
15:31 <+bridge> <ryozuki> and retire
15:31 <+bridge> <ryozuki> ok i can do with 300k
15:31 <+bridge> <ryozuki> give or take
15:31 <+bridge> <ryozuki> actually im half sure most of devs working for google arent that better than us here
15:32 <+bridge> <ryozuki> they just got a degree in (famous name of uni here) and some contacts
15:32 <+bridge> <ryozuki> but contacts are everything
15:33 <+bridge> <learath2> He wrote homebrew, the worst package manager to ever be envisioned by humankind. I'd have rejected him just for that
15:33 <+bridge> <ryozuki> ye xd
15:33 <+bridge> <ryozuki> hn mentions homebrew sucked hard back then
15:33 <+bridge> <ryozuki> they didnt even know how to manage  ssl certts
15:34 <+bridge> <ryozuki> > However, they don't usually remember that Homebrew at that point was a poor and incomplete reimplementation of other package managers, used to break installed software on updates, and the fact that the very team that was maintaining Homebrew was not competent enough to either manage SSL certificate for their website properly or at least admit that it was a bug.
15:34 <+bridge> <learath2> They probably have bigger algobrains, able to golf 69 algorithms at the same time while brushing their teeths
15:34 <+bridge> <ryozuki> im quite sure not
15:35 <+bridge> <ryozuki> they just werent lazy enough and studied a bit to pass the leetcode exam
15:35 <+bridge> <ryozuki> its literally the only entry bar
15:35 <+bridge> <ryozuki> and maybe a good uni degree
15:35 <+bridge> <ryozuki> but its how the world works anyway
15:35 <+bridge> <ryozuki> there is a reason most interesting software is done by ppl in their hobby time
15:36 <+bridge> <ryozuki> @learath2 when will u finish uni btw
15:37 <+bridge> <ryozuki> if u ever get in a big company, give good word of me ty
15:37 <+bridge> <learath2> September hopefully
15:37 <+bridge> <ryozuki> "i know a crazy rust dev"
15:37 <+bridge> <ryozuki> :justatest:
15:38 <+bridge> <learath2> No way I get into anywhere decent finishing a 3y degree in 7 years. I'll be mopping floors at mcdonalds or living in estonia filling web templates at a "web design agency"
15:38 <+bridge> <ryozuki> no
15:38 <+bridge> <ryozuki> make a nice project in C
15:38 <+bridge> <ryozuki> show it off
15:38 <+bridge> <ryozuki> it worked for me
15:38 <+bridge> <ryozuki> actually the barebones following a tutorial rust OS i made helped me find a job
15:38 <+bridge> <ryozuki> it impressed some ppl
15:38 <+bridge> <ryozuki> just by being interested in that
15:38 <+bridge> <ryozuki> even if it sucked
15:39 <+bridge> <ryozuki> anyway im sure u will be working rly early
15:39 <+bridge> <ryozuki> it would be a waste
15:40 <+bridge> <ryozuki> and absolutely mention ddnet
15:40 <+bridge> <ryozuki> its a lifelong project, also telling ur story about it more or less helps
15:40 <+bridge> <ryozuki> atleast it did for me
15:41 <+bridge> <ryozuki> thanks for coming to my unsolicited advice ted talk
15:41 <+bridge> <ryozuki> (also to me uni matters almost nothing, u will see why when u join workforce, there are devs, and "only" uni devs who have rly not much interest outside of work)
15:53 <+bridge> <heinrich5991> I think you'll be able to find a decent job given your experience
15:54 <+bridge> <Jupstar ✪> but not in europe
15:54 <+bridge> <Jupstar ✪> they dont care about skill
15:54 <+bridge> <Jupstar ✪> only certificates
15:54 <+bridge> <Jupstar ✪> 😬
15:58 <+bridge> <Jupstar ✪> ```
15:58 <+bridge> <Jupstar ✪> thread 'main' panicked at 'unsupported Miri functionality: can't call foreign function `GFp_cpuid_setup` on OS `linux`', /home/jupeyy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.16.20/src/cpu.rs:46:21
15:58 <+bridge> <Jupstar ✪> ```
15:58 <+bridge> <Jupstar ✪> 
15:58 <+bridge> <Jupstar ✪> i depend on unsupported feature ;~;
16:00 <+bridge> <heinrich5991> it might affect your pay, but I think you'll be able to find a job
16:07 <+bridge> <Jupstar ✪> so not so decent job
16:07 <+bridge> <Jupstar ✪> except u like to work for other ppls economy
16:08 <+bridge> <heinrich5991> better than that though:
16:08 <+bridge> <heinrich5991> > I'll be mopping floors at mcdonalds or living in estonia filling web templates at a "web design agency"
16:09 <+bridge> <ryozuki> if i got a job @learath2 can too
16:09 <+bridge> <ryozuki> :justatest:
16:09 <+bridge> <ryozuki> i dont even have uni
16:10 <+bridge> <Jupstar ✪> xd
16:48 <+bridge> <deen> I think CS is great in this respect. Many fun startups take people without a CS background even, as long as you can show that you are capable.
16:48 <+bridge> <deen> Not unsupported, but no foreign functions is also my main limitation of miri
16:49 <+bridge> <deen> Maybe the large European corps, but even at SAP we had developers who never studied computer science. There are also US corps and startups which hire in Europe
16:54 <+bridge> <Zwelf> Why does 
16:54 <+bridge> <Zwelf> ```rust
16:54 <+bridge> <Zwelf> struct Test;
16:54 <+bridge> <Zwelf> 
16:54 <+bridge> <Zwelf> impl Test {
16:54 <+bridge> <Zwelf>     fn a(&mut self) -> &() {
16:54 <+bridge> <Zwelf>         &()
16:54 <+bridge> <Zwelf>     }
16:54 <+bridge> <Zwelf> }
16:54 <+bridge> <Zwelf> 
16:54 <+bridge> <Zwelf> fn compile(t: &mut Test) -> &() {
16:54 <+bridge> <Zwelf>     let b = t.a();
16:54 <+bridge> <Zwelf>     if false {
16:54 <+bridge> <Zwelf>         return b;
16:54 <+bridge> <Zwelf>     }
16:54 <+bridge> <Zwelf>     t.a()
16:54 <+bridge> <Zwelf> }
16:54 <+bridge> <Zwelf> ```
16:54 <+bridge> <Zwelf> not compile due to lifetimes. But when removing the `if false { return b; }` it does compile :wtf:
16:57 <+bridge> <ryozuki> mutable borrow
16:57 <+bridge> <learath2> borrow checking probably happens before any deadcode is removed
16:57 <+bridge> <ryozuki> ```
16:57 <+bridge> <ryozuki> error[E0499]: cannot borrow `*t` as mutable more than once at a time
16:57 <+bridge> <ryozuki>   --> src/main.rs:14:5
16:57 <+bridge> <ryozuki>    |
16:57 <+bridge> <ryozuki> 9  | fn compile(t: &mut Test) -> &() {
16:57 <+bridge> <ryozuki>    |               - let's call the lifetime of this reference `'1`
16:57 <+bridge> <ryozuki> 10 |     let b = t.a();
16:57 <+bridge> <ryozuki>    |             ----- first mutable borrow occurs here
16:57 <+bridge> <ryozuki> 11 |     if false {
16:57 <+bridge> <ryozuki> 12 |         return b;
16:57 <+bridge> <ryozuki>    |                - returning this value requires that `*t` is borrowed for `'1`
16:57 <+bridge> <ryozuki> 13 |     }
16:57 <+bridge> <ryozuki> 14 |     t.a()
16:58 <+bridge> <ryozuki>    |     ^^^^^ second mutable borrow occurs here
16:58 <+bridge> <ryozuki> ```
16:58 <+bridge> <ryozuki> this is the error
16:58 <+bridge> <ryozuki> the thing is that if u remove the return it probs can handle the drop of the reference
16:58 <+bridge> <ryozuki> and it knows its just 1 mut borrow at a time
17:00 <+bridge> <Zwelf> But this doesn't compile either (maybe even more surprising?). The mutable borrow is now dropped from the scope:
17:00 <+bridge> <Zwelf> ```rust
17:00 <+bridge> <Zwelf> struct Test(());
17:00 <+bridge> <Zwelf> 
17:00 <+bridge> <Zwelf> impl Test {
17:00 <+bridge> <Zwelf>     fn a(&mut self) -> &() {
17:00 <+bridge> <Zwelf>         &self.0
17:00 <+bridge> <Zwelf>     }
17:00 <+bridge> <Zwelf> }
17:00 <+bridge> <Zwelf> 
17:00 <+bridge> <Zwelf> fn compile(t: &mut Test) -> &() {
17:00 <+bridge> <Zwelf>     {
17:00 <+bridge> <Zwelf>         let b = t.a();
17:00 <+bridge> <Zwelf>         if false {
17:00 <+bridge> <Zwelf>             return b;
17:00 <+bridge> <Zwelf>         }
17:00 <+bridge> <Zwelf>     }
17:00 <+bridge> <Zwelf>     t.a()
17:00 <+bridge> <Zwelf> }
17:01 <+bridge> <Zwelf> ```
17:01 <+bridge> <Zwelf> (the workaround I tried on my real program)
17:02 <+bridge> <ryozuki> @Zwelf with polonius it works
17:02 <+bridge> <ryozuki> the first
17:02 <+bridge> <ryozuki> ❯ RUSTFLAGS="-Z polonius" cargo +nightly c
17:02 <+bridge> <learath2> I was about to check the same thing 😄
17:02 <+bridge> <ryozuki> polonius is the experimental borrow checker
17:03 <+bridge> <ryozuki> i think the main grip here is the return
17:03 <+bridge> <learath2> I guess the stable borrow checker just can't handle early returns well
17:03 <+bridge> <ryozuki> it doesnt drop b
17:03 <+bridge> <ryozuki> cuz return
17:03 <+bridge> <ryozuki> the day polonius stabilizes will be great
17:03 <+bridge> <ryozuki> must party
17:06 <+bridge> <Zwelf> So frustrating xD. I'm considering to start using nightly for that (on twgame)
17:06 <+bridge> <learath2> http://smallcultfollowing.com/babysteps/blog/2018/06/15/mir-based-borrow-check-nll-status-update/#polonius
17:07 <+bridge> <learath2> https://rust-lang.github.io/rfcs/2094-nll.html
17:07 <+bridge> <learath2> Non lexical lifetimes are apparently still not a thing, so as far as the borrow checker is concerned, nothing is dropped there
17:10 <+bridge> <deen> Just found a random DDNet shoutout from bors 5 years ago: https://bors.tech/newsletter/2018/07/01/tmib-18/
17:12 <+bridge> <ryozuki> lol true
17:12 <+bridge> <ryozuki> btw bors author is graydon
17:12 <+bridge> <ryozuki> original rust creator
17:12 <+bridge> <ryozuki> iirc
17:12 <+bridge> <Zwelf> Hm, where does this fit into the wiki resources page. Blog posts or external websites referencing DDNet 🤔
17:15 <+bridge> <ryozuki> blog posts maybe
17:15 <+bridge> <ryozuki> hmm idk
17:17 <+bridge> <Zwelf> yeah, fits a bit better (although not perfectly)
17:19 <+bridge> <ryozuki> @heinrich5991 https://lists.wikimedia.org/hyperkitty/list/mediawiki-announce@lists.wikimedia.org/thread/HJFGD6JHQZPIUV4UVYAFPZGGGXGAHADY/
17:19 <+bridge> <ryozuki> soon ur skin will be back
17:19 <+bridge> <ryozuki> the skin you like*
17:21 <+bridge> <ryozuki> this reminds me i need to upgrade debian
17:22 <+bridge> <heinrich5991> it doesn't work because returning the value somehow borrows it even harder
17:22 <+bridge> <heinrich5991> I think I have an example for this in libtw2, too
17:23 <+bridge> <heinrich5991> not this bors though, this is a reimplementation
17:23 <+bridge> <heinrich5991> (no idea whether he's the author of the original bors)
17:25 <+bridge> <ryozuki> https://github.com/graydon/bors
17:25 <+bridge> <ryozuki> > This project is only very moderately maintained and mostly dormant (though not obsolete -- it's still used daily). It was originally developed for use early in the Rust project's life, and has been superseded by multiple enhanced rewrites:
17:25 <+bridge> <ryozuki> pog
17:25 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1119286753543585822/image.png
18:57 <+bridge> <chairn> have you tried updating more often 😄 ?
18:57 <+bridge> <ryozuki> xd i do
18:57 <+bridge> <ryozuki> but this is cuz debian released new version
18:57 <+bridge> <ryozuki> 12
19:18 <+bridge> <Jupstar ✪> ufffffff
19:18 <+bridge> <Jupstar ✪> when chairn tells u to update more often
19:18 <+bridge> <Jupstar ✪> then u know u live in 1995
19:28 <+bridge> <ryozuki> xd
19:28 <+ChillerDragon> watf fred
19:28 <+bridge> <ryozuki> fred again?
19:28 <+ChillerDragon> @ChillerDragon u drunk? xd
19:28 <+bridge> <ryozuki> what happened?
19:29 <+ChillerDragon> https://github.com/TeeworldsCN/teeworlds.cn/issues/6
19:29 <+ChillerDragon> CHINA repo
19:29 <+ChillerDragon> yes im in how to join
19:30 <+ChillerDragon> https://zillyhuhn.com/cs/.1686936620.png
19:30 <+ChillerDragon> where irc
19:31 <+bridge> <chairn> im surprised he's has so many packages to upgrade. I thought he would be always up to date for features and security reasons
19:31 <+ChillerDragon> https://zillyhuhn.com/cs/.1686936684.png
19:31 <+ChillerDragon> looks slick and modern
19:31 <+ChillerDragon> teach me frontend
19:31 <+ChillerDragon> also there is a error
19:31 <+bridge> <tsfreddie> it was unmaintained
19:31 <+bridge> <Jupstar ✪> 😬
19:32 <+bridge> <tsfreddie> http master when through some changes and I couldn't be bothered to update
19:32 <+ChillerDragon> so wats the pinger about
19:32 <+bridge> <tsfreddie> nothing
19:32 <+bridge> <tsfreddie> i was bored
19:32 <+ChillerDragon> xd
19:33 <+ChillerDragon> cant blame u
19:33 <+ChillerDragon> i did the same xd
19:33 <+ChillerDragon> https://github.com/ChillerDragon/oy-plz-come-irc
19:33 <+bridge> <tsfreddie> ye, that's why i was bored
19:34 <+bridge> <ryozuki> ye chiller u spam
19:35 <+ChillerDragon> on gh?
19:35 <+bridge> <ryozuki> xd
19:35 <+bridge> <ryozuki> everywhere
19:35 <+ChillerDragon> yea
19:35 <+ChillerDragon> cant argue with that
19:35 <+bridge> <tsfreddie> why isn't there a spambot that just ping everyone
19:35 <+ChillerDragon> i get that a lot
19:35 <+ChillerDragon> especially in grenade based gamemodes
19:35 <+bridge> <tsfreddie> cuz it seems pretty easy to do
19:35 <+ChillerDragon> grenade was made for spam..
19:35 <+ChillerDragon> fred where?
19:35 <+ChillerDragon> on gh?
19:35 <+ChillerDragon> irc?
19:35 <+ChillerDragon> tw?
19:35 <+ChillerDragon> dc?
19:36 <+bridge> <Jupstar ✪> sadly the cool commands were banned
19:36 <+bridge> <Jupstar ✪> !rust ;~;
19:36 <+ChillerDragon> !rip
19:36 <+bridge> <Jupstar ✪> !ping
19:36 < chillerbot1> pong
19:36 <+bridge> <Jupstar ✪> 🤩
19:36 <+ChillerDragon> !
19:36 <+bridge> <tsfreddie> gh
19:38 <+ChillerDragon> i am in general amazed about the lack of trol/ads/malware/spam/nsfw on github
19:38 <+bridge> <Jupstar ✪> tru
19:38 <+bridge> <Jupstar ✪> u basically the only one yet
19:39 <+bridge> <Jupstar ✪> 😬
19:39 <+ChillerDragon> gh does some auto banning and so one
19:39 <+ChillerDragon> but its suddle that most people never notice it
19:39 <+ChillerDragon> i my self got like 5 gh accs blocked but im a edgy user so thats fair
19:39 <+ChillerDragon> but repo and org maintainers barley have to moderate
19:39 <+ChillerDragon> there are no dick picks on the linux kernel commits comment section
19:40 <+bridge> <tsfreddie> why am i not surprised at all
19:40 <+ChillerDragon> there is barley any shady download this tool links and so on
19:40 <+ChillerDragon> i am kinda impressed and confused by the lack of bots
19:41 <+bridge> <_voxeldoesart> im gonna start asking ddnet pros what type of new weapon they would want to enhance gameplay
19:41 <+bridge> <_voxeldoesart> because i honestly think ddnet is due for an actual gameplay update
19:41 <+ChillerDragon> oh no
19:42 <+ChillerDragon> imo we should remove tune zones, solo tiles, draggers, tele guns and all the other bloat
19:42 <+bridge> <tsfreddie> make a new game please
19:42 <+bridge> <tsfreddie> stop modding and start making money off your work
19:44 <+ChillerDragon> quit jobs and start playing instead of coding
19:44 <+bridge> <_voxeldoesart> i can not start anything from scratch for the life of me
19:44 <+ChillerDragon> money isnt real
19:44 <+bridge> <Jupstar ✪> i agree
19:44 <+bridge> <_voxeldoesart> besides ddnet is fun
19:45 <+bridge> <tsfreddie> you know you can fork ddnet and make a new game and sell it right?
19:45 <+bridge> <_voxeldoesart> i did fork it
19:45 <+bridge> <_voxeldoesart> how else do i do prs
19:45 <+bridge> <tsfreddie> <a:Catxplosion:1082715870893195274> very funny
19:55 <+ChillerDragon> yea you dont need many changes to resell
19:55 <+ChillerDragon> in fact i sell hard copies of ddnet cds to local elementary schools without any modidications
19:55 <+bridge> <tsfreddie> i think the only condition is like, don't use the name and serve the license file?
19:55 <+ChillerDragon> opsi
19:56 <+ChillerDragon> but i got lawyer jopsti on my side so i am safe
19:56 <+bridge> <tsfreddie> !ping
19:56 < chillerbot1> pong
19:56 <+bridge> <tsfreddie> how old are you chiller
19:57 <+ChillerDragon> 24
19:57 <+bridge> <tsfreddie> you sounded older
19:57 <+ChillerDragon> ?xd
19:57 <+ChillerDragon> nobody ever
19:57 <+ChillerDragon> where
19:57 <+bridge> <tsfreddie> didn't you voice messaged me
19:57 <+ChillerDragon> you probably confused me xd
19:57 <+ChillerDragon> irc is yet to add voice messages
19:57 <+bridge> <tsfreddie> wire
19:58 <+bridge> <tsfreddie> tapper
19:58 <+ChillerDragon> i got no wire history on this device
19:58 <+ChillerDragon> wire moment
19:58 <+ChillerDragon> https://www.youtube.com/watch?v=D0tpwp2QN6A
19:58 <+ChillerDragon> here voice leak
19:58 <+bridge> <tsfreddie> i deleted wire as well
19:59 <+bridge> <tsfreddie> anyway you were on a bike so you voice messaged me instead of typing, and you fell and hit your head and possibly lost your memory
19:59 <+ChillerDragon> sounds like something i would do
19:59 <+ChillerDragon> i think i remember
19:59 <+bridge> <tsfreddie> no you don't
19:59 <+ChillerDragon> xd
20:00 <+bridge> <tsfreddie> never heard such accent but I liked it
20:00 <+ChillerDragon> its german
20:00 <+ChillerDragon> its like top10 most common accents
20:00 <+bridge> <tsfreddie> i know that. never heard a german irl
20:01 <+ChillerDragon> you can do that on big ddnet meetup
20:02 <+ChillerDragon> come travel to europe we do some BBQ in jupstis big garden
20:02 <+bridge> <tsfreddie> i am a chinese goverment sponsored personel
20:02 <+bridge> <tsfreddie> i can't travel
20:02 <+bridge> <tsfreddie> i've only heard indian british scottish chinese and japanese before
20:02 <+ChillerDragon> i kinda assume you would say that
20:02 <+ChillerDragon> dw we all come to china 
20:02 <+ChillerDragon> ez
20:02 <+bridge> <tsfreddie> i'm still waiting Learath to come
20:02 <+ChillerDragon> he planned to do so?
20:03 <+bridge> <tsfreddie> idk, he might
20:03 <+ChillerDragon> XXLTomate: u here?
20:03 <+bridge> <learath2> Are you being ungrateful to premier Xi?
20:03 <+bridge> <tsfreddie> i'd take him out for chinese bbq
20:03 <+bridge> <learath2> I would love to go to china one day
20:03 <+ChillerDragon> yikes political lerato
20:03 <+ChillerDragon> fstd_: yo?
20:03 <+ChillerDragon> irc full of lurkers
20:03 <+ChillerDragon> fstd: !
20:04 <+ChillerDragon> eeeee: !
20:04 <+bridge> <learath2> why are you needlessly hiliting people? do you have no irc manners?
20:04 <+bridge> <tsfreddie> oh have I told you guys i have a very good friend (chinese) that is in germany right now
20:04 <+ChillerDragon> no i do not have irc manners
20:04 <+bridge> <tsfreddie> bruh
20:05 <+ChillerDragon> @ST-Chara?
20:05 <+bridge> <learath2> Thank god, what was that name? 😄
20:05 <+ChillerDragon> https://github.com/ST-Chara
20:06 <+bridge> <TsFreddie> what name
20:06 <+ChillerDragon> top3 poggest chinese tw githubbers
20:06 <@heinrich5991> ChillerDragon: wanna see me make XXLTomate disappear? :P
20:06 <+ChillerDragon> woetfek!
20:06 <+bridge> <learath2> Your display name on discord
20:06 <+ChillerDragon> nonono
20:06 <+ChillerDragon> heinrich5991: dont u dare abuse
20:06 <+ChillerDragon> heinrich5991: i want you make him appear and say hi
20:06 <+bridge> <TsFreddie> someone said it has to be over 9000 so i made it over 9000
20:07  * ChillerDragon UwU ryowo
20:07 <+bridge> <learath2> > Cute girl wear pink clothes walk on the floor~
20:07 <+bridge> <learath2> who is this even?
20:07 <+bridge> <ryozuki> rust is blazingly fast
20:07 <+bridge> <ryozuki> fearless concurrency
20:07 <+ChillerDragon> lerato xd
20:07 <+bridge> <learath2> I still fear concurrency
20:07 <+bridge> <TsFreddie> @FlowerFell-Sans i believe this guy
20:07 <+ChillerDragon> i fear currency
20:07 <+bridge> <TsFreddie> is ST-Chara
20:07 <+bridge> <ryozuki> i saw this st chara somewhere
20:07 <+ChillerDragon> he famous githubber
20:07 <+bridge> <TsFreddie> or I remembered it wrong
20:08 <+bridge> <ryozuki> dont trust the anime girls pfps
20:08 <+bridge> <TsFreddie> i don't like him
20:08 <+bridge> <TsFreddie> anyway
20:08 <+ChillerDragon> like u ryo xd
20:08 <+bridge> <ryozuki> xd
20:08 <+bridge> <ryozuki> yes
20:08 <+ChillerDragon> he is all over my gh feed
20:08 <+ChillerDragon> like you
20:08 <+bridge> <TsFreddie> dude i was on there like one time
20:08 <+bridge> <ryozuki> cuz u only look at gh all day
20:08 <+bridge> <ryozuki> no life
20:08 <+ChillerDragon> ikr
20:08 <+ChillerDragon> i use gh for you page more than average 12yo uses tiktok for u page
20:08 <+bridge> <TsFreddie> ~~at least switch to gitlab or something non-microsoft~~
20:09 <+ChillerDragon> gitlab bad ui
20:09 <+ChillerDragon> but microsoft is on a good way to make their ui even worse 
20:09 <+ChillerDragon> with every update
20:09 <+bridge> <ryozuki> someone from china follows me
20:09 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1119327893084962997/image.png
20:09 <+bridge> <ryozuki> well she follows 1.2k ppl
20:09 <+bridge> <ryozuki> so i dont feel special
20:09 <+ChillerDragon> :robot:
20:09 <+bridge> <TsFreddie> Ant Group
20:09 <+bridge> <TsFreddie> tho
20:09 <+bridge> <Jupstar ✪> https://tenor.com/view/vegeta-dragon-ball-z-unlimited-power-over9000-power-level-gif-12316102
20:09 <+ChillerDragon> wat those are actually common
20:09 <+bridge> <TsFreddie> that's literally alibaba
20:09 <+ChillerDragon> the mass follows
20:10 <+ChillerDragon> thats a thing on github
20:10 <+bridge> <ryozuki> someone from microsoft actually follows me
20:10 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1119328069929402498/image.png
20:10 <+ChillerDragon> flex
20:10 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1119328127584325842/image.png
20:10 <+bridge> <TsFreddie> no one follows me
20:10 <+ChillerDragon> bs fred
20:10 <+bridge> <ryozuki> fred i follow if u follow
20:10 <+bridge> <ryozuki> followback
20:10 <+bridge> <ryozuki> trade
20:10 <+bridge> <ryozuki> 1on1
20:10 <+bridge> <TsFreddie> have i not
20:10 <+ChillerDragon> xd
20:10 <+bridge> <ryozuki> 1v1
20:10 <+bridge> <ryozuki> idk
20:11 <+bridge> <_voxeldoesart> i wanna make my fork thing now but im at work and i know im gonna laze off when i get home
20:11 <+ChillerDragon> fred u like github famous
20:11 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1119328368450617424/image.png
20:11 <+ChillerDragon> xd
20:11 <+bridge> <learath2> Anime pfp is never to be trusted except for software engineering
20:11 <+bridge> <TsFreddie> @ryozuki done
20:11 <+bridge> <learath2> anime pfps produce amazing software
20:11 <+ChillerDragon> also github light mode
20:11 <+bridge> <ryozuki> :POGGIES:
20:11 <+ChillerDragon> masterrace
20:11 <+bridge> <ryozuki> followed
20:12 <+ChillerDragon> who needs ms following u
20:12 <+ChillerDragon> when you have this
20:12 <+ChillerDragon> https://zillyhuhn.com/cs/.1686939141.png
20:12 <+ChillerDragon> axaxaxax
20:13 <+bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1119328849671503903/image_480.png
20:13 <+bridge> <ryozuki> @learath2
20:13 <+ChillerDragon> xd
20:13 <+ChillerDragon> better than ferris
20:13 <+bridge> <TsFreddie> proof of Krixx forked from @ryozuki
20:13 <+bridge> <ryozuki> i wanna make a CHIP-8 emulator with vulkan to display
20:13 <+bridge> <ryozuki> https://tobiasvl.github.io/blog/write-a-chip-8-emulator/
20:14 <+bridge> <ryozuki> idk why writing emulators is always fun
20:14 <+ChillerDragon> OMg
20:14 <+ChillerDragon> heinrich5991:
20:14 <+ChillerDragon> did u!?=
20:14 <@heinrich5991> yes
20:14 <+ChillerDragon> how could you
20:14 <+ChillerDragon> why
20:14 < Ryozuki> what did he
20:14 <@heinrich5991> it took some minutes though, figuring it out
20:14 <+ChillerDragon> he banned poor XXLTomate
20:14 <+ChillerDragon> abuse
20:14 <+bridge> <Jupstar ✪> but why
20:14 < Ryozuki> from where
20:15 <+bridge> <TsFreddie> did you get a webhook just now?
20:15 <+ChillerDragon> irc
20:15 <@heinrich5991> I didn't ban anyone
20:15 <+ChillerDragon> banhammer5991
20:15 <@heinrich5991> XXLTomate left
20:15 <+ChillerDragon> sure sure xd
20:15 <+ChillerDragon> gaslighting
20:15 < Ryozuki> oh i have leave messages filtered
20:15 < Ryozuki> unless they talk
20:15 <+bridge> <Jupstar ✪> so xxltomato was heinrich
20:15 <+bridge> <Jupstar ✪> heinrichs spy
20:15 <+bridge> <TsFreddie> cuz i was about to say that i don't like the fact that everyone is talking under Chiller's name
20:15 <+ChillerDragon> no xxl was og tw player who just went afk for a sec
20:15 <@heinrich5991> XXLTomate used my IRC bouncer
20:15 <+ChillerDragon> and heinrich abused
20:15 <+bridge> <chairn> do it with dbt, more fun 🙂
20:15 <+ChillerDragon> to ban him
20:15 <+bridge> <ryozuki> whats dbt
20:16 <+ChillerDragon> lol
20:16 <+bridge> <ryozuki> i like rust
20:16 <+bridge> <chairn> dynamic binary translation
20:16 <@heinrich5991> he last connected 2018
20:16 <+ChillerDragon> sad
20:16 <@heinrich5991> so I figured I could disable the account
20:16 <+bridge> <chairn> probably possible with rust
20:16 <+ChillerDragon> rip tomato
20:16 <+ChillerDragon> any more names you bouncin?
20:16 <+bridge> <TsFreddie> also why is irc heinrich seems happier than discord heinrich
20:16 <+bridge> <ryozuki> omg
20:16 <+ChillerDragon> try it
20:16 <+bridge> <chairn> you mmap a region with execute access, you write translated code there, and then you jump into it 😉
20:16 <+ChillerDragon> irc boosts your mood
20:16 <+ChillerDragon> discord is poison for the soul
20:16 <+bridge> <ryozuki> @chairn i can do a binary translation to native with llvm?
20:17 <+bridge> <ryozuki> probs fun indeed
20:17 <+bridge> <ryozuki> thats a dope idea
20:17 <+bridge> <Jupstar ✪> bcs the discord ppl here are all toxic af
20:17 <+bridge> <chairn> probably involves some complexity for rust because it's unsafe by nature
20:17 <+bridge> <ryozuki> i just write a llvm frontend
20:17 <+bridge> <ryozuki> for chip
20:17 <+bridge> <TsFreddie> is that why you are still here?
20:17 <+ChillerDragon> jupsti but all heinrich got since he joined irc is flame from me xd
20:17 <+bridge> <Jupstar ✪> yes, im the toxicity king
20:17 <+bridge> <TsFreddie> fun
20:17 <+bridge> <ryozuki> its because irc is superior
20:17 <+bridge> <ryozuki> its simplicity sparks joy
20:18 <+bridge> <TsFreddie> oh boy it's 2:17 now
20:18 <+bridge> <ryozuki> https://tenor.com/view/marie-kondo-cute-gif-18021464
20:18 <+bridge> <TsFreddie> sleep time
20:18 <+bridge> <ryozuki> xD
20:18 <+bridge> <chairn> https://github.com/KireinaHoro/khemu
20:18 <+bridge> <chairn> chinese student
20:18 <+bridge> <chairn> and he uses llvm
20:18 <@heinrich5991> Botox, erd and Landil
20:18 <+bridge> <TsFreddie> I took a melatonin and I'm kinda gloomy now but still don't really want to sleep
20:19 <+bridge> <ryozuki> yeye
20:19 <+bridge> <ryozuki> same idea
20:19 <@heinrich5991> but I deactivated their accounts earlier already
20:19 <+bridge> <ryozuki> > LLVM backend (partial)
20:19 <+bridge> <ryozuki> i wanna do this
20:19 <+ChillerDragon> erbeere?
20:19 <+bridge> <ryozuki> but chip-8 has graphics
20:19 <@heinrich5991> yes
20:19 <+ChillerDragon> rip landil best artist
20:19 <+bridge> <ryozuki> that can be complicated
20:19 <+ChillerDragon> @voxel u know landil?
20:19 <+bridge> <TsFreddie> failed ping
20:19 <+ChillerDragon> erbeere was the leading map libber before patiga right?
20:20 <+bridge> <TsFreddie> try capital V
20:20 <@heinrich5991> was tml his creation?
20:20 <+ChillerDragon> i think
20:20 <+ChillerDragon> or am i stupid?
20:20 <+bridge> <chairn> you can look at gameboy emulator to see how they did it
20:20 <@heinrich5991> https://github.com/erdbeere/tml/
20:20 <@heinrich5991> apparently it was
20:20 <+ChillerDragon> east forked tml from erbeere
20:20 <+bridge> <chairn> usually, it's just some mmeory region that are read every frame to draw
20:20 <+ChillerDragon> and ddnet forked east xd
20:23 <+bridge> <TsFreddie> hmm
20:23 <+bridge> <TsFreddie> did google just sold google domains after the zip thing
20:30 <+bridge> <TsFreddie> i should sleep
20:31 <+bridge> <ryozuki> the night just started
20:34 <+bridge> <ryozuki> ill look into it
20:34 <+bridge> <ryozuki> @chairn did u see my rust stack based hashmap? xd
20:34 <+bridge> <chairn> i did, but im no rust code reader
20:36 <+bridge> <chairn> @ChillerDragon it got in !!! https://github.com/teeworlds/teeworlds/pull/2846
20:36 <+bridge> <Jupstar ✪> wtf
20:36 <+bridge> <Jupstar ✪> oy is undead
20:38 <+bridge> <chairn> damn, you're not on teeworlds discord?
20:38 <+bridge> <chairn> he's back since 2 or 3 days
20:38 <+bridge> <Jupstar ✪> and he's gone in 2 or 3 days
20:38 <+bridge> <Jupstar ✪> dont get your hopes high
20:38 <+bridge> <chairn> i don't have any hope, so i guess it's fine
20:38 <+bridge> <Jupstar ✪> xd
20:38 <+bridge> <Jupstar ✪> robyte now ddnet admin
20:38 <+bridge> <Jupstar ✪> 😬
20:39 <+bridge> <ryozuki> https://github.com/edg-l/smolmap
20:39 <+bridge> <Jupstar ✪> i told oy, robyte should maintain tw.
20:39 <+bridge> <ryozuki> https://github.com/edg-l/smolmap s
20:39 <+bridge> <ryozuki> xd
20:40 <+bridge> <Jupstar ✪> rust unworthy license
20:40 <+bridge> <Jupstar ✪> 😏
20:40 <+bridge> <ryozuki> no
20:40 <+bridge> <ryozuki> best license
20:40 <+bridge> <ryozuki> it ensures user freedom
20:41 <+bridge> <Jupstar ✪> copyright
20:41 <+bridge> <ryozuki> we had this discussion already
20:41 <+bridge> <ryozuki> https://www.gnu.org/philosophy/pragmatic.en.html
20:41 <+bridge> <gerdoe> they worked around with kurosio's mods afair
20:41 <+bridge> <ryozuki> >  My work on free software is motivated by an idealistic goal: spreading freedom and cooperation. I want to encourage free software to spread, replacing proprietary software that forbids cooperation, and thus make our society better.
20:41 <+bridge> <ryozuki> > 
20:41 <+bridge> <ryozuki> > That's the basic reason why the GNU General Public License is written the way it is—as a copyleft. All code added to a GPL-covered program must be free software, even if it is put in a separate file. I make my code available for use in free software, and not for use in proprietary software, in order to encourage other people who write software to make it free as well. I figure that since proprietary software developers use copyright to stop us 
20:41 <+bridge> <ryozuki> idk what afair
20:42 <+bridge> <ryozuki> and who is kuro xd
20:42 <+bridge> <gerdoe> mrpg/azataz mods maintainer
20:42 <+bridge> <gerdoe> also afair is "as far as i remember"
20:42 <+bridge> <ryozuki> more buzzwords :justatest:
20:42 <+bridge> <ryozuki> afair means an afair
20:42 <+bridge> <ryozuki> u cheated ur gf
20:42 <+bridge> <ryozuki> xdxd
20:43 <+bridge> <gerdoe> did you play any non-ddrace mods xd
20:43 <+bridge> <gerdoe> but its quite new
20:43 <+bridge> <gerdoe> "quite"
20:43 <+bridge> <ryozuki> @Jupeyy_Keks interpret this text as if i said it
20:43 <+bridge> <ryozuki> it fits my idealism
20:43 <+bridge> <Jupstar ✪> i call the therapist
20:43 <+bridge> <ryozuki> >  since proprietary software developers use copyright to stop us from sharing, we cooperators can use copyright to give other cooperators an advantage of their own: they can use our code.
20:43 <+bridge> <chairn> that's affair with 2 f
20:43 <+bridge> <ryozuki> oh
20:44 <+bridge> <ryozuki> xd
20:44 <+bridge> <ryozuki> the real thing is, ddnet using the current license wont ensure it not being used as propietary software
20:44 <+bridge> <ryozuki> and thats SAD
20:44 <+bridge> <ryozuki> GPL protects us from that devil
20:45 <+bridge> <ryozuki> :deviltee:
20:45 <+bridge> <Jupstar ✪> GPL plays the same game, even if its an angel
20:46 <+bridge> <ryozuki> GPL works best when used on top quality software, the one that ICHES companies to say "I WISH THIS WAS NOT GPL" thats when u win, because u have a small possiblity that they open source their stuff too (it happened)
20:46 <+bridge> <Jupstar ✪> it still plays believing in christianity
20:46 <+bridge> <ryozuki> xd
20:47 <+bridge> <ryozuki> @Jupeyy_Keks this reminds me of democracy, its integrated as in "being the best" that even thinking alternatives may be seen as inherently evil
20:47 <+bridge> <ryozuki> so u gotta fight within the system
20:48 <+bridge> <chairn> that's not true
20:48 <+bridge> <chairn> first, there are dozens of democracy forms and election systems
20:48 <+bridge> <chairn> secondly, we haven't tried all possible systems
20:48 <+bridge> <Jupstar ✪> yeah, so better trust the CC0 written AI to take over the word
20:49 <+bridge> <ryozuki> hmm i guess i mean the most common democracy form
20:49 <+bridge> <Jupstar ✪> yeah, so better trust the CC0 written AI to take over the world
20:49 <+bridge> <ryozuki> voting a party
20:49 <+bridge> <ryozuki> delegating ur vote kinda
20:49 <+bridge> <chairn> which is the worst form of democracy as we can see it nowadays
20:49 <+bridge> <ryozuki> but the most used
20:49 <+bridge> <ryozuki> xd
20:49 <+bridge> <ryozuki> and the problem is
20:49 <+bridge> <ryozuki> the only ones u can vote
20:49 <+bridge> <ryozuki> like it already
20:50 <+bridge> <ryozuki> cant change a system where u depend in people from the system itself
20:50 <+bridge> <Jupstar ✪> REVOLUTION TIME
20:50 <+bridge> <ryozuki> idk how to say it
20:50 <+bridge> <Jupstar ✪> IM THE FIRST TO JOIN
20:50 <+bridge> <ryozuki> xd
20:50 <+bridge> <ryozuki> rust revolution
20:50 <+bridge> <ryozuki> lets hunt down the C
20:51 <+bridge> <ryozuki> :justatest:
20:51 <+bridge> <chairn> where guillotine reaction?
21:38 <+ChillerDragon> @chairn WOAH pog eval if cmd
21:39 <+ChillerDragon> sadly ddnet declined
21:39 <+bridge> <Jupstar ✪> Who needs this xd
21:39 <+ChillerDragon> i do
21:39 <+bridge> <Jupstar ✪> I bet u can abuse it for chests
21:39 <+ChillerDragon> for cross client compatible configs
21:39 <+bridge> <Jupstar ✪> Cheats
21:40 <+bridge> <chairn> we gotta avoid features that are used only by a handful number of people. I believe the best example for this is Thunderbird
21:40 <+ChillerDragon> making sure i can call ``say_self`` or ``echo`` depending on availability etc
21:40 <+bridge> <chairn> lots of developer added their own features and then spaghetti code
21:40 <+ChillerDragon> vanilla and ddnet got same cmds and settings under diff names
22:35 <+bridge> <_voxeldoesart> @/heinri
22:41 <+bridge> <ryozuki> i wish god existed
22:41 <+bridge> <ryozuki> so i could ask him
22:41 <+bridge> <ryozuki> to convert all c++ code to rust
22:41 <+bridge> <ryozuki> thanks for coming to my ted talk
22:43 <+bridge> <_voxeldoesart> and then no one code ever except for people who know how to use rust
22:44 <+bridge> <_voxeldoesart> software dev 100
23:54 <+bridge> <Ewan> i just spent 35 minutes to and 50 minutes from my grandma’s just to take out the dog
23:55 <+bridge> <Ewan> the highway system may be flawed
23:55 <+bridge> <_voxeldoesart> america?
23:55 <+bridge> <_voxeldoesart> o nvm you're not
23:57 <+bridge> <Ewan> huh
23:57 <+bridge> <Ewan> we play on the same servers brah
23:57 <+bridge> <_voxeldoesart> whats the flag in your bio for then
23:58 <+bridge> <Ewan> luxembourg is a neat place with a neat flag
23:58 <+bridge> <_voxeldoesart> ah
23:58 <+bridge> <Ewan> I appreciate the flag
