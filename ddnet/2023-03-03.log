00:10 < bridge> <Cellegen | RiH> But shouldn't it be already on Steam if it's intended?
00:10 < bridge> <Cellegen | RiH> At least have Steam players a chance to utilize it
09:02 < bridge> <Ryozuki> https://blog.cloudflare.com/introducing-oxy/
09:03 < bridge> <Ryozuki> We can say rust runs half the internet now kek
09:03 < bridge> <Ryozuki> Since cloudflare is used by half the internet
10:19 <+ChillerDragon> im sure cloudflare also uses shellscripts
10:20 <+ChillerDragon> i guess rust runs half the internet since its integrated in the linux kernel
10:22 < bridge> <fokkonaut> I like your constant arbitrary estimates
11:18 < bridge> <Ryozuki> https://www.fastcompany.com/90846903/most-innovative-companies-consumer-electronics-2023
11:18 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1081158574509654086/image.png
11:18 < bridge> <Ryozuki> gigachad
11:18 < bridge> <Ryozuki> > By trusting its users instead of locking them in, Valve has produced one of the most exciting consumer tech products in years.
11:18 < bridge> <Ryozuki> wish more did this
12:02 < bridge> <heinrich5991> closed source
12:03 < bridge> <Ryozuki> sadge
12:06 < bridge> <Kurosio> Can someone tell me how i can display text with the cursor without the Outline or with a modified Outline? Mb what kind of flags do need? I'm tired, and I don't want to rack my brain reading code and debugging it step by step. The code there is confusing for me, need rack my brains for about an hour. For example the transfer modifiable lvalue ref without staging of but with default colors.
12:11 < bridge> <Jupstar ✪> Just make the outline transparent
12:11 < bridge> <Jupstar ✪> Setoutlinecolor
12:13 < bridge> <Kurosio> setter textcolor work finy, but setter outline color does not work, bindings CTextCursor, and TextEx
12:13 < bridge> <Jupstar ✪> Mhh they should work
12:14 < bridge> <Jupstar ✪> Show your code then it's easier
12:15 < bridge> <Jupstar ✪> Ah you need to use text containers. Apparently we set to default I dunno why
12:16 < bridge> <Kurosio> https://cdn.discordapp.com/attachments/293493549758939136/1081173263314599956/image.png
12:16 < bridge> <Jupstar ✪> Text containers allow to overwrite the build text color as u do. And additionally allow to set the render color
12:16 < bridge> <Jupstar ✪> The problem is. Text has creation color and runtime color
12:17 < bridge> <Jupstar ✪> Use text containers then u can control both
12:17 < bridge> <Jupstar ✪> Textex will overwrite the runtime color
12:18 < bridge> <Kurosio> All right, thanks, I'll give it a try
12:47 < bridge> <Jupstar ✪> Murpi best python dev
12:48 < bridge> <murpi> no, heinrich is the best python dev
12:48 < bridge> <Jupstar ✪> Then u are his ghost writer
15:45 < bridge> <heinrich5991> @Learath2 what do you think about allowing map download via ipfs?
15:45 < bridge> <heinrich5991> probably a bad idea because it's a little bit p2p and might leak your IP address to someone else than just the server
15:46 < bridge> <Learath2> That'd be my only concern with it. Otherwise sounds like a good idea actually
15:48 < bridge> <heinrich5991> is there a way to make it safe-ish?
15:48 < bridge> <heinrich5991> or is there no way to fix it (and it's a dealbreaker)?
15:49 < bridge> <Jupstar ✪> what if a map contains illegal material
15:50 < bridge> <heinrich5991> ipfs download would allow the client to download the map from anyone who offers it
15:50 < bridge> <Jupstar ✪> yeah so that guy is a upload in terms of law
15:50 < bridge> <heinrich5991> I don't understand how it relates to illegal material
15:50 < bridge> <heinrich5991> ye
15:51 < bridge> <Jupstar ✪> uploading illegal material is sued more heavily than downloading
15:51 < bridge> <heinrich5991> ah, you mean if the client also provides the downloaded maps via ipfs
15:52 < bridge> <Jupstar ✪> i thought that was ur idea
15:52 < bridge> <Jupstar ✪> another disadvantage would maybe be cable internet suffers a lot from uploading
15:52 < bridge> <heinrich5991> my idea was first that we could allow the client to download maps via ipfs
15:53 < bridge> <heinrich5991> not upload
15:53 < bridge> <heinrich5991> but upload is also interesting, though even more involved as you pointed out
15:53 < bridge> <Jupstar ✪> oh i actually thought that players host the map pool
15:53 < bridge> <heinrich5991> yea, that would make it a lot more resilient at least
15:54 < bridge> <Jupstar ✪> in that context i meant that p2p download is also an upload at the same time
15:54 < bridge> <คุณเป็นคนปัญญาอ่อน❤> MODER PLEASE BAN @moriss10_25Zz
15:55 < bridge> <Jupstar ✪> #reports
15:57 < bridge> <heinrich5991> yea, makes sense
16:00 < bridge> <heinrich5991> @Learath2 mind muting @moriss10_25Zz? he's apparently an ass in voice chat
16:01 < bridge> <DefaultO> aren't you a discord mod?
16:01 < bridge> <heinrich5991> I don't see the option to do it
16:01 < bridge> <DefaultO> phone uses.. ^^
16:01 < bridge> <Learath2> Mods can do it iirc I remeber giving that perm
16:01 < bridge> <heinrich5991> I'm on a computer
16:01 < bridge> <heinrich5991> I guess I just don't have the rights
16:03 < bridge> <Learath2> I gave him a timeout instead. Couldn't see the mute button on mobile 😛
16:03 < bridge> <heinrich5991> ^^
16:03 < bridge> <heinrich5991> ah, interesting
16:03 < bridge> <heinrich5991> didn't know timeout would work for that
16:03 < bridge> <heinrich5991> but apparently that also prevents joining voice channels
16:04 < bridge> <DefaultO> timeout prevents communication with the server
16:04 < bridge> <DefaultO> you could troll people by joining a voice channel and leaving it repeatedly
16:05 < bridge> <DefaultO> it makes a sound that most people don't have muted
16:08 < bridge> <bencie> we have server mute, yea
16:47 < bridge> <Ryozuki> probs mitigated by having lot of seeders?
16:51 < bridge> <Jupstar ✪> @Ryozuki what do you say to the new ryzens?
16:51 < bridge> <Ryozuki> the cpus?
16:51 < bridge> <Ryozuki> i mean they look pog
16:51 < bridge> <Ryozuki> i havent tried any
16:52 < bridge> <Jupstar ✪> i am a bit disappointed. it feels like AMD purposly made the clock lower so their next generation is again without x3d cache
16:52 < bridge> <Jupstar ✪> similar to what they done with the ryzen 7000 series
16:52 < bridge> <Ryozuki> clock?
16:52 < bridge> <Ryozuki> isnt the clock the ghz
16:52 < bridge> <Ryozuki> arent they at 5.5
16:52 < bridge> <Ryozuki> or smth
16:53 < bridge> <Jupstar ✪> i think they made it lower than the 7000 without x3d
16:53 < bridge> <Ryozuki> oh u mean
16:53 < bridge> <Ryozuki> another generation than 7000?
16:53 < bridge> <Ryozuki> where
16:53 < bridge> <Ryozuki> i didnt know
16:53 < bridge> <Ryozuki> thought u were talking about 7000
16:53 < bridge> <Jupstar ✪> i mean there is 7000 and
16:53 < bridge> <Jupstar ✪> 7000 x3d
16:53 < bridge> <Ryozuki> ahh
16:53 < bridge> <Ryozuki> xd
16:54 < bridge> <Ryozuki> yeah x3d is not that worth  ithink
16:54 < bridge> <Jupstar ✪> and the performance gain is relatively small. and i assume amd did that on purpose
16:54 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1081243239358672936/image.png
16:54 < bridge> <Jupstar ✪> https://www.phoronix.com/benchmark/result/amd-ryzen-9-7950x3d-linux-review-benchmarks/geometric-mean-of-all-test-results-result-composite-ar97lrb.svgz
16:54 < bridge> <Jupstar ✪> https://www.phoronix.com/benchmark/result/amd-ryzen-9-7950x3d-linux-review-benchmarks/cpu-power-consumption-monitor-ptssm.svgz
16:54 < bridge> <Jupstar ✪> but they are pretty energy efficient like they are
16:55 < bridge> <Jupstar ✪> well boost clock is only single core i guess
16:55 < bridge> <Jupstar ✪> when all cores are at 100% they probs at base clock
16:55 < bridge> <Ryozuki> no
16:55 < bridge> <Ryozuki> on mine
16:55 < bridge> <Ryozuki> they all bost at like 0.10 less
16:56 < bridge> <Ryozuki> but they all boost
16:56 < bridge> <Ryozuki> when 100%
16:56 < bridge> <Ryozuki> 5800x boost is 4.7
16:56 < bridge> <Ryozuki> single core it reaches 4.75 on mine
16:56 < bridge> <Jupstar ✪> then why do the x3d suck so hard xD
16:56 < bridge> <Ryozuki> when all cores are full they are at 4.6x
16:56 < bridge> <Jupstar ✪> and why would they lower the base clock
16:57 < bridge> <Ryozuki> i think the 3dx is faster due to cache?
16:57 < bridge> <Ryozuki> not all is base clock i guess
16:57 < bridge> <Jupstar ✪> yeah, but then is the question if they purposly made them slower
16:57 < bridge> <Ryozuki> the 3dx has 120mb l3 cache
16:57 < bridge> <Ryozuki> vs 64
16:57 < bridge> <Jupstar ✪> to not be much faster
16:57 < bridge> <Ryozuki> maybe its a limitation idk
16:57 < bridge> <Jupstar ✪> afaik, AMD also disallows overclocking on them
16:58 < bridge> <Jupstar ✪> kinda weird xD
16:58 < bridge> <Jupstar ✪> i smell a conspiracy
16:58 < bridge> <судный день.> maybe they are already at their maximal
17:43 < bridge> <Learath2> @Ryozuki you are biggest rust fan, I need an async db library, is sqlx still the goto?
17:46 < bridge> <Ryozuki> if u dont want a ORM yes
17:46 < bridge> <Ryozuki> i kinda like sqlx a lot
17:47 < bridge> <Ryozuki> also use the sqlx-cli
17:47 < bridge> <Learath2> I wonder if the `Any` driver improved any from the last I used it
17:47 < bridge> <Ryozuki> its a nice tool for migrations
17:47 < bridge> <Learath2> Yeah migrations are cool
17:47 < bridge> <Ryozuki> just dont use the any thing
17:47 < bridge> <Ryozuki> sql is not that generic
17:47 < bridge> <Ryozuki> its better to use postgresql
17:47 < bridge> <Learath2> :pepeW:
17:47 < bridge> <Ryozuki> and use its full potential
17:47 < bridge> <Ryozuki> but idk about that, since i only use psql
17:47 < bridge> <Ryozuki> psql is glory
17:47 < bridge> <Ryozuki> psql is now my rust for dbs
17:48 < bridge> <Learath2> I'll just do sqlite
17:49 < bridge> <Ryozuki> https://market.xivhub.org/
17:49 < bridge> <Ryozuki> powered by rust and sqlx btw
17:49 < bridge> <Ryozuki> and psql
17:50 < bridge> <Ryozuki> @Learath2 if u want reference  code: <https://github.com/ZhyraPlugins/xivhub-market-api>
17:50 < bridge> <Ryozuki> ofc my website is open source
17:50 < bridge> <Ryozuki> AGPL
17:50 < bridge> <Ryozuki> nothing less
17:50 < bridge> <Learath2> 😄
17:50 < bridge> <Ryozuki> im such a maximalist
17:50 < bridge> <Ryozuki> look at main.rs
17:50 < bridge> <Ryozuki> the denys
17:51 < bridge> <Ryozuki> ```
17:51 < bridge> <Ryozuki> #![forbid(unsafe_code)]
17:51 < bridge> <Ryozuki> #![deny(warnings)]
17:51 < bridge> <Ryozuki> #![deny(clippy::missing_const_for_fn)]
17:51 < bridge> <Ryozuki> #![deny(clippy::nursery)]
17:51 < bridge> <Ryozuki> #![deny(clippy::pedantic)]
17:51 < bridge> <Ryozuki> #![allow(clippy::missing_errors_doc)]
17:51 < bridge> <Ryozuki> #![allow(clippy::module_name_repetitions)]
17:51 < bridge> <Ryozuki> #![allow(clippy::missing_panics_doc)]
17:51 < bridge> <Ryozuki> ```
17:51 < bridge> <Ryozuki> pedantic kek
17:51 < bridge> <ReiTW> https://tenor.com/view/ferris-rust-rustlang-crab-cute-gif-26396486
17:52 < bridge> <Ryozuki> @Learath2 btw i learnt that if u want to do a count
17:52 < bridge> <Ryozuki> in psql there is no looose index
17:52 < bridge> <Ryozuki> but u can do this
17:52 < bridge> <Ryozuki> https://wiki.postgresql.org/wiki/Loose_indexscan
17:52 < bridge> <Ryozuki> recursive CTE
17:52 < bridge> <Ryozuki> my query went from 500ms to 60ms
17:54 < bridge> <Learath2> Loose indexscans are cool :wechat_cool_guy:
17:56 < bridge> <Learath2> That's a cool trick, didn't know you could do that with psql
17:56 < bridge> <Learath2> db people are just magicians
18:40 < bridge> <Ryozuki> indeed
19:09 < bridge> <Learath2> This is the most rust behaviour I've ever seen 😛
19:09 < bridge> <Learath2> https://cdn.discordapp.com/attachments/293493549758939136/1081277265175912528/image.png
19:20 < bridge> <Ryozuki> @Learath2 i mean
19:20 < bridge> <Ryozuki> clap is rly gud
19:20 < bridge> <Ryozuki> and the most easy to use rn
19:20 < bridge> <Ryozuki> where did u see this btw?
19:20 < bridge> <Learath2> I was just googling around for what is available nowadays found it on some guys blog
19:20 < bridge> <Ryozuki> ah well
19:20 < bridge> <Ryozuki> its a blog
19:21 < bridge> <Ryozuki> @Learath2 check this out
19:21 < bridge> <Ryozuki> https://blessed.rs/crates
19:21 < bridge> <Learath2> It's classic rust user behaviour though. Everything is prescriptive 😄
19:21 < bridge> <Ryozuki> > An unofficial guide to the Rust ecosystem
19:21 < bridge> <Ryozuki> smh
19:21 < bridge> <Ryozuki> this is like judging an entire community cuz a guy blog post
19:22 < bridge> <Ryozuki> altho i agree with clap
19:22 < bridge> <Ryozuki> its just so useful
19:22 < bridge> <Ryozuki> u get manpages, help, etc
19:22 < bridge> <Ryozuki> and bash autocomplete
19:22 < bridge> <Learath2> It's just an example I found in the wild, it's very very common
19:22 < bridge> <Learath2> Didn't you tear heinrich a new one because he didn't agree with clippy on some things? 😄
19:22 < bridge> <Ryozuki> haha
19:22 < bridge> <Ryozuki> well i dont like to generalize
19:22 < bridge> <Ryozuki> thats just how i am
19:23 < bridge> <Ryozuki> im sure python ppl will tell u should use argparse
19:23 < bridge> <Ryozuki> or smth
19:23 < bridge> <Ryozuki> i havent touched much python
19:23 < bridge> <<~{Barsik}~>> oh wow
19:23 < bridge> <Learath2> The only problem I'd ever have with clap is it's insane binary inflation
19:23 < bridge> <<~{Barsik}~>> you last used sqlx in 2021
19:24 < bridge> <Learath2> An entire extra 500kb or so just to parse command line arguments
19:24 < bridge> <Learath2> This is very cool. I was looking for something like this
19:24 < bridge> <Ryozuki> u should disable default features
19:24 < bridge> <Ryozuki> and enable what uwant
19:24 < bridge> <Learath2> lexopt looks about what I like in my argparse
19:26 < bridge> <Ryozuki> oh ye
19:26 < bridge> <Ryozuki> @Learath2 if u are logging
19:26 < bridge> <Ryozuki> use tracing
19:26 < bridge> <Ryozuki> its overtaking log
19:26 < bridge> <Learath2> Yeah, that's what I went for
19:27 < bridge> <Learath2> log with async wouldn't be very nice anyway
19:27 < bridge> <Ryozuki> tracing works without async too
19:27 < bridge> <Ryozuki> and its just superior
19:27 < bridge> <Ryozuki> objectively
19:27 < bridge> <Ryozuki> if u use all the features its rly nice
19:27 < bridge> <Ryozuki> spans etc
19:27 < bridge> <Ryozuki> and instrumentation
19:27 < bridge> <Learath2> Yeah spans are cool
19:28 < bridge> <Ryozuki> u put #instrument
19:28 < bridge> <Ryozuki> on top of a function
19:28 < bridge> <Ryozuki> it logs all calls with the args
19:28 < bridge> <Ryozuki> and u can skip verbose args
19:28 < bridge> <Ryozuki> like the db connection xd
19:29 < bridge> <Ryozuki> also use once_cell over lazy static
19:29 < bridge> <Ryozuki> im sure u will use regex
19:29 < bridge> <Ryozuki> ur doing the bot right
19:29 < bridge> <Learath2> Yeah, I'm finally giving it another go now that I have a little free time
19:29 < bridge> <Learath2> There are some very annoying bugs in it
19:29 < bridge> <Jupstar ✪> @Ryozuki what are your top5 crates? xd
19:30 < bridge> <Ryozuki> tracing, tokio, rand, sqlx, itertools
19:30 < bridge> <Ryozuki> oh
19:30 < bridge> <Ryozuki> the obvious 1st is
19:30 < bridge> <Ryozuki> serde
19:30 < bridge> <Ryozuki> serde is a engineering miracle
19:30 < bridge> <Ryozuki> cant say it enough
19:31 < bridge> <Ryozuki> its stupid fast and convenient xd
19:31 < bridge> <Ryozuki> if u dont need as much options u can also use mini serde
19:31 < bridge> <Ryozuki> it doesnt support renaming and such
19:31 < bridge> <Learath2> serde really feels like magic
19:31 < bridge> <Ryozuki> it rly is godlike
19:31 < bridge> <Ryozuki> there is no match even on corpo langs like java
19:31 < bridge> <Ryozuki> its superior
19:31 < bridge> <Jupstar ✪> why does it feel like magic to you? xd
19:31 < bridge> <Ryozuki> did u ever use it?
19:32 < bridge> <Ryozuki> it supports renaming, renaming in X convention, struct flattening, enum tagging, etc
19:32 < bridge> <Jupstar ✪> yeah, but i mean what makes it magic to you?
19:32 < bridge> <Jupstar ✪> 
19:32 < bridge> <Jupstar ✪> to me its rust macros that enables serde's power
19:32 < bridge> <Learath2> All the proc macro magic makes it insanely easy to use
19:32 < bridge> <Ryozuki> yeah
19:32 < bridge> <Ryozuki> its just rly easy to use
19:32 < bridge> <Ryozuki> e.g in the js json world they like their stupid namingSense
19:32 < bridge> <Ryozuki> so renaming to rust naming_sense is rly easy
19:33 < bridge> <Learath2> Well, if I hand you just proc macros, it'd be pretty hard to implement something like serde, that's why it's impressive I guess
19:33 < bridge> <Ryozuki> its also blazing fast
19:33 < bridge> <Ryozuki> it uses a visitor pattern iirc
19:34 < bridge> <Jupstar ✪> i have to say if tokio would have condition variables
19:34 < bridge> <Jupstar ✪> 
19:34 < bridge> <Jupstar ✪> i like:
19:34 < bridge> <Jupstar ✪> 1. tokio
19:34 < bridge> <Jupstar ✪> 2. rayon
19:34 < bridge> <Jupstar ✪> 3. bincode (uses serde internally)
19:34 < bridge> <Jupstar ✪> 4. flate2 (bcs really ez to use)
19:34 < bridge> <Jupstar ✪> 5. ash (bcs vulkan, no other reason xd)
19:34 < bridge> <Ryozuki> ```
19:34 < bridge> <Ryozuki>                                 DOM                STRUCT
19:34 < bridge> <Ryozuki> ======= serde_json ======= parse|stringify ===== parse|stringify ====
19:34 < bridge> <Ryozuki> data/canada.json         320 MB/s   430 MB/s   580 MB/s   310 MB/s
19:34 < bridge> <Ryozuki> data/citm_catalog.json   420 MB/s   560 MB/s   710 MB/s   880 MB/s
19:34 < bridge> <Ryozuki> data/twitter.json        300 MB/s   910 MB/s   550 MB/s  1060 MB/s
19:34 < bridge> <Ryozuki> 
19:34 < bridge> <Ryozuki> ==== rustc_serialize ===== parse|stringify ===== parse|stringify ====
19:34 < bridge> <Ryozuki> data/canada.json         150 MB/s    67 MB/s   120 MB/s    46 MB/s
19:34 < bridge> <Ryozuki> data/citm_catalog.json   210 MB/s   180 MB/s   140 MB/s   210 MB/s
19:34 < bridge> <Ryozuki> data/twitter.json        120 MB/s   330 MB/s    87 MB/s   350 MB/s
19:34 < bridge> <Ryozuki> 
19:34 < bridge> <Ryozuki> ======= simd-json ======== parse|stringify ===== parse|stringify ====
19:34 < bridge> <Ryozuki> data/canada.json         380 MB/s   470 MB/s   580 MB/s
19:34 < bridge> <Ryozuki> data/citm_catalog.json   720 MB/s   760 MB/s  1220 MB/s
19:34 < bridge> <Ryozuki> data/twitter.json        810 MB/s   890 MB/s  1050 MB/s
19:34 < bridge> <Ryozuki> 
19:34 < bridge> <Ryozuki> c++
19:34 < bridge> <Ryozuki> ==== rapidjson-clang ===================== parse|stringify ====
19:35 < bridge> <Ryozuki> data/canada.json                         380 MB/s   200 MB/s
19:35 < bridge> <Ryozuki> data/citm_catalog.json                   680 MB/s  1090 MB/s
19:35 < bridge> <Ryozuki> data/twitter.json                        320 MB/s   600 MB/s
19:35 < bridge> <Ryozuki> 
19:35 < bridge> <Ryozuki> ===== rapidjson-gcc ====================== parse|stringify ====
19:35 < bridge> <Ryozuki> data/canada.json                         390 MB/s   250 MB/s
19:35 < bridge> <Ryozuki> data/citm_catalog.json                   890 MB/s  1650 MB/s
19:35 < bridge> <Ryozuki> data/twitter.json                        440 MB/s   870 MB/s
19:35 < bridge> <Ryozuki> 
19:35 < bridge> <Ryozuki> ```
19:35 < bridge> <Jupstar ✪> but i also dont know too many tbf
19:35 < bridge> <Ryozuki> those are nice
19:35 < bridge> <Ryozuki> bincode is rly nice
19:35 < bridge> <Ryozuki> i use it to pack ffxiv item data
19:35 < bridge> <Ryozuki> rayon is also good
19:35 < bridge> <Ryozuki> thanks to rust
19:35 < bridge> <Jupstar ✪> egui is also nice u want a gui that is ez to use in a custom engine.
19:35 < bridge> <Jupstar ✪> 
19:35 < bridge> <Jupstar ✪> But generally i woudnt say its the greates UI lib
19:35 < bridge> <Ryozuki> ye egui is nice
19:36 < bridge> <Ryozuki> immediate mode
19:37 < bridge> <Ryozuki> oh and cli tools
19:37 < bridge> <Ryozuki> fd > find
19:37 < bridge> <Ryozuki> exa > ls
19:37 < bridge> <Ryozuki> ripgrep > grep
19:37 < bridge> <Ryozuki> dust > du
19:37 < bridge> <Ryozuki> delta > whathever diff tool u use
19:37 < bridge> <Ryozuki> sd > sed
19:38 < bridge> <Ryozuki> bat is a nice cat with highlighting
19:38 < bridge> <Ryozuki> u can even use it in vim to have preview code with highlight
19:39 < bridge> <Ryozuki> thanks for coming to my ted talk
19:44 < bridge> <<~{Barsik}~>> alkahest > bincode change ma mind xd
21:25 < bridge> <Ewan> i configured with -DVULKAN=OFF but am still getting this error from cmake in the generating step
21:25 < bridge> <Ewan> ```
21:25 < bridge> <Ewan> CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
21:25 < bridge> <Ewan> Please set them or make sure they are set and tested correctly in the CMake files:
21:25 < bridge> <Ewan> /home/mint/Downloads/TaterClient-ddnet-master/VULKAN_INCLUDE_DIRS
21:25 < bridge> <Ewan>    used as include directory in directory /home/mint/Downloads/TaterClient-ddnet-master
21:25 < bridge> <Ewan> VULKAN_LIBRARIES
21:25 < bridge> <Ewan>     linked by target "DDNet" in directory /home/mint/Downloads/TaterClient-ddnet-master
21:25 < bridge> <Ewan> ```
21:25 < bridge> <Ewan> seems like someone oops'd on the cmake
21:26 < bridge> <Jupstar ✪> can u try on ddnet github
21:26 < bridge> <Jupstar ✪> i wonder if its simply bcs its outdated
21:26 < bridge> <Ewan> could be
21:26 < bridge> <Jupstar ✪> our 32bit build for example does not use vulkan
21:27 < bridge> <Jupstar ✪> and when u reconfigure always try a clean build dir
21:27 < bridge> <Ewan> yeah
21:27 < bridge> <Jupstar ✪> sometimes its weird af
21:27 < bridge> <Ewan> it's the cmakecache that's the issue
21:27 < bridge> <Ewan> which will only be created if the makefile generation step succeeds
21:27 < bridge> <Ewan> it's usually the cmakecache that's the issue when you have reconfiguration issues on a dirty build dir
21:28 < bridge> <Ewan> works on latest
21:29 < bridge> <Jupstar ✪> but who'd want to turn off vk anyway 😉
21:29 < bridge> <Ewan> probably me who oops'd on the cmake
21:29 < bridge> <Ewan> i like vulkan and use it normally
21:29 < bridge> <Jupstar ✪> ;9
21:29 < bridge> <Ewan> but im on a linux live cd rn where using linux would require getting official nvidia drivers & rebooting... which i can't doo
21:29 < bridge> <Ewan> but im on a linux live cd rn where using linux would require getting official nvidia drivers & rebooting... which i can't do
21:29 < bridge> <Ewan> but im on a linux live cd rn where using vlukan would require getting official nvidia drivers & rebooting... which i can't do
21:29 < bridge> <Jupstar ✪> rip xd
21:29 < bridge> <Ewan> but im on a linux live cd rn where using vulkan would require getting official nvidia drivers & rebooting... which i can't do
21:30 < bridge> <Ewan> im waiting on the creation of 2 500GB disk images and 1 1TB disk image
21:30 < bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1081312641940738148/image.png
21:30 < bridge> <Ewan> need something to keep me occupied
21:38 < bridge> <Ewan> oh hey apparently nouveau can do vulkan now... not performing well though
21:40 < bridge> <Jupstar ✪> generally dont expect good perf on nvidia if u dont use the real drivers
21:40 < bridge> <Jupstar ✪> even on ogl
21:40 < bridge> <Ewan> yeah
21:40 < bridge> <Ewan> it's chugging pretty hard
21:40 < bridge> <Ewan> this is pretty much worse than having no driver tbh
21:42 < bridge> <Ewan> theoretically getting 45 fps but that feels generous
21:43 < bridge> <Ewan> i can squeeze out 150 at 1080p. meh
