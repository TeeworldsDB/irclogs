00:06 < bridge> <Chairn> you need `git add` i think after `git apply`, then `git commit`
00:15 < bridge> <Mr.Gh0s7> ah yes that was the procudure i did take but I was writting off memoery in the above msg. sry if any confusion
00:47 < bridge> <Draggory> Should I delete the .old files or is it still worth keeping them there?
09:41 < _______> 扬州一手高防服务器 有需要的可以加 2885230098
09:42 < _______> 江苏扬州一手高防服务器  有需要的加qq2885230098
09:42 < bridge> <Jupstar ✪> number of chinese ppl that read this: 0 xd
09:45 < bridge> <cyberFighter> wut
09:45 < bridge> <cyberFighter> we got aliens in the chat rn
09:46 <+ChillerDragon> uhm sos xd
09:46 <+ChillerDragon> i may have run ``chown -R root:admin /`` on my production vps :justatest: and now ssh just hangs what could i have broken? xd i still have a open ssh connection but if i loose that the server has to be nuked
09:48 < bridge> <Jupstar ✪> why root:admin
09:48 < bridge> <Jupstar ✪> did u create that group? xd
09:48 < _______> 用我家的服务器啊  高速稳定
09:49 < ws-client> <ChillerDragon> yes xd
09:49 < bridge> <Jupstar ✪> i guess as a start make it root:root again? xd
09:49 < ws-client> <ChillerDragon> doubt thatll fix it
09:49 < bridge> <Jupstar ✪> rip
09:49 < ws-client> <ChillerDragon> i assume i wiped some stuff that was owned by the ssh user or something like that
09:50 < ws-client> <ChillerDragon> in the hindsight it was a reckless move xd
09:55 < bridge> <Jupstar ✪> did u try to reinstall all packages
10:00 <+ChillerDragon> i am not sure if i want to reinstall ssh if thats the only thing keeping me alive
10:00 < bridge> <Jupstar ✪> no risk no fun
10:03 <+ChillerDragon> oh boi
10:03 <+ChillerDragon> i tried to backup my data but everything went to shit xd
10:03 <+ChillerDragon> dns is dead
10:03 <+ChillerDragon> ping cant even access the socket etc xd
10:03 <+ChillerDragon> feels like rm -rf
10:04 < bridge> <Jupstar ✪> rip to your vps
10:04 <+ChillerDragon> and its data as it seems
10:04 < bridge> <Jupstar ✪> but hard to do a diagnosis
10:04 <+ChillerDragon> i just need to restore all default debian permissions
10:04 <+ChillerDragon> "just"
10:05 < bridge> <Jupstar ✪> chmod 777 -R / 
10:05 < bridge> <Jupstar ✪> 😂 😂 😂
10:05 <+ChillerDragon> e
10:05 <+ChillerDragon> bro
10:05 < bridge> <Jupstar ✪> yeah yeah jk, u r fckd
10:07 <+ChillerDragon> ok seems like i learn a bit more about the linux file system today :)
10:07 <+ChillerDragon> i gotta repair at least until i can ssh again and backup my data
10:07 < bridge> <Jupstar ✪> compress everything in your working shell, then type the binary compressed data by hand
10:07 <+ChillerDragon> ez
10:08 <+ChillerDragon> i can also ctrl+c the base64 encoded binary data
10:08 < bridge> <Jupstar ✪> do u have no network access at all?
10:08 <+ChillerDragon> yes
10:08 <+ChillerDragon> i mean kinda 
10:08 <+ChillerDragon> my ssh is fully functional but onbly the one that is open
10:08 <+ChillerDragon> my tw server is running fine i think
10:08 <+ChillerDragon> idk actually
10:08 < bridge> <Jupstar ✪> and that has internet access?
10:08 <+ChillerDragon> i cant ping or do git push
10:09 <+ChillerDragon> fun CTF
10:09 <+ChillerDragon> if it wouldnt be my vps at risk xd
10:09 <+ChillerDragon> i can see my unstable internet dieing any moment and then im out
10:10 <+ChillerDragon> i need a backdoor xd
10:10 < bridge> <Jupstar ✪> the question is if internet doesnt work at all
10:10 <+ChillerDragon> idk 
10:10 < bridge> <Jupstar ✪> wget
10:10 <+ChillerDragon> i dont have dns i think
10:10 < bridge> <Jupstar ✪> do by IP directly
10:10 <+ChillerDragon> works
10:11 <+ChillerDragon> maybe i can scp to my other vps
10:11 < bridge> <Jupstar ✪> well then u can probably at least upload all data somewhere
10:11 <+ChillerDragon> i wanna git push -,-
10:11 <+ChillerDragon> fakin scp
10:11 <+ChillerDragon> gimme sec i linux pro ima fix all perms 
10:18 < bridge> <heinrich5991> I like it when I see what other project's issues are related to my project's issues. what do you not like about it?
10:19 < bridge> <Jupstar ✪> i think it should be one sided only. but we already had this discussion.
10:19 < bridge> <Jupstar ✪> Why should an unrelated project be able to annoy my project
10:19 < bridge> <Jupstar ✪> see e.g. how chillerdragon abused it
10:21 < bridge> <Jupstar ✪> 50% of the issue is not related to the project
10:21 < bridge> <Jupstar ✪> https://cdn.discordapp.com/attachments/293493549758939136/1112656976095223858/image.png
10:22 < bridge> <Jupstar ✪> if they want it, they could at least make it more decent
10:22 < bridge> <heinrich5991> it doesn't really seem that way to me, haven't encountered a necessary but not existent feature in quite some time, I think
10:29 < bridge> <cyberFighter> heinrich wheres ur map archive, i keep forgetting the site
10:29 < bridge> <TsFreddie> server seller
10:29 <+ChillerDragon> heirncihde maps
10:30 < bridge> <Jupstar ✪> https://heinrich5991.de/teeworlds/maps/maps/
10:30 <+ChillerDragon> https://heinrich5991.de/teeworlds/maps/
10:30 < bridge> <Jupstar ✪> https://heinrich5991.de/teeworlds/maps/maps/maps/maps/maps/maps/maps/maps/maps/maps
10:30 <+ChillerDragon> trol
10:31 < bridge> <Jupstar ✪> and did he convince you? xd
10:31 < bridge> <TsFreddie> It's interesting that the guy didn't spam the irc channel
10:31 < bridge> <Jupstar ✪> as the only chinese here
10:31 < bridge> <TsFreddie> Server resellers usually gets a lot more annoying
10:31 < bridge> <TsFreddie> He didn't say anything other he has some lmao
10:31 < bridge> <TsFreddie> He didn't say anything other than he has some lmao
10:32 < bridge> <cyberFighter> lmao it broke my phone browser
10:32 < bridge> <Jupstar ✪> yeah use firefox with that site
10:33 < bridge> <Jupstar ✪> its usually a bit faster, tho chrome seems to have fixed it on desktop
10:33 < bridge> <TsFreddie> They did say they have ddos protection which is exactly what we are trying to avoid
10:33 < bridge> <Jupstar ✪> i remember like 2 years ago it was unuseable 😄
10:33 < bridge> <TsFreddie> So no, he didn't convince me at all
10:38 < bridge> <cyberFighter> firefox on phone?
10:38 < bridge> <Jupstar ✪> yeah
10:39 < bridge> <Jupstar ✪> https://f-droid.org/packages/org.mozilla.fennec_fdroid/
10:40 < bridge> <Jupstar ✪> if u got iphone u screwed tho xd
10:40 < bridge> <Jupstar ✪> it only allows safari backend
10:50 <+ChillerDragon> pog pog i fixed git
10:56 < bridge> <cyberFighter> bro an iphone has better performance than my laptop
10:57 < bridge> <cyberFighter> i absolutely dont have one
10:57 < bridge> <Jupstar ✪> that's not my point ^^
10:57 < bridge> <cyberFighter> :feelsbadman:
10:57 < bridge> <Jupstar ✪> apple disallows browers to have their own backends
10:57 < bridge> <Jupstar ✪> they all use safari
10:57 < bridge> <cyberFighter> apple sux
10:57 < bridge> <Jupstar ✪> if u use chrome, u use safari xD
10:58 < ws-client> <ChillerDragon> Can someone leak the  :feelsbadman:  texture?
10:59 < bridge> <cyberFighter> oops
10:59 < bridge> <cyberFighter> well firefox works good
11:00 < bridge> <cyberFighter> rip my mobile data though lmfao
11:00 < bridge> <Mr.Gh0s7> you probably need to scale it down
11:00 < bridge> <Mr.Gh0s7> https://cdn.discordapp.com/attachments/293493549758939136/1112666769790881812/feelsbadman.png
11:01 < bridge> <cyberFighter> does anyone remember ctf_epic
11:01 < bridge> <deen> I wanted to build Rust dependencies as shared libs and not rebuild them each time. For unit tests wanted a test harness that is implicitly run before each test
11:02 < bridge> <Jupstar ✪> https://heinrich5991.de/teeworlds/maps/thumbs/ctf_epic_48982045.map.png
11:02 < bridge> <Jupstar ✪> this?
11:02 < bridge> <cyberFighter> yeah
11:03 < bridge> <Jupstar ✪> i'm unsure but maybe i have seen it before
11:03 < bridge> <cyberFighter> i remember seeing ctf maps like that in those weird ctf with levels mods
11:04 < bridge> <heinrich5991> the shared lib thing is actually not there, yea :/
11:04 < bridge> <heinrich5991> the other thing is possible, you can define your own `#[test]` attribute that does what you want
11:05 < bridge> <Jupstar ✪> static linking is master race
11:06 < bridge> <Robyt3> useful feature?
11:06 < bridge> <Robyt3> https://cdn.discordapp.com/attachments/293493549758939136/1112668233456156752/Demo-UI-Dragging.mp4
11:06 < bridge> <Jupstar ✪> no, but still epic
11:06 < bridge> <Jupstar ✪> xdd
11:06 < bridge> <heinrich5991> see https://docs.rs/test-log/latest/test_log/ for an example
11:07 < bridge> <Jupstar ✪> if u pr it make sure it has a high move tollerance before moving. i often move while clicking and hate apps that are too sensitive when dragging ^^
11:08 < bridge> <Robyt3> it starts moving after dragging for more than 5 pixels (2d distance)
11:09 < bridge> <Robyt3> behaves similar to Windows I'd say
11:12 < ws-client> <chilerdr> thanks @Mr.Gh0s7
11:12 < bridge> <Mr.Gh0s7> btw I have yet to upload my dotfiles :/
11:13 < bridge> <Mr.Gh0s7> I came across a strange error and can't push to the dwm repo >:(
11:17 < bridge> <Mr.Gh0s7> (to my dwm repo xD)
11:29 < bridge> <deen> Still requires touching every one of the thousands of files containing a test though, right?
11:33 < bridge> <heinrich5991> yes, once
11:36 < bridge> <Ryozuki> true, this made me remember seeing a gentoo staff calling static linking a bug
11:38 < bridge> <Jupstar ✪> 🥲
12:21 < bridge> <Chairn> yeah, if something interesting happens bottom left
12:22 < bridge> <Ryozuki> today im older
12:22 < bridge> <Ryozuki> :justatest:
12:23 < bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1112687555201212416/image.png
12:24 < bridge> <Chairn> happy birthday 🎂
12:24 < bridge> <Chairn> technically, you're getting older every day though 🙂
12:26 < ws-client> <ChillerDragon> e wot i reinstalled my vps and dns is still working am i losing it?
12:32 <+ChillerDragon> !help
12:32 < chillerbot1> https://github.com/ChillerDragon/ddnet-bot-irc eth0=172.17.0.2 commands: !mods, !ping, !p (hex traffixc), !sh (bash)
12:32 <+ChillerDragon> !ip
12:32 <+ChillerDragon> !ipaddr
12:32 <+ChillerDragon> fk
12:32 <+ChillerDragon> a there it is xd
12:33 <+ChillerDragon> omg its wrong xd
13:17 < bridge> <MilkeeyCat> happy bday :happy:
14:20 < bridge> <Smetanolub> guys, why i cant watch demo while im playing on server?
14:20 < bridge> <Smetanolub> its bad, need to fix
14:22 < bridge> <Jupstar ✪> the whole client is simply not build for it
14:22 < bridge> <Jupstar ✪> just open a second client
14:22 < bridge> <Jupstar ✪> this isnt really an easy fix
14:27 < bridge> <Smetanolub> sad
14:38 < bridge> <MilkeeyCat> are you playing an a server or watching a demo?
14:45 < bridge> <Smetanolub> im playing on server, and i want to watch demo without disconnect
14:47 < bridge> <bencie> > just open a second client
14:52 < bridge> <Smetanolub> it's a crutch
14:52 < bridge> <Smetanolub> i didnt ask how, i asked for new feature
14:56 < bridge> <Voxel> it is a feature: simply open a second client :troll:
15:07 < bridge> <Cellegen | RiH> Just when I want my custom button's position to move with the mouse's velocity, you do this afterwards and it makes me both happy and mad :kek:
15:41 < bridge> <Ryozuki> thanks
15:41 < bridge> <Ryozuki> :brownbear:
16:01 < bridge> <Cellegen | RiH> happy ddbirthday
16:08 < bridge> <Chairn> i think it's regular birthday
16:08 < bridge> <Chairn> ddbirthday is on 02/01/2015
16:09 < bridge> <Ryozuki> yeah
16:10 < bridge> <Jupstar ✪> may kids are the best
16:10 < bridge> <Chairn> at least, you never have to worry about your age
16:10 < bridge> <Chairn> born on 2000
16:10 < bridge> <Jupstar ✪> but he'll never be able to have lived in 3 centuries
16:10 < bridge> <Jupstar ✪> except he gets 200 years old xD
16:11 < bridge> <Cellegen | RiH> cant wait to be an old sack
16:11 < bridge> <Jupstar ✪> ez
16:11 < bridge> <Ryozuki> i know
16:11 < bridge> <Ryozuki> 2023 = 23
16:12 < bridge> <Ryozuki> @Jupeyy_Keks there is big drama in rust rn
16:12 < bridge> <Jupstar ✪> i love drama
16:12 < bridge> <Ryozuki> https://www.reddit.com/r/rust/comments/13tsmht/jt_why_i_left_rust/
16:12 < bridge> <Ryozuki> https://www.reddit.com/r/rust/comments/13uidp3/accountability_requires_courage/
16:12 < bridge> <Ryozuki> https://www.reddit.com/r/rust/comments/13u8car/rust_the_wrong_people_are_resigning/
16:12 < bridge> <Ryozuki> https://www.reddit.com/r/rust/comments/13ug42p/lets_thank_who_have_helped_us_in_the_rust/
16:12 < bridge> <Ryozuki> here
16:13 < bridge> <Chairn> technically, he was born on 20th century 🙂
16:13 < bridge> <Ryozuki> >  Unfortunately we have witnessed another example of how the folks involved in the Rust project allow a culture of “back channels” and “out groups”. The people involved in the highest level of leadership do not self-police in a productive fashion.
16:13 < bridge> <Ryozuki> > 
16:13 < bridge> <Ryozuki> > Why are people associated with The Rust Project’s leadership always so opaque about who is responsible? Why are we always hearing about one “individual” acting without the permission of “leadership”?
16:13 < bridge> <Ryozuki> > 
16:13 < bridge> <Ryozuki> > In order to have actual accountability of people’s actions, which JT suggests is the root of the sickness we are witnessing in the leadership teams you need to have courage to stand up to others. We need to condemn the actions of those who act outside their station. You need to have the courage to name and shame when required. In this case, the individual who messaged @rabidferret claiming to represent the consensus of the project should be eje
16:15 < bridge> <Jupstar ✪> is there a summary somewhere
16:15 < bridge> <Jupstar ✪> i dont understand this 😄
16:17 < bridge> <Ryozuki> no
16:17 < bridge> <Ryozuki> but its mainly "back channels" on leadership
16:18 < bridge> <Ryozuki> @Jupeyy_Keks read the links in order i sent them
16:18 < bridge> <Jupstar ✪> well what is back channels in this context 😄
16:18 < bridge> <Jupstar ✪> i read it, but its confusing af
16:19 < bridge> <Ryozuki> also the talk itself is interesting
16:20 < bridge> <Ryozuki> compile time reflection
16:20 < bridge> <Ryozuki> https://soasis.org/posts/a-mirror-for-rust-a-plan-for-generic-compile-time-introspection-in-rust/
16:21 < bridge> <Jupstar ✪> i wait for a video 😂
16:21 < bridge> <Jupstar ✪> someones heart got broken
16:21 < bridge> <Jupstar ✪> bcs of some leadership
16:21 < bridge> <Jupstar ✪> thats all i understand
16:28 < bridge> <Ryozuki> wait for the tik toks
16:30 < bridge> <Chairn> 1. council invites P as keynote speaker for RustConf
16:31 < bridge> <Chairn> 2. some council member A ask RustConf admin B to decline P
16:31 < bridge> <Chairn> 3. admin B accepts to decline P
16:31 < bridge> <Chairn> 4. P doesn't understand and feels like he was mistreated (which is the case from what i've read). He makes a blog post about it
16:31 < bridge> <Chairn> 5. A realizes he's been duped and leaves Rust council
16:31 < bridge> <Chairn> 6. Drama ensures
16:36 < bridge> <Jupstar ✪> But why in first place decline. do they hate each others xd
16:37 < bridge> <Adil> where can i programm a bot for ddnet?
16:38 < bridge> <Chairn> feels like, the invited guy was from the C comitee
16:38 < bridge> <Jupstar ✪> lmao
16:38 < bridge> <Adil> where can i programm a bot for ddnet?(not for hacking)
16:41 < bridge> <MilkeeyCat> for educational purposes?
16:42 < bridge> <Mr.Gh0s7> for educating the pros :kek:
16:42 < bridge> <Adil> yes
16:43 < bridge> <Adil> my friend wanted to know
16:43 < bridge> <MilkeeyCat> in ddnet jail
16:43 < bridge> <Adil> is sth like that not allowed?
16:44 < bridge> <Chairn> obviously not
16:44 < bridge> <MilkeeyCat> what do you think of when you imagine a bot and not for hakcing
16:44 < bridge> <MilkeeyCat> what do you think of when you imagine a bot and not for hacking
16:44 < bridge> <Kondensator> Hey guys, do you know if I can bind vote to a key somehow?
16:44 < bridge> <Mr.Gh0s7> wait maybe we misunderstood. Is it a bot that plays the game or or like a discord bot for ddnet?
16:46 < bridge> <Adil> like a bot that when someone moves me from a spot then it moves back there alone
16:46 < bridge> <Mr.Gh0s7> bind "<key>" "vote <yes|no>"
16:46 < bridge> <gerdoe> `bind <key> callvote option <name of vote>`
16:46 < bridge> <gerdoe> ```2023-05-29 17:45:54 I chatresp: Invalid arguments... Usage: vote r['yes'|'no']
16:46 < bridge> <gerdoe> 2023-05-29 17:46:20 I chatresp: Invalid arguments... Usage: callvote s['kick'|'spectate'|'option'] s[id|option text] ?r[reason]```
16:46 < bridge> <Kondensator> thanks, will see if that works
16:48 < bridge> <Kondensator> huh, this must have been added recently (I mean the usage help)
16:48 < bridge> <Mr.Gh0s7> works on my machine. (eg bind f3 vote yes)
16:49 < bridge> <Kondensator> the question is, how do I get vote option text if it uses some weird characters
16:49 < bridge> <gerdoe> hm, no(?)
16:50 < bridge> <gerdoe> call it and copy from f1
16:50 < bridge> <gerdoe> `2023-05-29 17:50:33 I chat: *** '<~{Barsik}~>' called vote to change server option 'Scorelimit 100' (No reason given)`
16:50 < bridge> <Kondensator> alright, thanks
16:54 < bridge> <Kondensator> Well, the vote I want to call with a bind does not print out anything in the console :/
17:06 < bridge> <gerdoe> xd
17:08 < bridge> <bencie> You're trying to bind a vote so that it calls that vote on a buttonpress? What's the vote that you're trying to call?
17:28 < bridge> <Learath2> LOL, they didn't want the dude to speak because he wrote a blogpost critical of Rust? 😄
17:31 < bridge> <Learath2> Actually it doesn't even say critical, what could one write in a blogpost about reflection that is controversial even?
17:37 < bridge> <Ryozuki> @Learath2 when is const_cast used?
17:38 < bridge> <Learath2> Preferably never, it's just a patch for a lack of language features
17:38 < bridge> <Ryozuki> ```cpp
17:38 < bridge> <Ryozuki> Block *make_Block(const OpBuilder &builder, Region *region)
17:38 < bridge> <Ryozuki> {
17:38 < bridge> <Ryozuki>     return const_cast<OpBuilder &>(builder).createBlock(region);
17:38 < bridge> <Ryozuki> }
17:38 < bridge> <Ryozuki> ```
17:38 < bridge> <Ryozuki> i cant call createBlock without it here
17:38 < bridge> <Learath2> Can't you take a non-const reference to it to begin with?
17:38 < bridge> <Ryozuki> i wonder
17:38 < bridge> <Ryozuki> i use this with cxx
17:38 < bridge> <Ryozuki> well i jsut started toying with it
17:39 < bridge> <Ryozuki> a bridge with rust
17:39 < bridge> <Learath2> Because if you cast away const and it is actually const it's UB
17:39 < bridge> <Ryozuki> (the c api lacks features)
17:39 < bridge> <Learath2> const_cast is only for non-const correct apis to be able to be called
17:40 < bridge> <Learath2> "and the function you call actually modifies the value" is more correct I guess
17:41 < bridge> <Learath2> (when you know an object isn't const is also fine, but that's not the case I was trying to illustrate)
17:43 < bridge> <Ryozuki> what if the type is behind a unique ptr
17:43 < bridge> <Ryozuki> i tried to make it non const but i think it fails
17:44 < bridge> <Learath2> Oh I remember a good example, `strchr()`. It takes and returns a `char *` but you can safely use it on a `const char *` instead
17:44 < bridge> <Learath2> Hm, is this generated code or sth?
17:45 < bridge> <Learath2> e.g. what calls `make_Block`? Why can't it pass a non-const reference?
17:45 < bridge> <Ryozuki> ```
17:45 < bridge> <Ryozuki>   running: "c++" "-O0" "-ffunction-sections" "-fdata-sections" "-fPIC" "-gdwarf-2" "-fno-omit-frame-pointer" "-arch" "arm64" "-I" "/Users/edgar/Documents/mlircpp/target/debug/build/mlircpp-7a862e997e3d30d5/out/cxxbridge/include" "-I" "/Users/edgar/Documents/mlircpp/target/debug/build/mlircpp-7a862e997e3d30d5/out/cxxbridge/crate" "-Wall" "-Wextra" "-std=c++17" "-I/opt/homebrew/opt/llvm@16/include" "-Wno-unused-parameter" "-o" "/Users/edgar/Documents
17:45 < bridge> <Ryozuki>   cargo:warning=/Users/edgar/Documents/mlircpp/target/debug/build/mlircpp-7a862e997e3d30d5/out/cxxbridge/sources/mlircpp/src/bridge.rs.cc:483:36: error: cannot initialize a variable of type '::std::unique_ptr< ::OpBuilder> (*)(const ::MLIRContext &)' (aka 'unique_ptr<mlir::OpBuilder> (*)(const mlir::MLIRContext &)') with an lvalue of type 'std::unique_ptr<OpBuilder> (mlir::MLIRContext &)': type mismatch at 1st parameter ('const ::MLIRContext &' (ak
17:45 < bridge> <Ryozuki>   cargo:warning=  ::std::unique_ptr<::OpBuilder> (*make_OpBuilder$)(::MLIRContext const &) = ::make_OpBuilder;
17:45 < bridge> <Ryozuki>   cargo:warning=                                   ^                                         ~~~~~~~~~~~~~~~~
17:45 < bridge> <Ryozuki>   cargo:warning=1 error generated.
17:45 < bridge> <Ryozuki>   exit status: 1
17:45 < bridge> <Ryozuki> ```
17:45 < bridge> <Ryozuki> 
17:45 < bridge> <Ryozuki> source:
17:45 < bridge> <Ryozuki> ```cpp
17:45 < bridge> <Ryozuki> std::unique_ptr<MLIRContext> make_MLIRContext();
17:45 < bridge> <Ryozuki> std::unique_ptr<OpBuilder> make_OpBuilder(MLIRContext &);
17:46 < bridge> <Ryozuki> 
17:46 < bridge> <Ryozuki> std::unique_ptr<MLIRContext> make_MLIRContext()
17:46 < bridge> <Ryozuki> {
17:46 < bridge> <Ryozuki>     mlir::DialectRegistry registry;
17:46 < bridge> <Ryozuki>     mlir::registerAllDialects(registry);
17:46 < bridge> <Ryozuki> 
17:46 < bridge> <Ryozuki>     return std::make_unique<MLIRContext>(registry);
17:46 < bridge> <Ryozuki> }
17:46 < bridge> <Ryozuki> 
17:46 < bridge> <Ryozuki> std::unique_ptr<OpBuilder> make_OpBuilder(MLIRContext &context)
17:46 < bridge> <Ryozuki> {
17:46 < bridge> <Ryozuki>     return std::make_unique<OpBuilder>(&context);
17:46 < bridge> <Ryozuki> }
17:46 < bridge> <Ryozuki> ```
17:46 < bridge> <Ryozuki> it works if context is const
17:46 < bridge> <Ryozuki> ```cpp
17:46 < bridge> <Ryozuki> std::unique_ptr<OpBuilder> make_OpBuilder(const MLIRContext &context)
17:46 < bridge> <Ryozuki> {
17:46 < bridge> <Ryozuki>     return std::make_unique<OpBuilder>(const_cast<MLIRContext *>(&context));
17:46 < bridge> <Ryozuki> }
17:46 < bridge> <Ryozuki> ````
17:46 < bridge> <Ryozuki> @Learath2
17:47 < bridge> <Ryozuki> ```rust
17:47 < bridge> <Ryozuki> #[test]
17:47 < bridge> <Ryozuki>     fn myfunc() {
17:47 < bridge> <Ryozuki>         let c = make_MLIRContext();
17:47 < bridge> <Ryozuki>         let op = make_OpBuilder(&c);
17:47 < bridge> <Ryozuki>     }
17:47 < bridge> <Ryozuki> ```
17:47 < bridge> <Ryozuki> xd
17:47 < bridge> <Learath2> Ah so it is generated
17:47 < bridge> <Ryozuki> nono
17:47 < bridge> <Ryozuki> i can define how it is generated
17:47 < bridge> <Ryozuki> i can remove the const
17:47 < bridge> <Ryozuki> but idk i get a error xd
17:48 < bridge> <Ryozuki> oh wait
17:48 < bridge> <Learath2> Okay, I think the context needs to be passed non-const too
17:48 < bridge> <Ryozuki> maybe i did smth bad
17:49 < bridge> <Learath2> idk why it's getting the const, or where it's getting the const
17:50 < bridge> <Ryozuki> ```cpp
17:50 < bridge> <Ryozuki> error: cannot initialize a variable of type '::std::unique_ptr< ::OpBuilder> (*)(const ::MLIRContext &)' (aka 'unique_ptr<mlir::OpBuilder> (*)(const mlir::MLIRContext &)') with an lvalue of type 'std::unique_ptr<OpBuilder> (mlir::MLIRContext &)': type mismatch at 1st parameter ('const ::MLIRContext &' (aka 'const mlir::MLIRContext &') vs 'mlir::MLIRContext &')
17:50 < bridge> <Ryozuki> ```
17:50 < bridge> <Ryozuki> i removed all consts i found lol
17:50 < bridge> <Ryozuki> maybe llvm constructor of opbuilder requires a const ref to context?
17:50 < bridge> <Learath2> Well let me take a look
17:50 < bridge> <Ryozuki> ```cpp
17:50 < bridge> <Ryozuki> /// Create a builder with the given context.
17:50 < bridge> <Ryozuki>   explicit OpBuilder(MLIRContext *ctx, Listener *listener = nullptr)
17:50 < bridge> <Ryozuki>       : Builder(ctx), listener(listener) {}
17:50 < bridge> <Ryozuki> ````
17:50 < bridge> <Ryozuki> doesnt see so
17:51 < bridge> <Ryozuki> does make_unique require const
17:51 < bridge> <Ryozuki> xd
17:51 < bridge> <Learath2> idk how the translation layer handle these but why isn't your make_OpBuilder taking a std::unique_ptr?
17:52 < bridge> <Ryozuki> because i didnt make it so
17:52 < bridge> <Ryozuki> i can make it so
17:52 < bridge> <Ryozuki> let me see
17:52 < bridge> <Learath2> Ohh, I see what's going on here
17:53 < bridge> <Learath2> You can't get a non-const ptr out of a unique_ptr
17:53 < bridge> <gerdoe> chillerdragon:
17:53 < bridge> <Learath2> Otherwise you could destroy the object, but unique_ptr is supposed to be managing it
17:53 < bridge> <Schädel> @Learath2
17:54 < bridge> <Ryozuki> oh
17:54 < bridge> <Learath2> https://en.cppreference.com/w/cpp/memory/unique_ptr/release
17:54 < bridge> <Ryozuki> so the const thing is good?
17:54 < bridge> <Learath2> This is how you get it out
17:54 < bridge> <Ryozuki> my coworker made this before
17:54 < bridge> <Ryozuki> xd
17:55 < bridge> <Learath2> I think in this case I would have OpBuilder take the context and release it before passing it to llbm
17:55 < bridge> <Learath2> llvm*
17:55 < bridge> <Learath2> So move out of c I guess?
17:55 < bridge> <Learath2> Idk how rust maps to c++
17:55 < bridge> <Ryozuki> we need to keep context
17:55 < bridge> <Ryozuki> we own it
17:56 < bridge> <Ryozuki> im using the cxx crate
17:56 < bridge> <Ryozuki> https://cxx.rs/concepts.html
17:56 < bridge> <Learath2> If you need to access it later I guess a shared_ptr/Arc is called for
17:56 < bridge> <Ryozuki> what we use in ddnet
17:56 < bridge> <Ryozuki> but say
17:56 < bridge> <Ryozuki> i have a unique ptr of context
17:56 < bridge> <Ryozuki> cant i just pass a ref of context to a function
17:56 < bridge> <Ryozuki> why do i need to pass the unique ptr itself
17:58 < bridge> <Learath2> Hm, actually now that I re-read this section I think you should be able to get a normal pointer too
18:01 < bridge> <Learath2> Yeah, idk, is it maybe the &c in the rust code generating this? I don't understand why it's trying to generate a `::std::unique_ptr< ::OpBuilder> (*)(const ::MLIRContext &)`
18:01 < bridge> <Ryozuki> `pub fn make_MLIRContext() -> ::cxx::UniquePtr<MLIRContext>`
18:02 < bridge> <Ryozuki> on rust i have to define the function too
18:02 < bridge> <Ryozuki> i have it like
18:02 < bridge> <Ryozuki> `fn make_OpBuilder(context: &MLIRContext) -> UniquePtr<OpBuilder>;`
18:03 < bridge> <Learath2> Can you check the generated code btw?
18:03 < bridge> <Learath2> it'd be interesting to see around this error
18:03 < bridge> <Ryozuki> ```cpp
18:03 < bridge> <Ryozuki> ::OpBuilder *cxxbridge1$make_OpBuilder(::MLIRContext const &context) noexcept {
18:03 < bridge> <Ryozuki>   ::std::unique_ptr<::OpBuilder> (*make_OpBuilder$)(::MLIRContext const &) = ::make_OpBuilder;
18:03 < bridge> <Ryozuki>   return make_OpBuilder$(context).release();
18:03 < bridge> <Ryozuki> }
18:03 < bridge> <Ryozuki> 
18:03 < bridge> <Ryozuki> ````
18:03 < bridge> <Ryozuki> lol
18:04 < bridge> <Ryozuki> ```cpp
18:04 < bridge> <Ryozuki> ::MLIRContext *cxxbridge1$make_MLIRContext() noexcept {
18:04 < bridge> <Ryozuki>   ::std::unique_ptr<::MLIRContext> (*make_MLIRContext$)() = ::make_MLIRContext;
18:04 < bridge> <Ryozuki>   return make_MLIRContext$().release();
18:04 < bridge> <Ryozuki> }
18:04 < bridge> <Ryozuki> ```
18:04 < bridge> <Learath2> bizarre bizarre bizarre, that const there is obviously the reason for your issue, Opbuilder wants a non-const reference as per LLVM docs
18:05 < bridge> <Learath2> Also this generated code does look a little insane, why is it creating a unique_ptr only to destroy it the next line?
18:06 < bridge> <Ryozuki> it does it on all
18:06 < bridge> <Ryozuki> hmm
18:06 < bridge> <Ryozuki> must be some c++ quirk with rust?
18:06 < bridge> <Ryozuki> im sure dtolnay knows his shit xd
18:07 < bridge> <Learath2> Yeah, I'd think I'm holding it wrong before I question cxx
18:07 < bridge> <Ryozuki> let me see what we do i nddnet
18:10 < bridge> <Learath2> Ah I think I get it. It calls your function, then destroys the unique_ptr immediately because now Rust took ownership
18:10 < bridge> <Ryozuki> i see
18:11 < bridge> <Learath2> Now when you borrow from the context that seems to generate a const. Idk why that is the case
18:11 < bridge> <Ryozuki> maybe because a rust & ref is const?
18:12 < bridge> <Jupstar ✪> its immutable
18:13 < bridge> <Ryozuki> well maybe const_cast isnt as bad here?
18:13 < bridge> <Ryozuki> xd
18:14 < bridge> <Learath2> Do you have `type MLIRContext` somewhere?
18:14 < bridge> <Learath2> I mean the const cast is technically safe here, since you know for a fact that the underlying object wasnt declared const. But why is it happening in the first place? Is that not the more curious thing?
18:14 < bridge> <Ryozuki> ye
18:15 < bridge> <Ryozuki> type MLIRContext;
18:15 < bridge> <Ryozuki> i wonder
18:16 < bridge> <Learath2> Now that I think about it. I think this type of relationship just isn't a thing Rust really has
18:16 < bridge> <Learath2> OH maybe try a mutable borrow?
18:17 < bridge> <Learath2> It is technically wrong, since I have a feeling OpBuilder keeps a reference to Context, but there might not be a better way to map this
18:17 < bridge> <Ryozuki> ```rust
18:17 < bridge> <Ryozuki>   error[cxxbridge]: needs a cxx::ExternType impl in order to be used as a non-pinned mutable reference in signature of `make_OpBuilder`
18:17 < bridge> <Ryozuki>      ┌─ src/bridge.rs:12:9
18:17 < bridge> <Ryozuki>      │
18:17 < bridge> <Ryozuki>   12 │         type MLIRContext;
18:17 < bridge> <Ryozuki>      │         ^^^^^^^^^^^^^^^^ needs a cxx::ExternType impl in order to be used as a non-pinned mutable reference in signature of `make_OpBuilder`
18:17 < bridge> <Ryozuki> 
18:17 < bridge> <Ryozuki> 
18:17 < bridge> <Ryozuki>   error[cxxbridge]: mutable reference to C++ type requires a pin -- use Pin<&mut MLIRContext>
18:17 < bridge> <Ryozuki>      ┌─ src/bridge.rs:24:36
18:17 < bridge> <Ryozuki>      │
18:17 < bridge> <Ryozuki>   24 │         fn make_OpBuilder(context: &mut MLIRContext) -> UniquePtr<OpBuilder>;
18:17 < bridge> <Ryozuki>      │                                    ^^^^^^^^^^^^^^^^ mutable reference to C++ type requires a pin -- use Pin<&mut MLIRContext>
18:17 < bridge> <Ryozuki> ```
18:18 < bridge> <Learath2> https://cxx.rs/extern-c++.html
18:19 < bridge> <Ryozuki> this is more complicated than expected
18:19 < bridge> <Ryozuki> xd
18:20 < bridge> <Learath2> I guess you just impl ExternType and it should work? Idk I never used the cxx bridge
18:21 < bridge> <Jupstar ✪> didnt follow, but why not pass a pointer?
18:22 < bridge> <Jupstar ✪> u want a unique ptr out of a reference?
18:22 < bridge> <Jupstar ✪> or do u want it to be copied?
18:23 < bridge> <Ryozuki> it seems like cxx always adds const
18:23 < bridge> <Ryozuki> it also does for a *const
18:24 < bridge> <Learath2> Issue is constness, the c++ api requires a non-const pointer. The bridge generates const pointers
18:24 < bridge> <Ryozuki> the externtype manual impl is if u use bindgen iirc
18:24 < bridge> <Jupstar ✪> what's so bad about const pointers
18:24 < bridge> <Jupstar ✪> pointers are just ints 😂
18:24 < bridge> <Ryozuki> its not that
18:24 < bridge> <Ryozuki> it requires to use const_cast
18:24 < bridge> <Ryozuki> everywhere
18:25 < bridge> <Learath2> It can't possibly add a const if you are passing a mutable borrow
18:25 < bridge> <Jupstar ✪> the source: is the source u want to use?
18:25 < bridge> <Ryozuki> ye
18:25 < bridge> <Jupstar ✪> u build a unique ptr out of a reference
18:25 < bridge> <Ryozuki> no
18:26 < bridge> <Jupstar ✪> but u do it
18:26 < bridge> <Ryozuki> it calls opbuilder constructor
18:26 < bridge> <Learath2> Idk maybe pin it just to see if it generates properly?
18:26 < bridge> <Jupstar ✪> so does opbuild have nothing to do with the context directly?
18:26 < bridge> <Ryozuki> ok ill see the pin
18:26 < bridge> <Jupstar ✪> it's only there to be called
18:26 < bridge> <Ryozuki> opbuilder uses context in the constructor
18:27 < bridge> <Jupstar ✪> i mean in the sense of rust, Pin probably makes sense here
18:27 < bridge> <Jupstar ✪> references in cpp are not reassignable
18:28 < bridge> <Ryozuki> works with pin
18:28 < bridge> <Learath2> Technically. I think since OpBuilder probably keeps that pointer, to do it properly you need lifetimes too
18:28 < bridge> <Learath2> I doubt OpBuilder outliving it's context is sane
18:29 < bridge> <Jupstar ✪> doesnt cxx require unsafe anyway
18:29 < bridge> <Ryozuki> UniquePtr even has a pin_mut method
18:29 < bridge> <Learath2> But anyway, so it was indeed the immutable borrow that's the issue. I wonder why the pin is needed
18:29 < bridge> <Ryozuki> ```rust
18:29 < bridge> <Ryozuki> #[test]
18:29 < bridge> <Ryozuki>     fn myfunc() {
18:29 < bridge> <Ryozuki>         let mut c = make_MLIRContext();
18:29 < bridge> <Ryozuki>         let op = make_OpBuilder(c.pin_mut());
18:29 < bridge> <Ryozuki>     }
18:29 < bridge> <Ryozuki> ```
18:29 < bridge> <Ryozuki> works
18:29 < bridge> <Ryozuki> no const anymore
18:30 < bridge> <Learath2> Does the generated code look sane?
18:30 < bridge> <Ryozuki> yeah thats true
18:30 < bridge> <Ryozuki> its smth i gotta express in rust
18:30 < bridge> <Ryozuki> opbuilder is "owned" by the context
18:30 < bridge> <Ryozuki> ```cpp
18:30 < bridge> <Ryozuki> ::OpBuilder *cxxbridge1$make_OpBuilder(::MLIRContext &context) noexcept {
18:30 < bridge> <Ryozuki>   ::std::unique_ptr<::OpBuilder> (*make_OpBuilder$)(::MLIRContext &) = ::make_OpBuilder;
18:30 < bridge> <Ryozuki>   return make_OpBuilder$(context).release();
18:31 < bridge> <Ryozuki> }
18:31 < bridge> <Ryozuki> ```
18:31 < bridge> <Ryozuki> looks like this
18:31 < bridge> <Ryozuki> so ye
18:32 < bridge> <Jupstar ✪> do u need this for work?
18:33 < bridge> <Learath2> That link I sent had an example of lifetimes
18:34 < bridge> <Learath2> I guess the idea is that you give a lifetime to that mut borrow. But there is a potential issue there. There can't exist more than one borrow if there is a hanging mut borrow
18:35 < bridge> <Learath2> So is the context even usable until you destroy the opbuilder than?
18:36 < bridge> <Learath2> Maybe an Arc/SharedPtr is the better abstraction for MLIRContext
18:38 < bridge> <Learath2> Rc, I guess, A part may not be necessary here
18:39 < bridge> <Jupstar ✪> every rc and arc means a refcell, mutex etc.
18:39 < bridge> <Jupstar ✪> except its read only
18:39 < bridge> <Jupstar ✪> @Ryozuki what are the goals of your work?
18:39 < bridge> <Jupstar ✪> 
18:39 < bridge> <Jupstar ✪> do u need a high performance compiler?
18:40 < bridge> <Jupstar ✪> or just get things done? xd
18:40 < bridge> <Learath2> They model shared ownership is my point
18:40 < bridge> <Jupstar ✪> yeah, but that also means more "randomness"
18:40 < bridge> <Jupstar ✪> in a sense that u cannot control it cleanly anymore
18:40 < bridge> <Learath2> Yeah, if you don't care about correctness and just want it done I guess this current model is good enough as long as you make sure you don't ever drop context before the opbuilder
18:41 < bridge> <Jupstar ✪> a shared object might suddenly outlife something u didnt expect or wanted
18:41 < bridge> <Ryozuki> tbh idk
18:41 < bridge> <Ryozuki> but we need to make the compiler with mlir
18:41 < bridge> <Ryozuki> and we use the c api which is simple
18:41 < bridge> <Ryozuki> but it lacks features
18:41 < bridge> <Ryozuki> for example we cannot get the data layout for a given type
18:41 < bridge> <Jupstar ✪> 😂
18:41 < bridge> <Ryozuki> because the c api doesnt have it
18:41 < bridge> <Ryozuki> so we are going to cpp now
18:41 < bridge> <Jupstar ✪> ryo just does smth random
18:41 < bridge> <Learath2> Btw, didn't anyone else already wrap the C++ api for llvm?
18:42 < bridge> <Ryozuki> @Jupeyy_Keks i do what i do to get paid lel
18:42 < bridge> <Ryozuki> @Learath2 no
18:42 < bridge> <Ryozuki> thats insane
18:42 < bridge> <Ryozuki> inkwell wraps the c api
18:42 < bridge> <Ryozuki> of llvm
18:42 < bridge> <Ryozuki> but the c api of llvm is better
18:42 < bridge> <Ryozuki> mlir is quite new, so they focus on c++
18:42 < bridge> <Jupstar ✪> @Ryozuki u have freetime.... waste it for wrapping llvm
18:42 < bridge> <Ryozuki> the c api is behind
18:42 < bridge> <Jupstar ✪> :^)
18:42 < bridge> <Learath2> Well good luck. I need to take a shower and do some chores
18:42 < bridge> <Ryozuki> yeah its fine dw
18:43 < bridge> <Learath2> Look into making MLIRContext a shared_ptr. I think that is the correct model here
18:43 < bridge> <Ryozuki> i was mostly curious
18:43 < bridge> <Ryozuki> https://github.com/TheDan64/inkwell
18:49 < bridge> <Ryozuki> anyway this convo was interesting
18:49 < bridge> <Ryozuki> mixing 2 langs gives light to interesting things
18:50 < bridge> <Ryozuki> @Jupeyy_Keks why make a binding, we just need to rewrite llvm in rust
18:50 < bridge> <Ryozuki> :BASEDDEPT:
18:50 < bridge> <Ryozuki> :PES2_BasedGe:
18:50 < bridge> <Jupstar ✪> tru story
19:02 < bridge> <Ryozuki> well idk, because this mlircontext will be wrapped in a context struct, that can be the single owner
19:02 < bridge> <Ryozuki> and then with lifetimes we can model the opbuilder lifetime
19:02 < bridge> <Ryozuki> opbuilder needn't have the pointer itself
19:02 < bridge> <Ryozuki> needn't, such pro english
19:09 < bridge> <Learath2> idk how the opbuilder is used, so I can't comment very much on this, but when you create the opbuilder and return from it you have your MLIRContext back, but on the C++ side a non-const reference to it is kept, now when you borrow mut or non-mut from the context, aren't you breaking rust assumptions?
19:10 < bridge> <Learath2> Specifically that there can exist no mut borrows along with immut ones and no more than one mut borrow?
19:10 < bridge> <Ryozuki> the context has no methods itself
19:10 < bridge> <Ryozuki> > the underlying principle of the context is that it is used to provide an isolated environment (or “context”, hence the name), in which your entire IR is living. This includes types, attributes, location, dialect, identifiers, and every operation that references these.
19:11 < bridge> <Ryozuki> ok it has methods
19:11 < bridge> <Ryozuki> but
19:11 < bridge> <Ryozuki> honestly i wonder
19:11 < bridge> <Ryozuki> xd
19:12 < bridge> <Learath2> I don't see how methods are relevant, but the more I think about it the less I think there is a sane way to wrap context in Rust
19:12 < bridge> <Ryozuki> > Create a builder with the given context.
19:12 < bridge> <Learath2> multiple mut borrows isn't a thing Rust can do
19:13 < bridge> <Ryozuki> i wonder how other safe wrappers are done
19:14 < bridge> <Ryozuki> it is possible
19:14 < bridge> <Ryozuki> in rust u would do that with interior mutability
19:14 < bridge> <Ryozuki> aka runtime checks
19:14 < bridge> <Ryozuki> rc refcell
19:15 < bridge> <Ryozuki> > If you have a reference &T, then normally in Rust the compiler performs optimizations based on the knowledge that &T points to immutable data. Mutating that data, for example through an alias or by transmuting an &T into an &mut T, is considered undefined behavior. UnsafeCell<T> opts-out of the immutability guarantee for &T: a shared reference &UnsafeCell<T> may point to data that is being mutated. This is called “interior mutability”.
19:15 < bridge> <Ryozuki> https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html
19:16 < bridge> <Learath2> Ah, that's cool
19:16 < bridge> <Ryozuki> but well, u dont rly own the context on the rust side, just a unique ptr
19:16 < bridge> <Ryozuki> no?
19:16 < bridge> <Learath2> You do own it, I think that's what the wrapper implies. It immediately destroys the unique_ptr
19:17 < bridge> <Learath2> It seems to imply that the ownership moved from the `std::unique_ptr` on the cxx side to the `UniquePtr` on the rust side
19:22 < bridge> <Ryozuki> <a:kekexplode:977699987184025660>
19:22 < bridge> <Learath2> don't explode pls
19:23 < bridge> <Ryozuki> i think i only need to care about opbuilder outliving the context tbh
19:24 < bridge> <Ryozuki> idk head exploding
19:25 < bridge> <Learath2> I would love to be of more help but I possess limited knowledge of both the cxx crate and LLVM 😄
19:25 < bridge> <Ryozuki> yeah
19:26 < bridge> <Ryozuki> but this is a common pattern in the c/c++ world
19:26 < bridge> <Ryozuki> holding a context
19:26 < bridge> <Ryozuki> sdl does this, but it has a single global context
19:26 < bridge> <Ryozuki> sdl init exit
19:26 < bridge> <Learath2> Yeah maybe check out another wrapper where there is context involved? Curl has lots of mutable contexts passing around
19:27 < bridge> <Learath2> Though curl I think does it in a controlled manner, as in they don't stack them inside eachother 😄
19:28 < bridge> <Learath2> Oh, curl_multi might be a good place to check if anyone wrapped that one
19:28 < bridge> <Ryozuki> i mean llvm only has 1 context u pass around
19:28 < bridge> <Learath2> A curl_multi handle keeps non-const pointers to curl_easy handles, and you can still use the handles so you also have non-const ones
19:29 < bridge> <Ryozuki> https://github.com/alexcrichton/curl-rust/blob/main/src/multi.rs
19:29 < bridge> <Ryozuki> its c tho
19:30 < bridge> <Learath2> Here is the interesting part I guess
19:30 < bridge> <Learath2> https://cdn.discordapp.com/attachments/293493549758939136/1112795232954753214/image.png
19:37 < bridge> <Learath2> Okay, it just cheats to avoid the problem by using a `*mut CURL`
19:38 < bridge> <Learath2> dereferencing that requires an unsafe so if you break anything it's your own fault I presume 😄
19:40 < bridge> <Ryozuki> xd
19:40 < bridge> <Ryozuki> ye thats how i guessed
19:48 < bridge> <Learath2> So I guess you should probably wrap the Opbuilder in a struct and shove a `PhantomData<MLIRContext>` next to it?
19:51 < bridge> <Ryozuki> ye
19:51 < bridge> <Ryozuki> thats what we do in the c api binding too
19:51 < bridge> <Ryozuki> and its how its done generally imo
19:52 < bridge> <Ryozuki> ```rust
19:52 < bridge> <Ryozuki> pub struct Operation<'c> {
19:52 < bridge> <Ryozuki>     raw: MlirOperation,
19:52 < bridge> <Ryozuki>     _context: PhantomData<&'c Context>,
19:52 < bridge> <Ryozuki> }
19:52 < bridge> <Ryozuki> ```
19:52 < bridge> <Ryozuki> the c api
19:56 < bridge> <Learath2> Sounds sane, I guess you just have to make sure you treat the type opaquely on the rust side and there'll be no issues
20:16 < bridge> <Learath2> This sounds quite fun to work with, maybe I should wrap a couple c++ libraries for people
20:18 < bridge> <Learath2> Maybe I can also have stars on my repos
21:15 < bridge> <Mr.Gh0s7> I finally managed to push it :). I runned `git config http.version HTTP/1.1` and now it worked! Could this have any side effects though?
21:27 < bridge> <Mr.Gh0s7> ChillerDragon https://github.com/Inateblig/dotfiles it only took a second :justatest:
21:27 < bridge> <Learath2> Huh, why was that needed? Bizarre
21:28 < bridge> <Mr.Gh0s7> I don't know either I hope it doesn't break anything though. I just tried stuff with care and the start and then starting expirementing with other stuff here's the stackoverflow link btw https://stackoverflow.com/questions/59282476/error-rpc-failed-curl-92-http-2-stream-0-was-not-closed-cleanly-protocol-erro
21:34 < bridge> <uguz> installed the game over steam and this happend lol
21:34 < bridge> <uguz> https://cdn.discordapp.com/attachments/293493549758939136/1112826248239001770/VID_20230529_212856.mp4
21:35 < bridge> <bencie> new dance feature
21:35 < bridge> <uguz> hehe and whats the fix
21:36 < bridge> <Jupstar ✪> update drivers
21:38 < bridge> <Jupstar ✪> or click the other start option
21:38 < bridge> <Jupstar ✪> if that start option is finally fixed
21:51 < bridge> <Cellegen | RiH> @heinrich5991 Teeskins website is down and I have no idea if NeXus will come back to re-open it, so I'll already do preparations for Teeworlds Data. So might as well change the forum links for Teeskins to "unavailable currently" or something.
21:52 < bridge> <Cellegen | RiH> I also have no idea if the API works, if it pulls the repo's Assets or not, so that might also need a check.
21:54 < bridge> <Jupstar ✪> what happened to him :/
21:54 < bridge> <Cellegen | RiH> I have no idea. I cannot contact him and he is not up since the beginning of this year
21:55 < bridge> <Jupstar ✪> rip
21:55 < bridge> <Cellegen | RiH> Indeed
21:56 < bridge> <uguz> where
21:58 < bridge> <Jupstar ✪> does it show u when u start it from steam?
21:58 < bridge> <Jupstar ✪> what OS are u even on
22:59 < bridge> <chillerdragon> Thanks
22:59 < bridge> <chillerdragon> (@Reteah)
23:12 < bridge> <Ewan> anyone know clang-tidy well enough to tell me if i can use it to add the parent enum's name as a prefix to the enum constants
23:13 < bridge> <Ewan> ```cpp
23:13 < bridge> <Ewan> enum TEST {
23:13 < bridge> <Ewan>   TEST_ONE,
23:13 < bridge> <Ewan>   TEST_TWO
23:13 < bridge> <Ewan> }
23:13 < bridge> <Ewan> ```
23:13 < bridge> <Ewan> etc
23:17 < bridge> <Ewan> ```cpp
23:17 < bridge> <Ewan> enum TEST {
23:17 < bridge> <Ewan>   ONE,
23:17 < bridge> <Ewan>   TWO
23:17 < bridge> <Ewan> };
23:17 < bridge> <Ewan> ```
23:17 < bridge> <Ewan> turns into
23:17 < bridge> <Ewan> ```
23:17 < bridge> <Ewan> enum TEST { // automatically put test in front of constant names
23:17 < bridge> <Ewan>   TEST_ONE,
23:17 < bridge> <Ewan>   TEST_TWO
23:17 < bridge> <Ewan> };
23:18 < bridge> <Ewan> ```
23:18 < bridge> <Ewan> ```cpp
23:18 < bridge> <Ewan> enum TEST {
23:18 < bridge> <Ewan>   ONE,
23:18 < bridge> <Ewan>   TWO
23:18 < bridge> <Ewan> };
23:18 < bridge> <Ewan> ```
23:18 < bridge> <Ewan> turns into
23:18 < bridge> <Ewan> ```cpp
23:18 < bridge> <Ewan> enum TEST { // automatically put test in front of constant names
23:18 < bridge> <Ewan>   TEST_ONE,
23:18 < bridge> <Ewan>   TEST_TWO
23:18 < bridge> <Ewan> };
23:18 < bridge> <Ewan> ```
23:22 < bridge> <Chairn> i don't know for clang-tidy, but it's easy with a macro
23:23 < bridge> <Chairn> okay, not that easy actually
23:23 < bridge> <Chairn> but still possible
23:57 < bridge> <Teero> hey when are moving tiles coming to ddnet? is there a reason to not do it?
23:59 < bridge> <Ewan> it would be hard to do right
23:59 < bridge> <Teero> but it would be accepted?
23:59 < bridge> <Ewan> atm the way kog does it is not on the game layer so it doesn’t work in entities
