00:20 <+bridge> <Voxel> #5732 @DR.3AM
00:21 <+bridge> <Voxel> 5732 @DR.3AM
00:21 <+bridge> <Voxel> wtf
00:21 <+bridge> <Voxel> 5732
00:21 <+bridge> <Voxel> no auto embed?
00:21 <+bridge> <Blade> i...
00:21 <+bridge> <Voxel> https://github.com/ddnet/ddnet/pull/5732
00:21 <+bridge> <Voxel> there
00:21 <+bridge> <Blade> i dont normally hang around herre :justatest:
00:21 <+bridge> <Blade> ah ok thx...
00:22 <+bridge> <Blade> i thought u gave me some task to find #5732
00:22 <+bridge> <louis> #5732
00:22 <+bridge> <DDNet> https://github.com/ddnet/ddnet/pull/5732
00:22 <+bridge> <Voxel> how does it work for you
00:22 <+bridge> <Blade> cuz u pinged me
00:22 <+bridge> <Blade> in same message
00:22 <+bridge> <Voxel> it should work anyways
00:22 <+bridge> <Blade> #5732
00:22 <+bridge> <DDNet> https://github.com/ddnet/ddnet/pull/5732
00:23 <+bridge> <Blade> #5732 @Voxel
00:23 <+bridge> <DDNet> https://github.com/ddnet/ddnet/pull/5732
00:23 <+bridge> <Blade> ah
00:23 <+bridge> <Voxel> ????
00:23 <+bridge> <louis> need hashtag
00:23 <+bridge> <Blade> he did before lol
00:23 <+bridge> <Voxel> #2763 @louis
00:23 <+bridge> <Blade> perhaps bot was sleeping
00:23 <+bridge> <Blade> LMAO
00:23 <+bridge> <Voxel> #2763
00:23 <+bridge> <DDNet> https://github.com/ddnet/ddnet/pull/2763
00:23 <+bridge> <Voxel> yea wtf
00:23 <+bridge> <Blade> dude i guess u just suck at tagging people
04:35 <+bridge> <robertlombardo> IT IS EASY TO GET STARTED\:
04:35 <+bridge> <robertlombardo> 
04:35 <+bridge> <robertlombardo> SIMPLY WRITE A SHORT MESSAGE ‚Äò‚Äô I WOULD LIKE TO INVEST $500 VIA BITCOINS‚Äô‚Äô
04:35 <+bridge> <robertlombardo> 
04:35 <+bridge> <robertlombardo> WITH THIS LITTLE MESSAGE ABOVE YOU ARE ON YOUR WAY TO FINANCIAL FREEDOM..
04:35 <+bridge> <robertlombardo> 
08:42 <+bridge> <deen> I'm not sure what change we are talking about
08:47 <+bridge> <Jupstar ‚ú™> The one with unpack delta error
08:49 <+bridge> <deen> Wasn't that a server fix?
08:50 <+bridge> <deen> The server change for that is not in 16.7 (https://github.com/ddnet/ddnet/pull/6214)
08:51 <+bridge> <Jupstar ‚ú™> No it's client side
08:51 <+bridge> <Jupstar ‚ú™> Or both
08:52 <+bridge> <Jupstar ‚ú™> It's ez to reproduce on Linux. I can later test
16:52 <+bridge> <Ryozuki> i hecking love c++
16:52 <+bridge> <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1065297720975294464/Screenshot_2023-01-18_at_16.52.31.png
16:56 <+bridge> <Learath2> And this isn't even that bad üòÑ
17:00 <+bridge> <Jupstar ‚ú™> tbf u can create such code in most languages üòÑ
17:00 <+bridge> <Ryozuki> yeye
17:01 <+bridge> <Ryozuki> its the std code
17:01 <+bridge> <Ryozuki> thats why its alien
17:01 <+bridge> <Ryozuki> altho std code in rust doesnt look alien
17:01 <+bridge> <Jupstar ‚ú™> maybe MSVC standard code looks better xD
17:01 <+bridge> <Ryozuki> u dont need to use __ in names
17:01 <+bridge> <Jupstar ‚ú™> well u dont need to, but someone defined it as good style xD
17:02 <+bridge> <Ryozuki> ```rust
17:02 <+bridge> <Ryozuki> #[stable(feature = "rust1", since = "1.0.0")]
17:02 <+bridge> <Ryozuki>     #[inline]
17:02 <+bridge> <Ryozuki>     pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
17:02 <+bridge> <Ryozuki>     where
17:02 <+bridge> <Ryozuki>         F: FnMut(&'a T) -> Ordering,
17:02 <+bridge> <Ryozuki>     {
17:02 <+bridge> <Ryozuki>         // INVARIANTS:
17:02 <+bridge> <Ryozuki>         // - 0 <= left <= left + size = right <= self.len()
17:02 <+bridge> <Ryozuki>         // - f returns Less for everything in self[..left]
17:02 <+bridge> <Ryozuki>         // - f returns Greater for everything in self[right..]
17:02 <+bridge> <Ryozuki>         let mut size = self.len();
17:03 <+bridge> <Ryozuki>         let mut left = 0;
17:03 <+bridge> <Ryozuki>         let mut right = size;
17:03 <+bridge> <Ryozuki>         while left < right {
17:03 <+bridge> <Ryozuki>             let mid = left + size / 2;
17:03 <+bridge> <Ryozuki> 
17:03 <+bridge> <Ryozuki>             // SAFETY: the while condition means `size` is strictly positive, so
17:03 <+bridge> <Ryozuki>             // `size/2 < size`.  Thus `left + size/2 < left + size`, which
17:03 <+bridge> <Ryozuki>             // coupled with the `left + size <= self.len()` invariant means
17:03 <+bridge> <Ryozuki>             // we have `left + size/2 < self.len()`, and this is in-bounds.
17:03 <+bridge> <Ryozuki>             let cmp = f(unsafe { self.get_unchecked(mid) });
17:03 <+bridge> <Ryozuki> 
17:03 <+bridge> <Ryozuki>             // The reason why we use if/else control flow rather than match
17:03 <+bridge> <Ryozuki>             // is because match reorders comparison operations, which is perf sensitive.
17:03 <+bridge> <Ryozuki>             // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
17:03 <+bridge> <Ryozuki>             if cmp == Less {
17:03 <+bridge> <Ryozuki>                 left = mid + 1;
17:03 <+bridge> <Ryozuki>             } else if cmp == Greater {
17:03 <+bridge> <Ryozuki>                 right = mid;
17:03 <+bridge> <Ryozuki>             } else {
17:03 <+bridge> <Ryozuki> this is the rust std code
17:03 <+bridge> <Ryozuki> beautifully commented too
17:03 <+bridge> <Ryozuki> #standards
17:03 <+bridge> <Ryozuki> u can even learn
17:03 <+bridge> <Ryozuki> TIL about match reordering
17:13 <+bridge> <Chairn> __ in name is not a matter of style, it's a requirement for the std library to be compatible with all possible codes
17:13 <+bridge> <Chairn> standard says that name beginning with __ are reserved. It avoids case where macro would replace code in std headers
17:14 <+bridge> <Chairn> standard says that name beginning with _ are reserved. It avoids case where macro would replace code in std headers
17:16 <+bridge> <Learath2> It is a bit of a weird solution making all the code ugly tho
17:24 <+bridge> <Jupstar ‚ú™> yeah its pretty ugly, but yeah for macros it makes sense
17:24 <+bridge> <Jupstar ‚ú™> tho if they would want to they could add some compiler specific mode that disallows macros, or only allows certain ones
17:24 <+bridge> <Jupstar ‚ú™> then they could escape all this trouble probably
17:25 <+bridge> <Jupstar ‚ú™> except you do it on purpose lol
17:26 <+bridge> <Jupstar ‚ú™> the only use case for macros i currently see is string concat and name of a variable
17:26 <+bridge> <Jupstar ‚ú™> 
17:26 <+bridge> <Jupstar ‚ú™> i dunno if there are more, but template lib and constexpr/consteval can replace pretty much everything
17:26 <+bridge> <Nagi01 {LAN}> y c++ can be ankward
17:27 <+bridge> <Nagi01 {LAN}> rust >>
17:42 <+bridge> <Jupstar ‚ú™> @Ryozuki `if !true || true  /* test */ ||    true {}` rustfmt doesnt like to format this as soon as there is a multiline comment inside the line, any command to force it?
17:50 <+bridge> <Mahdiyar> Hi , how to install conan ? Visual Studio 2022
17:52 <+bridge> <Ryozuki> hmm idk
17:52 <+bridge> <Ryozuki> file a bug
18:42 <+bridge> <Ryozuki> https://datasette.io/
18:42 <+bridge> <Ryozuki> i need to try this
18:42 <+bridge> <Ryozuki> with ddnet
19:18 <+bridge> <Jupstar ‚ú™> almost forgot
19:18 <+bridge> <Jupstar ‚ú™> u defs have to release a new client version with that fix
19:18 <+bridge> <Jupstar ‚ú™> its in the release and creates the lag mentioned
19:19 <+bridge> <Jupstar ‚ú™> if i rename to name with special chars, all ppl that e.g. have linux are affected
19:19 <+bridge> <Jupstar ‚ú™> not only me
19:19 <+bridge> <Jupstar ‚ú™> so can make others lag with that
19:20 <+bridge> <Jupstar ‚ú™> and the lag is > 1 second, so its more heavy than ddois
19:20 <+bridge> <Jupstar ‚ú™> and the lag is > 1 second, so its more heavy than ddos
19:21 <+bridge> <Jupstar ‚ú™> u can reproduce it with linux on any server by renaming from "nae" to "·¥∑·µâ·µè·∂≥"
19:22 <+bridge> <chillerdragon> Rip Linux users. Windows masterrace!
19:22 <+bridge> <Jupstar ‚ú™> on windows it might get triggered too
19:23 <+bridge> <Mr.Gh0s7> what about macos?
19:23 <+bridge> <Jupstar ‚ú™> but dunno how to do it reproduceable
19:23 <+bridge> <Jupstar ‚ú™> macos probs also affected
19:23 <+bridge> <Vy0x2> Somebody know out of the head where the tees get rendered (in the code)?
19:23 <+bridge> <Jupstar ‚ú™> render.cpp
19:23 <+bridge> <chillerdragon> templeOS?
19:23 <+bridge> <Jupstar ‚ú™> ::RenderTee
19:23 <+bridge> <Vy0x2> thanks
19:23 <+bridge> <chillerdragon> Pro
19:24 <+bridge> <chillerdragon> Also players.cpp
19:31 <+bridge> <deen> what change?
19:33 <+bridge> <Jupstar ‚ú™> dunno the specific commit 
19:33 <+bridge> <Jupstar ‚ú™> it was with the delta unpacking
19:33 <+bridge> <Jupstar ‚ú™> u hot fixed it but apparently didnt release a client version with it
19:33 <+bridge> <Jupstar ‚ú™> https://github.com/ddnet/ddnet/commit/b62e7f1299fc672e210a761caba7780d6ee9d06a
19:33 <+bridge> <deen> But the problem was never in 16.7
19:33 <+bridge> <deen> The problem was caused by https://github.com/ddnet/ddnet/pull/6214
19:33 <+bridge> <deen> So how can I remove code in 16.7 that was not added there?
19:33 <+bridge> <Jupstar ‚ú™> i just tested it with steam client
19:33 <+bridge> <ReiTW> maybe those things shouldn't be said here till there's a released fix :pepeCorn: (to avoid people doing it)
19:34 <+bridge> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1065338410551754892/image.png
19:34 <+bridge> <Jupstar ‚ú™> its defs inside the client
19:35 <+bridge> <Jupstar ‚ú™> this specfic way only affects linux
19:35 <+bridge> <Jupstar ‚ú™> windows might have other ways tho
19:37 <+bridge> <Ryozuki> :pepe_popcorn:
19:37 <+bridge> <Jupstar ‚ú™> i mean where should i say it else xD
19:37 <+bridge> <Ryozuki> here
19:37 <+bridge> <Ryozuki> who cares
19:38 <+bridge> <Jupstar ‚ú™> according to snail this channel is useless anyway
19:38 <+bridge> <Ryozuki> xd
19:38 <+bridge> <Ryozuki> @snail we useless <a:sadSnail:785072987815804929>
19:38 <+bridge> <deen> @Jupeyy_Keks can you test if 16.7.2 tag fixes it?
19:38 <+bridge> <Ryozuki> maybe make a hidden chan for trusted devs
19:38 <+bridge> <Jupstar ‚ú™> sure
19:39 <+bridge> <Ryozuki> epic github bot
19:41 <+bridge> <Jupstar ‚ú™> seems fine
19:42 <+bridge> <deen> Great, thanks
19:42 <+bridge> <deen> Should be released in ~1 hour
19:42 <+bridge> <Ryozuki> btw how u decide when a new major
19:42 <+bridge> <Ryozuki> we can do like kernel
19:42 <+bridge> <deen> you mean 16->17?
19:42 <+bridge> <Ryozuki> "when it feels the minor is too big in number"
19:42 <+bridge> <Ryozuki> ye
19:43 <+bridge> <deen> When a big feature comes or when we are at 16.9 already
19:43 <+bridge> <deen> 16.10 would look stupid
19:43 <+bridge> <Ryozuki> xd
19:43 <+bridge> <Ryozuki> true
19:43 <+bridge> <Ryozuki> or maybe we could go with the date
19:43 <+bridge> <Ryozuki> its unfun but rly ez to pinpoint
19:43 <+bridge> <Ryozuki> 23.01
19:43 <+bridge> <Ryozuki> 23.1.0
19:43 <+bridge> <Ryozuki> *
19:43 <+bridge> <deen> Some people complain about 16 being a too large number for the development progress we have, but I don't care, they can just imagine a 0. prepended
19:44 <+bridge> <deen> Date I don't like. It only works when there is consistent amount of work going in
19:44 <+bridge> <deen> What if everyone is busy and we have no new features for 6 months? That should be 1 digit higher, not 6
19:44 <+bridge> <deen> when we release again
19:44 <+bridge> <Ryozuki> well why?
19:44 <+bridge> <deen> anyway, release numbers don't matter much, so not worth putting much thought into it
19:45 <+bridge> <Ryozuki> but ye i was just saying it for fun xd
19:45 <+bridge> <deen> I think the next release should increase 1 of the numbers by exactly 1 , otherwise feels like there could be versions inbetween that you misseds
19:45 <+bridge> <Ryozuki> true
