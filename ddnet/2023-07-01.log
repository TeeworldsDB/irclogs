00:38 < bridge_> <Ewan> hello
00:59 < bridge_> <.wa1> Hello World
08:30 < bridge_> <vinson7987> what do hookdx do
08:30 < bridge_> <vinson7987> https://cdn.discordapp.com/attachments/293493549758939136/1124587774968864859/image.png
08:48 < bridge_> <Jupstar ‚ú™> i guess delta x
09:40 < bridge_> <vinson7987> hey where can i define  global var
09:42 < bridge_> <Jupstar ‚ú™> everywhere outside a scope
09:42 < bridge_> <Jupstar ‚ú™> that isnt the global scope^^
09:42 < bridge_> <Jupstar ‚ú™> so in the global scope xD
09:42 < bridge_> <Jupstar ‚ú™> generally using static is what u want
09:45 < bridge_> <vinson7987> i need use extern right
09:45 < bridge_> <Jupstar ‚ú™> do you want a global variable across multiple cpp files?
09:45 < bridge_> <vinson7987> yes
09:46 < bridge_> <vinson7987> but i am not good at cpp
09:46 < bridge_> <vinson7987> https://cdn.discordapp.com/attachments/293493549758939136/1124606914651762769/image.png
09:46 < bridge_> <vinson7987> i did this but link error
09:47 < bridge_> <Jupstar ‚ú™> u also have to declare it inside _any_ cpp file
09:47 < bridge_> <Jupstar ‚ú™> doesnt matter which
09:48 < bridge_> <vinson7987> everyone
09:48 < bridge_> <vinson7987> ?
09:48 < bridge_> <Jupstar ‚ú™> ?
09:48 < bridge_> <Jupstar ‚ú™> in exactly one .cpp file
09:49 < bridge_> <Jupstar ‚ú™> u have to delcleare the same var again
09:49 < bridge_> <vinson7987> ok
09:50 < bridge_> <vinson7987> wow works
09:50 < bridge_> <vinson7987> thank u
10:24 < bridge_> <murpi> <@&293541515781996568> refrain from assisting Vinson with anything related to coding
10:24 < bridge_> <murpi> He bad guy
10:24 < bridge_> <ryozuki> bot :think_bot:
10:24 < bridge_> <ryozuki> cant trust any new dev now
10:32 < bridge_> <murpi> Yeah, It does seem to be a rising trend. I've noticed there's been a lot more talk about bots, particularly over the past few weeks.
10:32 < bridge_> <Jupstar ‚ú™> come to the dark side Vinson, where bad unreliable human input is still valued over the far superior machines
10:39 < bridge_> <ryozuki> @murpi can u put individual perms without roles? thats news to me
10:43 < bridge_> <villager114514> hi
10:43 < bridge_> <ryozuki> @murpi evader
10:43 < bridge_> <murpi> xD
11:05 < bridge_> <ravie_ravie> @murpi ```c++
11:05 < bridge_> <ravie_ravie> m_aInputData[0].m_Direction = 1 - rand() % 3;``` üò°
11:10 < bridge_> <TsFreddie> i make bots too
11:41 < bridge_> <learath2> You know what would stop all this botting? Accounts. As a reformed cheat using child I still remember to this day when my GunZ account got banned, never touched a cheat again
11:42 < bridge_> <Jupstar ‚ú™> works well for csgo
11:42 < bridge_> <learath2> Prime matchmaking worked fine for a bit before everyone started using virtual phone numbers
11:43 < bridge_> <heinrich5991> yea
11:43 < bridge_> <heinrich5991> I'd argue that transparent accounts also work üôÇ
11:43 < bridge_> <heinrich5991> because it's mostly at the high-level spectrum that people's botting is hard to distinguish from real play
11:44 < bridge_> <learath2> Not the same oomph. Transparent accounts just get recreated instantly, possibly even transparently to the bot user
11:44 < bridge_> <heinrich5991> and those people have a long-standing account to lose
11:45 < bridge_> <learath2> I guess it does work for those people, but we won't have accounts bound to points so even they won't lose anything
11:47 < bridge_> <heinrich5991> why not accounts bound to all new points?
11:48 < bridge_> <learath2> Because they will get to keep having their 12k legacy points that we can't display any differently because they will lobby against it and we can't ban because it's not bound to the account we caught cheating
11:51 < bridge_> <Ewan> bad idea
11:51 < bridge_> <Ewan> the variable will only be defined in that translation unit
11:51 < bridge_> <Ewan> use extern
11:52 < bridge_> <Ewan> ban fred
11:52 < bridge_> <heinrich5991> nah, I think we can do something manually about those 12k legacy points after a well-defined cheating event
11:53 < bridge_> <ryozuki> @learath2 accounts + teehistorian + heuristics on teehistorian demos
11:53 < bridge_> <ryozuki> when will we put teehistorian to use
11:53 < bridge_> <ryozuki> xd
11:53 < bridge_> <learath2> IME bans need atleast one of the below to work:
11:53 < bridge_> <learath2> - Financial cost
11:53 < bridge_> <learath2> - Time cost
11:53 < bridge_> <learath2> - Hard to evade
11:53 < bridge_> <learath2> - Prestige cost
11:54 < bridge_> <heinrich5991> @zwelf2 is really far with reproducing teehistorians accurately
11:54 < bridge_> <ryozuki> we could "verify" top 50 ranks or smth
11:56 < bridge_> <reitw> French country the sweetest
11:56 < bridge_> <Jupstar ‚ú™> global variables can cause weird undefined behavior
11:56 < bridge_> <Jupstar ‚ú™> 
11:56 < bridge_> <Jupstar ‚ú™> you should use them with great care
11:57 < bridge_> <ryozuki> better idea, more optimizations probs
11:57 < bridge_> <learath2> I strongly suggest we do real address verification. If you are detected developing a bot we can ship a pipebomb to your house
11:57 < bridge_> <ryozuki> reading llvm lang ref on linkage u learn nice  stuff
11:57 < bridge_> <ryozuki> https://llvm.org/docs/LangRef.html#linkage-types
11:58 < bridge_> <ryozuki> > linkonce_odr, weak_odr
11:58 < bridge_> <ryozuki> >     Some languages allow differing globals to be merged, such as two functions with different semantics. Other languages, such as C++, ensure that only equivalent globals are ever merged (the ‚Äúone definition rule‚Äù ‚Äî ‚ÄúODR‚Äù). Such languages can use the linkonce_odr and weak_odr linkage types to indicate that the global will only be merged with equivalent globals. These linkage types are otherwise the same as their non-odr versions.
11:58 < bridge_> <zwelf2> There is some level of teehistorian -> demo with my teehistorian replayer possible (it sometimes panics, I'm working on it). https://gitlab.com/ddnet-rs/twgame `cargo run --bin demo in.teehistorian th.map out.demo` (If you want to try it out). It prints messages when my physics implementation differs from the replay (rn mostly due to unimplemented features and wrong respawn order).
11:58 < bridge_> <zwelf2> There is some level of teehistorian -> demo with my teehistorian replayer possible (it sometimes panics, I'm working on it). https://gitlab.com/ddnet-rs/twgame `cargo run --bin demo -- in.teehistorian th.map out.demo` (If you want to try it out). It prints messages when my physics implementation differs from the replay (rn mostly due to unimplemented features and wrong respawn order).
11:59 < bridge_> <zwelf2> (It also still panics too often which I didn't address yet)
11:59 < bridge_> <ryozuki> oh well thats nice
11:59 < bridge_> <heinrich5991> you're probably violating some law every time you say this
12:00 < bridge_> <Ewan> I don‚Äôt use them
12:00 < bridge_> <learath2> Did you determine whether all the teehistorian files we have since the input reordering patch are reproducible?
12:00 < bridge_> <heinrich5991> @learath2 integrate @zwelf2's stuff with our moderator tool :p
12:01 < bridge_> <heinrich5991> ohhh
12:01 < ChillerDragon> @nouua u here?
12:01 < bridge_> <heinrich5991> and maybe we could finally get automatic demos for top ranks (hides in the corner, waiting for the haters)
12:02 < bridge_> <learath2> Hm, could such an obvious joke constitute a violation of any law?
12:02 < bridge_> <zwelf2> They are all reproducable for me. https://github.com/ddnet/ddnet/pull/6744 is the last bug that I'm aware of, but I can reproduce even without the patch
12:04 < bridge_> <Jupstar ‚ú™> mh ok, sounded like that, because not sharing them across compilation units was a bad idea
12:04 < bridge_> <ryozuki> @jupeyy_keks they are always often misused in threaded contexts (?)
12:04 < bridge_> <Jupstar ‚ú™> but even static global variables should not be used if possible
12:05 < bridge_> <ryozuki> also*
12:05 < bridge_> <ryozuki> not always
12:05 < bridge_> <ryozuki> cant type
12:05 < bridge_> <Jupstar ‚ú™> alone the fact that their initialization order is random is a problem
12:05 < bridge_> <ryozuki> tldr: use rust
12:05 < bridge_> <ryozuki> :troll:
12:06 < bridge_> <ryozuki> @heinrich5991 did u see the zig issue on divorcing llvm
12:06 < bridge_> <ryozuki> they claim they will do better machine code in long term
12:06 < bridge_> <ryozuki> i have high copium doubts
12:06 < bridge_> <heinrich5991> I have not seen it
12:06 < bridge_> <ryozuki> https://news.ycombinator.com/item?id=36529456+
12:06 < bridge_> <ryozuki> https://news.ycombinator.com/item?id=36529456
12:07 < bridge_> <ryozuki> https://github.com/ziglang/zig/issues/16270
12:09 < bridge_> <Jupstar ‚ú™> see ya in 10 years when they done
12:09 < bridge_> <Jupstar ‚ú™> üò¨
12:09 < bridge_> <ryozuki> its a bit meh cuz this switches the focus and workload to a backend instead of lang design
12:09 < bridge_> <ryozuki> and zig isnt even 1.0
12:09 < bridge_> <learath2> That is an insane idea, it'll take them so long. Though I do appreciate the reinventing the wheel
12:10 < bridge_> <ryozuki> ye its quite insane xd
12:10 < bridge_> <Jupstar ‚ú™> maybe it pays out, we'll see üòÑ
12:10 < bridge_> <ryozuki> >  bjourne 1 day ago | prev | next [‚Äì]
12:10 < bridge_> <ryozuki> > 
12:10 < bridge_> <ryozuki> > Two issues here. The first is code generation and the other is bootstrapping.
12:10 < bridge_> <ryozuki> > 
12:10 < bridge_> <ryozuki> > Ime, the optimizing passes of a compiler are easy and fun to write. You have to read research papers to understand how register allocation and ssa form works, but it's fun code to write. You just send the ir through various optimizing passes, each refining it in some way. You can write high-quality optimization passes without llvm. But then you want to linearize your ir into machine code. This step is boring and mundane to write unless you care 
12:10 < bridge_> <ryozuki> > 
12:10 < bridge_> <ryozuki> > The second issue is bootstrapping. What compiles the Zig compiler written in Zig? You could, for example, have a non-optimizing minimal Zig compiler written in C that compiles the Zig compiler. But since it's non-optimizing, the Zig compiler would need to be recompiled with the optimizing Zig compiler. Not unsolvable problems, but ime long and complicated build processes risk driving away potential contributors.
12:10 < bridge_> <ryozuki> i like this comment
12:11 < bridge_> <ryozuki> also
12:11 < bridge_> <ryozuki> any improvements he may found would be added to llvm and gcc too
12:12 < bridge_> <Ewan> i feel like you should never depend on the default values or constructor of a non-pointer global variable
12:12 < bridge_> <ryozuki> i read somewhere that there new state of the art algorithms for optimizing, but the researchers never consider "compilation time" as in they take too long
12:15 < bridge_> <zwelf2> @ryozuki did you have any troubles upgrading to debian 12?
12:15 < bridge_> <ryozuki> no
12:15 < bridge_> <ryozuki> server  is on debian 12
12:17 < bridge_> <robyt3> June is over. Does that mean we can switch to C++20?
12:18 < bridge_> <ryozuki> les go
12:18 < bridge_> <Jupstar ‚ú™> legos
12:19 < bridge_> <Jupstar ‚ú™> ask deen for review he has to upgrade is compile machine
12:24 < bridge_> <astramast> https://cdn.discordapp.com/attachments/293493549758939136/1124646600938111057/image.png
12:24 < bridge_> <astramast> ????????????
12:24 < bridge_> <astramast> binds x
12:24 < bridge_> <astramast> already does that
12:24 < bridge_> <astramast> (before was dump_binds x)
12:24 < bridge_> <astramast> `binds x`
12:24 < bridge_> <astramast> (before was `dump_binds x`)
12:25 < bridge_> <robyt3> Yeah, it also works with `bind x` now
12:25 < bridge_> <Jupstar ‚ú™> he said this is more intuitive
12:25 < bridge_> <robyt3> I guess it's also like this for other commands like `tune x` also prints the current value
12:25 < bridge_> <Jupstar ‚ú™> i agree
12:25 < bridge_> <ryozuki> ye
12:27 < bridge_> <astramast> ah ok ok
12:27 < bridge_> <astramast> it's intended
12:27 < bridge_> <astramast> :greenthing:
12:28 < bridge_> <astramast> Good work then, thanks y'all for upgrading the game with your time, we don't say it enough.
13:59 < bridge_> <ryozuki> i hate python
14:00 < bridge_> <Jupstar ‚ú™> but i love murpi
14:01 < bridge_> <ryozuki> when u marry
14:01 < bridge_> <Jupstar ‚ú™> when he learned rust
14:01 < bridge_> <Ewan> i love cpp
14:02 < bridge_> <Jupstar ‚ú™> what r u coding
14:02 < bridge_> <Ewan> who
14:02 < bridge_> <Jupstar ‚ú™> you
14:02 < bridge_> <Ewan> nothing at the moment
14:02 < bridge_> <Jupstar ‚ú™> what are u coding currently
14:03 < bridge_> <Jupstar ‚ú™> ok
14:03 < bridge_> <Ewan> i just like cpp
14:03 < bridge_> <Ewan> thought I‚Äôd add
14:03 < bridge_> <ryozuki> i have mixed feelings about that
14:03 < bridge_> <ryozuki> that u like cpp
14:03 < bridge_> <Jupstar ‚ú™> better than java
14:03 < bridge_> <ryozuki> do u know the meme where u need to dig a bit more
14:03 < bridge_> <Jupstar ‚ú™> better than python xd
14:03 < bridge_> <ryozuki> to find what the truth is
14:03 < bridge_> <ryozuki> xd
14:03 < bridge_> <Ewan> yea
14:04 < bridge_> <Jupstar ‚ú™> all our convos start with programming language bashing xD
14:04 < bridge_> <Ewan> yeah
14:04 < bridge_> <Ewan> cpp bad and u think it‚Äôs good cuz ur stupid
14:05 < bridge_> <ryozuki> i mean
14:05 < bridge_> <ryozuki> its normal that people talk about their tools of trade
14:05 < bridge_> <ryozuki> and bash them
14:05 < bridge_> <ryozuki> no?
14:05 < bridge_> <ryozuki> xd
15:43 < ChillerDragon> bash them
15:43 < bridge_> <cyberFighter> hi
15:46 < bridge_> <ryozuki> why did the rest of the world not use europe power adapters
15:47 < bridge_> <cyberFighter> weird way of saying usa
15:47 < bridge_> <cyberFighter> :troll:
16:26 < bridge_> <_voxeldoesart> of course murpi deletes all the evidence
16:26 < bridge_> <_voxeldoesart> @ryozuki üò¨
16:26 < bridge_> <ryozuki> of?
16:26 < bridge_> <_voxeldoesart> vinson
16:28 < bridge_> <_voxeldoesart> anyways that sucks now chat is dead again
16:30 < bridge_> <chairn> it's not even standard across europe
16:32 < bridge_> <murpi> what evidence_
16:34 < bridge_> <_voxeldoesart> https://cdn.discordapp.com/attachments/293493549758939136/1124709714354249789/Screenshot_20230701_102706_Discord.jpg
16:35 < bridge_> <_voxeldoesart> you cant silent the masses murpi
16:35 < bridge_> <murpi> ??
16:35 < bridge_> <murpi> I just remved him from this channel
16:36 < bridge_> <_voxeldoesart> ** 
16:36 < bridge_> <_voxeldoesart> i was looking in thr wrong channel**
16:36 < bridge_> <Jupstar ‚ú™> üò¨
16:36 < bridge_> <_voxeldoesart> I SAW THE JUICY STUFF IN #bugs LOLLL
16:36 < bridge_> <_voxeldoesart> AND THOUGHT IT WAS HERE
16:37 < bridge_> <murpi> üò¨
16:37 < bridge_> <ryozuki> lmfao
16:37 < bridge_> <ryozuki> üò¨
16:37 < bridge_> <ryozuki> best emote
16:37 < bridge_> <Ewan> ü•∂
16:39 < bridge_> <_voxeldoesart> üò¨
16:48 < bridge_> <gerdoe> üò¨
17:01 < bridge_> <mfypov> j
17:01 < bridge_> <_voxeldoesart> j
17:02 < bridge_> <cyberFighter> u
17:03 < bridge_> <_voxeldoesart> p
17:17 < bridge_> <matodor> https://media.discordapp.net/attachments/809939890480349184/959927440589856798/Sprite-0001.gif
17:18 < ChillerDragon> what juice
17:18 < ChillerDragon> did u see voxel
17:20 < bridge_> <_voxeldoesart> vinson getting banned from dev
17:21 < bridge_> <_voxeldoesart> and mupri popping off
18:57 < ChillerDragon> wowo ban
18:57 < ChillerDragon> a: buse
19:10 < bridge_> <_voxeldoesart> tru
19:11 < bridge_> <_voxeldoesart> im gonna create a ddnet bot that detects the best way to fail in any situation and then does so at the most random times
19:11 < bridge_> <_voxeldoesart> https://tenor.com/view/pewdiepie-9year-old-army-t-gay-congratulations-for-legal-reasons-thats-a-joke-gif-13924557
20:35 < bridge_> <_voxeldoesart> how much code can we crunch down witb cpp20
20:39 < bridge_> <Jupstar ‚ú™> theoretically?
20:39 < bridge_> <Jupstar ‚ú™> 20%
20:39 < bridge_> <Jupstar ‚ú™> by stopping to use header files
20:42 < bridge_> <_voxeldoesart> oh damn
20:42 < bridge_> <_voxeldoesart> rest in peace .h files
20:42 < bridge_> <Jupstar ‚ú™> @ryozuki can a pointer in rust literally change position?
20:42 < bridge_> <Jupstar ‚ú™> like that address of the object changes
20:43 < bridge_> <Jupstar ‚ú™> ahh probably when moving
20:43 < bridge_> <Jupstar ‚ú™> funny
20:43 < bridge_> <Jupstar ‚ú™> and stupid from me lol
20:43 < bridge_> <ryozuki> @jupeyy_keks check pin
20:45 < bridge_> <Jupstar ‚ú™> would u prefer it over a simply Box around the whole object?
20:45 < bridge_> <Jupstar ‚ú™> it reads as "just a compiler hint"
20:45 < bridge_> <ryozuki> box is on the heap and unique owned
20:46 < bridge_> <ryozuki> pin?
20:46 < bridge_> <Jupstar ‚ú™> yes
20:46 < bridge_> <ryozuki> it works as long as u uphold its contract (when using unsafe, mainly the unchecked fn)
20:47 < bridge_> <Jupstar ‚ú™> ok but could it cause a heap allocation?
20:47 < bridge_> <Jupstar ‚ú™> or is that impossible
20:47 < bridge_> <Jupstar ‚ú™> thats what i meant with hint
20:48 < bridge_> <ryozuki> pin itself not
20:48 < bridge_> <ryozuki> pin just holds a reference
20:48 < bridge_> <ryozuki> or pointer
20:49 < bridge_> <Jupstar ‚ú™> ok, but since its not moveable, i probably want box anyway
20:49 < bridge_> <Jupstar ‚ú™> i guess?
20:49 < bridge_> <Jupstar ‚ú™> the object moves some times
20:51 < bridge_> <Jupstar ‚ú™> Can you implement Pin? or is it a compiler hint?
20:51 < bridge_> <ryozuki> pin is not a trait
20:51 < bridge_> <ryozuki> god
20:51 < bridge_> <ryozuki> read the docs
20:51 < bridge_> <ryozuki> RTFM
20:51 < bridge_> <ryozuki> xdddd
20:51 < bridge_> <ryozuki> https://doc.rust-lang.org/std/pin/index.html
20:51 < bridge_> <Jupstar ‚ú™> i read the doc but that doesnt help me
20:52 < bridge_> <Jupstar ‚ú™> i only says what it does and what guarantees it has
20:52 < bridge_> <ryozuki> ```rs
20:52 < bridge_> <ryozuki> #[stable(feature = "pin", since = "1.33.0")]
20:52 < bridge_> <ryozuki> #[lang = "pin"]
20:52 < bridge_> <ryozuki> #[fundamental]
20:52 < bridge_> <ryozuki> #[repr(transparent)]
20:52 < bridge_> <ryozuki> #[derive(Copy, Clone)]
20:52 < bridge_> <ryozuki> pub struct Pin<P> {
20:52 < bridge_> <ryozuki>     // FIXME(#93176): this field is made `#[unstable] #[doc(hidden)] pub` to:
20:52 < bridge_> <ryozuki>     //   - deter downstream users from accessing it (which would be unsound!),
20:52 < bridge_> <ryozuki>     //   - let the `pin!` macro access it (such a macro requires using struct
20:52 < bridge_> <ryozuki>     //     literal syntax in order to benefit from lifetime extension).
20:52 < bridge_> <ryozuki>     // Long-term, `unsafe` fields or macro hygiene are expected to offer more robust alternatives.
20:52 < bridge_> <ryozuki>     #[unstable(feature = "unsafe_pin_internals", issue = "none")]
20:52 < bridge_> <ryozuki>     #[doc(hidden)]
20:52 < bridge_> <ryozuki>     pub pointer: P,
20:52 < bridge_> <ryozuki> }
20:52 < bridge_> <ryozuki> ```
20:52 < bridge_> <ryozuki> its a transparent wrapper
20:52 < bridge_> <ryozuki> so it has same size and layout as pointer P
20:52 < bridge_> <ryozuki> > a Pin<Box<T>> is an owned pointer to a pinned T, and a Pin<Rc<T>> is a reference-counted pointer to a pinned T.
20:54 < bridge_> <Jupstar ‚ú™> mh ok. maybe my question sucked
20:54 < bridge_> <Jupstar ‚ú™> i wanted to know if u could implement the same logic pin does
20:54 < bridge_> <Jupstar ‚ú™> or if its an internal type
20:54 < bridge_> <Jupstar ‚ú™> basically a hint to the compiler
21:13 < bridge_> <chairn> wait what?
21:13 < bridge_> <chairn> what features of c++ is that?
21:14 < bridge_> <Jupstar ‚ú™> modules
22:22 < ChillerDragon> github for you page best social media alogritm 
22:22 < ChillerDragon> https://github.com/misprit7/computerraria
22:22 < ChillerDragon> this sounds epic
22:31 < ChillerDragon> @fokkonaut you still active?
22:33 < bridge_> <fokkonaut> hello
22:34 < ChillerDragon> ah nice
22:34 < ChillerDragon> can we dm ?
22:34 < bridge_> <fokkonaut> element
22:37 < bridge_> <_voxeldoesart> duuuude i know some CRAZY ppl who can make stuff in lmms
22:37 < bridge_> <_voxeldoesart> https://cdn.discordapp.com/attachments/293493549758939136/1124800911789785199/image0.jpg
22:37 < bridge_> <_voxeldoesart> duuuude i know some ppl who can make CRAZY stuff in lmms
22:37 < bridge_> <_voxeldoesart> https://cdn.discordapp.com/attachments/293493549758939136/1124800911789785199/image0.jpg
