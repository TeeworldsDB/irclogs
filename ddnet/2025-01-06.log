00:05 < bridge> <Ewan> lmfao
00:06 < bridge> <Ewan> wait sry what is ddnet-rs :justatest:
00:06 < bridge> <Ewan> a different ddnet rust project
00:06 < bridge> <Ewan> or renamed & moved
00:08 < bridge> <Jupstar ✪> it's ddpg
00:36 < bridge> <chillerdragon> That sounds like you are shooting at deen the full time database engineer
00:40 < bridge> <chillerdragon> There are code bases that people complain about. And there are code bases nobody uses.
00:55 < bridge> <hectavoxel> i wish i wasnt so stupid so i could actually make the updates i want
00:56 < bridge> <cyberfrighter> you can only make updates you dont want?
01:05 < bridge> <hectavoxel> not what i meant :nouis:
02:29 < bridge> <eidderFsT> there is a toggle in a PR. but that might take longer, we can remove the spec cursor and spec cam feature for 18.9 upon release for now.
02:30 < bridge> <eidderFsT> it's either removed or there will be a toggle before release
03:09 < bridge> <pioooooo> what do you think of subprocess in binds
03:10 < bridge> <pioooooo> so we don't have to create many files for toggles
04:58 < bridge> <totar> rip
05:12 < bridge> <hectavoxel> are there any good .HLSL tutorials around? i want to write something for a project i'm doing but have no single clue what anything means
05:13 < bridge> <Ewan> what are you writing the shader for
05:14 < bridge> <Ewan> https://learn.microsoft.com/en-us/windows/win32/direct3dgetstarted/work-with-shaders-and-shader-resources
05:15 < bridge> <Ewan> wait that sucks
05:15 < bridge> <Ewan> https://learn.microsoft.com/en-us/windows/win32/direct3d11/d3d11-graphics-reference-d3d11-shader
05:15 < bridge> <Ewan> https://learn.microsoft.com/en-us/windows/win32/direct3d11/d3d11-graphics-reference-d3d11-shader
05:16 < bridge> <hectavoxel> There's a cool program, called Tooll3, which is sort of like TouchDesigner, but free and open source. 
05:16 < bridge> <hectavoxel> You can literally create your own functions and connect them to make cool visuals. Though what I plan on doing is to try and make a certain type.
05:16 < bridge> <hectavoxel> To make what I want optimally it involves multi-thread computing, and hlsl is the best bet for it
05:16 < bridge> <hectavoxel> I don't even know if I'm saying any of this right, or if this is the answer.
05:16 < bridge> <Ewan> hlsl is a shader language so you first need to figure out what kind of interface this hlsl is even giving you
05:18 < bridge> <Ewan> and multi threading is not necessarily made more optimal by hlsl it's just that it's your way of leveraging the gpu so you have hella parallelization
05:18 < bridge> <Ewan> but if it's i/o bound at all or anything like that then idk
05:48 < bridge> <totar> https://github.com/tooll3/t3/wiki/help.ShaderDevelopmentExample
05:49 < bridge> <totar> Tooll3 supports hsls compute shaders which I'm assuming is what you want
05:49 < bridge> <totar> Tooll3 supports hlsl compute shaders which I'm assuming is what you want
05:49 < bridge> <hectavoxel> yeah thats what i want
05:50 < bridge> <hectavoxel> hold on lemme send the uh, video of what im doing
05:50 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1325687851433857024/2025-01-03_01-33-49.mp4?ex=677cb285&is=677b6105&hm=3f4c6cd096f61389afc63c56543dbcd92a779a0da98dfeeaec742fbefdb060bc&
05:50 < bridge> <totar> mmm that's nice node spaghetti
05:51 < bridge> <hectavoxel> its all math too! but its math that has to like, store a list and constantly look back and forth
05:52 < bridge> <totar> the main thing you do with compute shaders is turn GPU memory into other kinds of GPU memory
05:52 < bridge> <totar> and you can write to buffers
05:52 < bridge> <totar> so you'd probably want to start backwards and figure out how to do what you want under the contrains of the compute shader
05:52 < bridge> <totar> so you'd probably want to start backwards and figure out how to do what you want under the contraints of the compute shader
05:52 < bridge> <totar> so you'd probably want to start backwards and figure out how to do what you want under the constraints of the compute shader
05:54 < bridge> <hectavoxel> it feels like the completely wrong way to do it, but for context:
05:54 < bridge> <hectavoxel> I'm writing a tool to visualize rounded logos, using circles and lines. I first have to go through all the points, figuring out which tangent line between both circles should be rendered (which is a lot of math), and then I have to draw arcs, connecting one end of one line, to the other end of the previous line, so it looks seamless. The problem with THAT is that right now, I have to do the tangent calculation 3 TIMES in order to get the output,
05:57 < bridge> <totar> why do you need more performance
05:59 < bridge> <hectavoxel> Because I plan on using it for real-time motion graphics, which will use, presumably around 15 unique shapes.
05:59 < bridge> <totar> are the shapes also procedural
06:00 < bridge> <hectavoxel> Well, yeah. Each and every point has its own movement, as shown in this video
06:00 < bridge> <totar> but the shape before the movement
06:00 < bridge> <totar> is that procedural
06:00 < bridge> <totar> you can apply the movement effect for super cheap with a vertex shader
06:01 < bridge> <hectavoxel> Oh, let me look that up-
06:05 < bridge> <hectavoxel> Ohhhh I was looking at COMPUTE shaders before...!
06:05 < bridge> <hectavoxel> Yeah, I should DEFINTELY look into vertex shaders, then.
06:06 < bridge> <totar> I mean compute shaders are kinda like the swiss army knife of shaders, they can do the job of most of the other kinds
06:07 < bridge> <totar> but in this case you only need a vertex shader if you just want to procedurally animate the vertecies
06:07 < bridge> <totar> but in this case you only need a vertex shader if you just want to procedurally animate the vertices
06:09 < bridge> <hectavoxel> ohhh my head hurts LOL
06:17 < bridge> <totar> they have a discord btw you can ask in there
06:17 < bridge> <hectavoxel> i AM in there
06:17 < bridge> <totar> o ok
06:18 < bridge> <hectavoxel> for now i just added a debug mode thats like 3x faster somehow (it barely does any calculations)
06:18 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1325695024331231242/image.png?ex=677cb934&is=677b67b4&hm=337c4855b24cccba53c071fc667f0bb49aadf657eb69a0ea85874cf5c8b51af0&
06:29 < bridge> <cellegenrih> GPU bottleneck, too much data is being fed to the GPU, causing freeziness
06:30 < bridge> <cellegenrih> I know it's GPU problem, cuz the calculations are pre-done after the next frame, however data to the GPU are sometimes discarded cuz it cannot be rendered in time
06:30 < bridge> <cellegenrih> otherwise, it would look really slow, while also going at 10 fps
06:31 < bridge> <totar> it's probably not a gpu bottleneck
06:31 < bridge> <cellegenrih> Well, care to reiterate?
06:31 < bridge> <cellegenrih> My first thought was that
06:32 < bridge> <totar> he already explained the reason it's slow is because of the procedural shape generation that needs to be done every frame.
06:32 < bridge> <cellegenrih> the calculations are done every frame tho
06:32 < bridge> <totar> the gpu can render about 1000x more triangles than he is showing in the window without issue
06:33 < bridge> <cellegenrih> There is one exception where the GPU cannot handle that many
06:33 < bridge> <hectavoxel> computers can generate realistic scenes in realtime
06:33 < bridge> <hectavoxel> im just a dumbass :nouis:
06:34 < bridge> <cellegenrih> Yeah through optimized data caching and optimized compressed data sizes
06:35 < bridge> <cellegenrih> it all comes down to how much work the CPU should do and how much data the GPU should have
06:35 < bridge> <cellegenrih> the less, the better
06:36 < bridge> <totar> he is using a fully procedural framework to make the graphics, it's not the same as regular scenes that get loaded into memory and renders static triangles
06:37 < bridge> <cellegenrih> Does that kind of framework rely on SIMD?
06:38 < bridge> <totar> I did not write it
06:38 < bridge> <totar> but likely not
06:38 < bridge> <cellegenrih> @hectavoxel I haven't asked yet, but what have it caused bottleneck?
06:39 < bridge> <cellegenrih> if you may have any idea on where went wrong
06:40 < bridge> <cellegenrih> the CPU shouldn't be it, cuz the positioning for all of the generative triangles are in place, based on the amount of skipping steps from the next frame rendered
06:40 < bridge> <cellegenrih> either the Shader used are insanely unoptimized, or the GPU data feed is larger, than expected
06:42 < bridge> <totar> that's not true at all
06:43 < bridge> <totar> just because the framerate is low does not mean the gpu is bottlenecking
06:50 < bridge> <hectavoxel> i dont know
09:16 < bridge> <Jupstar ✪> Why close @tsfreddie
09:18 < bridge> <eidderFsT> got other things to do, just bite more than i can chew, it just need some limit and some testing probably. someone can pick it up.
09:19 < bridge> <Jupstar ✪> Mh OK. I think that was actually a useful PR. Saner than our byte limit approach right now
09:21 < bridge> <totar> heinrich had a rather good point that you can fit kind of an entire sentence in 16 chinese codepoints
09:21 < bridge> <eidderFsT> ye, that is fair but I already spent way too much time on this so maybe someone can figure out the design. code should still stand if someone wants to takeover.
09:21 < bridge> <Jupstar ✪> But does that matter? As long as it's not longer visually
09:22 < bridge> <totar> kinda yeah?
09:22 < bridge> <Jupstar ✪> Why
09:22 < bridge> <eidderFsT> it's not longer than "WWWWWWWWWWWWWWWW" but only to that one.
09:22 < bridge> <totar> https://cdn.discordapp.com/attachments/293493549758939136/1325741286585532537/image.png?ex=677ce449&is=677b92c9&hm=745b3be55888384629c1a4b1f3c7a7986e5dd4a8dd2e2c6ad703a11a55eec721&
09:22 < bridge> <eidderFsT> it's not longer than "WWWWWWWWWWWWWWWW" but only not to that one.
09:22 < bridge> <totar> this fits
09:23 < bridge> <Jupstar ✪> And so? You can name yourself a sentence
09:23 < bridge> <Jupstar ✪> I can also make a Latin language that could do that
09:24 < bridge> <Jupstar ✪> If I name myself MF, then you know what I mean
09:24 < bridge> <eidderFsT> usually chinese games does have a 2:1 character weighting, chinese are 2, latins are 1
09:25 < bridge> <totar> it sorta bypasses the mute feature because we cannot mute usernames
09:25 < bridge> <totar> and you can add clan
09:25 < bridge> <eidderFsT> actually that's already a problem anyway
09:25 < bridge> <eidderFsT> in chinese
09:25 < bridge> <Jupstar ✪> Yeah but other languages like Russian would profit too
09:25 < bridge> <totar> yeah but it's mitigated by the low charecter count
09:25 < bridge> <eidderFsT> not really. you can just use letters and it reads
09:26 < bridge> <Jupstar ✪> I think caring for sentences is over thinning
09:26 < bridge> <Jupstar ✪> Thinking
09:26 < bridge> <eidderFsT> GLYWCNMGDSB is a full sentence
09:26 < bridge> <eidderFsT> in chinese
09:26 < bridge> <totar> in english I can't think of anything that someone could say to me in 16 charecters that would insult me personally enough to care
09:28 < bridge> <eidderFsT> and in chinese you can already do that
09:28 < bridge> <eidderFsT> without chinese characters
09:29 < bridge> <eidderFsT> and if someone wants to insult you with a full sentence but they can't do it in english. if they do it in chinese you probably can't even tell it is happening.
09:29 < bridge> <eidderFsT> anyway, i think heinrich is more worried about infomation density than only insults
09:30 < bridge> <Jupstar ✪> He wants graphemes, but that's not realistic
09:30 < bridge> <eidderFsT> isn't chinese graphemes still only one character?
09:30 < bridge> <totar> I was thinking that
09:31 < bridge> <eidderFsT> i also doubt heinrich would want english graphemes to reach 16 too
09:31 < bridge> <totar> idk how graphemes fixes anything
09:31 < bridge> <Jupstar ✪> Is it? Are there no like variants in different parts of China or smth? Xd
09:32 < bridge> <eidderFsT> chinese is always one character per character. there is no words in chinese. i mean there is but it is not defined
09:32 < bridge> <totar> https://www.reddit.com/r/ChineseLanguage/comments/1e4ji8i/what_is_a_grapheme_in_the_context_of_character/
09:33 < bridge> <eidderFsT> anyway, chinese is pretty solvable just by using the 2:1 weighting
09:33 < bridge> <eidderFsT> so if anyone wants to do that they can just add it.
09:33 < bridge> <Jupstar ✪> Well they are the Unicode standard for characters
09:33 < bridge> <totar> but we display unicode
09:33 < bridge> <Jupstar ✪> But many of these letters still have a single Unicode codepoint anyway
09:34 < bridge> <Jupstar ✪> Yes but we could not display emojis
09:34 < bridge> <Jupstar ✪> Not without a custom format
09:34 < bridge> <totar> idk the weighting thing seems fine
09:34 < bridge> <eidderFsT> isn't the problem too long? instead of too short? fit 16 unicode graphemes can be longer than 16 codepoints
09:35 < bridge> <eidderFsT> ye but utf8 is already similar to the weighting thing for chinese
09:35 < bridge> <Jupstar ✪> Yeah but that sounds like u want to parse the content
09:35 < bridge> <eidderFsT> going from 5 to 7 is not really anything and i think chinese people can cope with 5
09:35 < bridge> <totar> isn't it 4:1 instead of 2:1?
09:35 < bridge> <Jupstar ✪> Ofc it is
09:35 < bridge> <totar> or no?
09:35 < bridge> <eidderFsT> 3:1 mostly
09:35 < bridge> <eidderFsT> some can go up to 4
09:35 < bridge> <eidderFsT> but mostly 3
09:35 < bridge> <Jupstar ✪> It's a annoying design imo
09:35 < bridge> <totar> but other languages are hurt more than chinese right?
09:35 < bridge> <totar> like russian?
09:36 < bridge> <eidderFsT> yes
09:36 < bridge> <eidderFsT> but i'm not even russian how am i gonna assess how useful my implementation is
09:36 < bridge> <Jupstar ✪> 😬
09:37 < bridge> <learath2> Fwiw I vaguely remember the unicode consortium actually suggesting a byte limit
09:37 < bridge> <eidderFsT> if cryllics or linguistic people wants to pick up that PR they can do that.
09:37 < bridge> <eidderFsT> i don't even remember why i wanted to implement this. it was like 8 years ago when i first complained about it
09:37 < bridge> <Jupstar ✪> With which reasoning?
09:37 < bridge> <eidderFsT> i just remembered i wanted it but it seems like a wrong motive
09:38 < bridge> <eidderFsT> so i dropped it
09:38 < bridge> <learath2> I’ll try to dig it back up
09:39 < bridge> <mr.noob0322> одааа колобки одаааа
09:40 < bridge> <Jupstar ✪> I mean if traffic is important or similar OK. Utf8 hides this information. But considering a code point is only Max four bytes rn.I dunno
09:40 < bridge> <eidderFsT> i made this lol
09:40 < bridge> <eidderFsT> https://cdn.discordapp.com/attachments/293493549758939136/1325745837392793660/image.png?ex=677ce886&is=677b9706&hm=31fded501d14febebc162db2b3badd141418c750744e1356cf3082f34d303315&
09:40 < bridge> <Jupstar ✪> Or six bytes
09:41 < bridge> <Jupstar ✪> What is that
09:41 < bridge> <Jupstar ✪> In game?
09:41 < bridge> <eidderFsT> just a website
09:42 < bridge> <learath2> I guess heinrich never provided a source for it
09:42 < bridge> <Jupstar ✪> He was about graphemes
09:43 < bridge> <learath2> 0.7 has a codepoint limit, not a grapheme limit
09:43 < bridge> <Jupstar ✪> But again graphemes are a completely different complexity
09:43 < bridge> <Jupstar ✪> That is what he dislikes
09:44 < bridge> <learath2> You think the consortium suggests grapheme limits instead?
09:44 < bridge> <Jupstar ✪> Yes
09:44 < bridge> <totar> I don't see why graphemes are significantly better than codepoints
09:44 < bridge> <eidderFsT> anyone knows what the white styling is in a <dialog> html element :justatest:
09:44 < bridge> <eidderFsT> https://cdn.discordapp.com/attachments/293493549758939136/1325746855518273596/image.png?ex=677ce979&is=677b97f9&hm=8bc529938a35ef79f1ddcae2996eac9ef7d7e28ab0442a0b5ed159818113cdeb&
09:44 < bridge> <learath2> I doubt that, on the grounds that you and the consortium almost always disagree
09:45 < bridge> <Jupstar ✪> Well he wants both
09:45 < bridge> <totar> what is the motivation for using graphemes?
09:45 < bridge> <kollpotato> hello text encoding wizards
09:45 < bridge> <learath2> Codepoints are not “characters”
09:45 < bridge> <totar> but in which cases does that matter
09:46 < bridge> <learath2> There is no intuitive meaning to a “codepoint” especially when combining characters are involved
09:46 < bridge> <eidderFsT> i mean graphemes are not "characters" either
09:46 < bridge> <Jupstar ✪> But then again many characters also additionally exist as code point
09:46 < bridge> <Jupstar ✪> Like é
09:46 < bridge> <Jupstar ✪> Single point
09:46 < bridge> <learath2> They are atleast closer to what a naive person might call a “character”
09:47 < bridge> <kollpotato> maybe it's the outline on focus?
09:47 < bridge> <totar> codepoints seem very close to me, a naive person
09:47 < bridge> <Jupstar ✪> The problem is simply the complexity of this
09:47 < bridge> <eidderFsT> still i think heinrich is more worried about sane limited than graphemes vs codepoints at the end of the PR comments
09:47 < bridge> <Jupstar ✪> You know have literally slices of strings as characters
09:48 < bridge> <Jupstar ✪> I first want to see an actual issue. Rendering is none
09:48 < bridge> <eidderFsT> but i do agree if we are sticking to 15 instead of 16, might as well get an additional limit
09:48 < bridge> <eidderFsT> cuz it is already complex in that regard
09:49 < bridge> <Jupstar ✪> But here you want complexity again
09:49 < bridge> <eidderFsT> i don't
09:49 < bridge> <eidderFsT> cuz i ain't making it
09:49 < bridge> <eidderFsT> lol
09:49 < bridge> <Jupstar ✪> :lol:
09:49 < bridge> <eidderFsT> or if heinrich could tell me exactly what to do i can probably do it.
09:49 < bridge> <learath2> The actual issue is that cyrillic and chinese gets less visible graphemes, right?
09:50 < bridge> <learath2> So effectively shorter names
09:50 < bridge> <totar> chinese is 1 charecter per grapheme so they get tons afaik
09:50 < bridge> <eidderFsT> the pr solves that, the current issue is chinese has too much infomation density to be allowed for 16 chinese characters
09:50 < bridge> <learath2> It’s many bytes per chinese character, so currently the bytelimit disfavors them
09:50 < bridge> <eidderFsT> like the current issue of that PR
09:50 < bridge> <totar> I mean with grapheme limit
09:51 < bridge> <totar> unless you suggest also a byte limit between 16 and 64?
09:51 < bridge> <learath2> Hm, is that really that big an issue?
09:52 < bridge> <eidderFsT> i don't really know, but heinrich want me to think about it and i can't
09:52 < bridge> <eidderFsT> too tired
09:52 < bridge> <learath2> I’d be more concerned about adding 48 entire bytes to make it work 😄
09:53 < bridge> <Jupstar ✪> What about Turkish btw
09:53 < ChillerDragon> what does the word flock mean in the ddrace team context?
09:53 < bridge> <eidderFsT> in networking traffics or something else
09:53 < bridge> <Jupstar ✪> Shouldn't you know
09:53 < bridge> <eidderFsT> t0?
09:53 < bridge> <learath2> Our alphabet is just Latin1, so no issue
09:53 < bridge> <Jupstar ✪> Oh k
09:53 < ChillerDragon> whats the reasoning behind naming t0 flock?
09:53 < bridge> <Jupstar ✪> Troll
09:53 < bridge> <totar> you can make only 1 t0
09:54 < bridge> <learath2> I guess perhaps `ğ` may be made up of 2 bytes
09:54 < bridge> <totar> seems reasonable to me
09:54 < ChillerDragon> i dont understand the word
09:54 < bridge> <eidderFsT> ~~we can't call it team because there is no teamwork~~
09:54 < ChillerDragon> is it force lock?
09:54 < bridge> <eidderFsT> it's just flock
09:54 < bridge> <eidderFsT> a english word
09:54 < bridge> <totar> flock of birds
09:54 < bridge> <eidderFsT> yes
09:54 < ChillerDragon> a
09:54 < bridge> <eidderFsT> just like a random group
09:54 < bridge> <eidderFsT> of things
09:54 < ChillerDragon> language skill issues
09:54 < ChillerDragon> noun
09:54 < bridge> <learath2> Yeah ğ is from Latin Extended-A
09:54 < ChillerDragon> A tuft, as of fiber or hair. 
09:55 < ChillerDragon> Waste wool or cotton used for stuffing furniture and mattresses. 
09:55 < bridge> <totar> if you say flock without context I think most english speakers thing of birds
09:55 < bridge> <totar> if you say flock without context I think most english speakers think of birds
09:55 < ChillerDragon> i see
09:55 < ChillerDragon> i dont speak english
09:55 < ChillerDragon> so its regular t0 or some t0 mode?
09:56 < ChillerDragon> imo that variable/method could use a comment
09:56 < bridge> <eidderFsT> i think in kingdom come deliverance i've heard the character saying flock for people
09:56 < bridge> <eidderFsT> just regular t0
09:56 < bridge> <totar> I thought it was for t0 mode
09:56 < bridge> <eidderFsT> really?
09:56 < ChillerDragon> yea totally not confusing
09:56 < bridge> <eidderFsT> i remember seeing the flock word in source code and we didn't have t0mode yet
09:56 < bridge> <eidderFsT> maybe they adopted it
09:57 < bridge> <eidderFsT> might be both in that case
09:57 < bridge> <totar> ```    Console()->Register("team0mode", "?i['0'|'1']", CFGFLAG_CHAT | CFGFLAG_SERVER, ConTeam0Mode, this, "Toggle team between team 0 and team mode. This mode will make your team behave like team 0.");
09:57 < bridge> <totar> ```
09:58 < bridge> <eidderFsT> i mean if you are purely coding the enum is just 0
09:58 < bridge> <eidderFsT> https://cdn.discordapp.com/attachments/293493549758939136/1325750263776022538/image.png?ex=677ceca6&is=677b9b26&hm=b25a4c9b31ae01a11ef708bfd852eb1888bca489cf6a09ab4dad8c8f9ee7f0b9&
09:58 < ChillerDragon> https://github.com/ddnet/ddnet/blob/e55cf2967faffa9ab79fc95fa53b870dd4fbc764/src/game/server/teams.h#L104
09:58 < ChillerDragon> careful why?
09:59 < bridge> <eidderFsT> no idea
09:59 < bridge> <totar> https://github.com/ddnet/ddnet/commit/5db7748af461e6b414a98438aab63936eaa997d8
09:59 < ChillerDragon> i am proper scared now
10:00 < ChillerDragon> warning from 2010
10:00 < bridge> <totar> it got upgraded here
10:00 < bridge> <totar> https://github.com/ddnet/ddnet/commit/88b65b6def620a2f5cf576fb16d024113caa4459
10:00 < ChillerDragon> @btd why careful
10:01 < bridge> <totar> ```cpp
10:01 < bridge> <totar> // Important to only set a new team here, don't remove from an existing
10:01 < bridge> <totar> // team since a newly joined player does by definition not have an old team
10:01 < bridge> <totar> // to remove from. Doing so would destroy the count in m_MembersCount.
10:01 < bridge> <totar> ```
10:01 < ChillerDragon> nice find
10:01 < bridge> <totar> it's in that second commit I linked
10:07 < bridge> <eidderFsT> btw why is W so wide in our font
10:07 < bridge> <eidderFsT> https://cdn.discordapp.com/attachments/293493549758939136/1325752607737774192/image.png?ex=677ceed4&is=677b9d54&hm=8c0714b9d62f75ae87a12fe3384458ff520365986dae852f0a9ec42cb4697e5a&
10:08 < bridge> <eidderFsT> we do use a ultra compressed font for japanese just to make buttons fit lol
10:08 < bridge> <eidderFsT> https://cdn.discordapp.com/attachments/293493549758939136/1325752871916146768/image.png?ex=677cef13&is=677b9d93&hm=fc642cb7656f5604946e21980a16447b0a808377df398e04e85d0ab8a9d49700&
10:13 < bridge> <totar> old but still very funny
10:13 < bridge> <totar> https://cdn.discordapp.com/attachments/293493549758939136/1325754010048794697/unknown.png?ex=677cf023&is=677b9ea3&hm=0505175875816bcfeac5eeefeef584380219d85a56c47fe305c67dfeb8e295cc&
10:13 < bridge> <totar> the biggest nameplate you can make
10:15 < bridge> <eidderFsT> I did think if english can be that big it wouldn't be a problem as long as the nameplate can't get bigger than english when i made that PR.
10:20 < bridge> <Jupstar ✪> if u ever test ui, use W
10:20 < bridge> <Jupstar ✪> the ultimate weapon
10:25 < bridge> <robyt3> There are much wider characters that would also cause names to be very long if we support many unicode codepoints, e.g. `⸻`
10:25 < bridge> <totar> does anyone understand how adding this ``if`` causes makes the assert stop falsely flagging?
10:25 < bridge> <totar> https://cdn.discordapp.com/attachments/293493549758939136/1325757074650566678/image.png?ex=677cf2fd&is=677ba17d&hm=c632492976d39a344abbcd61544366d6aacb23fe51c6729fa57d64cc1b49dcec&
10:25 < bridge> <totar> does anyone understand how adding this ``if`` causes makes the assert to stop falsely flagging?
10:25 < bridge> <totar> https://cdn.discordapp.com/attachments/293493549758939136/1325757074650566678/image.png?ex=677cf2fd&is=677ba17d&hm=c632492976d39a344abbcd61544366d6aacb23fe51c6729fa57d64cc1b49dcec&
10:25 < bridge> <totar> does anyone understand how adding this ``if`` causes the assert to stop falsely flagging?
10:25 < bridge> <totar> https://cdn.discordapp.com/attachments/293493549758939136/1325757074650566678/image.png?ex=677cf2fd&is=677ba17d&hm=c632492976d39a344abbcd61544366d6aacb23fe51c6729fa57d64cc1b49dcec&
10:26 < bridge> <robyt3> The assert fails when the check is false. You excluded the case where the check can be false
10:26 < bridge> <totar> oh it fails on false?
10:26 < bridge> <robyt3> yeah, that's why you see `dbg_assert(false, "message")` in cases that always fail
10:27 < bridge> <eidderFsT> that is very true
10:27 < bridge> <eidderFsT> https://cdn.discordapp.com/attachments/293493549758939136/1325757522144919574/image.png?ex=677cf368&is=677ba1e8&hm=1845121332cc422ec1250f28ed203e625add2d32afa053591e56aa0b21917e88&
10:27 < bridge> <Jupstar ✪> xd
10:27 < bridge> <totar> that's so confusing
10:29 < bridge> <totar> this assert doesn't make any sense
10:31 < bridge> <totar> all of the path types are <TYPE_SAVE so they just don't work
10:31 < bridge> <totar> https://cdn.discordapp.com/attachments/293493549758939136/1325758526227873792/image.png?ex=677cf458&is=677ba2d8&hm=3bd8a207f4db4862f28428601e236709eb9749b48e1eaa6e8f69b70b8eacebd8&
10:31 < bridge> <Jupstar ✪> it doesnt, except whoever did that feared that the text is evaluated directly
10:31 < bridge> <robyt3> no, paths 0 and above are the user-defined paths
10:31 < bridge> <robyt3> negative paths are special values
10:32 < bridge> <robyt3> I guess it would be more correct to only allow creating folders in `TYPE_SAVE` though
10:33 < bridge> <totar> ok but CreateFolder calls GetPath after doing an assert which makes it impossible to pass TYPE_ABSOLUTE to it
10:33 < bridge> <totar> ```cpp
10:33 < bridge> <totar>     bool CreateFolder(const char *pFoldername, int Type) override
10:33 < bridge> <totar>     {
10:33 < bridge> <totar>         if(Type >= TYPE_SAVE && Type < m_NumPaths) // How does this do anything
10:33 < bridge> <totar>             dbg_assert(Type >= TYPE_SAVE && Type < m_NumPaths, "Type invalid");
10:33 < bridge> <totar> 
10:33 < bridge> <totar>         char aBuffer[IO_MAX_PATH_LENGTH];
10:33 < bridge> <totar>         GetPath(Type, pFoldername, aBuffer, sizeof(aBuffer));
10:33 < bridge> <totar> 
10:33 < bridge> <totar>         bool Success = !fs_makedir(aBuffer);
10:33 < bridge> <totar>         if(!Success)
10:33 < bridge> <totar>             dbg_msg("storage", "failed to create folder: %s", aBuffer);
10:33 < bridge> <totar>         return Success;
10:33 < bridge> <totar>     }
10:33 < bridge> <totar> 
10:33 < bridge> <totar> ```
10:33 < bridge> <totar> 
10:33 < bridge> <totar> ```cpp
10:33 < bridge> <totar>     const char *GetPath(int Type, const char *pDir, char *pBuffer, unsigned BufferSize)
10:33 < bridge> <totar>     {
10:33 < bridge> <totar>         if(Type == TYPE_ABSOLUTE)
10:33 < bridge> <totar>         {
10:34 < bridge> <totar>             str_copy(pBuffer, pDir, BufferSize);
10:34 < bridge> <totar>         }
10:34 < bridge> <totar>         else
10:34 < bridge> <totar>         {
10:34 < bridge> <totar>             str_format(pBuffer, BufferSize, "%s%s%s", m_aaStoragePaths[Type], !m_aaStoragePaths[Type][0] ? "" : "/", pDir);
10:34 < bridge> <totar>         }
10:34 < bridge> <totar>         return pBuffer;
10:34 < bridge> <totar>     }
10:34 < bridge> <totar> it works fine without the assert
10:34 < bridge> <louis> wont the assert just never return false if it is reached
10:34 < bridge> <louis> or did you add that in
10:34 < bridge> <totar> yeah I figured that already
10:34 < bridge> <robyt3> The assert should also allow `TYPE_ABSOLUTE` maybe, since creating folders in absolute locations might be wanted
10:35 < bridge> <robyt3> The asserts are there to ensure the functions are not used in an unintended way
10:35 < bridge> <robyt3> But any other storage type is not supported by the `GetPath` function
10:35 < bridge> <totar> that's true
10:35 < bridge> <robyt3> If you passed `TYPE_ALL` is would result in an out-of-bounds access
10:44 < bridge> <totar> what did you mean by this? what text
10:48 < bridge> <Jupstar ✪> the assert text
10:48 < bridge> <totar> you mean "dbg_assert"?
10:49 < bridge> <Jupstar ✪> i guess your question was, what could be reasons a if was added?
10:49 < bridge> <totar> I added the if
10:49 < bridge> <totar> it was me
10:49 < bridge> <Jupstar ✪> 😮
10:49 < bridge> <totar> 60 seconds before I posted the image lol
10:50 < bridge> <Jupstar ✪> ah yeah
10:50 < bridge> <totar> it never occured to me that the assert fails on false because that seems insane
10:50 < bridge> <Jupstar ✪> i think i missread your initial sentence lol
10:52 < bridge> <totar> ah I guess it's called assert because you assert a truth
10:52 < bridge> <totar> ok nvm
10:54 < bridge> <totar> honestly I probably knew that but I was so confused by the fact that TYPE_ABSOLUTE should work that I convinced myself it should fail on true lol
11:56 < bridge> <pioooooo> I'm curious who is that
11:56 < bridge> <pioooooo> I'm curious about who is that
12:11 < bridge> <Jupstar ✪> @tsfreddie Btw without discussing it again, I am really just curious about your opinion.
12:11 < bridge> <Jupstar ✪> 
12:11 < bridge> <Jupstar ✪> Do you think instead of using the zoom level you could also simply use the viewport width & height to calculate the zoom.
12:11 < bridge> <Jupstar ✪> 
12:11 < bridge> <Jupstar ✪> e.g. let's say you have a viewport of 800x600
12:11 < bridge> <Jupstar ✪> 
12:11 < bridge> <Jupstar ✪> and the other player has 1920x1080.
12:11 < bridge> <Jupstar ✪> 
12:11 < bridge> <Jupstar ✪> Then the client itself can guess based on this info how a zoom level would look like so that you, locally, see _at least_ what the other person sees.
12:11 < bridge> <Jupstar ✪> 
12:11 < bridge> <Jupstar ✪> 800x600 by default sees more in height, and the local client could adjust for that on 1920x1080
12:11 < bridge> <Jupstar ✪> i hope you understand what i mean
12:12 < bridge> <eidderFsT> i don't know really
12:13 < bridge> <eidderFsT> there is info available in the server, then i may decide to use that info. that's usually how i do things. probably not a great way to approach making features.
12:14 < bridge> <eidderFsT> if you want to implement a viewport based one i don't think i would have a problem with it
12:14 < bridge> <Jupstar ✪> yeah i am just wondering about, if i'd port that feature if i'd use the w&h which is already sent to server rn.
12:14 < bridge> <Jupstar ✪> 
12:14 < bridge> <Jupstar ✪> And since skeith was about he wants to see what the other sees it would directly also _really_ respect what the other person sees 😄
12:14 < bridge> <Jupstar ✪> nah nah, i don't interfer with that feature
12:14 < bridge> <Jupstar ✪> yours works
12:14 < bridge> <Jupstar ✪> it's just a different approach
12:15 < bridge> <eidderFsT> i don't know how to calculate that too. that's also a problem
12:17 < bridge> <eidderFsT> ye i'm just saying if anyone decide to do it some other way, i'm willing to work together or just hand it to them. although at this point it is probably too late for me to care about it.
12:18 < bridge> <Jupstar ✪> whaat, you sound so depressed. I think at least for demos this feature is quite cool 😄
12:19 < bridge> <eidderFsT> i mean i already poured too much effort into it and i'm a bit tired. if it is early on i could still adapt, but for now i just want to fix bugs
12:19 < bridge> <eidderFsT> not like i don't care about the features anymore
12:19 < bridge> <Jupstar ✪> 🫠
12:20 < bridge> <eidderFsT> but again, if anyone want to nuke it and start over i'm fine with it, it might be hard to get me motivated enough to figure out all the calculations and stuff all over again.
12:20 < bridge> <eidderFsT> if anyone want to nuke it and start over i'm fine with it, it just might be hard to get me motivated enough to figure out all the calculations and stuff all over again.
12:20 < bridge> <eidderFsT> simply put if you have a problem with it like three weeks ago. it can totally be done in respect to viewports
12:21 < bridge> <eidderFsT> <a:catxplosion:1082715870893195274>
12:22 < bridge> <Jupstar ✪> 3 weeks ago i was tryharding to fix ddnet-rs shit so the release on github is not a total catastrohpy xD
12:22 < bridge> <Jupstar ✪> 3 weeks ago i was tryharding to fix ddnet-rs shit so the release on github is not a total catastrophe xD
12:22 < bridge> <inv41idu53rn4m3> I can help you do the calculations if those are tiring you out
12:22 < bridge> <inv41idu53rn4m3> It is pretty simple geometry...
12:23 < bridge> <Jupstar ✪> It seriously shouldn't sound like bitching around. I wanted your opinion since you worked on it and maybe have some ideas I cannot come up with in 5 seconds
12:23 < bridge> <eidderFsT> <a:vibe:1191801470945869927> just pr it
12:24 < bridge> <eidderFsT> i already switched to working on my websites now. unless it is a bug i probably won't touch it much.
12:25 < bridge> <eidderFsT> no, i think that is a pretty solid idea.
12:25 < bridge> <inv41idu53rn4m3> Love ya Fred :deen_star:
12:26 < bridge> <eidderFsT> plus we got more time i think. i can redo the feature in 19.0 if we removed it from 18.9
12:26 < bridge> <eidderFsT> which is a plan, but i'm not exactly sure how we are doing it yet
12:26 < bridge> <eidderFsT> which is the current plan, but i'm not exactly sure how we are doing it yet
12:26 < bridge> <eidderFsT> but maybe not this week
12:49 < bridge> <eidderFsT> can you do that in ddnet's code btw? i do want to try it.
12:50 < bridge> <eidderFsT> is it like unscale the scale factor, fit a rect in another rect then rescale the scale factor?
12:51 < bridge> <inv41idu53rn4m3> I'm not aware of the scales you're using to begin with, but I'd simply approach it with pen and paper, make a drawing
12:52 < bridge> <inv41idu53rn4m3> I'm not aware of the scale factors you're using to begin with, but I'd simply approach it with pen and paper, make a drawing
12:52 < bridge> <eidderFsT> i mean ddnet has a resolution scaling that does pretty weird things
12:52 < bridge> <eidderFsT> i think
12:55 < bridge> <eidderFsT> also show distance is a sent little bit delayed than zoom when zooming in. might be negligible but when people is zooming in with smooth zoom on the spectator will just see a super quick zoom from the furthest to the closest in one step instead of multiple steps.
12:55 < bridge> <eidderFsT> we could adjust the send rate on client side for show distance. should be pretty simple
12:57 < bridge> <eidderFsT> that's currently the two point i would specifically check if i were to try to implement it that way.
12:57 < bridge> <eidderFsT> that's currently the two points i would specifically check if i were to try to implement it that way.
12:58 < bridge> <eidderFsT> dnycam settings should be universal regardless zoom i think? not entirely sure. i could double check that next week.
12:59 < bridge> <inv41idu53rn4m3> Why is it being sent at a fixed rate in the first place? Shouldn't it get sent on change?
13:00 < bridge> <eidderFsT> it is sent on chnage
13:00 < bridge> <eidderFsT> but smooth zoom
13:00 < bridge> <eidderFsT> prevented it from senting the instant it changes
13:00 < bridge> <inv41idu53rn4m3> ah
13:00 < bridge> <eidderFsT> client need time to fully zoom in to target so it just tell the server that it zoomed a bit later
13:00 < bridge> <eidderFsT> the zoom info for telecursor is sent as soon as it changes
13:01 < bridge> <eidderFsT> we can just make client send it a bit more frequent rather than when the smoothing completely stops, which can take quite a while if you zoom multiple steps in
13:01 < bridge> <inv41idu53rn4m3> I just learned about `cl_limit_max_zoom_level` hehe
13:02 < bridge> <inv41idu53rn4m3> wait what I've been lied to
13:02 < bridge> <inv41idu53rn4m3> setting it to 0 I'm still limited
13:03 < bridge> <inv41idu53rn4m3> I guess it's about zooming out instead of in?
13:03 < bridge> <eidderFsT> there is a min one
13:03 < bridge> <eidderFsT> i think
13:03 < bridge> <eidderFsT> ah apparently not
13:04 < bridge> <eidderFsT> why do you want to zoom all the way in tho
13:08 < bridge> <inv41idu53rn4m3> funny
13:11 < bridge> <eidderFsT> this is a no funny zone
13:13 < bridge> <nubikpubik> @murpi
13:13 < bridge> <nubikpubik> how to apeal
13:13 < bridge> <syrinok> #✉-create-a-ticket
14:46 < bridge> <Jupstar ✪> wtf xD
14:46 < bridge> <Jupstar ✪> 
14:46 < bridge> <Jupstar ✪> for whatever reason i upstreamed a ultra hd version of dm1 on ddnet-rs.
14:46 < bridge> <Jupstar ✪> 
14:46 < bridge> <Jupstar ✪> Where do I even have that from lol
14:46 < bridge> <meloƞ> :justatest:
15:38 < bridge> <Jupstar ✪> btw whoever owns the gh tool can also disable the log if thats too spammy
15:53 < bridge> <louis> does every ddnet feature have to have backwards compatibility? is there a day i can look forward to where updates are forced
15:55 < bridge> <Jupstar ✪> you could contribute to twgame, so ddnet-rs has ddnet physics support 😏
15:55 < bridge> <Jupstar ✪> yeah yeah i stop xD
15:56 < bridge> <louis> idk rust
15:57 < bridge> <Jupstar ✪> I also didn't know 2 years ago
15:57 < bridge> <chillerdragon> Jupstar imo if you start to use repository prefixes what you probably want is a Organisation
15:57 < bridge> <Jupstar ✪> I asked admin whether I should contribute it to ddnet org
15:58 < bridge> <Jupstar ✪> also these prefixes are invisible to the main repo, since you can name submodules as u want
15:59 < bridge> <chillerdragon> Yea I also liked ddnet-rs in ddnet but if you need multiple repos it will be harder for the user to browse the org if some are c++ and some are rust
15:59 < bridge> <Jupstar ✪> i think that is kinda a non issue tbh
15:59 < bridge> <Jupstar ✪> most ppl land on github.com/ddnet/ddnet
15:59 < bridge> <Jupstar ✪> or github.com/ddnet/ddnet-rs
16:00 < bridge> <Jupstar ✪> or do you often casually drop on ddnet-scripts
16:00 < bridge> <Jupstar ✪> xD
16:00 < bridge> <Jupstar ✪> i mean you
16:00 < bridge> <Jupstar ✪> OFC
16:00 < bridge> <Jupstar ✪> xD
16:03 < bridge> <chillerdragon> hehe
16:55 < bridge> <Tsumugi> 🖐️
16:58 < bridge> <panwor> Hi, there has probably been a question like this before, but will there ever be a translation of the website itself? I'm not talking about the wiki or the client, but DDNet website.
17:00 < bridge> <Jupstar ✪> nothing like that is planned
17:01 < bridge> <Jupstar ✪> the website would require quite a bit of rewrite
17:01 < bridge> <Jupstar ✪> you can usually also translate websites using a translator
17:01 < bridge> <99505> Why there is no translation for ddnet in-game chat?
17:02 < bridge> <Jupstar ✪> Because using translation apis costs money
17:02 < bridge> <dwarvenstein> what question is that lol
17:02 < bridge> <dwarvenstein> how many games u have seen with such a feature
17:03 < bridge> <panwor> No no, I understand English and have no problem with it. But I'm just translating the wiki into Polish at the moment, and I was wondering that it would be interesting to translate the website as well.
17:03 < bridge> <Jupstar ✪> I see, the website is pretty old and not really designed for multi languages ^^
17:04 < bridge> <panwor> Alright cool, thanks for the answer
17:04 < bridge> <panwor> roblox heh
17:04 < bridge> <panwor> I can't think of any other game
17:06 < bridge> <dwarvenstein> well its really useless
17:06 < bridge> <dwarvenstein> just learn a language
17:06 < bridge> <dwarvenstein> way easier
17:41 < bridge> <0xdeen> you might be able to use an open llm and include it in the client to do translations on device
17:56 < bridge> <robyt3> @0xdeen Can you give @jupeyy_keks or me access to the ddnet-rs* repos so we can change the settings?
19:30 < ChillerDragon> freddie you did the whole cursor thing right?
19:31 < ChillerDragon> its crazy seeing ppl use dyn cam
19:31 < ChillerDragon> dude ctf/ictf pros kept talking about seeing dyn cam in spec and demos in 2017 i remember they finally got what they asked for 
19:33 < ChillerDragon> feels like having your pc remote controlled i keep thinking i am in game right now
19:50 < bridge> <meloƞ> @jupeyy_keks increase merge queue :kekw:
19:51 < bridge> <meloƞ> @jupeyy_keks increase merge queue timer or something :kekw: - damn spammer
19:51 < bridge> <Jupstar ✪> if there would be a merge queue i could stop hving to look at github all the time
19:51 < bridge> <Jupstar ✪> and would spam even more
19:51 < bridge> <Jupstar ✪> :lol:
19:51 < bridge> <meloƞ> by the way - for modding
19:51 < bridge> <meloƞ> 
19:51 < bridge> <meloƞ> upstream changes to vanilla code (exposing things to functions and whatnot) are generally accepted, but not the modding code itself - did i get that right?
19:52 < bridge> <meloƞ> by the way - for modding
19:52 < bridge> <meloƞ> 
19:52 < bridge> <meloƞ> upstream changes to vanilla code (exposing things to/as functions and whatnot) are generally accepted, but not the modding code itself - did i get that right?
19:52 < bridge> <Jupstar ✪> yes that would be the idea of the patching approach
19:52 < bridge> <Jupstar ✪> well depends on how much it bloats the code ig
19:52 < bridge> <Jupstar ✪> but tbh, i don't find my vanilla code that good xD
19:52 < bridge> <Jupstar ✪> it's kinda hacked in whenever i was _not_ demotivated
19:52 < bridge> <meloƞ> :kek: - i brainstormed about both zombies and battlefield, and atleast for battlefield i think i would need to change quite a bit
19:53 < bridge> <Jupstar ✪> you can also mix patch changes with vanilla crate changes.. that's  what i did too kind
19:53 < bridge> <Jupstar ✪> then u can see how far u get
19:54 < bridge> <meloƞ> yee - for now i'll do my changes upstream and decide on the get go then i guess
19:54 < bridge> <meloƞ> then i'll see if ddnet-rs is worthy of my rust code (it's worse than gerdoes)
19:54 < bridge> <meloƞ> then i'll see if ddnet-rs is worthy of my rust code (it's worse than gerdoes in terms of readability)
19:54 < bridge> <Jupstar ✪> but arcti smth also made a fair point. rebasing is probs not _lot_ harder anyway
19:57 < bridge> <meloƞ> i like the moddability aspect, if one person exposes type X for mod X
19:57 < bridge> <meloƞ> a second person can use type X for mod Y
19:57 < bridge> <meloƞ> i like the moddability aspect, if one person exposes type X for mod X properly upstream
19:57 < bridge> <meloƞ> a second person can use type X for mod Y
19:57 < bridge> <meloƞ> i like the moddability aspect, if one person exposes type X for mod X properly upstream
19:57 < bridge> <meloƞ> a second person can use type X for mod Y more easily
19:57 < bridge> <meloƞ> can't wait for the first p2w city mod in ddnet-rs :kekw:
19:58 < bridge> <Jupstar ✪> 😬
20:22 < bridge> <meloƞ> dude makes PR, immediatly adds it to queue, queue pops and adds it, makes PR again
20:22 < bridge> <meloƞ> :KEKhands:
20:28 < bridge> <kollpotato> whole pr for a single commit
20:28 < bridge> <kollpotato> poor github actions
20:53 < bridge> <Jupstar ✪> yes but now i am sad, bcs i found yet another bug in a dep xd
20:53 < bridge> <Jupstar ✪> i hate bug reporting
20:53 < bridge> <Jupstar ✪> so many oss maintainers don't even try when i tell them how to 100% reproduce the issue xD
21:19 < bridge> <hectavoxel> dude this is so fun
21:19 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1325921714504466522/2025-01-06_15-17-30.mp4?ex=677d8c53&is=677c3ad3&hm=187b120627295801b2dd4c64b3bb26c993bc94ee554ac77a9bd22ce538c22da6&
21:19 < bridge> <hectavoxel> its so broken and barren
21:22 < bridge> <Jupstar ✪> vanilla has no freeze
21:24 < bridge> <Jupstar ✪> the cry 😂
21:24 < bridge> <Jupstar ✪> that's indeed funniest
21:24 < bridge> <Jupstar ✪> such a noby feature
21:25 < bridge> <hectavoxel> i am 100% sure its because theres no cooldown
21:26 < bridge> <hectavoxel> oh yea you still cant bind wheel_up and wheel_down to anything yet
21:33 < bridge> <Jupstar ✪> give an example
21:33 < bridge> <Jupstar ✪> weapon swtich is bound to it
21:34 < bridge> <99505> Yeah I know, it wouldn't be a problem to add
21:34 < bridge> <99505> But why it is not there yet?
21:34 < bridge> <99505> Is there any reason?
21:35 < bridge> <hectavoxel> when i try to change it it just doesnt recognise my scroll wheel
21:35 < bridge> <Jupstar ✪> change what
21:35 < bridge> <Jupstar ✪> ^
21:35 < bridge> <Jupstar ✪> ^^
21:36 < bridge> <hectavoxel> are you a cop
21:36 < bridge> <hectavoxel> i was trying to change my weapon switch control
21:36 < bridge> <Jupstar ✪> wtf is that dude xD
21:36 < bridge> <hectavoxel> oh my fucking god
21:37 < bridge> <meloƞ> firstly: performance - having to run an LLM to work on all our servers is costly
21:37 < bridge> <meloƞ> secondly: money - just using a barebones LLM is not only bad, but unusable for most languages, so we'd need a good model specifically designed for that.
21:37 < bridge> <meloƞ> third reason: there are/were clients which had ingame translations, they were bad because they used a free translation API. the good ones (e.g deepl) cost a lot of money and are bound to some restriction (e.g a million tokens a month) - which would fill up within ~5 minutes if ran on all servers
21:37 < bridge> <hectavoxel> this shit
21:37 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1325926222634684527/image.png?ex=677d9085&is=677c3f05&hm=f2527d1c4eb325aeec4b9a2449f992fd834773339f2069bae214e5013d5c7dd2&
21:37 < bridge> <hectavoxel> i was trying to change these
21:37 < bridge> <meloƞ> firstly: performance - having to run an LLM to work on all our servers is costly in terms of hardware
21:37 < bridge> <meloƞ> secondly: money - just using a barebones LLM is not only bad, but unusable for most languages, so we'd need a good model specifically designed for that.
21:37 < bridge> <meloƞ> third reason: there are/were clients which had ingame translations, they were bad because they used a free translation API. the good ones (e.g deepl) cost a lot of money and are bound to some restriction (e.g a million tokens a month) - which would fill up within ~5 minutes if ran on all servers
21:37 < bridge> <meloƞ> firstly: performance - having to run an LLM to work on all our servers is costly in terms of hardware, storage and bandwidth
21:37 < bridge> <meloƞ> secondly: money - just using a barebones LLM is not only bad, but unusable for most languages, so we'd need a good model specifically designed for that.
21:37 < bridge> <meloƞ> third reason: there are/were clients which had ingame translations, they were bad because they used a free translation API. the good ones (e.g deepl) cost a lot of money and are bound to some restriction (e.g a million tokens a month) - which would fill up within ~5 minutes if ran on all servers
21:38 < bridge> <meloƞ> firstly: performance - having to run an LLM to work on all our servers is costly in terms of hardware, storage and bandwidth
21:38 < bridge> <meloƞ> secondly: money - just using a barebones LLM is not only bad, but unusable for most languages, so we'd need a good model specifically designed for that, which are often pricy aswell.
21:38 < bridge> <meloƞ> third reason: there are/were clients which had ingame translations, they were bad because they used a free translation API. the good ones (e.g deepl) cost a lot of money and are bound to some restriction (e.g a million tokens a month) - which would fill up within ~5 minutes if ran on all servers
21:42 < bridge> <Jupstar ✪> u mean the UI does not regocnize the wheel
21:42 < bridge> <Jupstar ✪> that's true
21:42 < bridge> <Jupstar ✪> use f1 xd
21:42 < bridge> <hectavoxel> ok programmer
21:44 < bridge> <99505> I meant more like local, maybe even offline translating lib
21:44 < bridge> <totar> solly was working on implementing libretranslate into tclient
21:44 < bridge> <99505> Does not have to be deepl quality, but just to translate so you could figure out what that means
21:44 < bridge> <hectavoxel> oh yea i cant build ddnet-rs on my pc because "is `cmake` not installed?" (it is but i think its on a different drive so)
21:44 < bridge> <meloƞ> i tried libretranslate and almost puked when translating german to english/japanese
21:44 < bridge> <totar> japanese is hard
21:45 < bridge> <inv41idu53rn4m3> ok but all the real ones use console for every bind
21:45 < bridge> <hectavoxel> ok but i dont care
21:45 < bridge> <inv41idu53rn4m3> like genuinely it has been months since I opened the keybinds panel
21:45 < bridge> <meloƞ> i use the keybinds panel often whatahell
21:45 < bridge> <totar> but users could pay and provide their own api key
21:45 < bridge> <totar> for a better service
21:45 < bridge> <hectavoxel> if you're gonna have a keybinds panel, rather have it work or just remove it
21:45 < bridge> <inv41idu53rn4m3> But why? Aren't all your common normal binds basically the same all the time?
21:45 < bridge> <meloƞ> ah well that's good yea - i intended to add that to my dd-launcher project using google/deepl translate
21:46 < bridge> <Jupstar ✪> i added to list, but that settings page is not important to me rn 😄
21:46 < bridge> <inv41idu53rn4m3> I rarely change anything but somewhat special binds anyways, so F1 is the default for me
21:46 < bridge> <meloƞ> zoom in zoom out and normal zoom are mousewheel in out and b - having to do that over f1 is annoying, so i just use the settings tab
21:46 < bridge> <hectavoxel> well im gonna see what i can do but uighhh
21:47 < bridge> <hectavoxel> `audiopus_sys v0.2.2` wont workkkkk
21:48 < bridge> <Jupstar ✪> u want to self compile?
21:48 < bridge> <hectavoxel> yeah i forked it
21:48 < bridge> <Jupstar ✪> try to add ` --no-default-features`
21:48 < bridge> <Jupstar ✪> i can't get this to work on msvc
21:48 < bridge> <Jupstar ✪> only mingw
21:48 < bridge> <meloƞ> yeah windows do be like that - it works without with GNU, but msvc is finnicky
21:49 < bridge> <meloƞ> yeah windows do be like that - it works without on GNU, but msvc is finnicky
21:49 < bridge> <Jupstar ✪> the stupid c deps 😬
21:49 < bridge> <Jupstar ✪> sadly there is no pure rust opus enc&decoder
21:51 < bridge> <99505> Its some option too, I believe basic tranation is achievable offline though
21:52 < bridge> <meloƞ> yeah - but i'd personally dislike some almost unusable translator integrated. someone once wrote a good python script that works via FIFO that just pulls chat messages and pipes them back using echo's
21:52 < bridge> <meloƞ> yeah - but i'd personally dislike some almost unusable translator integrated. someone once wrote a good python script that works via FIFO that just pulls chat messages, sends them through an API (e.g it was deepl or google) and pipes them back using echo's
21:52 < bridge> <meloƞ> yeah - but i'd personally dislike some almost unusable translator integrated. someone once wrote a good python script that works via FIFO that just pulls chat messages, sends them through an API (iirc it was deepl or google) and pipes them back using echo's
21:55 < bridge> <milkeeycat> @robyt3 Am I doing something wrong? D:
21:55 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1325930694857457775/skill_issue.mp4?ex=677d94b0&is=677c4330&hm=8e7c750b5cec37b71e5efd068950b6812c91cf7873b5043991b41dd0e7bfa1fb&
21:55 < bridge> <chillerdragon> The in game chat is super repetitive. You basically only need a hand full of key words to follow most conversations.
21:56 < bridge> <chillerdragon> Just learn the most used words in the language you need or even let your client do the hardcodet translation of them and you can understand a lot.
21:57 < bridge> <chillerdragon> Things like: back, help, freeze, block, grenade, rifle, hammer, hammer fly, hook fly and so on
21:58 < bridge> <inv41idu53rn4m3> Things like: idiot, you asshole, kill yourself, etc.
21:58 < bridge> <chillerdragon> Yes lots of insults. But not knowing them you don’t miss much tbh
21:59 < bridge> <inv41idu53rn4m3> Nice bg music
21:59 < bridge> <inv41idu53rn4m3> fun how instantly recognizable that band is
22:00 < bridge> <chillerdragon> I learned the Cyrillic alphabet for reading the teeworlds chat and it works surprisingly well. It’s basically all the English gaming words just literally typed out in Cyrillic.
22:01 < bridge> <inv41idu53rn4m3> yeah simply knowing cyrillic helps me a lot
22:01 < bridge> <hectavoxel> oh. oh yeah thats why i hate rust.
22:01 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1325932335790817290/image.png?ex=677d9637&is=677c44b7&hm=9c0353b40953de2a15d13e4fdbc412c8ac5f43042d7ced4d338fb810599b0091&
22:02 < bridge> <milkeeycat> because of your inline type hints?
22:02 < bridge> <inv41idu53rn4m3> I always do a double take when someone *doesn't* understand something simple written in cyrillic
22:02 < bridge> <hectavoxel> wait those are hints?
22:02 < bridge> <hectavoxel> ok i need to remember why i wanted to make a branch in the first place
22:03 < bridge> <chillerdragon> What’s a „double take“ ?
22:03 < bridge> <chillerdragon> > A delayed reaction to an unusual remark or circumstance, often used as a comic device
22:04 < bridge> <hectavoxel> im gonna do a troll pr
22:04 < bridge> <milkeeycat> 🧌
22:05 < bridge> <inv41idu53rn4m3> Yeah I actually didn't know the definition so I used it a bit wrong
22:06 < bridge> <chillerdragon> Definitions are cursed
22:06 < bridge> <chillerdragon> The first one never fits
22:06 < bridge> <inv41idu53rn4m3> but yeah my immediate reaction is "of course you can read that" and it takes my brain a second to process that most people in fact can *not* read that
22:06 < bridge> <inv41idu53rn4m3> but yeah my immediate reaction is "of course you can read that" and it takes my brain a second to process that most people in fact can *not* read cyrillic
22:07 < bridge> <chillerdragon> Im still proud every time I decipher successfully that some 12 tiktok enjoyer accused me of botting in Russian
22:07 < bridge> <chillerdragon> Im still proud every time I decipher successfully that some 12 yo tiktok enjoyer accused me of botting in Russian
22:07 < bridge> <inv41idu53rn4m3> a lot of people around me IRL know how to read cyrillic, hence my delusion
22:08 < bridge> <chillerdragon> How did that happen?
22:08 < bridge> <chillerdragon> Where do you live?
22:08 < bridge> <inv41idu53rn4m3> Southeast Finland
22:08 < bridge> <chillerdragon> How is Cyrillic a thing there?
22:08 < bridge> <inv41idu53rn4m3> home town is 69km from the Russian border crossing
22:08 < bridge> <inv41idu53rn4m3> by road
22:09 < bridge> <chillerdragon> And the letters leak over the border or what?
22:09 < bridge> <inv41idu53rn4m3> I studied Russian it in school, some friends did too, my mother is Russian
22:09 < bridge> <chillerdragon> Do you have Cyrillic signs or lots of Russian speaking people around?
22:09 < bridge> <inv41idu53rn4m3> and yeah we have some Cyrillic signage around there
22:10 < bridge> <chillerdragon> Nice
22:10 < bridge> <inv41idu53rn4m3> I studied Russian in school, some friends did too, my mother is Russian
22:11 < bridge> <inv41idu53rn4m3> so my entire immediate family can read cyrillic, as can some of my old school friends
22:11 < bridge> <inv41idu53rn4m3> and it's not all *that* uncommon among educated eastern Finnish people in general, since it's such an easy thing to learn
22:11 < bridge> <chillerdragon> Leak
22:13 < bridge> <inv41idu53rn4m3> And you'd expect a lot of math nerds to be able to (slowly) read (ancient) Greek words
22:22 < bridge> <hectavoxel> @jupeyy_keks ddnet-rs logo
22:22 < bridge> <hectavoxel> https://cdn.discordapp.com/attachments/293493549758939136/1325937636380250264/image.png?ex=677d9b27&is=677c49a7&hm=046c6e22f90c1d14c745e433a468bb37bff35c12b6a804037774aeafa08b29f7&
22:22 < bridge> <Jupstar ✪> xD
22:23 < bridge> <Jupstar ✪> hot
22:29 < bridge> <Jupstar ✪> is that visual studio btw?
22:29 < bridge> <Jupstar ✪> 
22:29 < bridge> <Jupstar ✪> didnt know they have rust support lol
22:29 < bridge> <Jupstar ✪> almost looks like vscode nowadays xd
22:31 < bridge> <lefterion_> how to trun on render open gl 3 from console?
22:32 < bridge> <lefterion_> how to turn on render open gl 3 from console?
22:32 < bridge> <hectavoxel> vscode
22:33 < bridge> <kollpotato> so why did you clone with visual studio xd
22:33 < bridge> <Jupstar ✪> gfx_gl_major 3
22:33 < bridge> <Jupstar ✪> 
22:33 < bridge> <Jupstar ✪> then restart
22:33 < bridge> <Jupstar ✪> IKR XD
22:33 < bridge> <Jupstar ✪> such a troll
22:34 < bridge> <robyt3> Maybe because it's an unused tile? I just copy a random selection of game tiles
22:36 < bridge> <milkeeycat> I opened a random map and selected game tiles there, still nothing :\
22:36 < bridge> <robyt3> Did you confirm that ASAN/UBSAN actually work?
22:45 < bridge> <milkeeycat> Idk how to check that but I entered commands from https://github.com/ddnet/ddnet?tab=readme-ov-file#using-addresssanitizer--undefinedbehavioursanitizer-or-valgrinds-memcheck and still nothing
23:19 < bridge> <inv41idu53rn4m3> Obvious solution: crab tee
23:21 < bridge> <Jupstar ✪> i'd prefer nothing with rust xD
23:21 < bridge> <Jupstar ✪> the rust logos aren't really the yellow from the egg
23:22 < bridge> <pluskz> 😏
23:22 < bridge> <pluskz> https://cdn.discordapp.com/attachments/293493549758939136/1325952540986314892/crab.png?ex=677da908&is=677c5788&hm=1d3addd709c5e82c0c38a4ee6fc474f92e1c4e651dec79712e963e966239aded&
