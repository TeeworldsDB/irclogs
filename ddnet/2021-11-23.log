06:15 <+bridge> [ddnet] <GrownMallard> i think i had the intel drivers corrupted the game is not crashing for now
06:15 <+bridge> [ddnet] <GrownMallard> thanks anywasy for helping
12:57 <+bridge> [ddnet] <Ryozuki> :bluekitty:
14:01 <+bridge> [ddnet] <Cellegen | HU> How in the fuck can the gravity with every tick, let alone the jump value be accurately visualized? I cannot get it on a geometric standpoint where regardless of how much gravity I add, I always need to change my jumping values to be accurate with tile measuring, for example need to change my jumping strenght from a point where my jumping value (blocks / sec) is accurate
14:02 <+bridge> [ddnet] <Cellegen | HU> Is there a good mathematic solution for this?
14:03 <+bridge> [ddnet] <Cellegen | HU> [ Let's say basic values
14:03 <+bridge> [ddnet] <Cellegen | HU> gravity is 0.5 | always brings down velocity.y
14:03 <+bridge> [ddnet] <Cellegen | HU> jump value and jump strength | jump strength is needed to make nessesary accuracy (blocks / sec) | jump value is the amount of blocks you want to jump REGARDLESS of gravity.
14:03 <+bridge> [ddnet] <Cellegen | HU> [ Let's say basic values
14:03 <+bridge> [ddnet] <Cellegen | HU> gravity is 0.5 | always brings down velocity.y
14:03 <+bridge> [ddnet] <Cellegen | HU> jump value and jump strength | jump strength is needed to make nessesary accuracy (blocks / sec) | jump value is the amount of blocks you want to jump REGARDLESS of gravity. ]
14:19 <+bridge> [ddnet] <Ryozuki> you have acceleration (the change in velocity), velocity and your position (all of the are vectors, in 2d, x and y), on every tick you add the acceleration to your velocity and your velocity to your position, you render your object at your position
14:19 <+bridge> [ddnet] <Ryozuki> i dont get much what ur problem is
14:24 <+bridge> [ddnet] <Ryozuki> you should look into some physics intro or smth
14:24 <+bridge> [ddnet] <Ryozuki> look up "rigid body dynamics"
14:24 <+bridge> [ddnet] <Cellegen | HU> Well in theory, the calculation for the jump should be like this:
14:24 <+bridge> [ddnet] <Cellegen | HU> **velocity.y = jump_value * block_value**
14:24 <+bridge> [ddnet] <Cellegen | HU> **(horizontal velocity = amount of blocks you want to travel * the amount of blocks you have accurately)**
14:24 <+bridge> [ddnet] <Cellegen | HU> 
14:24 <+bridge> [ddnet] <Cellegen | HU> But whenever gravity is involved which is a constant calculation:
14:24 <+bridge> [ddnet] <Cellegen | HU> **velocity.y *= gravity_strength**
14:24 <+bridge> [ddnet] <Cellegen | HU> **(horizontal velocity = itself * the amount of strength decreased or increased every tick)**
14:24 <+bridge> [ddnet] <Cellegen | HU> 
14:24 <+bridge> [ddnet] <Cellegen | HU> This makes it so, that whenever you change your **gravity strenght** which manipulates the force of gravity,
14:24 <+bridge> [ddnet] <Cellegen | HU> Our jump value which we want to jump (blocks) is not going to be accurate anymore
14:25 <+bridge> [ddnet] <Ryozuki> maybe this is good <https://www.toptal.com/game/video-game-physics-part-i-an-introduction-to-rigid-body-dynamics>
14:26 <+bridge> [ddnet] <Ryozuki> eh should u really multiply the gravity on the y?
14:26 <+bridge> [ddnet] <Ryozuki> i think u should simply add
14:26 <+bridge> [ddnet] <Ryozuki> its a long time since i done any of this tho xd
14:27 <+bridge> [ddnet] <Ryozuki> to make it accurately visualize you should multiply by the delta time in your calculations
14:27 <+bridge> [ddnet] <Cellegen | HU> that's what the wiki is told
14:27 <+bridge> [ddnet] <Ryozuki> what the wiki tells*
14:27 <+bridge> [ddnet] <Cellegen | HU> it adds 0.5 to itself, basically
14:28 <+bridge> [ddnet] <Cellegen | HU> oh, my mistake there, i switched it with stopping motion
14:29 <+bridge> [ddnet] <Cellegen | HU> Well in theory, the calculation for the jump should be like this:
14:29 <+bridge> [ddnet] <Cellegen | HU> **velocity.y = jump_value* block_value**
14:29 <+bridge> [ddnet] <Cellegen | HU> **(horizontal velocity = amount of blocks you want to travel * the amount of blocks you have accurately)**
14:29 <+bridge> [ddnet] <Cellegen | HU> 
14:29 <+bridge> [ddnet] <Cellegen | HU> But whenever gravity is involved which is a constant calculation:
14:29 <+bridge> [ddnet] <Cellegen | HU> **velocity.y += gravity_strength**
14:29 <+bridge> [ddnet] <Cellegen | HU> **(horizontal velocity = itself + the amount of strength decreased or increased every tick)**
14:29 <+bridge> [ddnet] <Cellegen | HU> 
14:29 <+bridge> [ddnet] <Cellegen | HU> This makes it so, that whenever you change your **gravity strenght** which manipulates the force of gravity,
14:29 <+bridge> [ddnet] <Cellegen | HU> Our jump value which we want to jump (blocks) is not going to be accurate anymore
14:30 <+bridge> [ddnet] <Cellegen | HU> But then the gravity won't be accurate with block measurements, unless I could (somehow) multiply the delta value with block measures
14:31 <+bridge> [ddnet] <Cellegen | HU> but it would be insanely fast with that calculation, so I have to resolve on different calculations
14:33 <+bridge> [ddnet] <Cellegen | HU> but it would be insanely fast -> insanely strong with that calculation, so I have to resolve on different calculations
14:39 <+bridge> [ddnet] <Cellegen | HU> It's realistic body manipulation you sent, technically with 3d involved. What I look for is a proper 2d Kinematic Body guide
14:40 <+bridge> [ddnet] <deen> their examples look 2d. even if it's 3d, just ignore one dimension and you have the same
14:42 <+bridge> [ddnet] <Cellegen | HU> ain't what I look for tho ðŸ˜„
16:32 <+bridge> [ddnet] <Smetanolub> guys, you should add a thing.
16:32 <+bridge> [ddnet] <Smetanolub> when playing in team vote for who takes strong. so you can give strong to player and not wait to do solo part before start after him
16:54 <+bridge> [ddnet] <deen> Just use /swap
17:22 <+bridge> [ddnet] <Burk> how to play on your own server? for practice
21:04 <+bridge> [ddnet] <Learath2> It's quite concerning how long it takes to compile rustc
21:04 <+bridge> [ddnet] <Learath2> Firefox and chromium take like negligible amounts of time compared to rustc
21:05 <+bridge> [ddnet] <Ryozuki> i never tried to do that
21:05 <+bridge> [ddnet] <Ryozuki> :monkaS:
21:06 <+bridge> [ddnet] <Ryozuki> imho even on gentoo its not worth
21:06 <+bridge> [ddnet] <Ryozuki> i would use rustup
21:06 <+bridge> [ddnet] <Learath2> Llvm itself was much quicker too. Idk maybe I'm doing sth wrong
21:06 <+bridge> [ddnet] <Ryozuki> what if u want to install another toolchain/target
21:06 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/912796311592505405/unknown.png
21:06 <+bridge> [ddnet] <Learath2> I might move to rustup too yeah. Never expected it to take quite so long
21:06 <+bridge> [ddnet] <Ryozuki> :greenthing:
21:07 <+bridge> [ddnet] <Learath2> Maybe only bootstrapping is slow and rustc can build rustc faster?
21:08 <+bridge> [ddnet] <Ryozuki> https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html
21:08 <+bridge> [ddnet] <heinrich5991> I think bootstrapping compiles the compiler three times
21:08 <+bridge> [ddnet] <Ryozuki> why 3?=
21:08 <+bridge> [ddnet] <Ryozuki> i never bootstrapped anything
21:08 <+bridge> [ddnet] <Learath2> I'm on stage 1 and even that is taking so long
21:09 <+bridge> [ddnet] <Ryozuki> what cpu u got? curious
21:09 <+bridge> [ddnet] <heinrich5991> 1 from the old compiler, 2 from the new compiler compiled by the old compiler and 3 compiled from the new compiler compiled by the new compiler from the old compiler
21:09 <+bridge> [ddnet] <heinrich5991> ideally the artifacts 2 and 3 are equal
21:10 <+bridge> [ddnet] <Learath2> 4770k so I only have 4 cores. Which probably isn't helping but other things compile in reasonable amounts of time, idk why rustc is being so weird
21:11 <+bridge> [ddnet] <Ryozuki> did u enable lto?
21:11 <+bridge> [ddnet] <Learath2> I really want to get a new cpu. The new ryzens are so cool with their many cores
21:11 <+bridge> [ddnet] <Ryozuki> lto is like hell
21:11 <+bridge> [ddnet] <Ryozuki> xd
21:11 <+bridge> [ddnet] <Ryozuki> i have a new ryzen AMD Ryzen 5 5600X (12) @ 3.700GHz
21:11 <+bridge> [ddnet] <Ryozuki> :greenthing:
21:11 <+bridge> [ddnet] <Learath2> Nah, I only enable that for a couple things
21:11 <+bridge> [ddnet] <Learath2> Systemwide lto usually breaks a lot of things
21:12 <+bridge> [ddnet] <Ryozuki> :o
21:12 <+bridge> [ddnet] <Ryozuki> maybe not now?
21:12 <+bridge> [ddnet] <Learath2> It used to the last time I tried 6 years ago :P
21:12 <+bridge> [ddnet] <Ryozuki> yeah 6 years i guessed that
21:12 <+bridge> [ddnet] <Ryozuki> :monkaS:
21:12 <+bridge> [ddnet] <Ryozuki> brb food
21:12 <+bridge> [ddnet] <Learath2> Ooooh no I forgooot
21:13 <+bridge> [ddnet] <Learath2> I wanted to use clang as my system compiler this time around to test it
21:25 <+bridge> [ddnet] <Ryozuki> clang compiles faster for me
21:25 <+bridge> [ddnet] <Ryozuki> tested with ddnet
21:25 <+bridge> [ddnet] <Ryozuki> compiles ddnet faster*
