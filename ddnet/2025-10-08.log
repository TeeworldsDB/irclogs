00:08 < bridge_> <soulyvevo> chillerdragon: when ddnet programming tutorials
00:09 < bridge_> <Solly (bun bun)> @chillerdragon time to merge allowe demos everywhere
00:10 < bridge_> <Solly (bun bun)> https://github.com/ddnet/ddnet/pull/10954
00:12 < bridge_> <Ewan> 5 years ago
00:27 < bridge_> <sqwinix> It was teeworlds
00:28 < bridge_> <Ewan> what would be different enough about a ddnet programming tutorial series
00:43 < bridge_> <totar> controlled routing networks like this can actually work very well, despite some of them being scams. People just assume the concept as a whole can't work because some of them are scams. cloudflare might be in the best position possible to make it work.
00:46 < bridge_> <totar> https://speedvitals.com/blog/cloudflare-argo-review/
01:05 < bridge_> <thrava> wh..
01:05 < bridge_> <thrava> https://cdn.discordapp.com/attachments/293493549758939136/1425257733627707495/96edd27df9b30819c4a3a57fdb162a9a.png?ex=68e6ee33&is=68e59cb3&hm=c609ab58d82f8019bafc467879d4b530c196572ecde43955d4111f26e3fdcca5&
01:06 < bridge_> <Ewan> monopoly reference
01:06 < bridge_> <Ewan> board game
01:06 < bridge_> <Ewan> every revolution around the board you earn $200 unless you go to jail and you get let out at the start/corner
01:07 < bridge_> <melon> Now I wanna play monopoly with my grandpa again :(
01:07 < bridge_> <Solly (bun bun)> u can be my granmdpa and we can play polymono
01:07 < bridge_> <melon> :cat_hmm: is there online monopoly
01:07 < bridge_> <melon> There for sure is
01:07 < bridge_> <Solly (bun bun)> https://richup.io/room/pmuyb
01:08 < bridge_> <Solly (bun bun)> @blaiszephyr join up
01:09 < bridge_> <melon> xd holup lemme quickly make myself a tea
01:09 < bridge_> <Ewan> monopolio
01:09 < bridge_> <Ewan> doubly autoimmune compromised
01:09 < bridge_> <Solly (bun bun)> scam
01:11 < bridge_> <Teero> Gg why did you quit
01:11 < bridge_> <Solly (bun bun)> @blaiszephyr @teero777 https://richup.io/room/pmuyb
01:11 < bridge_> <Solly (bun bun)> my name was wrong
01:12 < bridge_> <melon> Kettle slow
01:12 < bridge_> <Solly (bun bun)> bru
01:13 < bridge_> <Teero> where are u
01:14 < bridge_> <melon> im in
01:14 < bridge_> <melon> im in i think
01:15 < bridge_> <Ewan> no solly ig
01:18 < bridge_> <Solly (bun bun)> ur not in
01:18 < bridge_> <Solly (bun bun)> @blaiszephyr
01:18 < bridge_> <Solly (bun bun)> https://richup.io/room/t1sw2
01:18 < bridge_> <Solly (bun bun)> crap
01:18 < bridge_> <Solly (bun bun)> fucking
01:18 < bridge_> <Solly (bun bun)> didnt copy the right one
01:18 < bridge_> <Solly (bun bun)> do this one then
01:19 < bridge_> <Teero> what are you doing
01:19 < bridge_> <Solly (bun bun)> @teero777 @blaiszephyr
01:19 < bridge_> <Solly (bun bun)> i tried to make a new room
01:19 < bridge_> <Teero> I thought nevermind
01:19 < bridge_> <Solly (bun bun)> but ctrl-c failed
01:19 < bridge_> <Teero> melon is out
01:19 < bridge_> <Teero> And me too
01:19 < bridge_> <Solly (bun bun)> fucking
01:19 < bridge_> <Solly (bun bun)> why
01:19 < bridge_> <Solly (bun bun)> ):<
01:19 < bridge_> <Solly (bun bun)> leading me on
01:19 < bridge_> <Teero> overlord
01:19 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given)
01:19 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 30s left
01:19 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 25s left
01:19 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 20s left
01:19 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 15s left
01:19 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 10s left
01:20 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 5s left
01:20 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 4s left
01:20 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 3s left
01:20 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 2s left
01:20 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 1s left
01:20 < bridge_> <DDNet> Solly (bun bun) called for vote to kick teero777 (No reason given) — 0s left
01:20 < bridge_> <DDNet> Vote passed. teero777 kicked by vote (No reason given)
01:20 < bridge_> <Teero> waaaat
01:21 < bridge_> <Ewan> they waited like 5 min for u
01:24 < bridge_> <Solly (bun bun)> i was waiting for them
01:25 < bridge_> <Ewan> in a lobby nobody else could access
01:25 < bridge_> <Solly (bun bun)> scam
07:16 < bridge_> <vahemaaa> oh thanks chiller, how did i not see that on youtube lol
08:07 < bridge_> <Teero> Because it is unlisted xd
08:48 < bridge_> <milkeeycat> It's wrong right now anyways but everything that doesn't produce 1 output will be handled in code manually
09:06 < bridge_> <chillerdragon> @vahemaaa: it’s still secret draft. It might contain nude leaks
10:56 < bridge_> <milkeeycat> chillerdragon: https://github.com/llvm/llvm-project/pull/162160#issuecomment-3380481470
11:21 < ws-client1> **<ChillerDragon>** bruv
11:23 < ws-client1> **<ChillerDragon>** why did u even ping that dude? who he?
11:25 < ws-client1> **<ChillerDragon>** @robyt3 u still need me to review something urgently?
11:27 < bridge_> <milkeeycat> chillerdragon: he's one of the maintainers of clang-tidy xddd
11:28 < bridge_> <milkeeycat> chillerdragon: he's one of clang-tidy maintainers xddd
11:41 < ws-client1> **<ChillerDragon>** hmkay.. maybe makes him a bit credible. But still how did you decide to ping these two specific names? Did you just pick a random maintainer u knew? xd
11:42 < ws-client1> **<ChillerDragon>** @milkeeycat should i ask him in the thread what a "constant variable" is? xd
11:43 < ws-client1> **<ChillerDragon>** i think i will do! I already got comments deleted on llvm i have no rep to lose there
11:50 < bridge_> <milkeeycat> chillerdragon: there're `Maintainers.txt` files, I chose first 2
11:51 < bridge_> <milkeeycat> > I already got comments deleted on llvm
11:51 < bridge_> <milkeeycat> What did you write? xd
12:14 < bridge_> <chillerdragon> @milkeeycat: such troller. Did you see ppl on other prs do it? Is that the llvm meta to get merges?
12:14 < bridge_> <chillerdragon> I wrote some troll comment on ryo pr forgot what exactly
12:15 < bridge_> <milkeeycat> classic chillerdragon moment
12:18 < bridge_> <milkeeycat> chillerdragon: https://llvm.org/docs/Contributing.html
12:18 < bridge_> <milkeeycat> > To make sure the right people see your patch, please select suitable reviewers and add them to your patch when requesting a review.
12:18 < bridge_> <milkeeycat> > 
12:18 < bridge_> <milkeeycat> > Suitable reviewers are the maintainers of the project you are modifying, and anyone else working in the area your patch touches. To find maintainers, look for the Maintainers.md or Maintainers.rst file in the root of the project’s sub-directory. For example, LLVM’s is llvm/Maintainers.md and Clang’s is clang/Maintainers.rst.
12:18 < bridge_> <milkeeycat> > 
12:18 < bridge_> <milkeeycat> > If you are a new contributor, you will not be able to select reviewers in such a way, in which case you can still get the attention of potential reviewers by CC’ing them in a comment – just @name them.
12:19 < bridge_> <chillerdragon> Interesting thanks
12:41 < bridge_> <melon> > @HerrCai0907 a constexpr is const so it does not change. A variable means it can vary. Isn't it contradicting then to say a constant variable (ConstexprVariable) exists? The way I see it there are constants and there are variables.
12:41 < bridge_> <melon> 
12:41 < bridge_> <melon> 
12:41 < bridge_> <melon> ChillerDragon: i always felt that c++ variables dont have to be mutable, for me a Variable is just the name slapped on a place in memory
12:41 < bridge_> <melon> 
12:41 < bridge_> <melon> i.e `const size_t x = 300000000;` is just a `const variable of type size_t called x` xd
12:42 < bridge_> <melon> > @HerrCai0907 a constexpr is const so it does not change. A variable means it can vary. Isn't it contradicting then to say a constant variable (ConstexprVariable) exists? The way I see it there are constants and there are variables.
12:42 < bridge_> <melon> 
12:42 < bridge_> <melon> 
12:42 < bridge_> <melon> ChillerDragon: i always felt that c++ variables dont have to be mutable, for me a variable is just the name slapped on a place in memory
12:42 < bridge_> <melon> 
12:42 < bridge_> <melon> i.e `const size_t x = 300000000;` is just a `const variable of type size_t called x` xd
12:44 < bridge_> <melon> > @HerrCai0907 a constexpr is const so it does not change. A variable means it can vary. Isn't it contradicting then to say a constant variable (ConstexprVariable) exists? The way I see it there are constants and there are variables.
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> ChillerDragon: i always felt that c++ variables dont have to be mutable, for me a variable is just the name slapped on a place in memory
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> i.e `const size_t x = 300000000;` is just a `const variable of type size_t called x` xd
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> also Constexpr isnt bound to just variables, functions can also be constexpr
12:44 < bridge_> <melon> > @HerrCai0907 a constexpr is const so it does not change. A variable means it can vary. Isn't it contradicting then to say a constant variable (ConstexprVariable) exists? The way I see it there are constants and there are variables.
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> ChillerDragon: i always felt that c++ variables dont have to be mutable, for me a variable is just the name slapped on a place in memory
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> i.e `const size_t x = 300000000;` is just a `const variable of type size_t called x` xd
12:44 < bridge_> <melon> 
12:44 < bridge_> <melon> also constexpr isnt bound to just variables, functions can also be constexpr
12:44 < bridge_> <learath2> Well constexpr variables don’t label any memory 😛
12:44 < bridge_> <learath2> I guess maybe memory in the compiler
12:45 < bridge_> <melon> fair enough xd
12:46 < bridge_> <melon> i guess its just a naming convention in code, where constexpr's arent bound to only variables but also functions so being explicit in the naming makes sense
12:46 < bridge_> <inv41idu53rn4m3> C++ is a high level language, you shouldn't have be to worry about what the compiler is doing (just kidding)
12:47 < bridge_> <inv41idu53rn4m3> C++ is a high level language, you shouldn't have to worry about what the compiler is doing (just kidding)
12:47 < bridge_> <learath2> But yeah, the way you think is sensible according to the spec. It loosely maps on to the concept of an `lvalue`
12:47 < bridge_> <melon> gumo btw :owo:
12:48 < bridge_> <inv41idu53rn4m3> What would be a good name for both variables and constants?
12:48 < bridge_> <melon> not using one name for both :monkalaugh:
12:51 < bridge_> <learath2> Well constexpr variables don’t necessarily label any memory 😛
12:53 < bridge_> <learath2> Actually, I’m wrong on that, `constexpr` variables are also objects, so your definition is perfectly accurate
12:55 < bridge_> <learath2> idk why I remembered them being `xrvalue`s
12:55 < bridge_> <learath2> idk why I remembered them being `rvalue`s
13:26 < bridge_> <Solly (bun bun)> if its an array then it probably does, it probably wont inline a large enuf block of memory everywhere since youll uncache locallity a lot more
13:27 < bridge_> <learath2> Yes, that’s why I had the “necessarily”. But even that is wrong. They are required by the spec to have a location in memory. If no one uses the address of operator on it it then gets optimized out
13:27 < bridge_> <Solly (bun bun)> o
13:28 < bridge_> <Solly (bun bun)> kay
13:28 < bridge_> <Solly (bun bun)> ive only read the c99 spec now
15:01 < bridge_> <sqwinix> hi guys
15:01 < bridge_> <DDNet> Hellou :3
15:04 < bridge_> <ryozuki> :owo:
15:04 < bridge_> <sqwinix> Guys, maybe you know how to build Teeworlds correctly using bam? I wanted to make a build of [TeeWare](https://github.com/headshot2017/teeware-mod) but I immediately started making mistakes. Bam I installed it correctly. There are errors in the SDL, maybe there are some flags for this?
15:04 < bridge_> <ryozuki> how r u guys
15:04 < bridge_> <ryozuki> im trying to not spam anymore with my shit :d
15:04 < bridge_> <Teero> good
15:04 < bridge_> <ryozuki> so ive been quiet
15:04 < bridge_> <ryozuki> xD
15:05 < bridge_> <Teero> wdym shit? xd
15:05 < bridge_> <ryozuki> i only talk about my kernel xD
15:05 < bridge_> <Teero> why not xd
15:06 < bridge_> <Teero> the channel doesn't say we have to talk about ddnet dev
15:08 < bridge_> <chillerdragon> @sqwinix: bam is simple. You type bam and bam you are done. The thing that is hard is old unmaintained code bases. If it depends on sdl1 you need to make sure to have sdl1 installed.
15:09 < bridge_> <milkeeycat> post some article about rust :santatrollet:
15:44 < ws-client1> **<ChillerDragon>** <:hisnail:768893210726367232> 
15:46 < bridge_> <sqwinix> How can I check if I have SDL installed? Is it a package or something?
15:47 < bridge_> <sqwinix> Well, I know what SDL is, and it's not needed for a server. That's the problem.
16:07 < bridge_> <chillerdragon> What distro do you use?
16:09 < bridge_> <chillerdragon> What even is teeware? Is it client side?
16:09 < bridge_> <Teero> teeware is a server mod. sdl shouldn't even be there
16:11 < bridge_> <chillerdragon> Then just do `bam server_release`
16:34 < ws-client1> **<ChillerDragon>** @davide55 152.89.254.27 is a weird host. Is it new?
16:35 < ws-client1> **<ChillerDragon>** yay im finally in
16:36 < ws-client1> **<ChillerDragon>** pog
16:36 < ws-client1> **<ChillerDragon>** still wondering if its new. My pw manager didnt know it <:tee_thinking:478629518358085653>
16:52 < bridge_> <melon> I enjoy your kernel talk
16:52 < bridge_> <melon> And it's a dev related channel, not a ddnet dev related channel!
17:26 < bridge_> <louis> this mod might require an earlier version of bam but its been a while i might be wrong
17:57 < bridge_> <reitw> you are prob building the client while you don't want to
17:58 < bridge_> <reitw> ./bam server_release
17:58 < bridge_> <reitw> ah chiller said
18:29 < bridge_> <davide55> @chillerdragon it's just another subnet of mine
18:58 < bridge_> <chillerdragon> I see
20:49 < bridge_> <ryozuki> ive been playing again hackmud
20:49 < bridge_> <ryozuki> so my kernel dev is a bit stalled
20:49 < bridge_> <ryozuki> but soon more
21:09 < bridge_> <Ewan> sori guys
21:10 < bridge_> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1425560880883695686/image.png?ex=68e80887&is=68e6b707&hm=b8e6cf82631581983c57b562afe0c228c5e0dad97434a2ff0e00d9c5f973274c&
21:10 < bridge_> <Ewan> take it up w the standard
21:13 < bridge_> <Ewan> this person's point is that having one case both for "constexpr variables" and constexpr functinos does not make sense, maybe constexpr entity or smth would've made better sense but it's definitely not a fault of LLVM's naming
21:13 < bridge_> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1425561849038110821/image.png?ex=68e8096e&is=68e6b7ee&hm=157527828ecb0d1eb75956b7964e266e676c24f32050665f64e995ce834acdb9&
21:14 < bridge_> <Ewan> `GlobalConstexprCase` would be ambiguous between smth defined as `constexpr whatever {};` and `constexpr whatever() {}`
21:20 < ws-client1> **<Pathos>** @chillerdragon give admin for vanilla server please already, someone that's not AMN also
21:21 < ws-client1> **<Pathos>** Oops I don't know how the word 'already' got on there but yeah
21:21 < ws-client1> **<Pathos>** Spams
21:27 < ws-client1> **<Pathos>** We can only kick teammates
21:27 < ws-client1> **<Pathos>** And spec spams name changes
22:33 < bridge_> <milkeeycat> chillerdragon: do you want to debug why my test doesn't pass? xd
22:43 < bridge_> <milkeeycat> nvm, fixed it
23:12 < bridge_> <chillerdragon> I guess the mute spectator vote should also silence name changes. But I don’t like touching that ddnet code .\_.
23:13 < bridge_> <chillerdragon> zhn has rcon go annoy him hrhrhhrhr
