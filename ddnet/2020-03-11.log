02:23 <+bridge> [ddnet] <heinrich5991> @Learath2 ^ what do you think?
02:23 <+bridge> [ddnet] <heinrich5991> the other side of the module, for integration with @onby's code, is also ready
02:24 <+bridge> [ddnet] <onby> ðŸ˜„
07:20 <+bridge> [ddnet] <Learath2> @heinrich5991 nice, why did you decide to go with a C interface btw?
08:06 <+bridge> [ddnet] <fokkonaut> @noby is your anti cheat open src now or how does it work
08:07 <+bridge> [ddnet] <fokkonaut> @heinrich5991 which other side?
08:12 <+bridge> [ddnet] <fokkonaut> ah
09:22 <+bridge> [ddnet] <deen> @Learath2 i would assume because a C interface is the most universally available one, nearly every language can bind to C
09:25 <+bridge> [ddnet] <Learath2> I guess we might aswell keep it universal. I was just thinking that this will only hook to one thing
09:55 <+bridge> [ddnet] <ReiTW> @fokkonaut is anticheat is not opensource
09:55 <+bridge> [ddnet] <ReiTW> @fokkonaut his anticheat is not opensource
09:56 <+bridge> [ddnet] <fokkonaut> @ReiTW how can it be put in an open source project then? Or will the rest of it be kept closed source?
09:57 <+bridge> [ddnet] <fokkonaut> Would that mean only official ddnet servers can use it?
10:10 <+bridge> [ddnet] <Ryozuki> @fokkonaut u can load the bot dynamically, its like a plugin
10:10 <+bridge> [ddnet] <Ryozuki> antibot*
10:11 <+bridge> [ddnet] <fokkonaut> How does it work?
10:12 <+bridge> [ddnet] <Ryozuki> on linux probably with this
10:12 <+bridge> [ddnet] <Ryozuki> https://linux.die.net/man/3/dlopen
10:17 <+bridge> [ddnet] <ReiTW> @fokkonaut you cannot see his anticheat code
10:19 <+bridge> [ddnet] <fokkonaut> yea ik, thats why i wondered how to use it without code, i dont know whats loading dynamically
10:20 <+bridge> [ddnet] <ReiTW> this part of code is not the same as his ac
10:20 <+bridge> [ddnet] <ReiTW> I would assume they use something different from ddnet fng & ddnet ddrace
10:20 <+bridge> [ddnet] <ReiTW> (maybe ?)
10:44 < ***> Buffer Playback...
10:44 <+bridge> [10:43:15] [ddnet] <Learath2> This part sends all the needed things
10:44 <+bridge> [10:43:36] [ddnet] <Learath2> Noby's part gets the needed things and does the anticheatstuff
10:44 < ***> Playback Complete.
11:07 <+bridge> [ddnet] <Learath2> (thus noby's part doesn't have to be opensource)
14:07 <+bridge> [ddnet] <heinrich5991> @Learath2 https://github.com/ddnet/ddnet/pull/2081#issuecomment-597619615
14:08 <+bridge> [ddnet] <heinrich5991> @fokkonaut there's a dummy anticheat in the source code. you can replace that shared library with noby's anticheat and then the server will use that
14:22 <+bridge> [ddnet] <Learath2> @heinrich5991 I see, it should be fine like this, dynamically loading it is indeed a little more painful, you'd need a struct full of function pointers to be populated by the "plugin"
15:11 <+bridge> [ddnet] <Learath2> @heinrich5991 here?
15:11 <+bridge> [ddnet] <heinrich5991> a moment
15:11 <+bridge> [ddnet] <heinrich5991> be quick ðŸ˜‰
15:11 <+bridge> [ddnet] <heinrich5991> @Learath2
15:12 <+bridge> [ddnet] <Learath2> What would you return from a get function for a hash table if the entry isn't found?\
15:12 <+bridge> [ddnet] <Learath2> I'm thinking maybe I should be returning pointers so I could return null
15:13 <+bridge> [ddnet] <heinrich5991> hm
15:13 <+bridge> [ddnet] <Learath2> or maybe a reference to a new element?
15:13 <+bridge> [ddnet] <heinrich5991> c++ without good optional types, yay
15:13 <+bridge> [ddnet] <heinrich5991> I guess the reference to the new element is the best(?)
15:13 <+bridge> [ddnet] <heinrich5991> no idea
15:13 <+bridge> [ddnet] <heinrich5991> don't take my word
15:13 <+bridge> [ddnet] <heinrich5991> check what the stl does
15:14 <+bridge> [ddnet] <heinrich5991> I'm off, will check later
15:14 <+bridge> [ddnet] <Learath2> it returns a reference to a new entry, but idk how i'd remove that entry if the user doesn't end up putting something in there
15:36 <+bridge> [ddnet] <Vexar> In DDNet how many NetMessage able to create and how many NetBool we can add for each NetMessage ?
15:47 <+bridge> [ddnet] <Learath2> We can create as many net messages as we want through the extended protocol, You can have a lot of bools, I'm not sure of the limit
16:32 <@Learath2> deen: here by any chance?
17:35 <@deen> Learath2: sometimes, why?
19:10 <+bridge> [ddnet] <ChillerDragon> @onby is your compiled anti bot library public?
19:44 <+bridge> [ddnet] <Learath2> @deen I'm looking for a trick to emulate deleting the default unspecialized version of a template in c++03
20:08 <+bridge> [ddnet] <heinrich5991> @Learath2 make it private
22:18 <@deen> or static_assure(false) inside the default version?
22:32 <+bridge> [ddnet] <heinrich5991> ah, I misunderstood
22:35 <@Learath2> deen: you mean static_assert(false)? Problem is static_assert is c++11
22:37 <+bridge> [ddnet] <heinrich5991> Learath2: https://stackoverflow.com/a/14621998
23:21 <+bridge> [ddnet] <fokkonaut> @Learath2 are the changes in console.cpp from `Add command usage` required for ddnet7 servers?
23:22 <+bridge> [ddnet] <fokkonaut> oh, is in already
