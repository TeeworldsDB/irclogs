00:02 < bridge> <chairn> good bad bot
00:02 < bridge> <DDNet> Sowwy :c
00:02 < bridge> <chairn> bad good bot
00:02 < bridge> <DDNet> :3
00:03 < bridge> <chairn> how long has this been up ðŸ˜„ ?
01:01 < bridge> <meloÆž> murpi was bored ig
01:01 < bridge> <meloÆž> dunno when
01:10 < bridge> <jxsl13> @chillerdragon you alive?
01:13 < bridge> <teero777> Chillerdragon:
01:26 < bridge> <jxsl13> there is no such thing that you mentioned in the video comment. It's macOS Gatekeeper doing weird stuff...
01:26 < bridge> <jxsl13> or rather Safari
03:36 < bridge> <chillerdragon> Yes
03:37 < bridge> <chillerdragon> I used to do that back in the days when I was a Mac user. But it might have changed by now.
08:46 < bridge> <jxsl13> I did not see nothing in the setting about the app
12:15 < bridge> <baslcaly> '''
12:15 < bridge> <baslcaly> d
12:15 < bridge> <baslcaly> '''
12:21 < bridge> <baslcaly> ```
12:21 < bridge> <baslcaly> extends Node
12:21 < bridge> <baslcaly> 
12:21 < bridge> <baslcaly> var Bank = 0
12:21 < bridge> <baslcaly> 
12:21 < bridge> <baslcaly> var Cookie = 0
12:21 < bridge> <baslcaly> 
12:21 < bridge> <baslcaly> var CookiePerClick = 1
12:21 < bridge> <baslcaly> 
12:21 < bridge> <baslcaly> var Clicked = 0
12:22 < bridge> <baslcaly> 
12:22 < bridge> <baslcaly> var CookiePerSecond = 0
12:22 < bridge> <baslcaly> 
12:22 < bridge> <baslcaly> var save_path = "res://savegame.save"
12:22 < bridge> <baslcaly> 
12:22 < bridge> <baslcaly> func load_game():
12:22 < bridge> <baslcaly>     var file = FileAccess.open(save_path, FileAccess.READ)
12:22 < bridge> <baslcaly>     Cookie = file.get_var($"/root/Global".Cookie)
12:22 < bridge> <baslcaly> 
12:22 < bridge> <baslcaly> func save_game():
12:22 < bridge> <baslcaly>     var file = FileAccess.open(save_path, FileAccess.WRITE)
12:22 < bridge> <baslcaly>     file.store_var(Cookie)
12:22 < bridge> <baslcaly>     
12:22 < bridge> <baslcaly> 
12:22 < bridge> <baslcaly> 
12:22 < bridge> <baslcaly>     
12:22 < bridge> <baslcaly> func _ready():
12:22 < bridge> <baslcaly>     load_game()
12:22 < bridge> <baslcaly>     while true:
12:22 < bridge> <baslcaly>         $"/root/Global".Cookie += $"/root/Global".CookiePerSecond
12:22 < bridge> <baslcaly>         await get_tree().create_timer(1).timeout
12:23 < bridge> <baslcaly> ```
12:23 < bridge> <baslcaly> func load_game():
12:23 < bridge> <baslcaly>     var file = FileAccess.open(save_path, FileAccess.READ)
12:23 < bridge> <baslcaly>     Cookie = file.get_var($"/root/Global".Cookie)
12:23 < bridge> <baslcaly> ```
12:23 < bridge> <baslcaly> file.get_var($"/root/Global".Cookie) is the problem
12:23 < bridge> <baslcaly> ```
12:23 < bridge> <baslcaly> extends Node
12:23 < bridge> <baslcaly> 
12:23 < bridge> <baslcaly> var Bank = 0
12:23 < bridge> <baslcaly> 
12:23 < bridge> <baslcaly> var Cookie = 0
12:23 < bridge> <baslcaly> 
12:23 < bridge> <baslcaly> var CookiePerClick = 1
12:23 < bridge> <baslcaly> 
12:23 < bridge> <baslcaly> var Clicked = 0
12:23 < bridge> <baslcaly> 
12:23 < bridge> <baslcaly> var CookiePerSecond = 0
12:23 < bridge> <baslcaly> 
12:23 < bridge> <baslcaly> var save_path = "res://savegame.save"
12:23 < bridge> <baslcaly> 
12:23 < bridge> <baslcaly> func load_game():
12:24 < bridge> <baslcaly>     var file = FileAccess.open(save_path, FileAccess.READ)
12:24 < bridge> <baslcaly>     Cookie = file.get_var($"/root/Global".Cookie)
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> func save_game():
12:24 < bridge> <baslcaly>     var file = FileAccess.open(save_path, FileAccess.WRITE)
12:24 < bridge> <baslcaly>     file.store_var(Cookie)
12:24 < bridge> <baslcaly>     
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly>     
12:24 < bridge> <baslcaly> func _ready():
12:24 < bridge> <baslcaly>     load_game()
12:24 < bridge> <baslcaly>     while true:
12:24 < bridge> <baslcaly>         $"/root/Global".Cookie += $"/root/Global".CookiePerSecond
12:24 < bridge> <baslcaly>         await get_tree().create_timer(1).timeout
12:24 < bridge> <baslcaly> ```
12:24 < bridge> <baslcaly> extends Node
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> var Bank = 0
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> var Cookie = 0
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> var CookiePerClick = 1
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> var Clicked = 0
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> var CookiePerSecond = 0
12:24 < bridge> <baslcaly> 
12:24 < bridge> <baslcaly> var save_path = "res://savegame.save"
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly> func load_game():
12:25 < bridge> <baslcaly>     var file = FileAccess.open(save_path, FileAccess.READ)
12:25 < bridge> <baslcaly>     Cookie = file.get_var($"/root/Global".Cookie)
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly> func save_game():
12:25 < bridge> <baslcaly>     var file = FileAccess.open(save_path, FileAccess.WRITE)
12:25 < bridge> <baslcaly>     file.store_var(Cookie)
12:25 < bridge> <baslcaly>     
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly>     
12:25 < bridge> <baslcaly> func _ready():
12:25 < bridge> <baslcaly>     load_game()
12:25 < bridge> <baslcaly>     while true:
12:25 < bridge> <baslcaly>         $"/root/Global".Cookie += $"/root/Global".CookiePerSecond
12:25 < bridge> <baslcaly>         await get_tree().create_timer(1).timeout
12:25 < bridge> <baslcaly> ```
12:25 < bridge> <baslcaly> extends Node
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly> var Bank = 0
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly> var Cookie = 0
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly> var CookiePerClick = 1
12:25 < bridge> <baslcaly> 
12:25 < bridge> <baslcaly> var Clicked = 0
12:30 < bridge> <robyt3> Looks like `file` is `null`, which would indicate that the file could not be opened successfully
14:57 < bridge> <shibastik> bot can talk here?
14:57 < bridge> <shibastik> Ah no
14:57 < bridge> <shibastik> Bad bot
14:57 < bridge> <DDNet> :(
15:47 < bridge> <timakro> can someone on windows with chrome 129 or higher test a new trashmap feature for me? you should see this option on https://trashmap.ddnet.org
15:47 < bridge> <timakro> https://cdn.discordapp.com/attachments/293493549758939136/1297556728023355444/image.png?ex=67165b5f&is=671509df&hm=d51df670d76184c3fb2d20602e54c40ba8fb7111e23de0bc4aee7edc483c32bd&
15:47 < bridge> <timakro> i couldn't test it on windows yet
15:50 < bridge> <kekomonter> hey bad bot
15:50 < bridge> <DDNet> :C
15:50 < bridge> <kekomonter> bot
15:50 < bridge> <kekomonter> good bot
15:50 < bridge> <DDNet> :3
15:56 < bridge> <kekomonter> https://cdn.discordapp.com/attachments/293493549758939136/1297559061348483102/image.png?ex=67165d8b&is=67150c0b&hm=fe50144122b479f19c32d5b090e7dcaea92aa61f81e0b4f82661a906e4198727&
17:08 < bridge> <milkeeycat> @learath2 where is a good place to put symbol table in a compiler? Currently I have it in `Block`(it contains vector of statements and symbol table
17:12 < bridge> <jxsl13> getting this error after updating macos:   cargo:warning=src/../include/cxx.h:2:10: fatal error: 'algorithm' file not found
17:12 < bridge> <jxsl13> trying to compile 99% ddnet ccode base
17:13 < bridge> <jxsl13> ```
17:13 < bridge> <jxsl13> running: env -u IPHONEOS_DEPLOYMENT_TARGET "c++" "-O3" "-ffunction-sections" "-fdata-sections" "-fPIC" "-arch" "arm64" "-Wall" "-Wextra" "-std=c++11" "-o" "/Users/john/Desktop/Development/ddnet-insta/build/release/build/cxx-06d76dbfffd32258/out/src/cxx.o" "-c" "src/cxx.cc"
17:13 < bridge> <jxsl13>   cargo:warning=In file included from src/cxx.cc:1:
17:13 < bridge> <jxsl13>   cargo:warning=src/../include/cxx.h:2:10: fatal error: 'algorithm' file not found
17:13 < bridge> <jxsl13>   cargo:warning=    2 | #include <algorithm>
17:13 < bridge> <jxsl13>   cargo:warning=      |          ^~~~~~~~~~~
17:13 < bridge> <jxsl13>   cargo:warning=1 error generated.
17:13 < bridge> <jxsl13>   exit status: 1
17:13 < bridge> <jxsl13> ```
17:14 < bridge> <jxsl13> maybe someone has got an idea how to fix
17:52 < bridge> <learath2> I would have 2 probably. A block local symbol table and a TU local (or technically global) symbol table for symbols that will be getting exported or shared
17:53 < bridge> <learath2> Or maybe a single symbol table that grows and you search in a fifo manner
17:53 < bridge> <learath2> Or maybe a single symbol table that grows and you search in a lifo manner
20:26 < bridge> <milkeeycat> I just wanted to know if it's ok to store the symbol tables in the same struct as statements
20:26 < bridge> <milkeeycat> I want to refactor the parser to only generate ast and do nothing with the symbol table
21:03 < bridge> <jxsl13> deleting /Library/Developer/CommandLineTools/SDKs/ and reinstallling xcode/commandline tools seems to have fixed the problem...
