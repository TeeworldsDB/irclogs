02:00 <+bridge> [ddnet] <heinrich5991> check in wireshark
05:09 <+bridge> [ddnet] <Voxel> so i got wireshark
05:09 <+bridge> [ddnet] <Voxel> uhhh how to i find ddnet packets LOL
06:57 <+bridge> [ddnet] <Headshot> i think i'm losing my mind trying to get this to work
07:31 <+bridge> [ddnet] <uwu> Try with port
07:31 <+bridge> [ddnet] <uwu> Or by receiver ip
07:38 <+bridge> [ddnet] <Voxel> reciever ip should be my ip, right?
07:54 <+bridge> [ddnet] <uwu> Server ip you are sinding packets to
07:54 <+bridge> [ddnet] <uwu> Server ip you are sending packets to
07:54 <+bridge> [ddnet] <Jupstar ✪> If you struggle with something specific just name it
08:23 <+bridge> [ddnet] <Tomstar Thomas> Huge discount on all stuffs for the end of year,  click link to see what my vendor has for  you https://t.me/pacexoitic
08:44 <+bridge> [ddnet] <uwu> <https://youtu.be/7Fu87-f4mSc>
08:44 <+bridge> [ddnet] <uwu> this is how you make it, kinda
08:44 <+bridge> [ddnet] <uwu> im not wireshark guru
08:51 <+bridge> [ddnet] <uwu> also there are wireshark plugins afaik, maybe someone already made one to decipher tw packet, ot you can do it yourself :brownbear:
08:51 <+bridge> [ddnet] <uwu> also there are wireshark plugins afaik, maybe someone already made one to decipher tw packet, or you can do it yourself :brownbear:
08:54 <+bridge> [ddnet] <uwu> oh, heinrich made one, but its in rust, so idk how to install it
08:58 <+bridge> [ddnet] <uwu> ok nvm, there is a guide
08:58 <+bridge> [ddnet] <uwu> <https://github.com/heinrich5991/libtw2/tree/master/wireshark-dissector>
09:20 <+bridge> [ddnet] <deen> @Jupeyy_Keks no complaints from nightly users yet on Vulkan default, nice
10:16 <+bridge> [ddnet] <Jupstar ✪> Probably not many using nightly tho^^
10:36 <+bridge> [ddnet] <deen> More than beta
10:36 <+bridge> [ddnet] <deen> https://cdn.discordapp.com/attachments/293493549758939136/1052881753448128552/Screenshot_2022-12-15_at_10.36.07.png
10:36 <+bridge> [ddnet] <deen> More than RCs
10:49 <+bridge> [ddnet] <bencie> does the beta branch also have the updates of RCS? cuz i always run on RCS but if nightly updates earlier then i don't see a point in using it instead if nightly
10:50 <+bridge> [ddnet] <Jupstar ✪> Usually yes. But sometimes one day delayed
10:50 <+bridge> [ddnet] <Jupstar ✪> E.g. If not merged yet
10:50 <+bridge> [ddnet] <Jupstar ✪> Versioning is sometimes different tho
10:50 <+bridge> [ddnet] <Jupstar ✪> But that's not related to the implemented features
10:51 <+bridge> [ddnet] <bencie> also, when running DDNET on steam, you can select whether to run the game or run starting with vulkan renderer, so wouldn't it make sense to make that button OpenGL now, since vulkan is default?
10:51 <+bridge> [ddnet] <Jupstar ✪> We want to remove that again
10:51 <+bridge> [ddnet] <Jupstar ✪> As long as the client starts some how it's fine
10:52 <+bridge> [ddnet] <bencie> That's nice to hear actually, its slightly annoying to always have to press an extra button when running from steam
10:52 <+bridge> [ddnet] <Jupstar ✪> Definitely
11:22 <+bridge> [ddnet] <deen> Will be removed in next version if all goes well. In the meantime you can right click on the game and create a shortcut to desktop
11:22 <+bridge> [ddnet] <deen> then it's without the option I understand
11:24 <+bridge> [ddnet] <deen> The point is that RC is more stable than nightly, but less stable than release. We need it to stabilize things for a week until release to catch the bugs without adding new features in the meantime
11:24 <+bridge> [ddnet] <deen> The point is that RC is more stable than nightly, but less stable than release. We need it to stabilize things for a week until release to catch the bugs without adding new features (and thus potential new bugs) in the meantime
11:30 <+bridge> [ddnet] <bencie> Right, thanks for the explanations
14:00 <+bridge> [ddnet] <Learath2> @Ryozuki have you seen gccrs got merged?
14:01 <+bridge> [ddnet] <Learath2> It will be shipped on gcc 13.1
14:02 <+bridge> [ddnet] <Learath2> It doesn't even have the borrow checker yet, but still it is a start
14:04 <+bridge> [ddnet] <heinrich5991> I think they told people not to get hyped over it
14:04 <+bridge> [ddnet] <heinrich5991> it's not usabel
14:04 <+bridge> [ddnet] <heinrich5991> it's not usable
14:07 <+bridge> [ddnet] <Ryozuki> tbh i dont know what to think
14:07 <+bridge> [ddnet] <Ryozuki> its good cuz gcc supports more
14:08 <+bridge> [ddnet] <Ryozuki> but i hope it doesnt become a problem like c++
14:08 <+bridge> [ddnet] <Ryozuki> where u gotta care about diferent impls
14:08 <+bridge> [ddnet] <heinrich5991> do you have to care about different impls in c++?
14:09 <+bridge> [ddnet] <heinrich5991> i.e. can you give an example?
14:10 <+bridge> [ddnet] <Jupstar ✪> I hope gcc backend is faster than llvm , performance of binary wise, like on c
14:11 <+bridge> [ddnet] <Jupstar ✪> I never touch gcc except for release builds xd. It's just too good
14:12 <+bridge> [ddnet] <Learath2> If you care about different implementations in C/C++ you are very likely doing something wrong
14:13 <+bridge> [ddnet] <Learath2> I can foresee a problem with Rust where there is no standard to resolve implementation differences though
14:14 <+bridge> [ddnet] <Ryozuki> isnt there implementation defined behaviour?
14:14 <+bridge> [ddnet] <Ryozuki> if gccrs follows rustc exactly same i got no problem
14:14 <+bridge> [ddnet] <heinrich5991> yes. I was asking where **you** care about different implementation behavior
14:15 <+bridge> [ddnet] <heinrich5991> not some hypotheticals
14:15 <+bridge> [ddnet] <Ryozuki> just the fact it exists is bad design to me
14:15 <+bridge> [ddnet] <Ryozuki> i havent done much c++ lately so idk rn
14:15 <+bridge> [ddnet] <heinrich5991> then rust is a lot worse
14:15 <+bridge> [ddnet] <Ryozuki> rust only has 1 impl
14:15 <+bridge> [ddnet] <Ryozuki> so its not a problem
14:15 <+bridge> [ddnet] <Ryozuki> rustc is the only way rust is
14:15 <+bridge> [ddnet] <heinrich5991> yes, and that implemetation will change behavior
14:15 <+bridge> [ddnet] <heinrich5991> since we have no spec, we don't know which behavior is correct
14:15 <+bridge> [ddnet] <Ryozuki> well for me the one from rustc
14:15 <+bridge> [ddnet] <heinrich5991> rustc which version?
14:15 <+bridge> [ddnet] <Learath2> Implementation defined behaviour is veery specific stuff. Like locale specific behaviour
14:15 <+bridge> [ddnet] <Ryozuki> good stuff of only having 1
14:16 <+bridge> [ddnet] <Ryozuki> anyway ur probs right it probs doesnt matter
14:16 <+bridge> [ddnet] <Learath2> The very latest version I presume
14:16 <+bridge> [ddnet] <Ryozuki> but its the main concern
14:16 <+bridge> [ddnet] <Ryozuki> i seen in rust reddit
14:17 <+bridge> [ddnet] <Ryozuki> rust is mostly backwards compat
14:17 <+bridge> [ddnet] <Ryozuki> actually it is
14:17 <+bridge> [ddnet] <Learath2> It’s imo good. This sort of uncertainty will finally hopefully force rust to write down the rules
14:17 <+bridge> [ddnet] <heinrich5991> I just repeat what others say, without understanding it? ^^
14:17 <+bridge> [ddnet] <heinrich5991> c++ compilers are mostly compatible with each others
14:17 <+bridge> [ddnet] <Ryozuki> also in rust docs they often clearly say when something should not be assumed
14:18 <+bridge> [ddnet] <Jupstar ✪> I hope not tbh
14:18 <+bridge> [ddnet] <heinrich5991> except when they don't and it changes
14:18 <+bridge> [ddnet] <Ryozuki> https://doc.rust-lang.org/reference/
14:18 <+bridge> [ddnet] <Ryozuki> there is this tho
14:18 <+bridge> [ddnet] <Jupstar ✪> I think it's great that rust can™️ just break any struct layout if it thinks it's faster
14:18 <+bridge> [ddnet] <Learath2> Doesn’t mean they have to employ the wg14 method of standardization where nothing can change ever again
14:18 <+bridge> [ddnet] <Jupstar ✪> That's true^^
14:19 <+bridge> [ddnet] <Learath2> It’s good to have a book of rules that you can refer to that concretely tells you what the prescribed behaviour is
14:19 <+bridge> [ddnet] <Jupstar ✪> It also depends on if u want to mix both compilers
14:19 <+bridge> [ddnet] <heinrich5991> this seems unrelated to having a spec
14:19 <+bridge> [ddnet] <heinrich5991> in fact the spec currently says what you say
14:19 <+bridge> [ddnet] <heinrich5991> in fact the reference currently says what you say
14:20 <+bridge> [ddnet] <Jupstar ✪> Didn't we talk about implementation defined behavior?
14:20 <+bridge> [ddnet] <Ryozuki> it doesnt break, it just says u cant rely on the order u put the fields cuz rust automatically moves them around to find the best align
14:20 <+bridge> [ddnet] <Ryozuki> or fitting idk
14:21 <+bridge> [ddnet] <Jupstar ✪> Ok but if u static link a lib that could break between compilers can't it?
14:21 <+bridge> [ddnet] <Ryozuki> u use repr(C)
14:21 <+bridge> [ddnet] <Jupstar ✪> So it's not guaranteed
14:21 <+bridge> [ddnet] <Ryozuki> for when u want known order
14:21 <+bridge> [ddnet] <Jupstar ✪> Anyway I'm confused now bye
14:21 <+bridge> [ddnet] <Ryozuki> hmm idk if it can break between compilers
14:21 <+bridge> [ddnet] <Ryozuki> oh ok bye
14:22 <+bridge> [ddnet] <heinrich5991> yes, that's implementation defined behavior between versions of rustc, even
14:22 <+bridge> [ddnet] <heinrich5991> that implementation defined behavior seems alright to me
14:22 <+bridge> [ddnet] <Ryozuki> ye
14:22 <+bridge> [ddnet] <Learath2> Implementation defined behaviour is really niche stuff. The amount of bits in a byte. The way integers are represented. The values of signals
14:23 <+bridge> [ddnet] <Ryozuki> anyway what we comment has no change on what will happen
14:23 <+bridge> [ddnet] <Ryozuki> we dont control rustc kek
14:23 <+bridge> [ddnet] <heinrich5991> hence we shouldn't talk about it?
14:23 <+bridge> [ddnet] <Ryozuki> meh
14:23 <+bridge> [ddnet] <heinrich5991> and wdym? user input can change rustc decisions
14:24 <+bridge> [ddnet] <heinrich5991> in fact, that's e.g. why `usize` is called `usize` in rust
14:24 <+bridge> [ddnet] <Ryozuki> well i think no matter the amount of input u cant stop someone from implementing gccrs
14:25 <+bridge> [ddnet] <heinrich5991> this was a proposal that users had, which was declined once and then still added because people really didn't like the old names
14:25 <+bridge> [ddnet] <Learath2> I don’t agree that all discussions have to lead to concrete change. It’s also for self improvement. I learn a lot of stuff just during idle discussions with people
14:25 <+bridge> [ddnet] <Ryozuki> yeah my bad
14:25 <+bridge> [ddnet] <Ryozuki> xD
14:26 <+bridge> [ddnet] <Ryozuki> idk if a spec is good rn
14:26 <+bridge> [ddnet] <Ryozuki> maybe the language can still improve
14:26 <+bridge> [ddnet] <Ryozuki> well it can
14:26 <+bridge> [ddnet] <Ryozuki> i wonder how a spec makes changingg more difficulñt
14:27 <+bridge> [ddnet] <Ryozuki> i wonder how a spec makes changingg more difficult
14:27 <+bridge> [ddnet] <Ryozuki> also there is one spec made
14:27 <+bridge> [ddnet] <Ryozuki> or an attempt
14:27 <+bridge> [ddnet] <Ryozuki> but not oficial
14:27 <+bridge> [ddnet] <Ryozuki> https://spec.ferrocene.dev/
14:27 <+bridge> [ddnet] <Learath2> I doubt it’d change much. It just adds a bit more work to changes, you have to actually think about the prescribed behaviour
14:29 <+bridge> [ddnet] <Learath2> Aaaanyway, we’ll see in due time how they decide to handle the fact that there will now be more than one rust compiler
14:29 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1052940518381863003/image.png
14:29 <+bridge> [ddnet] <Ryozuki> with this u can do the typical standard mention
14:29 <+bridge> [ddnet] <Ryozuki> they do in c++
14:29 <+bridge> [ddnet] <Ryozuki> ur wrong! point 4.3.2.1 says this!
14:29 <+bridge> [ddnet] <Learath2> As you said, no one can really stop people from implementing a gccrs
14:31 <+bridge> [ddnet] <Learath2> Idk how much value there is in a descriptive unofficial standard. Because the reply to this would be “rustc does this, so u and ur unofficial standard are wrong”
14:31 <+bridge> [ddnet] <Learath2> With C++ you can say “your compiler is wrong, period’
14:32 <+bridge> [ddnet] <Ryozuki> i know, but they did this standard following what rustc does
14:32 <+bridge> [ddnet] <Ryozuki> dont think as c++ here
14:32 <+bridge> [ddnet] <Ryozuki> its not wrong to use rustc as the base point for the standard
14:32 <+bridge> [ddnet] <Ryozuki> since its the only one
14:32 <+bridge> [ddnet] <Ryozuki> rn
14:32 <+bridge> [ddnet] <Ryozuki> also its done by very important ppl in the rust scene
14:32 <+bridge> [ddnet] <Ryozuki> ferrous systems did rust-analyzer
14:33 <+bridge> [ddnet] <Ryozuki> and rust-analyzer is like a second compiler
14:33 <+bridge> [ddnet] <Ryozuki> made just to check
14:33 <+bridge> [ddnet] <Ryozuki> xD
14:33 <+bridge> [ddnet] <Learath2> But at some point if the rustc and the standard disagrees. It’s what rustc does that’s important, right?
14:33 <+bridge> [ddnet] <Ryozuki> https://rust-analyzer.github.io/
14:33 <+bridge> [ddnet] <Ryozuki> yeah
14:33 <+bridge> [ddnet] <Ryozuki> thats why at some point the standard needs to be made "oficial"
14:33 <+bridge> [ddnet] <Ryozuki> and then rustc follow the standard and not the other way around
14:34 <+bridge> [ddnet] <Learath2> I guess something like gccrs can be a good push for that change
14:35 <+bridge> [ddnet] <Ryozuki> i wonder if gccrs will split the compiler devs
14:35 <+bridge> [ddnet] <Ryozuki> its already lot of work to do one
14:35 <+bridge> [ddnet] <Ryozuki> https://github.com/rust-lang/rust
14:35 <+bridge> [ddnet] <Ryozuki> is insanely big
14:35 <+bridge> [ddnet] <Ryozuki> by amount of contributors too
14:36 <+bridge> [ddnet] <Ryozuki> 210.000 commits lol
14:36 <+bridge> [ddnet] <Learath2> That is actually a concern, hopefully gccrs does get a dedicated team without pulling from rustc people
14:37 <+bridge> [ddnet] <Learath2> How big is the rustc team anyway? In clang and gcc there are a lot of small collaborators but there are some people that do an insane amount of work on their own
14:41 <+bridge> [ddnet] <Ryozuki> anyone can make prs
14:41 <+bridge> [ddnet] <Ryozuki> but the team is here:
14:41 <+bridge> [ddnet] <Ryozuki> https://www.rust-lang.org/governance
14:42 <+bridge> [ddnet] <Ryozuki> https://github.com/oli-obk
14:42 <+bridge> [ddnet] <Ryozuki> this guy does a lot
14:43 <+bridge> [ddnet] <Ryozuki> https://www.rust-lang.org/governance/teams/compiler
17:12 <+bridge> [ddnet] <heinrich5991> https://github.com/obsproject/obs-studio/pull/7926
17:13 <+bridge> [ddnet] <heinrich5991> uses rust ^^
18:08 <+bridge> [ddnet] <Nouaa> This suggestion was quite interesting to me, sometimes you don't want the guy to know you are looking at his points (while not knowing the website exists), it also makes the chat spammy imo, and as you mentioned (deen), I don't really think beginners need to deal with such numbers. It doesn't matter anymore because the guy ran away and closed the issue :cammo:
18:08 <+bridge> [ddnet] <Jupstar ✪> join with dummy
18:15 <+bridge> [ddnet] <Nouaa> What if u're already playing with it
18:16 <+bridge> [ddnet] <Nouaa> Did u mean like hiding?
18:16 <+bridge> [ddnet] <Jupstar ✪> yeah just meant fake identity xd
18:25 <+bridge> [ddnet] <Nouaa> @Jupeyy_Keks perhaps I have misunderstood something?
18:26 <+bridge> [ddnet] <Nouaa> Oh ok
18:26 <+bridge> [ddnet] <Jupstar ✪> dunno, i guess u simply didnt read deens msg xD
18:26 <+bridge> [ddnet] <Nouaa> Yeah, did not real fully
18:27 <+bridge> [ddnet] <Nouaa> Yeah, did not reald fully
18:27 <+bridge> [ddnet] <Nouaa> Yeah, did not read fully
18:45 <+bridge> [ddnet] <Nouaa> Yeah, did not fully read
19:26 <+bridge> [ddnet] <Voxel> Do you think we should move the borders button to the new Tools tab?
19:29 <+bridge> [ddnet] <deen> Sounds good
19:31 <+bridge> [ddnet] <uwu> If you don't want someone to look at your points play on local server and host local db, or press kill on finishes on main servers and note in ut notepad that you did the map
19:37 <+bridge> [ddnet] <Alexander> The point was to have a way to check someones points easily without them knowing for whatever reason
19:38 <+bridge> [ddnet] <Nouaa> uhm? you are free to give your opinion, but not to impose it. also, i wasn't really referring to someone looking at my points, but rather to the fact that you absolutely don't want the guy to know that you are checking his points, this can be for some reasons, like when you don't want to look "toxic" by checking someone's points because he did something wrong or because he is just bad
19:39 <+bridge> [ddnet] <Alexander> Instead of a whole new command maybe it would be better to just add another optional parameter to the points command. Something like `/points Aca^ local` would print out the points of the player to you only
19:39 <+bridge> [ddnet] <uwu> Nouaa's reply sounded like he doesnt want someone to know how much points he has
19:40 <+bridge> [ddnet] <DefaultO> can't you just switch the server?
19:40 <+bridge> [ddnet] <DefaultO> or open the game twice and joining another server?
19:40 <+bridge> [ddnet] <uwu> I didnt impose my opinion? Maybe my reply sounded a bit aggressive, but no hate was intended
19:40 <+bridge> [ddnet] <Nouaa> it doesn't, someone can check my points without me noticing
19:40 <+bridge> [ddnet] <DefaultO> or opening the game twice and joining another server?
19:40 <+bridge> [ddnet] <Alexander> If im playing then it would be easier to open a browser or another client
19:41 <+bridge> [ddnet] <uwu> If guy want to be toxic he can just cope paste ur points into chat
19:41 <+bridge> [ddnet] <uwu> If guy want to be toxic he can just copy paste ur points into chat
19:41 <+bridge> [ddnet] <Nouaa> ye, no problem, so as not to create drama, let's forget it 🙂
19:41 <+bridge> [ddnet] <cyberfighter> ??????
19:42 <+bridge> [ddnet] <cyberfighter> 0 points
19:46 <+bridge> [ddnet] <Nouaa> I still don't see a bad reason not to add it @uwu, you think it's useless but it's actually useful to me because it improves the player experience by reducing "awkward" moments
19:47 <+bridge> [ddnet] <Nouaa> this is my point of view, and in the meantime, showing the players points as suggested in the issue would be a fire
19:48 <+bridge> [ddnet] <Nouaa> this is my point of view, and in the meantime, showing the players points as suggested in the issue would be fire
19:48 <+bridge> [ddnet] <uwu> I think adding new command or argument to see them locally actually a good feature, but initial and heinrich's formulations made me thing you wont be able to look points publicly anymore
19:48 <+bridge> [ddnet] <Nouaa> this is my point of view, and btw, showing the players points as suggested in the issue would be fire
19:49 <+bridge> [ddnet] <Alexander> yeah i think it should stay as it is where it shows globally but with an option to display it locally
19:50 <+bridge> [ddnet] <Nouaa> no option/argument needed it it's shown directly in the scoreboard
19:52 <+bridge> [ddnet] <Nouaa> no option/argument needed if it's shown directly in the scoreboard
19:53 <+bridge> [ddnet] <Nouaa> I have trouble writing from my phone lmao, always need to edit my messages
20:29 <+bridge> [ddnet] <Avolicious> Omg, why is Visual Studio git stuff so complicated... Another reason why I use VS Code
20:34 <+bridge> [ddnet] <uwu> Just use jetbrains ides:greenthing:
20:34 <+bridge> [ddnet] <uwu> Just use jetbrains IDEs:greenthing:
20:50 <+bridge> [ddnet] <louis> delete it
20:52 <+bridge> [ddnet] <Voxel> What do you think should replace it
20:53 <+bridge> [ddnet] <louis> nothing
20:53 <+bridge> [ddnet] <Voxel> i mean the button is shared with everything else
21:07 <+bridge> [ddnet] <ReiTW> 🤓
21:12 <+bridge> [ddnet] <Nouaa> windows notepad is the best for coding
21:13 <+bridge> [ddnet] <uwu> Microsoft word 2007 is best IDE so far
21:57 <+bridge> [ddnet] <uwu> happy kernel day to my os 🥳
21:57 <+bridge> [ddnet] <uwu> https://cdn.discordapp.com/attachments/293493549758939136/1053053327862136902/image.png
22:11 <+bridge> [ddnet] <uwu> But had to reinstall nvidia drivers cuz they died for some reason
22:23 <+bridge> [ddnet] <Nagi01 {LAN}> https://cdn.discordapp.com/attachments/293493549758939136/1053059636321853450/image.png
22:23 <+bridge> [ddnet] <Nagi01 {LAN}> fedora gang
22:23 <+bridge> [ddnet] <ReiTW> What about the new gnome design
22:23 <+bridge> [ddnet] <Nagi01 {LAN}> gnome 43 ?
22:23 <+bridge> [ddnet] <ReiTW> Y
22:23 <+bridge> [ddnet] <Nagi01 {LAN}> way better than the previous versions imo
22:24 <+bridge> [ddnet] <Nagi01 {LAN}> they removed icons on the desktop
22:25 <+bridge> [ddnet] <Nagi01 {LAN}> it's simpler and more efficient
23:15 <+bridge> [ddnet] <uwu> Raspberry pi gaming...?:justatest:
23:16 <+bridge> [ddnet] <Jupstar ✪> better than the ppl with 1995 pc xd
23:16 <+bridge> [ddnet] <Jupstar ✪> but im scared about 32bit
23:16 <+bridge> [ddnet] <Jupstar ✪> i'd prefer it dies out xD
23:17 <+bridge> [ddnet] <uwu> I should try running ddnet on arduino and later create issue so you guys take care of it:greenthing:
23:46 <+bridge> [ddnet] <Chairn> @Ryozuki is that you?
23:46 <+bridge> [ddnet] <Chairn> https://www.reddit.com/r/ProgrammerHumor/comments/zmptw5/very_new_to_programming_how_do_i_deal_with_this/
23:47 <+bridge> [ddnet] <Ryozuki> no
23:47 <+bridge> [ddnet] <Ryozuki> i dont use laptops
23:48 <+bridge> [ddnet] <Ryozuki> i have a master race pc
23:48 <+bridge> [ddnet] <Ryozuki> imagine not compiling ddnet under 24 secs
23:48 <+bridge> [ddnet] <Jupstar ✪> Xddddd
23:48 <+bridge> [ddnet] <Voxel> so i read both this and got the plugin, but when i build my client and try to test my changes in a map it isnt detected as TW
23:49 <+bridge> [ddnet] <Voxel> so i read both this and got the plugin, but when i build my client and try to test my changes in a map the protocol isnt detected as TW
23:52 <+bridge> [ddnet] <Learath2> Is a force push the only way the previous head of a branch gets orphaned?
23:53 <+bridge> [ddnet] <deen> You could also delete the branch
23:53 <+bridge> [ddnet] <deen> or rebase
23:53 <+bridge> [ddnet] <deen> or squash commits
23:53 <+bridge> [ddnet] <deen> oh, but for the remote branch, all of that requires a force push
23:53 <+bridge> [ddnet] <deen> git is append only
