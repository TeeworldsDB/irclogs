00:42 < bridge> <zwelf2> Fixed quite a few panics now. I think will likely run through now.
00:59 < bridge> <chillerdragon> lmao
01:02 < ws-client> <ChillerDragon> @Jupstar ‚ú™ whats the name or ur project again? it somehow doesn't stick with me
01:02 < ws-client> <ChillerDragon> also have you thought about live map updates? How hard would it be to build minetee?
01:05 < bridge> <teero777> didn't you already do that chiler?
01:27 < ws-client> <ChillerDragon> minetee?
01:27 < ws-client> <ChillerDragon> ye in cring c++ version
01:27 < ws-client> <ChillerDragon> but i mean epyc rust roblox jopsti game engine
01:56 < bridge> <teero777> Ah lol
03:39 < bridge> <headshotnoby> damn the embed revealed my un-edited message
05:33 < bridge> <Ewan> true
08:19 < bridge> <headshotnoby> wii fails at connecting to a server spectacularly
08:19 < bridge> <headshotnoby> https://cdn.discordapp.com/attachments/293493549758939136/1228952823564210198/image.png?ex=662dea81&is=661b7581&hm=63767a1af187d15eb813fec33bcfa511475002380212aa97e0bf5eb4a97457a3&
10:20 < bridge> <robyt3> Did you fix `detect.h` for the Wii endianness? Last time I saw some log messages from this project it said "unknown endianness"
10:20 < bridge> <robyt3> New `detect.h` doesn't allow compiling with unknown endianness
10:21 < bridge> <headshotnoby> CONF_ARCH_ENDIAN_BIG is defined, yes
10:46 < bridge> <milkeeycat> what features would make C better and more convenient language in your opinion? üòÑ
10:52 < bridge> <Ewan> Oops
10:52 < bridge> <Ewan> Oop
10:53 < bridge> <milkeeycat> ```c
10:53 < bridge> <milkeeycat> struct Foo {
10:53 < bridge> <milkeeycat>     int bar;
10:53 < bridge> <milkeeycat> 
10:53 < bridge> <milkeeycat>     static Foo new(int bar) {
10:53 < bridge> <milkeeycat>         return {
10:53 < bridge> <milkeeycat>             .bar = bar
10:53 < bridge> <milkeeycat>         };
10:53 < bridge> <milkeeycat>     }
10:53 < bridge> <milkeeycat> 
10:53 < bridge> <milkeeycat>     int gimme_bar(void) {
10:53 < bridge> <milkeeycat>         return this->bar;
10:53 < bridge> <milkeeycat>     }
10:53 < bridge> <milkeeycat> };
10:53 < bridge> <milkeeycat> 
10:53 < bridge> <milkeeycat> int main() {
10:53 < bridge> <milkeeycat>     Foo foo = Foo::new(69);
10:53 < bridge> <milkeeycat>     int val = foo.gimme_bar(); // 69
10:53 < bridge> <milkeeycat> 
10:53 < bridge> <milkeeycat>     return 0;
10:53 < bridge> <milkeeycat> }
10:53 < bridge> <milkeeycat> ```
10:53 < bridge> <milkeeycat> i think this would be enough for me xd
10:59 < bridge> <learath2> Namespaces, a new stdlib, some sort of metaprogramming capability maybe templating
10:59 < bridge> <milkeeycat> https://tenor.com/view/pepo-g-peepo-gif-22945943
11:02 < bridge> <Jupstar ‚ú™> RAII
11:02 < bridge> <Jupstar ‚ú™> without RAII a language directly sucks
11:02 < bridge> <Jupstar ‚ú™> üòè
11:03 < bridge> <learath2> I think I'd take defer statements over raii
11:04 < bridge> <Jupstar ‚ú™> does that work together with struct members?
11:04 < bridge> <Jupstar ‚ú™> or is it just an execution model
11:04 < bridge> <learath2> Deferred statements execute at the exit of a function (or a block if the language wants)
11:04 < bridge> <Jupstar ‚ú™> i can't really imagine a use case, looking at the go examples
11:05 < bridge> <learath2> You can't because you live in a world with raii üòÑ
11:05 < bridge> <learath2> Imagine a world with no constructors no destructors. Then it's useful
11:05 < bridge> <learath2> Think of it as explicit destructora
11:06 < bridge> <Jupstar ‚ú™> so basically u evaluate the arguments directly but put the "destructor" the function that handles the arguments at the end?
11:06 < bridge> <learath2> Think of it as explicit destructors that you schedule to run at exit of block
11:06 < bridge> <Jupstar ‚ú™> mh yeah
11:06 < bridge> <Jupstar ‚ú™> i guess can be useful too, since it's more flexible than always surrond eveyrthing in struccts
11:07 < bridge> <Jupstar ‚ú™> i guess can be useful too, since it's more flexible than always surround everything in structs
11:07 < bridge> <learath2> When things are evaluated allows for some cute trickery. But it's not the point. It just lets you have something akin to atexit but at a function level (in gos case)
11:08 < bridge> <learath2> It would be great in C because properly cleaning up after yourself is the cleanest with ugly goto statements otherwise
11:08 < bridge> <learath2> (Or objects and raii, that would also be a solution to the same thing)
11:09 < bridge> <Jupstar ‚ú™> well what i like about RAII esp in rust is:
11:09 < bridge> <Jupstar ‚ú™> - if the "contructor" returned no error, you can assume the object 100% exists, and cleans up itself
11:09 < bridge> <Jupstar ‚ú™> - ^ => if you strictly follow this pattern and try to not use Option<> to often, your inner logic doesn't require so much error handling
11:09 < bridge> <Jupstar ‚ú™> 
11:09 < bridge> <Jupstar ‚ú™> + i combine it with my hiarc, which basically prevents circling dependencies of struct members
11:10 < bridge> <Jupstar ‚ú™> i mean on function level that defs sounds useful maybe sometimes
11:10 < bridge> <Jupstar ‚ú™> it's like RAII for logic, if i imagine it correctly
11:11 < bridge> <learath2> Raii is definitely more hands off and easier to get right.  But you know me, I'm a more natural selection enjoyer. I'd rather have the flexibility and give the user the option to footgun
11:13 < bridge> <Jupstar ‚ú™> well who knows, maybe u need to shoot into your foot 10000 times to find an ever better approach than anything we know now üòÑ
11:13 < bridge> <learath2> ```c
11:13 < bridge> <learath2> FILE *f = fopen(f);
11:13 < bridge> <learath2> defer fclose(f);
11:13 < bridge> <learath2> ...
11:13 < bridge> <learath2> ...
11:13 < bridge> <learath2> ```
11:13 < bridge> <learath2> This is the usual pattern in a language with defer
11:13 < bridge> <Jupstar ‚ú™> ah ok, i thought about it more like an transaction üòÑ
11:14 < bridge> <learath2> The footgun is forgetting to defer an fclose, since it's not done for you like with raii through destructors
11:14 < bridge> <Jupstar ‚ú™> change values as you want but then revert it under certain conditions or whatever
11:14 < bridge> <learath2> Ah, no but that does sound interesting. I'll ponder it maybe we can have a new language
11:14 < bridge> <Jupstar ‚ú™> true, for c that would defs already be an improvement
13:20 < bridge> <reitw> @ryozuki windows ü§° https://blog.rust-lang.org/2024/04/09/cve-2024-24576.html
13:34 < bridge> <ryozuki> xd
13:34 < bridge> <ryozuki> old
15:28 < ws-client> <ChillerDragon> @Jupstar ‚ú™ ah right you said you wanted to keep the in game code close to the editor so in game is also flexible ye that makes sense. nice
15:34 < ws-client> <ChillerDragon> lerato are you a jai enjoyer?
15:35 < ws-client> <ChillerDragon> i saw defer in C code in tsoding videos
17:12 < bridge> <0xdeen> @zwelf2 I'm still getting a bunch of panics:
17:12 < bridge> <0xdeen> ```
17:12 < bridge> <0xdeen> thread '<unnamed>' panicked at twgame/src/net_msg.rs:470:39:
17:12 < bridge> <0xdeen> not yet implemented
17:12 < bridge> <0xdeen> ```
17:12 < bridge> <0xdeen> ```
17:12 < bridge> <0xdeen> thread '<unnamed>' panicked at twgame/src/net_msg.rs:474:38:
17:12 < bridge> <0xdeen> not yet implemented
17:12 < bridge> <0xdeen> ```
17:12 < bridge> <0xdeen> ```
17:12 < bridge> <0xdeen> thread '<unnamed>' panicked at validator/src/lib.rs:858:21:
17:12 < bridge> <0xdeen> assertion failed: team.load
17:12 < bridge> <0xdeen> ```
18:16 < bridge> <Jupstar ‚ú™> @robyt3 what is on your UI todo list? inspire me please
18:17 < bridge> <robyt3> I'm currently refactoring the scoreboard
18:18 < bridge> <Jupstar ‚ú™> do you make a awesome fng scoreboard?
18:19 < bridge> <Jupstar ‚ú™> i'll soon have to implement the settings ui for tees
18:19 < bridge> <Jupstar ‚ú™> 
18:19 < bridge> <Jupstar ‚ú™> i wonder how i want to design it. UI is always so much tryhard :lol:
18:20 < bridge> <robyt3> For team based modes I took some ideas from 0.7 (colors titles, score in the middle)
18:20 < bridge> <robyt3> https://cdn.discordapp.com/attachments/293493549758939136/1229103924443873382/screenshot_2024-04-14_18-18-59.png?ex=662e773b&is=661c023b&hm=97887acc7d179006904229c3845d59afed967cbb9a4685d372ae908523c14ca4&
18:20 < bridge> <robyt3> For team based modes I took some ideas from 0.7 (colored titles, score in the middle)
18:20 < bridge> <robyt3> https://cdn.discordapp.com/attachments/293493549758939136/1229103924443873382/screenshot_2024-04-14_18-18-59.png?ex=662e773b&is=661c023b&hm=97887acc7d179006904229c3845d59afed967cbb9a4685d372ae908523c14ca4&
18:20 < bridge> <Jupstar ‚ú™> ah epyc
18:21 < bridge> <robyt3> Eventually scoreboard height could also be adjusted so it only takes up as much space as necessary
18:21 < bridge> <robyt3> 0.7 for reference
18:21 < bridge> <robyt3> https://cdn.discordapp.com/attachments/293493549758939136/1229104345367314492/vanilla.png?ex=662e779f&is=661c029f&hm=65b71be46438cfb6681ce348a2b0febd0d643a6870e49516214a39de9ac81ee1&
18:23 < bridge> <Jupstar ‚ú™> mh, i decided against that for my fng scoreboard, it looks so weird üòÑ
18:25 < bridge> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1229105339778072626/image.png?ex=662e788c&is=661c038c&hm=589369115637c8edc025bdb6ddda377c07d056ee21b14a7748194655dd49e535&
18:25 < bridge> <Jupstar ‚ú™> dunno if u ever seen it
18:26 < bridge> <Jupstar ‚ú™> https://cdn.discordapp.com/attachments/293493549758939136/1229105607500369991/image.png?ex=662e78cc&is=661c03cc&hm=8f0784e6205de609aac52d9413cac6651d3892c498d247f15ac68ac94fc00ed3&
18:27 < bridge> <Jupstar ‚ú™> height basically always stays the same
18:28 < bridge> <Jupstar ‚ú™> what is the (1) behind the Red team... number of ctf flag captures?
18:28 < bridge> <Jupstar ‚ú™> is that a built-in feature with network support?
18:28 < bridge> <Jupstar ‚ú™> i need that too then üòÇ
18:34 < bridge> <furo> It's the amount of players, XD
18:35 < bridge> <Jupstar ‚ú™> wtf ok
18:35 < bridge> <Jupstar ‚ú™> why is it in the title lmao
18:35 < bridge> <Jupstar ‚ú™> doesnt sound like a information that has to be highlighted xD
18:45 < bridge> <Peakies> I think it's would be better if hook and hammer icon on title bar being in middle or after team's name
18:46 < bridge> <Jupstar ‚ú™> agreed, i might have had it that way, but looked weird too i think.
18:46 < bridge> <Jupstar ‚ú™> 
18:46 < bridge> <Jupstar ‚ú™> I also don't like the pattern of the title
18:46 < bridge> <Peakies> but I like it
18:47 < bridge> <Peakies> pattern and corner of info row and column list row gave it a bit of 3D style don't know got my point or not
18:47 < bridge> <Peakies> but generally noice ‚ù§Ô∏è
18:57 < bridge> <Peakies> wanna add scroll, page navigation support  for 400+ tee right ? üòç üòã
20:26 < bridge> <Jupstar ‚ú™> scroll is no go imo xd
20:26 < bridge> <Jupstar ‚ú™> 
20:26 < bridge> <Jupstar ‚ú™> would suck hard to having to scroll up and down üòÑ
20:26 < bridge> <Jupstar ‚ú™> also i think u can easily put more stuff into scoreboard by making font smaller
20:46 < bridge> <Peakies> well my plan for scoreboard is a bit different 
20:46 < bridge> <Peakies> having scroll and clickable ui for open up player profile to load that player points, badges, activity point and etc ...
20:46 < bridge> <Peakies> (activity point is like xp on my own server)
20:48 < bridge> <Jupstar ‚ú™> bit like csgo scoreboard?
20:48 < bridge> <Jupstar ‚ú™> i dunno if it supports scroll too
20:50 < bridge> <Peakies> yeah exactly but a bit simpler than csgo scoreboard
20:52 < bridge> <Jupstar ‚ú™> i see. mouse support could be cool indeed, if you enable it over a hotkey
20:52 < bridge> <Jupstar ‚ú™> 
20:52 < bridge> <Jupstar ‚ú™> my fear with scrollbar is simply that it defeats the purpose of just opening it for a short moment. 
20:52 < bridge> <Jupstar ‚ú™> if there is a forced scrollbar you _have_ to use it
20:56 < bridge> <Peakies> well it can have option for old scoreboard ui but plus up and down support key to select player to open it's profile with enter key or something like this
20:57 < bridge> <Peakies> is it possible to open scoreboard by holding down `tab` button and have this possibility to click or scroll scoreboard item ?
20:58 < bridge> <Jupstar ‚ú™> possible, why not üòÑ
21:21 < bridge> <Peakies> I think the time that player have to spend to find someone name with small size can spend to scroll or by using search box and find that specific player on scoreboard
21:24 < bridge> <Jupstar ‚ú™> i dont agree that a scrollbar helps, but yes a search box would help
21:24 < bridge> <Jupstar ‚ú™> but in that case i'd also probably not use the scoreboard
21:28 < bridge> <Jupstar ‚ú™> i don't write comments in my code xdd
21:28 < bridge> <Jupstar ‚ú™> 
21:28 < bridge> <Jupstar ‚ú™> no jk. i used it once, for js it's ok. for other languages only for some basic algorithms
21:28 < bridge> <Jupstar ‚ú™> but been a while since i used it
21:29 < bridge> <Jupstar ‚ú™> do you use it actively?
21:29 < bridge> <milkeeycat> comments for people who read their code more than once
21:29 < bridge> <milkeeycat> it aint me
21:29 < bridge> <milkeeycat> i never used it xd
22:11 < bridge> <milkeeycat> which way is less cursed :justatest:
22:11 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1229162238649172030/image.png?ex=662ead8a&is=661c388a&hm=c9710f1259b1b0e6e2c5114912e072b19b2658729ec2e0de72b38a2503ce4733&
22:11 < bridge> <milkeeycat> https://cdn.discordapp.com/attachments/293493549758939136/1229162238900699256/image.png?ex=662ead8a&is=661c388a&hm=1339d8f97b2cc60ab8482d9c9741cb328860268db6702a602b952f99f42b2371&
22:14 < bridge> <Jupstar ‚ú™> write proc macro that parses the syntax directly
22:14 < bridge> <Jupstar ‚ú™> without string
22:21 < bridge> <milkeeycat> :thonk:
22:39 < bridge> <ar1gin> https://doc.rust-lang.org/std/macro.include_str.html
22:52 < bridge> <learath2> mh can't you save this in a file of it's own and include it in here somehow?
