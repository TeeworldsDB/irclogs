08:49 <+bridge> [ddnet] <fokkonaut> @Jupstar ✪ i am getting this "not dividable by 4" warning on 6 skins, how can i remove the warning without removing the skins?
08:52 <+bridge> [ddnet] <Jupstar ✪> fix the skins
08:58 <+bridge> [ddnet] <Jupstar ✪> and maybe also tell whoever uploaded these skins to fix them too, so they wont be used
09:05 <+bridge> [ddnet] <Ryozuki> i got neovim to show me this directly in the editor :monkalaugh:
09:05 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/811146281408790538/unknown.png
09:05 <+bridge> [ddnet] <Ryozuki> vim master race
09:05 <+bridge> [ddnet] <fokkonaut> @Jupstar ✪ if i knew who did it xD
09:05 <+bridge> [ddnet] <fokkonaut> random skins
09:06 <+bridge> [ddnet] <fokkonaut> i collected them
09:06 <+bridge> [ddnet] <Ryozuki> @fokkonaut use convert maybe
09:06 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
09:06 <+bridge> [ddnet] <fokkonaut> xd ye
09:06 <+bridge> [ddnet] <fokkonaut> Does anyone have an idea for rewriting the draggers in a less ressource eating way?
09:07 <+bridge> [ddnet] <Ryozuki> hm we have to be careful with changing these things
09:08 <+bridge> [ddnet] <Ryozuki> physics stuff
09:08 <+bridge> [ddnet] <fokkonaut> it wont be hard redo the behaviour
09:08 <+bridge> [ddnet] <fokkonaut> i think
09:08 <+bridge> [ddnet] <Ryozuki> >  placing one single dragger tile from editor, will create MAX_CLIENTS new draggers
09:08 <+bridge> [ddnet] <Ryozuki> lol
09:08 <+bridge> [ddnet] <Ryozuki> xd
09:08 <+bridge> [ddnet] <fokkonaut> yea, for every team one
09:08 <+bridge> [ddnet] <fokkonaut> and in one CDragger there is an array for all solo players in one team
09:08 <+bridge> [ddnet] <fokkonaut> xD
09:08 <+bridge> [ddnet] <fokkonaut> its hilarious i think
09:09 <+bridge> [ddnet] <Ryozuki> i guess there is ways to improve this
09:09 <+bridge> [ddnet] <Ryozuki> but i never touched that code
09:09 <+bridge> [ddnet] <fokkonaut> definetely, i checked with vs, even if i add a return to the snap function of CDragger, it still eats up 5% of the CPU
09:09 <+bridge> [ddnet] <fokkonaut> with > 100 tees
09:10 <+bridge> [ddnet] <fokkonaut> i dont have insanely many draggers
09:10 <+bridge> [ddnet] <fokkonaut> because in my case it creates 128 draggers per dragger
09:10 <+bridge> [ddnet] <fokkonaut> xd
09:12 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/811148058644840448/unknown.png
09:12 <+bridge> [ddnet] <Ryozuki> :monkaS:
09:13 <+bridge> [ddnet] <fokkonaut> i dont even know what to say
09:14 <+bridge> [ddnet] <fokkonaut> i tried kind of a rework yesterday but i really gave up, ok it was evening and i already was up the whole day
09:14 <+bridge> [ddnet] <fokkonaut> but still, it gave me a lot of cancer
09:14 <+bridge> [ddnet] <fokkonaut> its a relatively small class tho
09:14 <+bridge> [ddnet] <Ryozuki> u can see this is old code
09:14 <+bridge> [ddnet] <Ryozuki> it doesnt even comform to naming standards
09:14 <+bridge> [ddnet] <Ryozuki> xd
09:14 <+bridge> [ddnet] <fokkonaut> yes
09:15 <+bridge> [ddnet] <fokkonaut> check CGameController::OnEntity
09:15 <+bridge> [ddnet] <fokkonaut> it creates a new CDraggerTeam
09:15 <+bridge> [ddnet] <fokkonaut> which will create max_clients new CDraggers, for each team one xD
09:16 <+bridge> [ddnet] <Ryozuki> u mean IGameController
09:16 <+bridge> [ddnet] <fokkonaut> yes, of course
09:16 <+bridge> [ddnet] <fokkonaut> sorry
09:17 <+bridge> [ddnet] <Ryozuki> for each door it also creates 8 CDoor s
09:17 <+bridge> [ddnet] <Ryozuki> xd
09:17 <+bridge> [ddnet] <fokkonaut> no
09:17 <+bridge> [ddnet] <fokkonaut> 2 CDoors
09:17 <+bridge> [ddnet] <fokkonaut> for a double door
09:17 <+bridge> [ddnet] <Ryozuki> ah ye
09:18 <+bridge> [ddnet] <fokkonaut> i know what you thought tho
09:19 <+bridge> [ddnet] <Ryozuki> CDraggerTeam has 64 CDraggers
09:19 <+bridge> [ddnet] <Ryozuki> i see
09:19 <+bridge> [ddnet] <fokkonaut> @heinrich5991 i am unable to fix this, even if i ignore the error
09:19 <+bridge> [ddnet] <fokkonaut> https://cdn.discordapp.com/attachments/293493549758939136/811149841580163142/unknown.png
09:20 <+bridge> [ddnet] <fokkonaut> at least their functions are returned if the team is not active, but the calls are expensive still
09:21 <+bridge> [ddnet] <Ryozuki> well
09:21 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/811150137728565288/unknown.png
09:21 <+bridge> [ddnet] <Ryozuki> u can see
09:21 <+bridge> [ddnet] <Ryozuki> the dragger has a target
09:21 <+bridge> [ddnet] <Ryozuki> if there are multiple teams
09:21 <+bridge> [ddnet] <fokkonaut> the target has a very weird handling
09:21 <+bridge> [ddnet] <Ryozuki> it has to handle more than 1 target
09:21 <+bridge> [ddnet] <fokkonaut> yes, thats the soloents
09:21 <+bridge> [ddnet] <fokkonaut> in general, in Team X there can only be one target
09:21 <+bridge> [ddnet] <fokkonaut> thats m_Target
09:22 <+bridge> [ddnet] <Ryozuki> i guess soloents is when in the same team a tee is in solo
09:22 <+bridge> [ddnet] <fokkonaut> but to have it working for everyone separated, there is m_asoloents
09:22 <+bridge> [ddnet] <fokkonaut> yes
09:22 <+bridge> [ddnet] <Ryozuki> used to handle more than 1
09:22 <+bridge> [ddnet] <fokkonaut> but see how weird m_Target is handled xD
09:22 <+bridge> [ddnet] <Ryozuki> ye i agree this is not good
09:22 <+bridge> [ddnet] <fokkonaut> if there is no target, it chooses one of the soloents as target
09:22 <+bridge> [ddnet] <fokkonaut> xD
09:22 <+bridge> [ddnet] <fokkonaut> to have the checks still be valid
09:22 <+bridge> [ddnet] <Ryozuki> hmm
09:23 <+bridge> [ddnet] <fokkonaut> i think it takes the closest entity as target then
09:23 <+bridge> [ddnet] <fokkonaut> it looks like the old CDragger just got extended by m_soloents
09:23 <+bridge> [ddnet] <fokkonaut> and by CDraggerTeam
09:27 <+bridge> [ddnet] <fokkonaut> it looks like the entities in ddrace are just hacked together xD
09:28 <+bridge> [ddnet] <Ryozuki> xd
09:28 <+bridge> [ddnet] <fokkonaut> do you think you can get something for the draggers? they are really the worsr
09:28 <+bridge> [ddnet] <fokkonaut> do you think you can get something for the draggers? they are really the worst
09:29 <+bridge> [ddnet] <Jupstar ✪> buy better VPS xd
09:29 <+bridge> [ddnet] <fokkonaut> u
09:29 <+bridge> [ddnet] <Jupstar ✪> any raspberry 4 is better xd
09:30 <+bridge> [ddnet] <fokkonaut> well you can also crash ddnet servers if you place a few more draggers
09:30 <+bridge> [ddnet] <fokkonaut> i think
09:31 <+bridge> [ddnet] <fokkonaut> maybe not crash
09:53 <+bridge> [ddnet] <fokkonaut> is a std::vector inefficient?
10:02 <+bridge> [ddnet] <Jupstar ✪> for what
10:02 <+bridge> [ddnet] <Jupstar ✪> accessing and iterating should be fast
10:16 <+bridge> [ddnet] <Ryozuki> std::vector should be nearly equal to an array
11:51 <+bridge> [ddnet] <Learath2> An std::vector has the same performance as an array if you don't use the bound checking accessors
11:54 <+bridge> [ddnet] <Learath2> Oh and you also pre reserve the space. Growing is obv overhead
16:15 <+bridge> [ddnet] <heinrich5991> @timakro I think the sentence in the book is correct. is it still a question?
16:16 <+bridge> [ddnet] <heinrich5991> (btw) lifetimes exist separately from variables and scopes, when you mention a lifetime it doesn't have to refer to a lifetime of a specific variable or scope
16:50 <+bridge> [ddnet] <timakro> @heinrich5991 Yes, I still don't get it. So my understanding of what they're saying is: It compiles iff there is any lifetime 'a that satisfies those criteria:
16:50 <+bridge> [ddnet] <timakro> > The function signature now tells Rust that for some lifetime 'a, the function takes two parameters, both of which are string slices that live at least as long as lifetime 'a. The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime 'a.
16:50 <+bridge> [ddnet] <timakro> So it's like you say in this case 'a doesn't refer to the lifetime of any specific variable or scope. It's just that if the compiler can fill any lifetime for 'a which satisfies the criteria, then it compiles.
16:50 <+bridge> [ddnet] <timakro> 
16:50 <+bridge> [ddnet] <timakro> Further context:
16:50 <+bridge> [ddnet] <timakro> > Remember, when we specify the lifetime parameters in this function signature, we’re not changing the lifetimes of any values passed in or returned. Rather, we’re specifying that the borrow checker should reject any values that don’t adhere to these constraints. Note that the longest function doesn’t need to know exactly how long x and y will live, only that some scope can be substituted for 'a that will satisfy this signature.
16:51 <+bridge> [ddnet] <timakro> Am I making sense up till this point?
16:54 <+bridge> [ddnet] <heinrich5991> yes
16:54 <+bridge> [ddnet] <heinrich5991> that sounds correct @timakro
17:11 <+bridge> [ddnet] <timakro> So my problem is with those criteria that 'a has to satisfy from the sentence I question. If those were the only criteria it's trivial to find a valid lifetime to substitute for 'a, you could do it even in cases where it's obvious that it doesn't compile. Because the criteria are 1. the parameter string slices live at least as long as 'a 2. the returned string slice lives at least as long as 'a. So 'a could be tiny, like imagine a' starting
17:11 <+bridge> [ddnet] <timakro> 
17:11 <+bridge> [ddnet] <timakro> ```
17:11 <+bridge> [ddnet] <timakro> fn main() {
17:11 <+bridge> [ddnet] <timakro>     let in1 = String::from("foo"); // lifetime of in1 starts here
17:11 <+bridge> [ddnet] <timakro>     let in2 = String::from("bar"); // lifetime of in2 starts here
17:11 <+bridge> [ddnet] <timakro>     let out = longest(&in1, &in2); // 'a starts and ends here (just this line), lifetime of out starts here
17:11 <+bridge> [ddnet] <timakro>     drop(in1);                     // lifetime of in1 ends here
17:11 <+bridge> [ddnet] <timakro>     drop(in2);                     // lifetime of in2 ends here
17:11 <+bridge> [ddnet] <timakro>     println!("{}", out);
17:11 <+bridge> [ddnet] <timakro> }                                  // lifetime of out ends here
17:11 <+bridge> [ddnet] <timakro> ```
17:11 <+bridge> [ddnet] <timakro> So my problem is with those criteria which 'a has to satisfy from the sentence I question. If those were the only criteria it's trivial to find a valid lifetime to substitute for 'a, you could do it even in cases where it's obvious that it doesn't compile. Because the criteria are 1. the parameter string slices live at least as long as 'a 2. the returned string slice lives at least as long as 'a. So 'a could be tiny, like imagine a' startin
17:11 <+bridge> [ddnet] <timakro> 
17:11 <+bridge> [ddnet] <timakro> ```
17:11 <+bridge> [ddnet] <timakro> fn main() {
17:11 <+bridge> [ddnet] <timakro>     let in1 = String::from("foo"); // lifetime of in1 starts here
17:11 <+bridge> [ddnet] <timakro>     let in2 = String::from("bar"); // lifetime of in2 starts here
17:11 <+bridge> [ddnet] <timakro>     let out = longest(&in1, &in2); // 'a starts and ends here (just this line), lifetime of out starts here
17:12 <+bridge> [ddnet] <timakro>     drop(in1);                     // lifetime of in1 ends here
17:12 <+bridge> [ddnet] <timakro>     drop(in2);                     // lifetime of in2 ends here
17:12 <+bridge> [ddnet] <timakro>     println!("{}", out);
17:12 <+bridge> [ddnet] <timakro> }                                  // lifetime of out ends here
17:12 <+bridge> [ddnet] <timakro> ```
17:12 <+bridge> [ddnet] <timakro> So my problem is with those criteria which 'a has to satisfy from the sentence in question. If those were the only criteria it's trivial to find a valid lifetime to substitute for 'a, you could do it even in cases where it's obvious that it doesn't compile. Because the criteria are 1. the parameter string slices live at least as long as 'a 2. the returned string slice lives at least as long as 'a. So 'a could be tiny, like imagine a' starti
17:12 <+bridge> [ddnet] <timakro> 
17:12 <+bridge> [ddnet] <timakro> ```
17:12 <+bridge> [ddnet] <timakro> fn main() {
17:12 <+bridge> [ddnet] <timakro>     let in1 = String::from("foo"); // lifetime of in1 starts here
17:12 <+bridge> [ddnet] <timakro>     let in2 = String::from("bar"); // lifetime of in2 starts here
17:12 <+bridge> [ddnet] <timakro>     let out = longest(&in1, &in2); // 'a starts and ends here (just this line), lifetime of out starts here
17:12 <+bridge> [ddnet] <timakro>     drop(in1);                     // lifetime of in1 ends here
17:12 <+bridge> [ddnet] <timakro>     drop(in2);                     // lifetime of in2 ends here
17:12 <+bridge> [ddnet] <timakro>     println!("{}", out);
17:12 <+bridge> [ddnet] <timakro> }                                  // lifetime of out ends here
17:12 <+bridge> [ddnet] <timakro> ```
17:14 <+bridge> [ddnet] <timakro> @heinrich5991
17:15 <+bridge> [ddnet] <timakro> So my problem is with those criteria which 'a has to satisfy from the sentence in question. If those were the only criteria it's trivial to find a valid lifetime to substitute for 'a, you could do it even in cases where it's obvious that it doesn't compile. Because the criteria are 1. the parameter string slices live at least as long as 'a 2. the returned string slice lives at least as long as 'a. So 'a could be tiny, like imagine 'a starti
17:15 <+bridge> [ddnet] <timakro> 
17:15 <+bridge> [ddnet] <timakro> ```
17:15 <+bridge> [ddnet] <timakro> fn main() {
17:15 <+bridge> [ddnet] <timakro>     let in1 = String::from("foo"); // lifetime of in1 starts here
17:15 <+bridge> [ddnet] <timakro>     let in2 = String::from("bar"); // lifetime of in2 starts here
17:15 <+bridge> [ddnet] <timakro>     let out = longest(&in1, &in2); // 'a starts and ends here (just this line), lifetime of out starts here
17:15 <+bridge> [ddnet] <timakro>     drop(in1);                     // lifetime of in1 ends here
17:15 <+bridge> [ddnet] <timakro>     drop(in2);                     // lifetime of in2 ends here
17:15 <+bridge> [ddnet] <timakro>     println!("{}", out);
17:15 <+bridge> [ddnet] <timakro> }                                  // lifetime of out ends here
17:15 <+bridge> [ddnet] <timakro> ```
17:15 <+bridge> [ddnet] <heinrich5991> ah, I see
17:15 <+bridge> [ddnet] <heinrich5991> let me think
17:18 <+bridge> [ddnet] <heinrich5991> I think the interesting point is that caller and callee have different constraints on the return value
17:18 <+bridge> [ddnet] <heinrich5991> the callee (the function) has to guarantee that the return value will live at least as long as 'a
17:19 <+bridge> [ddnet] <timakro> Omg why is everything saying this, I'm so confused xD
17:19 <+bridge> [ddnet] <heinrich5991> but the caller (your main) may only, as a result of that, assume that the return value will live for 'a (at most)
17:19 <+bridge> [ddnet] <timakro> everyone
17:19 <+bridge> [ddnet] <heinrich5991> sorry, what's the word I shouldn't say? ^^
17:19 <+bridge> [ddnet] <timakro> urn value will live at least as long
17:19 <+bridge> [ddnet] <timakro> at least as long as anything
17:19 <+bridge> [ddnet] <timakro> No!
17:19 <+bridge> [ddnet] <timakro> Nobody cares if the return value dies
17:20 <+bridge> [ddnet] <timakro> It can die instantly after the function returns
17:20 <+bridge> [ddnet] <heinrich5991> you do, you want to use the return value in the println later on
17:20 <+bridge> [ddnet] <timakro> Nobody cares
17:20 <+bridge> [ddnet] <timakro> Ah ok
17:20 <+bridge> [ddnet] <heinrich5991> if you wouldn't use the value, it would be okay to use that very short lifetime you specified
17:21 <+bridge> [ddnet] <heinrich5991> (and the compiler actually does that to fix some otherwise annoying problems, "non-lexical lifetimes")
17:24 <+bridge> [ddnet] <timakro> On another note what I also think is not clear from the explanation in the book or what confuses me: It seems to me it is very important to distinguish when we talk about "the lifetime of the parameter" we really mean the lifetime of the thing the reference is referring to, not the lifetime of the reference. But when we talk about "the lifetime of the return value" we mean the lifetime of the returned reference, not the lifetime of the thin
17:25 <+bridge> [ddnet] <timakro> The book just says "the lifetime of the parameter" and "the lifetime of the return value". I assume it means by that what I just said
17:26 <+bridge> [ddnet] <heinrich5991> I think the lifetime (on a reference) always talks about the pointed-to value
17:27 <+bridge> [ddnet] <timakro> But as parameter and returned value point to the same thing it wouldn't make sense to compare them, would it?
17:27 <+bridge> [ddnet] <timakro> (They'd have the same lifetime)
17:28 <+bridge> [ddnet] <heinrich5991> yes, in this case they have to adhere to the same restriction, live longer than 'a
17:28 <+bridge> [ddnet] <heinrich5991> but the following function also satisfies this
17:33 <+bridge> [ddnet] <heinrich5991> ```rust
17:33 <+bridge> [ddnet] <heinrich5991> fn max<'a>(x: &'a str, y: &'a str) -> &'a str {
17:33 <+bridge> [ddnet] <heinrich5991>   if x > y {
17:33 <+bridge> [ddnet] <heinrich5991>     x
17:33 <+bridge> [ddnet] <heinrich5991>   } else {
17:33 <+bridge> [ddnet] <heinrich5991>     "abc"
17:33 <+bridge> [ddnet] <heinrich5991>   }
17:33 <+bridge> [ddnet] <heinrich5991> }
17:33 <+bridge> [ddnet] <heinrich5991> ```
17:33 <+bridge> [ddnet] <heinrich5991> sorry, got distracted
17:34 <+bridge> [ddnet] <heinrich5991> here, you can see that it makes sense that the return value only has to live "at least as long" as the parameter 'a
17:34 <+bridge> [ddnet] <heinrich5991> the else branch has a string that lives for 'static, the longest possible lifetime
17:36 <+bridge> [ddnet] <timakro> Okay, I see what you mean and how this works when you assume
17:36 <+bridge> [ddnet] <timakro> > I think the lifetime (on a reference) always talks about the pointed-to value
17:37 <+bridge> [ddnet] <timakro> But I'm not sure if that's really what lifetime means because of this from later in the same chapter of book:
17:37 <+bridge> [ddnet] <timakro> ```
17:37 <+bridge> [ddnet] <timakro>     {
17:37 <+bridge> [ddnet] <timakro>         let x = 5;            // ----------+-- 'b
17:38 <+bridge> [ddnet] <timakro>                               //           |
17:38 <+bridge> [ddnet] <timakro>         let r = &x;           // --+-- 'a  |
17:38 <+bridge> [ddnet] <timakro>                               //   |       |
17:38 <+bridge> [ddnet] <timakro>         println!("r: {}", r); //   |       |
17:38 <+bridge> [ddnet] <timakro>                               // --+       |
17:38 <+bridge> [ddnet] <timakro>     }  
17:38 <+bridge> [ddnet] <timakro> ```
17:38 <+bridge> [ddnet] <timakro> But I'm not sure if that's really what lifetime means because of this from later in the same chapter of book:
17:38 <+bridge> [ddnet] <timakro> ```
17:38 <+bridge> [ddnet] <timakro> 
17:38 <+bridge> [ddnet] <timakro> 
17:38 <+bridge> [ddnet] <timakro>     {
17:38 <+bridge> [ddnet] <timakro>         let x = 5;            // ----------+-- 'b
17:38 <+bridge> [ddnet] <timakro>                               //           |
17:38 <+bridge> [ddnet] <timakro>         let r = &x;           // --+-- 'a  |
17:38 <+bridge> [ddnet] <timakro>                               //   |       |
17:38 <+bridge> [ddnet] <timakro>         println!("r: {}", r); //   |       |
17:38 <+bridge> [ddnet] <timakro>                               // --+       |
17:38 <+bridge> [ddnet] <timakro>     }                         // ----------+
17:38 <+bridge> [ddnet] <timakro> 
17:38 <+bridge> [ddnet] <timakro> ```
17:38 <+bridge> [ddnet] <timakro> hm to be fair it's quite simialr
17:39 <+bridge> [ddnet] <timakro> hm to be fair it's quite similar
17:39 <+bridge> [ddnet] <timakro> both lifetimes
17:39 <+bridge> [ddnet] <timakro> they could mean the same
17:39 <+bridge> [ddnet] <timakro> We all agree on how it works, I think it's actually very intuitive. The "explanation" paragraph from the book should just be removed in my opinion ^^
17:40 <+bridge> [ddnet] <heinrich5991> ah ^^
20:10 <+bridge> [ddnet] <Ryozuki> @Learath2 found ur alt :monkalaugh:
20:10 <+bridge> [ddnet] <Ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/811313579814420490/p473hba16uh61.png
20:13 <+bridge> [ddnet] <jao> hahahahaha
20:13 <+bridge> [ddnet] <jao> 🥴
20:16 <+bridge> [ddnet] <Learath2> how did you???
20:16 <+bridge> [ddnet] <Learath2> remove this
20:26 <+ChillerDragon> classic love those prs
20:26 <+ChillerDragon> UwU
20:26 <+ChillerDragon> *starts twerking* killed me _D
20:39 <+bridge> [ddnet] <Im 'corneum> nice meme steal ryozuki
21:23 <+bridge> [ddnet] <Ryozuki> i just stole from someone who probs stole it too
21:23 <+bridge> [ddnet] <Ryozuki> thats t he internet for u
21:23 <+bridge> [ddnet] <Ryozuki> :monkalaugh:
22:56 <+bridge> [ddnet] <fokkonaut> @Learath2 i tried something with the draggers, to handle the teams inside of one dragger, not one dragger per team. if one player is in a team and another one isnt the pull strength seems to be different somehow, any ideas? https://github.com/fokkonaut/F-DDrace/commit/1c19aad782946c06b5610e2904ec4ac025525864?w=1
23:03 <+bridge> [ddnet] <fokkonaut> ah okay no, it was like that before too
23:04 <+bridge> [ddnet] <fokkonaut> nice, then i did not break anything
