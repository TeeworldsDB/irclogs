00:00 < bridge> <furo321> Yeah, I also saw commit about sqlite3 being included since 10.4
00:01 < bridge> <furo321> I downloaded a SDK from here, <https://github.com/joseluisq/macosx-sdks>
00:21 < bridge> <peter44h> I would first try seeing if you can coerce autotools to get sqlite in the correct directory so cmake can find it
00:21 < bridge> <peter44h> autotools is horrific junk though so gl
00:44 < bridge> <Ewan> i don't think PREFER_BUNDLED_LIBS is really expected to be used on any platform but windows. like it might have a few mac/linux binaries within it but it doesn't seem complete at all
00:45 < bridge> <Ewan> i think you're more expected to use brew or macports
00:45 < bridge> <Ewan> i don't think PREFER_BUNDLED_LIBS is really expected to be used on any platform but windows. ddnet-libs might have a few mac/linux binaries within it but it doesn't seem complete at all
01:13 < bridge> <chillerdragon> The size refers to number of ints. Not number of bytes. If a snap item has size 4 you should call getInt() 4 times. The number of bytes you will consume depends on how big those tee ints are. So all of them might be 1 to 4 bytes. Or bigger idk what the biggest tee int is.
01:14 < bridge> <chillerdragon> I would argue you can. Maybe size is the wrong term how it is used. But you can say how many ints are sent over the wire. And that’s what is being done.
01:16 < bridge> <chillerdragon> I should probably clarify that in the docs if I haven’t mentioned that anywhere
01:43 < bridge> <peter44h> neither is going to help his cross-compiling situation
01:43 < bridge> <Ewan> cross-compiling for mac?
01:43 < bridge> <Ewan> oh i missed that
01:43 < bridge> <peter44h> I think you can install stuff into the cmake sysroot so find_package can use it
01:44 < bridge> <Ewan> you shouldn't have to do that
01:44 < bridge> <Ewan> you just need to add it to the module path
01:44 < bridge> <peter44h> or CMAKE_FIND_ROOT_PATH, whatever it's called
01:44 < bridge> <Ewan> unwise
01:44 < bridge> <peter44h> surely that's what it's for, though?
01:44 < bridge> <peter44h> also, how would you do that for something that isn't packaged with cmake?
01:45 < bridge> <Ewan> you'd build it manually and target_link_libraries and target_include_directories
01:46 < bridge> <peter44h> I don't see how it's unwise to do what I described
01:46 < bridge> <peter44h> I'm pretty sure it's exactly how most OS packages work
01:46 < bridge> <peter44h> it's what brew is doing, and the arch linux package
01:46 < bridge> <Ewan> we are talking about changing the ddnet cmakelists right?
01:46 < bridge> <Ewan> not packaging
01:46 < bridge> <peter44h> I was talking trying to get it to compile without changes
01:47 < bridge> <peter44h> the thing in question is sqlite
01:47 < bridge> <Ewan> well if it doesn't compile without changes then it should be changed 😃
01:47 < bridge> <peter44h> wdym, the "change" is to install sqlite in a place where cmake can find it
01:47 < bridge> <peter44h> I'm pretty sure that would work
01:48 < bridge> <Ewan> i feel like we're talking about different things
01:48 < bridge> <Ewan> i thought we were thinking about adding the sqlite source as a submodule or something and then building it alongside ddnet
01:48 < bridge> <peter44h> I suggested that as a solution but probably it isn't wanted
01:49 < bridge> <peter44h> since sqlite is so trivial I think it's not a bad idea, but there are other deps for which it is
01:49 < bridge> <Ewan> i think the cleanest solution atm is just to add sqlite mac binaries
02:46 < bridge> <learath2> I guess the multiple interpretations of "size" is the issue here. You can say something about the size in terms of number of packed ints, but that doesn't give you the size in bytes since the packing is variable sized
02:51 < bridge> <ceriinas> I'm having some trouble with teeworlds math. From my code and testing, it seems like velocity is in-game less effective than it should be. Everything I see in the code and any reference I can find here or online just says that vertical velocity is not ramped or damped and is in subtiles per tick. I am already accounting for rounding up to the nearest 256th and rounding position to the subtile - and any minor changes I make don't do much, I'm off b
02:51 < bridge> <ceriinas> The clearest thing I can find implying that it's not just my code that's bad is this: https://discord.com/channels/252358080522747904/342454474117218334/905595104872525875 Falling for 304 ticks (enough to get 152 velocity) should require 724 blocks, not 300. Am I tired and/or stupid or am I missing something?
02:51 < bridge> <ceriinas> https://cdn.discordapp.com/attachments/293493549758939136/1210765836214599680/scrot_2024-02-23-2675_242x266.png?ex=65ebc08e&is=65d94b8e&hm=1ceb25b6d0bc5e4ae3d4ab22bfc7677353deba4e96a7642704fea547c4aacf83&
03:19 < bridge> <ceriinas> I did see a message saying 256 vel is 16 blocks per second which would mean divide velocity by 25 to get subtiles per tick. I had tried that before and it seemed very wrong but I've fixed things since then and it looks mostly good. . . so that might be it. But there's nothing like that in the code, so.
03:20 < bridge> <chillerdragon> Yes
03:21 < bridge> <chillerdragon> @ceriinas: what are you working on? 0.o
03:23 < bridge> <ceriinas> wanted to see exactly how hard it is to control yourself in terms of frames when hooking straight up - which I thought would be quick and easy but this issue has had me stumped for a while
03:30 < bridge> <miguilim> why not num. of ints? XD
03:33 < bridge> <ceriinas> I did see a message saying 256 vel is 16 blocks per second which would mean divide velocity by 25 to get subtiles per tick. I had tried that before and it seemed very wrong but I've fixed things since then and it looks mostly good. . . so that might be it. But there's nothing like that in the code, so.
03:33 < bridge> <ceriinas> E: Yeah I'm pretty sure that's wrong.
03:36 < ws-client> <ChillerDragon> @miguilim you mean why i did not call it like that in the table? I think i go the name size from somewhere else. Either libtw2 or the official tw code.
03:37 < bridge> <miguilim> :thonk:
03:38 < bridge> <miguilim> do you know how the input chunk works? why it data has a maximum size of 128 bytes?
03:59 < ws-client> <ChillerDragon> I do not know about the maximum. Whats the issue with it?
04:26 < bridge> <miguilim> no issues, I'm asking because I dont know what its inside this data and why this data size limit is so big
04:31 < bridge> <miguilim> if its just 10 integers, why it limit is so big O.o?
05:42 < ws-client> <ChillerDragon> @miguilim could you link where this limit is defined?
05:43 < ws-client> <ChillerDragon> ah MAX_INPUT_SIZE ?
05:43 < bridge> <miguilim> MAX_SNAPSHOT_PACKSIZE
05:43 < bridge> <miguilim> yes, sorry I sent the wrong one
05:43 < ws-client> <ChillerDragon> i wouldnt over think it
05:43 < ws-client> <ChillerDragon> maybe someone went a bit too lose on the limit
05:45 < bridge> <miguilim> XDDDD ok
05:46 < bridge> <miguilim> can you help me with the connection less packet on the documentation? I know nothing about them and I'm doing an explanation about Input and input timing msgs now
05:47 < ws-client> <ChillerDragon> connection less arent even part of my docs yet i dont think i ever looked into them
05:47 < ws-client> <ChillerDragon> you mean like inf3 gie etc?
05:47 < ws-client> <ChillerDragon> fstd
05:47 < ws-client> <ChillerDragon> those? https://github.com/ddnet/ddnet/blob/59a734ce3f81c91b11754e02856f6fe66f3e6ddd/src/engine/shared/masterserver.cpp
05:48 < bridge> <miguilim> yes, the serverbrowser info
05:48 < ws-client> <ChillerDragon> ye idk never bothered to look into those.
05:48 < ws-client> <ChillerDragon> For ddnet7 i used the http master and all my libs just ignore it for now
05:49 < ws-client> <ChillerDragon> there is a py implementation that might help you
05:49 < bridge> <miguilim> :pepeW:
05:49 < ws-client> <ChillerDragon> https://github.com/teeworlds/teeworlds/blob/a1911c8f7d8458fb4076ef8e7651e8ef5e91ab3e/scripts/tw_api.py
05:49 < bridge> <miguilim> 😮
05:50 < bridge> <miguilim> thanks, I will take a look later
05:50 < ws-client> <ChillerDragon> https://github.com/ddnet/ddnet/blob/59a734ce3f81c91b11754e02856f6fe66f3e6ddd/scripts/tw_api.py
05:50 < ws-client> <ChillerDragon> you probably want this thats the ddnet one idk how maintained it is tho
05:56 < bridge> <miguilim> do you know what time left would be?
05:56 < bridge> <miguilim> https://cdn.discordapp.com/attachments/293493549758939136/1210812421065670696/image.png?ex=65ebebf0&is=65d976f0&hm=a746a13023869de2dafd9bc53ea799a99c80411a0e6b8854116cfb07f24417d9&
05:56 < bridge> <miguilim> ticks?
05:56 < bridge> <miguilim> milliseconds?
06:01 < bridge> <miguilim> I think its milliseconds xd
06:25 < bridge> <chillerdragon> Idk
06:58 < bridge> <miguilim> do anyone know why the server have the OnPredictedInput and OnDirectInput at the same time?
09:52 < bridge> <milkeeycat> why is exactly 600 there? https://github.com/ddnet/ddnet/blob/59a734ce3f81c91b11754e02856f6fe66f3e6ddd/src/game/client/ui.cpp#L334
10:08 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1210876017296539668/image.png?ex=65ec272b&is=65d9b22b&hm=a3b7a82dc534bdc4adff3128e0b69f928b409acdbd569f56eda61f038ddddb14&
10:09 < bridge> <ryozuki> damn
10:09 < bridge> <ryozuki> me at one of my projects at work
10:09 < bridge> <Jupstar ✪> now show real truth xd
10:09 < bridge> <Jupstar ✪> did u move json files or what
10:09 < bridge> <ryozuki> not at all
10:09 < bridge> <ryozuki> 2 refactors tho
10:09 < bridge> <Jupstar ✪> mh ok
10:09 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1210876231499776031/image.png?ex=65ec275e&is=65d9b25e&hm=0e7159c064e0e65fe960fb1be54c022f66411bf068ad71151b02268119624b82&
10:09 < bridge> <Jupstar ✪> then it's impressive
10:09 < bridge> <ryozuki> this is overall of project
10:10 < bridge> <ryozuki> u can clearly spot initial start and then the refactor
10:10 < bridge> <ryozuki> and then now its bug fixing to prod
10:10 < bridge> <Jupstar ✪> if it's 100k lines of rust code in 1 year that is insane
10:10 < bridge> <ryozuki> in october
10:10 < bridge> <ryozuki> i consider myself rly productive in rust xd
10:11 < bridge> <ryozuki> ```
10:11 < bridge> <ryozuki> ===============================================================================
10:11 < bridge> <ryozuki>  Language            Files        Lines         Code     Comments       Blanks
10:11 < bridge> <ryozuki> ===============================================================================
10:11 < bridge> <ryozuki>  GNU Style Assembly      2          143           95           15           33
10:11 < bridge> <ryozuki>  C                       3           96           72            0           24
10:11 < bridge> <ryozuki>  C++                     1           31           23            0            8
10:11 < bridge> <ryozuki>  Dockerfile              1           35           25            5            5
10:11 < bridge> <ryozuki>  Makefile                1          144          106            3           35
10:11 < bridge> <ryozuki>  Shell                   6          171          124           15           32
10:11 < bridge> <ryozuki>  TOML                    5          164          133            8           23
10:11 < bridge> <ryozuki> -------------------------------------------------------------------------------
10:11 < bridge> <ryozuki>  Markdown                4          621            0          458          163
10:11 < bridge> <ryozuki>  |- BASH                 3          115           84           16           15
10:11 < bridge> <ryozuki>  |- Rust                 2          312          244           32           36
10:11 < bridge> <ryozuki>  (Total)                           1048          328          506          214
10:11 < bridge> <ryozuki> -------------------------------------------------------------------------------
10:11 < bridge> <ryozuki>  Rust                  139        47985        43170          576         4239
10:11 < bridge> <ryozuki>  |- Markdown           101         1625            0         1375          250
10:11 < bridge> <ryozuki>  (Total)                          49610        43170         1951         4489
10:11 < bridge> <ryozuki> ===============================================================================
10:11 < bridge> <ryozuki>  Total                 162        49390        43748         1080         4562
10:11 < bridge> <ryozuki> ===============================================================================
10:11 < bridge> <ryozuki> ```
10:11 < bridge> <ryozuki> @jupeyy_keks lines of the projecct
10:11 < bridge> <ryozuki> 49k in rust
10:14 < bridge> <Jupstar ✪> what's the command line of this xd
10:14 < bridge> <ryozuki> tokei
10:14 < bridge> <ryozuki> https://github.com/XAMPPRocky/tokei
10:14 < bridge> <ryozuki> made in rust
10:14 < bridge> <Jupstar ✪> that was obvious 😬
10:15 < bridge> <ryozuki> 😬
10:16 < bridge> <Jupstar ✪> ```
10:16 < bridge> <Jupstar ✪> tokei ./src/ ./lib/ ./examples/ ./game/
10:16 < bridge> <Jupstar ✪> ===============================================================================
10:16 < bridge> <Jupstar ✪>  Language            Files        Lines         Code     Comments       Blanks
10:16 < bridge> <Jupstar ✪> ===============================================================================
10:16 < bridge> <Jupstar ✪>  TOML                   80         1574         1450            9          115
10:16 < bridge> <Jupstar ✪> -------------------------------------------------------------------------------
10:16 < bridge> <Jupstar ✪>  Rust                  581        92050        78883         3866         9301
10:16 < bridge> <Jupstar ✪>  |- Markdown           186         1121          123          937           61
10:16 < bridge> <Jupstar ✪>  (Total)                          93171        79006         4803         9362
10:16 < bridge> <Jupstar ✪> ===============================================================================
10:16 < bridge> <Jupstar ✪>  Total                 661        93624        80333         3875         9416
10:16 < bridge> <Jupstar ✪> ===============================================================================
10:16 < bridge> <Jupstar ✪> ```
10:16 < bridge> <Jupstar ✪> 
10:16 < bridge> <Jupstar ✪> epyc tryhard moment
10:16 < bridge> <ryozuki> ```
10:16 < bridge> <ryozuki> ❯ tokei
10:16 < bridge> <ryozuki> ===============================================================================
10:16 < bridge> <ryozuki>  Language            Files        Lines         Code     Comments       Blanks
10:17 < bridge> <ryozuki> ===============================================================================
10:17 < bridge> <ryozuki>  AsciiDoc                2          112           80            4           28
10:17 < bridge> <ryozuki>  GNU Style Assembly      3         1477          998          306          173
10:17 < bridge> <ryozuki>  Autoconf                4          128          123            0            5
10:17 < bridge> <ryozuki>  Batch                   1           14           11            0            3
10:17 < bridge> <ryozuki>  C                      24        42029        35060         2564         4405
10:17 < bridge> <ryozuki>  C Header              281       103192        82528         7966        12698
10:17 < bridge> <ryozuki>  CMake                  26         4704         4208          130          366
10:17 < bridge> <ryozuki>  C++                   296       156700       131600         4947        20153
10:17 < bridge> <ryozuki>  Dockerfile              1           52           47            0            5
10:17 < bridge> <ryozuki>  GLSL                   32          949          762           18          169
10:17 < bridge> <ryozuki>  Java                    1           27           21            3            3
10:17 < bridge> <ryozuki>  JSON                    2           39           39            0            0
10:17 < bridge> <ryozuki>  Objective-C++           3          163          130            3           30
10:17 < bridge> <ryozuki>  PowerShell              1           41           33            7            1
10:17 < bridge> <ryozuki>  Prolog                  1           35           30            0            5
10:17 < bridge> <ryozuki>  Python                 35         6080         4962          209          909
10:17 < bridge> <ryozuki>  Shell                  13         1385         1134           37          214
10:17 < bridge> <ryozuki>  Plain Text             58        67818            0        46061        21757
10:17 < bridge> <ryozuki>  TOML                    8          140          120            0           20
10:17 < bridge> <ryozuki>  Vim script              2           28           20            1            7
10:17 < bridge> <ryozuki> we got prolog pog
10:17 < bridge> <Jupstar ✪> oh wow, didnt imagine we'd have so much code in ddnet
10:17 < bridge> <Jupstar ✪> XDDDDDDDDDDDDDDDDDDDDD
10:17 < bridge> <ryozuki> xd
10:17 < bridge> <Jupstar ✪> header files almost as much as normal cpp
10:17 < bridge> <Jupstar ✪> but @ryozuki i think u need to exclude external libs
10:18 < bridge> <ryozuki> vendored deps code is in too tho
10:18 < bridge> <Jupstar ✪> that's unfair
10:18 < bridge> <ryozuki> i think
10:18 < bridge> <Jupstar ✪> i'll try
10:18 < bridge> <ryozuki> im too lazy
10:19 < bridge> <ryozuki> @jupeyy_keks btw im learning to drive kek
10:19 < bridge> <ryozuki> <a:WickedDriver:1086040335983058974>
10:19 < bridge> <Jupstar ✪> lol, true u said u dont have a license yet xd
10:19 < bridge> <ryozuki> so far its going well
10:19 < bridge> <ryozuki> since im a gamer
10:19 < bridge> <ryozuki> :EZ:
10:19 < bridge> <ryozuki> :justatest:
10:19 < bridge> <ryozuki> :fuckyousnail:
10:19 < bridge> <ryozuki> xD
10:21 < bridge> <Jupstar ✪> ```
10:21 < bridge> <Jupstar ✪> tokei  ./src --exclude src/engine/external --exclude src/base/unicode/                                                     git:59a734ce3*
10:21 < bridge> <Jupstar ✪> ===============================================================================
10:21 < bridge> <Jupstar ✪>  Language            Files        Lines         Code     Comments       Blanks
10:21 < bridge> <Jupstar ✪> ===============================================================================
10:21 < bridge> <Jupstar ✪>  C Header              258        33629        23627         4429         5573
10:21 < bridge> <Jupstar ✪>  C++                   294       156568       131487         4947        20134
10:21 < bridge> <Jupstar ✪>  Markdown                1           55            0           41           14
10:21 < bridge> <Jupstar ✪>  Objective-C++           3          163          130            3           30
10:21 < bridge> <Jupstar ✪>  TOML                    6          119          102            0           17
10:21 < bridge> <Jupstar ✪> -------------------------------------------------------------------------------
10:21 < bridge> <Jupstar ✪>  Rust                   15         2022         1808           14          200
10:21 < bridge> <Jupstar ✪>  |- Markdown            11          742            0          591          151
10:22 < bridge> <Jupstar ✪>  (Total)                           2764         1808          605          351
10:22 < bridge> <Jupstar ✪> ===============================================================================
10:22 < bridge> <Jupstar ✪>  Total                 577       192556       157154         9434        25968
10:22 < bridge> <Jupstar ✪> ===============================================================================
10:22 < bridge> <Jupstar ✪> ```
10:22 < bridge> <Jupstar ✪> i think this is quite fair
10:28 < bridge> <ryozuki> nice
11:04 < bridge> <Ewan> you have car ?
11:16 < ws-client> <ChillerDragon> @milkeeycat you can only play tw on 600 px screens
11:16 < bridge> <milkeeycat> :thonk:
11:17 < ws-client> <ChillerDragon> https://github.com/teeworlds/teeworlds/blob/a1911c8f7d8458fb4076ef8e7651e8ef5e91ab3e/src/game/client/components/hud.cpp#L49
11:17 < ws-client> <ChillerDragon> this centers the game timer in the middle of your screen lol
11:19 < bridge> <milkeeycat> chillerdragon: looks at these features! xd https://github.com/MilkeeyCat/ddnet_demo_web_viewer?tab=readme-ov-file#what-it-can-do-now
11:22 < ws-client> <ChillerDragon> very demo
11:22 < bridge> <milkeeycat> i did demp parsing part first
11:23 < bridge> <milkeeycat> now graphics engine part
11:23 < bridge> <milkeeycat> i wanted to make a new repo buuuut
11:23 < bridge> <milkeeycat> too much work
11:46 < bridge> <ryozuki> https://edg-l.github.io/edlang/edlang_ir/index.html
11:46 < bridge> <ryozuki> pog
11:57 < bridge> <ryozuki> https://github.com/edg-l/edlang/releases/tag/v0.0.1-alpha.9
11:57 < bridge> <ryozuki> en edlang release
11:57 < bridge> <ryozuki> :poggers2:
11:57 < bridge> <ryozuki> gotta add prints somewhen xd
11:58 < bridge> <ryozuki> new edlang release
12:33 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1210912261086908476/RDT_20240224_1232483463798544172119592.jpg?ex=65ec48ec&is=65d9d3ec&hm=23bf8003e9bcc1fe78ab01c401210bcad65a57a42214468094124ca29fc94c4a&
13:32 < bridge> <meloƞ> Ryo wtf i JUST watched frieren
13:34 < bridge> <meloƞ> 11/10 i recommend
13:36 < bridge> <teero777> xDD
13:36 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1210928193901699123/image.png?ex=65ec57c3&is=65d9e2c3&hm=778a3c4ae68af98a9b5cf87d919b872808fef26246de3b5ba8b7dbeff363e7e3&
13:36 < bridge> <teero777> true
13:36 < bridge> <teero777> havent watched latest ep from yesterday tho
13:36 < bridge> <meloƞ> 13/10
13:36 < bridge> <meloƞ> Go watch
13:37 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1210928564250083358/heroeswedontdeserve-v0-zq7mia4kx4kc1.png?ex=65ec581b&is=65d9e31b&hm=e2b5d7b0da697981b888f8140c4732980e4b54c081b9e24f593e2b84702a5a72&
14:35 < bridge> <ryozuki> been recommending it forever, i read the manga before anime long ago
14:36 < bridge> <ryozuki> there is a arc coming thats rly rly good
14:36 < bridge> <learath2> if u spoil I'm permabanning you
14:36 < bridge> <meloƞ> :poggers2:
14:36 < bridge> <meloƞ> :kek:
14:36 < bridge> <meloƞ> lea if you ban ryo ban me aswell, i cant live without fishys
14:36 < bridge> <ryozuki> im not spoiling xd im just hyping it up for u
14:37 < bridge> <ryozuki> frieren is my second most fav manga
14:39 < bridge> <ryozuki> @learath2 btw watch the anime about the apothecary
14:39 < bridge> <ryozuki> it is also rly good
14:39 < bridge> <learath2> it's downloading
14:41 < bridge> <meloƞ> go leak most favourite now
14:46 < bridge> <ryozuki> oyasumi punpun
14:46 < bridge> <ryozuki> totally diferytho
14:46 < bridge> <ryozuki> totally different tho
16:28 < bridge> <ar1gin> https://cdn.discordapp.com/attachments/293493549758939136/1210971494826643556/image.png?ex=65ec8017&is=65da0b17&hm=cea62fe588c447a71dff93f00bce55a989d26a2dd75710ce6f02cf46d0ecceff&
16:39 < bridge> <teero777> btw ppl of the internet who use vscode. press CTR+K Z to make it better
16:40 < bridge> <teero777> cool thing
16:40 < bridge> <teero777> https://cdn.discordapp.com/attachments/293493549758939136/1210974522715676812/image.png?ex=65ec82e9&is=65da0de9&hm=9a824be5f7efc42a7fec199d1736b9aefcbb50f3fb61ff885df52d9bc6f5c595&
17:35 < bridge> <learath2> I was thinking of removing this dockerfile tbf
17:41 < bridge> <ryozuki> https://effectiviology.com/shirky-principle/
18:18 < bridge> <meloƞ> :kek:
19:06 < bridge> <learath2> After 1.2 kLoC I'm about to have a triangle on my screen
19:07 < bridge> <learath2> The amount of boilerplate you need to write before rendering anything in vk is insane
19:14 < bridge> <Jupstar ✪> the biggest problem is that you probably didnt understand a good amount of the setup code xd
19:14 < bridge> <Jupstar ✪> 
19:14 < bridge> <Jupstar ✪> there are so many options and stuff
19:15 < bridge> <learath2> Well I did my very best to actually read up on everything I'm setting up, so I do have some semblance of what everything does, but yes there are many features I just said I'll look as I need them
19:15 < bridge> <learath2> It's actually pretty logical, the biggest issue is that most resources don't describe the hierarchy of things very well
19:16 < bridge> <Jupstar ✪> true
19:16 < bridge> <Jupstar ✪> https://gpuopen.com/wp-content/uploads/2017/07/Vulkan-Diagram.png
19:16 < bridge> <learath2> I found the specification to be very good at describing how things go together, but it's also very dense to read
19:16 < bridge> <Jupstar ✪> if u understand this now.. that's already good
19:16 < bridge> <learath2> Luckily I'm good at parsing through this kind of reading
19:17 < bridge> <learath2> Very roughly, yes
19:19 < bridge> <learath2> The relationship between images, imageviews, framebuffers, attachments is a little hazy though 😄
19:20 < bridge> <ryozuki> xd
19:21 < bridge> <ryozuki> to master vulkan is on my list of todo
19:21 < bridge> <ryozuki> but first ill master compilers
19:21 < bridge> <ryozuki> then ill make a vulkan shader compiler
19:21 < bridge> <learath2> Why? 😄
19:21 < bridge> <ryozuki> for fun
19:21 < bridge> <ryozuki> best projects are made for fun
19:21 < bridge> <ryozuki> like why im making edlang?
19:21 < bridge> <ryozuki> there is no other reason than for fun
19:22 < bridge> <learath2> but a spirv compiler doesn't sound fun at all
19:22 < bridge> <learath2> you'll just have to read the spec and implement it, no freedom
19:22 < bridge> <ryozuki> nerds find fun in stuff others find boring
19:22 < bridge> <ryozuki> im sure u find C fun
19:22 < bridge> <ryozuki> but the person next to u not
19:22 < bridge> <ryozuki> do u know anyone who can say implemented a spirv compiler?
19:22 < bridge> <ryozuki> im trying to become the chad of programming
19:23 < bridge> <ryozuki> i can say i made my optimized compiled language
19:23 < bridge> <ryozuki> :gigachad:
19:23 < bridge> <Jupstar ✪> well honestly for me the biggest things of vulkan vs opengl are:
19:23 < bridge> <Jupstar ✪> memory management
19:23 < bridge> <Jupstar ✪> explicit pipelines
19:23 < bridge> <Jupstar ✪> 
19:23 < bridge> <Jupstar ✪> in opengl pipelines are implicitly build and not only that, they often require "views" where vk does not.
19:23 < bridge> <Jupstar ✪> 
19:23 < bridge> <Jupstar ✪> E.g. vertex arrays are not required in vulkan thanks to having pipelines.
19:23 < bridge> <Jupstar ✪> So you dont need to bind buffers to some weird object that is then bound to your shaders. Feels a little bit cleaned up xd
19:23 < bridge> <Jupstar ✪> 
19:23 < bridge> <Jupstar ✪> Ofc in total opengl is then still less code, but i feel like the intention is not as clear as with vulkan XD
19:24 < bridge> <ryozuki> modern opengl implementations will be a layer using vulkan under the hood
19:24 < bridge> <ryozuki> its already happening
19:24 < bridge> <ryozuki> i forgot the news
19:24 < bridge> <learath2> well not really given there are only 2 compilers for it (which may even be sharing a backend, I don't remember)
19:25 < bridge> <learath2> As a reinventing the wheel enjoyer, I do understand the desire, but in this case I don't even think there is a learning opportunity there
19:25 < bridge> <ryozuki> xD
19:25 < bridge> <ryozuki> idk
19:25 < bridge> <ryozuki> ur right there are other things to make compilers for more interesting i guess
19:25 < bridge> <ryozuki> brb making food
19:28 < bridge> <learath2> I haven't had to deal with memory management yet, my triangle renderer(tm) steals the approach of having the vertices hardcoded in the vertex shader from vulkan-tutorial.com
19:30 < bridge> <Jupstar ✪> Oh that's most fun. But I'd recommend starting with buffers. Images as you said are much more complex
20:40 < bridge> <cyberfighter> ok ive got aweird bug, i was joining a server and had to download a map, my internet was very slow and i alt f4d during the download, then the game said it was quitting and the game froze
20:40 < bridge> <cyberfighter> no dumps or anything so idk, i cant reproduce
20:43 < bridge> <robyt3> Nightly or 18.0.3?
20:44 < bridge> <cyberfighter> nightly
20:46 < bridge> <robyt3> Hmm, should quit after a few seconds at most
20:46 < bridge> <cyberfighter> nope it stayed on for over a minute and i just killed it with task manager
20:47 < bridge> <robyt3> Did you keep the game active while it was waiting to quit, or did you switch the window?
21:11 < bridge> <cyberfighter> switch
21:14 < bridge> <robyt3> Maybe that suspends the window at some point because it's not being updated anymore
22:05 < bridge> <Jupstar ✪> who is `dlopen` & `dlsym` elitest?
22:06 < bridge> <Jupstar ✪> i don't understand wtf `RTLD_LAZY` or `RTLD_LOCAL` actually mean.
22:06 < bridge> <Jupstar ✪> 
22:06 < bridge> <Jupstar ✪> if i use both with dlopen then dlsym it works... all fine
22:06 < bridge> <Jupstar ✪> 
22:06 < bridge> <Jupstar ✪> but when i change the library on disk, without ever loading it again (no `dlopen` and no `dlclose`) it still changes symbols for me when i call `dlsym` again
22:13 < bridge> <Jupstar ✪> i removed `RTLD_LAZY` and it works now
22:17 < bridge> <Jupstar ✪> but bro i really didnt know that a later call to `dlsym` "hot-reloads" code from the filesystem
22:17 < bridge> <Jupstar ✪> i always thought on linux it's loaded into memory xd
22:18 < bridge> <Jupstar ✪> i mean it doesnt reload the library. but it does something
22:18 < bridge> <Jupstar ✪> i dont understand this at all
23:15 < bridge> <meloƞ> RTLD_LAZY  loads only when they are referenced and executed somewhere, maybe thats why it didnt work?
23:15 < bridge> <meloƞ> RTLD_LAZY  loads only when its referenced and executed somewhere, maybe thats why it didnt work?
23:15 < bridge> <meloƞ> RTLD_LAZY  loads only when its referenced and (or?)executed somewhere, maybe thats why it didnt work?
23:15 < bridge> <meloƞ> RTLD_LAZY  loads only when its referenced and (or?) executed somewhere, maybe thats why it didnt work?
