00:10 < bridge> <zwelf2> The https://gitlab.com/ddnet-rs/twgame/-/blob/autoland/bin/src/bin/bug-8199.rs looks for this pattern now and prints all game_uuids of teehistorian files that matches. `./bug-8199 <path>` the path will get traversed recursively.
00:11 < bridge> <zwelf2> The https://gitlab.com/ddnet-rs/twgame/-/blob/autoland/bin/src/bin/bug-8199.rs looks for this pattern now and prints all game_uuids of teehistorian files that matches. `./bug-8199 <path>` the path will traversed all files recursively.
00:14 < bridge> <zwelf2> Example when using with cargo run in `twgame` git checkout: `cargo run --bin bug-8199 ~/.local/share/ddnet/teehistorian/`
03:16 < bridge> <0xdeen> Thanks a lot Zwelf! Now I have to check what files to run this on based on file date, because all would take forever 😄
04:31 < bridge> <TsFreddie> spellcheck wasn't perfect but how are you committing this without even take a look at the squiggly lines `public void SetTasfnorm(List<Transform> l)`
04:35 < ws-client> <ChillerDragon> also who has spellcheck in the dev IDE?
04:35 < ws-client> <ChillerDragon> do you code in word?
04:36 < ws-client> <ChillerDragon> https://zillyhuhn.com/cs/.1712889357.png
04:36 < ws-client> <ChillerDragon> fred company be like
04:38 < bridge> <TsFreddie> jetbrains does have that by default
04:38 < ws-client> <ChillerDragon> ew jetbrains
04:39 < bridge> <TsFreddie> cracked versions no less
04:39 < ws-client> <ChillerDragon> xd
04:39 < ws-client> <ChillerDragon> imagine having to crack your editor
04:39 < ws-client> <ChillerDragon> if there is free and open source ones
04:39 < ws-client> <ChillerDragon> like emacs
04:41 < bridge> <TsFreddie> it's just less work to train my coworkers to use git
04:41 < ws-client> <ChillerDragon> just tell them git gud
04:41 < bridge> <TsFreddie> no way
04:41 < ws-client> <ChillerDragon> i love how you have trainees that annoy you :D
04:45 < ws-client> <ChillerDragon> also get off of discord and back to work watafak
04:45 < ws-client> <ChillerDragon> i tell your boss
04:46 < bridge> <TsFreddie> i don't care about losing jobs
04:46 < bridge> <TsFreddie> they know that
04:51 < bridge> <TsFreddie> swedes got robbed
04:51 < ws-client> <ChillerDragon> wat
04:52 < bridge> <TsFreddie> isn't matrick swedish
04:52 < ws-client> <ChillerDragon> something like that
05:00 < bridge> <TsFreddie> wdym 0.7
05:05 < ws-client> <ChillerDragon> ddnet 0.7 client demos
05:06 < ws-client> <ChillerDragon> 弗雷迪
06:44 < bridge> <0xdeen> Could it also print the map and name of the people in that team or is that hard to add?
06:45 < bridge> <0xdeen> Seems like we have a lot of affected teehistorian files, so will take some time to go through all of them
08:13 < bridge> <Zwelf> that would work too (can also add a timestamp check).
09:17 < bridge> <TsFreddie> I'm tired (again)
10:42 < bridge> <Ewan> damn
11:05 < bridge> <ryozuki> fred again
11:09 < bridge> <ryozuki> https://twitter.com/kosenjuu/status/1778404783923331373
11:09 < bridge> <ryozuki> @mpft check this
11:10 < bridge> <ryozuki> audio
11:51 < bridge> <ryozuki> @learath2 do u know aarch64 asm
11:51 < bridge> <learath2> Nope. I know it has some quirks though
11:52 < bridge> <ryozuki> btw, do u have any hint on what a possible segfault could be if it only segfaults in x86_64, but not on aarch64? the result is wrong so its a bug
11:55 < bridge> <ryozuki> here is the assembly
11:55 < bridge> <ryozuki> the segfault happens on that store
11:55 < bridge> <learath2> Show registers
11:55 < bridge> <ryozuki> ok wait
11:55 < bridge> <ryozuki> gotta rerun this
11:55 < bridge> <ryozuki> xd
11:56 < bridge> <learath2> Rbx getting broken by that call is weird, isn’t rbx callee saved?
11:57 < bridge> <ryozuki> yeah
11:57 < bridge> <ryozuki> its odd
11:57 < bridge> <ryozuki> @learath2 u need a pop to restore it right?
11:57 < bridge> <ryozuki> or can u restore it by changing rsp
11:57 < bridge> <learath2> Afaik how you preserve it is not defined
11:58 < bridge> <ryozuki> ```
11:58 < bridge> <ryozuki> $rax   : 0x1               
12:03 < bridge> <ryozuki> the expr number changed but dont mind it the function
12:03 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1228284446218653716/message.txt?ex=662b7c08&is=66190708&hm=9a7f6571b43a06658d87bb937515eace3157f452799bda9861b80612d9252f48&
12:03 < bridge> <ryozuki> omg
12:04 < bridge> <learath2> Can you also check what is in r14? What function are you calling?
12:04 < bridge> <ryozuki> im calling `program::program::try_into_bytes[expr25](f0):`
12:09 < bridge> <learath2> Well I don’t see anything obv wrong. I guess I would step through see how on earth that pop rbx doesn’t happen or how rsp gets ruined
12:09 < bridge> <ryozuki> yeah
12:09 < bridge> <ryozuki> ill look more into this
12:10 < bridge> <ryozuki> @learath2 u know how fun it is not knowing if something is your bug or a llvm bug
12:10 < bridge> <ryozuki> xD
12:10 < bridge> <ryozuki> we found a MLIR bug that got fixed in llvm 18
12:11 < bridge> <learath2> If this is rust, it could be miscompilation
12:12 < bridge> <ryozuki> no its our own
12:12 < bridge> <ryozuki> compiler
12:12 < bridge> <ryozuki> its how i added the sigtrap
12:12 < bridge> <ryozuki> manually xd
12:12 < bridge> <ryozuki> u can see the int3
12:14 < bridge> <ryozuki> and ye its probs something we do wrong
12:14 < bridge> <learath2> Then your own mistake is more likely
12:14 < bridge> <ryozuki> yeah
12:16 < bridge> <0xdeen> Stack overflow? https://github.com/rust-lang/rust/issues/79935
12:16 < bridge> <ryozuki> its not rust
12:17 < bridge> <ryozuki> xD
12:17 < bridge> <learath2> But it could be stack overflow for you too
12:17 < bridge> <ryozuki> do u overflow the stack on a store?
12:18 < bridge> <ryozuki> hmm could be
12:18 < bridge> <learath2> Maybe you have a store into a wrong offset that ruins the stack pointer or the stack itself in that call into r14, which restores a wrong rbx
12:19 < bridge> <ryozuki> true
12:20 < bridge> <learath2> I would first keep track of rsp, see if that’s broken
12:23 < bridge> <ryozuki> @learath2 notice
12:24 < bridge> <ryozuki> there is a  add    rsp, 0x68
12:24 < bridge> <ryozuki> xD
12:25 < bridge> <ryozuki> before the pops
12:25 < bridge> <ryozuki> its what messes the rsp
12:25 < bridge> <ryozuki> and sets rbx to  0x00007fff00000000
12:25 < bridge> <ryozuki> which is not rly a addr
12:25 < bridge> <ryozuki> before going to that it comes from a jump
12:25 < bridge> <ryozuki> `  0x00007ffff7fc233b <+155>:   jmp    0x7ffff7fc23b8 <program::program::try_into_bytes[expr25](f0)+280>`
12:25 < bridge> <ryozuki> this jump
12:25 < bridge> <ryozuki> it skips this
12:25 < bridge> <ryozuki> 
12:25 < bridge> <ryozuki> ```
12:25 < bridge> <ryozuki>  0x00007ffff7fc2378 <+216>:   mov    QWORD PTR [rsp+0x18],rcx
12:25 < bridge> <ryozuki>    0x00007ffff7fc237d <+221>:   mov    QWORD PTR [rsp+0x10],rax
12:25 < bridge> <ryozuki>    0x00007ffff7fc2382 <+226>:   mov    BYTE PTR [rsp+0x8],0x1
12:25 < bridge> <ryozuki>    0x00007ffff7fc2387 <+231>:   mov    DWORD PTR [rsp+0x20],0x8
12:25 < bridge> <ryozuki> ```
12:25 < bridge> <learath2> Mh, that’s normal, the add is to get rid of the stack of the callee
12:26 < bridge> <ryozuki> true there is also a    0x00007ffff7fc22a7 <+7>:     sub    rsp,0x68
12:26 < bridge> <ryozuki> at the start
12:26 < bridge> <learath2> Push push push, sub rsp to allocate the stack of the callee,……,add rsp to deallocate the stack of the callee, pop pop pop
12:26 < bridge> <ryozuki> how can i print the stack minus 0x68?
12:26 < bridge> <learath2> In gdb?
12:26 < bridge> <ryozuki> ```
12:26 < bridge> <ryozuki> Dump of assembler code for function program::program::try_into_bytes[expr25](f0):
12:26 < bridge> <ryozuki>    0x00007ffff7fc22a0 <+0>:     push   r15
12:27 < bridge> <ryozuki>    0x00007ffff7fc22a2 <+2>:     push   r14
12:27 < bridge> <ryozuki>    0x00007ffff7fc22a4 <+4>:     push   r12
12:27 < bridge> <ryozuki>    0x00007ffff7fc22a6 <+6>:     push   rbx
12:27 < bridge> <ryozuki>    0x00007ffff7fc22a7 <+7>:     sub    rsp,0x68
12:27 < bridge> <ryozuki>    0x00007ffff7fc22ab <+11>:    int3
12:27 < bridge> <ryozuki> => 0x00007ffff7fc22ac <+12>:    mov    r14,rdi
12:27 < bridge> <ryozuki> ```
12:27 < bridge> <ryozuki> i can only stop here
12:27 < bridge> <ryozuki> after the sub
12:27 < bridge> <ryozuki> ye gdb
12:27 < bridge> <learath2> $rsp + 0x68 no?
12:27 < bridge> <learath2> - whatever
12:27 < bridge> <ryozuki> gef➤  print ($rsp+0x68)
12:27 < bridge> <ryozuki> $2 = (void *) 0x7fffffff8a68
12:27 < bridge> <ryozuki> xd
12:27 < bridge> <learath2> \- whatever
12:28 < bridge> <ryozuki> gef➤  print *0x7fffffff8a68
12:28 < bridge> <ryozuki> $3 = 0xffff8b98
12:28 < bridge> <learath2> You want to examine the memory there, not just it’s address
12:28 < bridge> <ryozuki> how
12:28 < bridge> <ryozuki> i forgot gdb xd
12:28 < bridge> <learath2> `x/10w ($rsp+0x68)
12:29 < bridge> <ryozuki> whats x?
12:29 < bridge> <learath2> `x/10w ($rsp+0x68)`
12:29 < bridge> <learath2> eXamine
12:29 < bridge> <ryozuki> gef➤  print x/10w ($rsp+0x68)
12:29 < bridge> <ryozuki> No symbol "x" in current context.
12:29 < bridge> <learath2> No print
12:29 < bridge> <ryozuki> ```
12:29 < bridge> <ryozuki> 0x7fffffff8a68: 0xffff8b98      0x7fff  0x0     0x0
12:29 < bridge> <ryozuki> 0x7fffffff8a78: 0xf7fc22a0      0x7fff  0x9875ec        0x0
12:29 < bridge> <ryozuki> 0x7fffffff8a88: 0xf7fc204a      0x7fff
12:29 < bridge> <ryozuki> ```
12:30 < bridge> <learath2> Make that 10g
12:30 < bridge> <ryozuki> can you explain what it does
12:33 < bridge> <ryozuki> ```
12:33 < bridge> <ryozuki> gef➤  x/10g ($rsp+0x68)
12:33 < bridge> <ryozuki> 0x7fffffff8ad0: 0x1db4d9cee6f2494c      0xaab0955087dea811
12:33 < bridge> <ryozuki> 0x7fffffff8ae0: 0x2c30e620ff7c8a4b      0x5246686403a16a1c
12:33 < bridge> <ryozuki> 0x7fffffff8af0: 0xd77697b53557a631      0xc925852851117366
12:33 < bridge> <ryozuki> 0x7fffffff8b00: 0x8     0x0
12:33 < bridge> <ryozuki> 0x7fffffff8b10: 0x1     0x9875ec
12:33 < bridge> <ryozuki> ```
12:33 < bridge> <ryozuki> oh wait
12:33 < bridge> <ryozuki> ```
12:33 < bridge> <ryozuki> gef➤  x/10g ($rsp)
12:33 < bridge> <ryozuki> 0x7fffffff8a68: 0x7fff00000000  0x0
12:34 < bridge> <ryozuki> 0x7fffffff8a78: 0x7ffff7fc22a0  0x9875ec
12:34 < bridge> <ryozuki> 0x7fffffff8a88: 0x7ffff7fc204a  0x0
12:34 < bridge> <ryozuki> 0x7fffffff8a98: 0x0     0x0
12:34 < bridge> <ryozuki> 0x7fffffff8aa8: 0x0     0x0
12:34 < bridge> <ryozuki> ```
12:34 < bridge> <ryozuki> this one
12:34 < bridge> <ryozuki> looks like smth changes it
12:34 < bridge> <learath2> Okay the stack value got destroyed, so lets watch that address and see what destroys it
12:34 < bridge> <ryozuki> how? xD
12:34 < bridge> <ryozuki> watch i guess
12:36 < bridge> <learath2> Yep
12:36 < bridge> <learath2> Make sure you cast it to something 8 byte though
12:37 < bridge> <learath2> `watch *(size_t *)($rsp+0x68)` or something like that
12:41 < bridge> <ryozuki> it moves the byte 0x0 to the addr at r9
12:42 < bridge> <ryozuki> the other break is at the pop
12:42 < bridge> <ryozuki> → 0x7ffff7fc23bf <program::program::try_into_bytes[expr25](f0)+287> pop    rbx
12:42 < bridge> <learath2> See the lea r9 at +74?
12:42 < bridge> <ryozuki> oh wait i rerun
12:43 < bridge> <ryozuki> 0x00007ffff7fc22e5 <+69>:    lea    r10,[rsp+0x48]
12:43 < bridge> <ryozuki>    0x00007ffff7fc22ea <+74>:    lea    r9,[rsp+0x28]
12:43 < bridge> <ryozuki> yes
12:44 < bridge> <learath2> I’ve run out of context at this point, but that first write you found is what destroys the value in stack. Perhaps you have a self referential pointer there?
12:44 < bridge> <ryozuki> could be
12:44 < bridge> <ryozuki> thanks for the help though!
12:44 < bridge> <learath2> Hope it’s of some use. Gl
12:46 < bridge> <ryozuki> ```
12:46 < bridge> <ryozuki>    0x00007ffff7fc22e5 <+69>:    lea    r10,[rsp+0x48] ; this stack addr is loaded into r9 
12:46 < bridge> <ryozuki>    0x00007ffff7fc22ea <+74>:    lea    r9,[rsp+0x28] ; or this stack addr is loaded into r9
12:46 < bridge> <ryozuki>    0x00007ffff7fc22ef <+79>:    sub    esi,DWORD PTR [rsp+0x90]
12:46 < bridge> <ryozuki>    0x00007ffff7fc22f6 <+86>:    cmp    r8d,esi ; which depends on this
12:46 < bridge> <ryozuki>    0x00007ffff7fc22f9 <+89>:    cmove  r9,r10 ; at this cmov
12:46 < bridge> <ryozuki> ```
12:46 < bridge> <ryozuki> @learath2 actually it may be the first lea too
12:46 < bridge> <ryozuki> cuz the cmp and cmove
12:50 < bridge> <learath2> Maybe zero initialize the local stack, that might make the bug more obvious
12:51 < bridge> <learath2> You also seem to access far more than you allocate. I don't quite understand whats going on there
12:51 < bridge> <ryozuki> xD
12:52 < bridge> <learath2> 0x68 we reserve for the frame, but I see access to rsp + a8 98, b8
12:52 < bridge> <ryozuki> i see i see
12:53 < bridge> <ryozuki> i guess i might be doing some allocas wrong
12:53 < bridge> <ryozuki> by alloca i mean this https://llvm.org/docs/LangRef.html#alloca-instruction
12:56 < bridge> <ryozuki> @learath2 if u look enough im sure u can get a nice job
12:56 < bridge> <ryozuki> ur a pro
12:56 < bridge> <learath2> I guess that is enough hints for you to go off of for now. Filling your stack with 0s might make it crash faster and more obv
12:56 < bridge> <ryozuki> yeah
12:56 < bridge> <ryozuki> ill see how i can do that with llvm xD
12:56 < bridge> <ryozuki> well i guess i can zero init after a alloca
12:56 < bridge> <learath2> Might be a good start yeah
12:56 < bridge> <ryozuki> or is 0xbeef more obvious
12:56 < bridge> <ryozuki> xd
12:57 < bridge> <ryozuki> @learath2 any good books on debugging?
12:58 < bridge> <ryozuki> or gdb related
12:58 < bridge> <ryozuki> or resources
12:58 < bridge> <ryozuki> i rly need to step up my debugging xD
12:58 < bridge> <ryozuki> i can get my company to buy it >:)
12:58 < bridge> <learath2> That is one topic I never really read up on. I just kept referring to the gdb docs as I needed stuff
12:58 < bridge> <ryozuki> i see
12:58 < bridge> <learath2> Learning some reverse engineering does help. It is a similar kind of thinking
12:59 < bridge> <ryozuki> yeah
13:06 < bridge> <ryozuki> @learath2 funny thing when i was debugging i found calls to memcpy avx512
13:06 < bridge> <ryozuki> pog ryzen
13:06 < bridge> <ryozuki> xD
13:06 < bridge> <learath2> Pogzen
13:07 < bridge> <ryozuki> do u know what is __futex_abstimed_wait_common64
13:19 < bridge> <learath2> The driver thing? I've had to in the past
13:19 < bridge> <ryozuki> why does ddd look so ugly
13:19 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1228303451667300372/image.png?ex=662b8dbb&is=661918bb&hm=f3b6ac75e870cbad389da972b11eb3f23b14efbf9100c274e451d2c8895bb531&
13:19 < bridge> <learath2> It's the userspace part of the futex wait for uncontested futexes iirc
13:20 < bridge> <learath2> It'll spin there for very little time before going into a deeper slumber using the futex syscall
13:20 < bridge> <learath2> Oh, I've never seen this
13:20 < bridge> <ryozuki> i guess ddd is ancient
13:20 < bridge> <ryozuki> GNU DDD
13:20 < bridge> <ryozuki> https://www.gnu.org/software/ddd/
13:20 < bridge> <learath2> I only use gdb and sometimes gdb with tui
13:28 < bridge> <learath2> Oh and gdb with gef when reverse engineering
14:04 < bridge> <ryozuki> @learath2 https://www.phoronix.com/news/Gentoo-Linux-SPI-Project
14:04 < bridge> <ryozuki> @learath2 https://www.gentoo.org/news/2024/04/10/SPI-associated-project.html
15:50 < bridge> <ryozuki> @learath2
15:50 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1228341424752169031/img_7159.png?ex=662bb119&is=66193c19&hm=0e681f497dfea2099ba739effac0083b80a4c70be48e7af0198264365c53841e&
15:51 < bridge> <learath2> So true
15:51 < bridge> <_gwendal> lmao i love that template so much
16:08 < bridge> <meloƞ> XDD
16:11 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1228346830970945647/image.png?ex=662bb622&is=66194122&hm=fa23388ccfce2f20f58dad0ac0af56cd52130301237a7d81d97f1e8811f21e32&
16:12 < bridge> <ryozuki> @learath2 what u think
16:12 < bridge> <ryozuki> i looked to much assembly i need memes now
17:01 < bridge> <ryozuki> https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf
17:10 < bridge> <learath2> Postgres is a very flexible tool indeed. Unless you have some extreme demands from your data store, it can fill in for a lot of the newfangled stuff
17:11 < bridge> <ryozuki> omg weird stuff
17:11 < bridge> <ryozuki> i was testing this using a JIT engine from llvm
17:11 < bridge> <ryozuki> using it as a .so library it doesnt segfault
17:12 < bridge> <ryozuki> oh
17:12 < bridge> <ryozuki> the .so isnt optimized
17:12 < bridge> <learath2> If optimization is what breaks it, it’s very very likely you are violating a constraint without noticing
17:13 < bridge> <ryozuki> yep
17:14 < bridge> <ryozuki> without opts the stack looks so clean
17:14 < bridge> <ryozuki> its all zeros
17:14 < bridge> <ryozuki> there is only this  0x00007fffffff8b30  →  0x0000000000000000
17:16 < bridge> <ryozuki> yep it breaks
18:07 < bridge> <ryozuki> https://cdn.discordapp.com/attachments/293493549758939136/1228375946676011008/GK88Ln9akAAuc5h.jpg?ex=662bd13f&is=66195c3f&hm=0f86007d75af210ffa97c096ca484f8b06f81b89386eb3be8b6e2357e8abf09a&
18:41 < bridge> <milkeeycat> Average Postgres W :gigachad:
18:53 < bridge> <Peakies> yo have question records channel messages about top 1 of each map is public to know how it's calculate and comparing to next place ?
18:55 < bridge> <teero777> just do `(old_time / new_time) * 100`?
18:55 < bridge> <teero777> time in game ticks
18:56 < bridge> <Peakies> no I mean when and where it's check is it checking on ddnet server then it's sending by discord webhook ?
19:00 < bridge> <furo> It's done here, https://github.com/ddnet/ddnet-scripts/blob/808c81af00f928209041bdd08338b1175dc357ef/servers/scripts/top-ranks.py#L57 and then sent to the webhook with this script, https://github.com/ddnet/ddnet-scripts/blob/master/servers/scripts/discord-ranks.py
19:02 < bridge> <Peakies> oh tnx ❤️
19:18 < bridge> <Peakies> sorry what is `scripts/discord-ranks-last` for ?
20:10 < bridge> <Ewan> scary
20:45 < bridge> <teero777> direct 3d? :justatest:
20:46 < bridge> <headshotnoby> don't be misled... that's just what i'm using as the renderer on dolphin
20:46 < bridge> <headshotnoby> :justatest:
21:13 < bridge> <peter0x44> I saw a different variation
21:13 < bridge> <peter0x44> https://cdn.discordapp.com/attachments/293493549758939136/1228422673374384138/whatisanindex-v0-cs09idk4eytc1.webp?ex=662bfcc4&is=661987c4&hm=fbb3ae8d1b9de18ac5bec98a75db550a15967dadb910d8ecb9d66f5a96d2f1c8&
21:13 < bridge> <peter0x44> I love it when I type too fast and get sent to bing instead
21:43 < bridge> <zwelf2> The output is now a lot clearer. It outputs player names, timestamp, map and only looks at teehistorian files between `2024-04-07` and `2024-04-13`. I think for the remaining affected teehistorian files it is best to check with the database whether finishes exist on those and only then check the demo.
21:44 < bridge> <egyt> I just use Open-Shell
21:45 < bridge> <zwelf2> https://gitlab.com/ddnet-rs/twgame/-/tree/255b60e92821afebeb3a4da17e529a748f8d5890
21:48 < bridge> <peter0x44> even better
21:48 < bridge> <peter0x44> https://cdn.discordapp.com/attachments/293493549758939136/1228431589151739946/ztveebvr2x761.webp?ex=662c0512&is=66199012&hm=d71b2e58b83cad0dc2dce00fdf03876ea7ba76a8791f65e368cc6e0644a2c82a&
21:57 < bridge> <milkeeycat> Gentoo mentioned
22:04 < bridge> <Ewan> Why
22:04 < bridge> <Ewan> He wants u to use Vulkan
22:13 < bridge> <learath2> GENTOO
22:54 < bridge> <Ewan> jesus christ
22:59 < bridge> <Ewan> unrelated but the dr put me on vyvanse and it's like i was living in hard mode tbh
22:59 < bridge> <Ewan> now i don't really have to think about whether or not i want to do something before i do it
22:59 < bridge> <Ewan> i feel actually normal
22:59 < bridge> <Ewan> now i want a feature to add to ddnet or something
22:59 < bridge> <Ewan> to kill time
23:11 < bridge> <meloƞ> speaking of kill - may i reintroduce the idea to rescue on kill tile collision within practice mode? :kek: - why not write some rust stuff!
23:12 < bridge> <Ewan> like i've already said, it's completely finished the way i want it to be done
23:12 < bridge> <Ewan> if heinrich has other intentions then he's free to implement them
23:12 < bridge> <Ewan> but i'm not putting in more work just so his toddler attitude can be appeased
23:13 < bridge> <Ewan> thanks for the suggestion though
23:13 < bridge> <Ewan> doing something in rust is a good idea
23:13 < bridge> <Ewan> but im not sure what
23:13 < bridge> <headshotnoby> :justatest:
23:15 < bridge> <Ewan> i'm hoping some of zwelf's rust interfaces get merged eventually
23:15 < bridge> <Ewan> so ddnet rust can actually be functional
23:16 < bridge> <Ewan> atm it'd be so much FFI tomfoolery to even get started
23:16 < bridge> <meloƞ> im currently cooking a (currently closed source) rustapi to handle accounts using sqlx, and tokio, loving the journey so far
23:18 < bridge> <meloƞ> ```rust
23:18 < bridge> <meloƞ> pub async fn create(pool: &MySqlPool, user: User) -> Result<Option<i32>, sqlx::Error> {
23:18 < bridge> <meloƞ>     let result = sqlx::query("INSERT IGNORE INTO users (username, password) VALUES (?, ?)")
23:18 < bridge> <meloƞ>         .bind(&user.username)
23:18 < bridge> <meloƞ>         .bind(&user.password)
23:18 < bridge> <meloƞ>         .execute(pool)
23:18 < bridge> <meloƞ>         .await?;
23:18 < bridge> <meloƞ> 
23:18 < bridge> <meloƞ>     if result.rows_affected() == 1 {
23:18 < bridge> <meloƞ>         Ok(Some(result.last_insert_id() as i32))
23:18 < bridge> <meloƞ>     } else {
23:18 < bridge> <meloƞ>         Ok(None)
23:18 < bridge> <meloƞ>     }
23:18 < bridge> <meloƞ> }
23:18 < bridge> <meloƞ> ```
23:18 < bridge> <meloƞ> 
23:18 < bridge> <meloƞ> i fckn love this syntax so much, its so much fun
23:19 < bridge> <meloƞ> me and gerdoe (want to give proper credit ofc) currently cooking a (currently closed source) rustapi to handle accounts using sqlx, and tokio, loving the journey so far
23:19 < bridge> <meloƞ> gerdoe and me (want to give proper credit ofc) are currently cooking a (currently closed source) rustapi to handle accounts using sqlx, and tokio, loving the journey so far
23:20 < bridge> <meloƞ> gerdoe and me (want to give proper credit ofc) are currently cooking a (currently closed source) rustapi to handle accounts using sqlx, axum and tokio, loving the journey so far
23:28 < bridge> <learath2> Lisdexamfetamine just doesn't do anything for me. Methylphenidate kinda makes me want to do stuff but I only ever had it for a short while since no doctor wants to prescribe it in Italy or Turkey
23:31 < bridge> <learath2> I'm doomed to undiagnosed adhd since no doctor is willing to diagnose me. They just say I'm depressed ignoring the fact that I'm depressed because of my adhd, not the other way around
23:31 < bridge> <Ewan> i feel like i was the same way to be honest
23:31 < bridge> <Ewan> i mean
23:31 < bridge> <Ewan> im not out of it yet right
23:31 < bridge> <Ewan> i'm new on vyvanse
23:32 < bridge> <Ewan> but if it continues to work the way it has then i feel like it's the solution for me
23:32 < bridge> <Ewan> most of my depressive tendencies are a result of bad habits from adhd
23:32 < bridge> <Ewan> it's sad that it doesn't work for you, i never tried ritalin so i can't say much about it
23:34 < bridge> <Ewan> i feel like when i was younger i could do these things without consequences
23:34 < bridge> <Ewan> but it takes its toll
23:34 < bridge> <Ewan> sleep whenever, eat whenever, caff whenever
23:34 < bridge> <Ewan> only do school if i want
23:34 < bridge> <meloƞ> Ritalin for me (i got it prescribed as a Kid until i was 18 y/o) Just Made Me sleepy and loose my appetite, it only really worked for exams where sitting still was difficult for Me
23:34 < bridge> <Ewan> that's usually how it's supposed to work unfortunately
23:35 < bridge> <Ewan> it's supposed to make you feel "normal"
23:35 < bridge> <Ewan> maybe sleepy is a side effect
23:35 < bridge> <meloƞ> If thats normal i rather snort crack everyday fr
23:35 < bridge> <Ewan> i sort of lose my edge in the late afternoon
23:35 < bridge> <Ewan> but i think it would be fixed by proper sleep habits
23:35 < bridge> <Ewan> constent and abundant sleep is incredibly important for your health
23:35 < bridge> <ryozuki> ur not using sqlx power
23:35 < bridge> <ryozuki> use the macro
23:36 < bridge> <meloƞ> 10€ and i might
23:36 < bridge> <meloƞ> :justatest:
23:36 < bridge> <ryozuki> also u use ?
23:36 < bridge> <ryozuki> use psql directly
23:36 < bridge> <ryozuki> oh wait is it mysql
23:36 < bridge> <meloƞ> Yes
23:36 < bridge> <ryozuki> boo
23:36 < bridge> <meloƞ> :kek:
23:36 < bridge> <Ewan> use mongodb
23:36 < bridge> <Ewan> it's webscale
23:36 < bridge> <meloƞ> Nah
23:36 < bridge> <ryozuki> use the sqlx::query! macro
23:36 < bridge> <ryozuki> for compile time checked queries
23:37 < bridge> <Ewan> nice
23:38 < bridge> <meloƞ> What would be the benefit in my usecase tho ?
23:39 < bridge> <ryozuki> u know ur query is valid
23:39 < bridge> <ryozuki> xd
23:39 < bridge> <Ewan> if the query is malformed it will fail to compile
23:39 < bridge> <meloƞ> Im checking the query values during the Initial request tho
23:40 < bridge> <Ewan> ok but do u want to investigate when u make a typo
23:40 < bridge> <Ewan> or do u want the compiler to do it for you
23:40 < bridge> <meloƞ> I dont do typos :feelsbadman:
23:40 < bridge> <Ewan> :gigachad:
