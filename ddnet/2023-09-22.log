00:22 < bridge> <teero777> hey has anyone found a fix for the weird font cutting when using a different resolution ingame than the monitor is set to?
00:40 < bridge> <Ewan> what does this mean
01:29 < bridge> <reitw> hi, is it me or https://github.com/ddnet/ddnet/pull/5829 is not fully implemented ?
01:29 < bridge> <reitw> 
01:29 < bridge> <reitw> `Msg.AddString("", 0); // HTTPS map download URL`
01:36 < bridge> <Ewan> that is definitely not what i said
01:36 < bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1154561735378870302/image.png
01:52 < bridge> <Ewan> their --help is out of date...
01:52 < bridge> <Ewan> ```
01:52 < bridge> <Ewan> ./configure --help | grep pcre
01:52 < bridge> <Ewan>   -pcre ................ Select used libpcre2 [system/qt/no]
01:52 < bridge> <Ewan> ```
01:52 < bridge> <chillerdragon> Yea ddnet does not implement it. It‚Äôs more a placeholder for other who want to use it.
01:52 < bridge> <Ewan> but online doc says:
01:52 < bridge> <Ewan> https://cdn.discordapp.com/attachments/293493549758939136/1154565961593143366/image.png
01:53 < bridge> <chillerdragon> Put your http map download endpoint there to enable faster downloads for your users
03:52 < bridge> <_voxeldoesart> ooh whats the sound refactor gonna change
06:03 < bridge> <ryozuki> a refactor usually doesnt change functionality it just makes code better
06:17 < bridge> <Ewan> i got my static qt build working
06:17 < bridge> <Ewan> 20MB with LTOs
06:18 < bridge> <Ewan> not bad at all
06:18 < bridge> <Ewan> executable linked against it is 20MB with LTOs
06:18 < bridge> <Ewan> executable linked against it is 20MB with LTOs & -Oz -s
07:53 < bridge> <Mr.Gh0s7> yo chillerdragon ^^
08:36 < bridge> <ryozuki> welcome to ddnet friday rust
08:49 < bridge> <MilkeeyCat> morning üçµ
08:49 < bridge> <fokkonaut> baguette ü•ñ
09:36 < bridge> <TsFreddie> ramen üçú
09:48 < bridge> <ryozuki> ‚òï
10:07 < bridge> <teero777> wait ill send video in a few hours
10:07 < bridge> <Ewan> gppd ,prmogmg
10:07 < bridge> <Ewan> good morning
10:09 < bridge> <cyberFighter> u
11:23 < bridge> <MilkeeyCat> Can i have ddnet friday gentoo
12:26 < bridge> <teero777> does ddnet run on a raspberry pi zero w? xd
12:28 < bridge> <teero777> Thursday night is for gentoo. idk but Donnerstag nachts somehow fits to gentoo
12:30 < bridge> <deen> You can try, should be fine. 64 players might be a challenge depending on single core performance
12:30 < bridge> <teero777> :brownbear: nice
12:31 < bridge> <deen> I used to run Teeworlds servers on a much weaker CPU before starting DDNet: https://www.pcengines.ch/alix1e.htm
12:31 < bridge> <teero777> I don't mean a server. I mean the literal client xd
12:32 < bridge> <deen> Oh, didn't realize that Raspi has graphics output, should have looked closer üòÑ
12:32 < bridge> <deen> Probably fine too
12:32 < bridge> <deen> If you install something like Debian, they have arm builds of DDNet
12:32 < bridge> <deen> Our official site doesn't provide arm builds for Linux
12:33 < bridge> <teero777> https://www.raspberrypi.com/products/raspberry-pi-zero-w/
12:44 < bridge> <MilkeeyCat> The hell is donnerstag nachts
12:44 < bridge> <MilkeeyCat> The hell is donnerstag nachts?
12:44 < bridge> <teero777> Ask chiller
12:44 < bridge> <MilkeeyCat> Idk how to ping him :pepeW:
12:45 < bridge> <teero777> can't explain. It's kind of a feeling
12:46 < bridge> <teero777> That tomorrow is the last day of the week and you know you should get to bed early but then you somehow stay up until 4am on a Friday and thats Donnerstag nachts.
12:46 < bridge> <ryozuki> rly? is it hard to cross compile
12:46 < bridge> <teero777> Im sure @jupeyy_keks can explain it better
12:47 < bridge> <ryozuki> i should make a gh mirror that tracks releases and compiles on my server too, for fun
12:47 < bridge> <teero777> That tomorrow is the last day of the week and you know you should get to bed early but then you somehow stay up until 4am and thats Donnerstag nachts.
12:47 < bridge> <ryozuki> reproducible builds amirite
13:16 < bridge> <Jupstar ‚ú™> Never heard of it either
13:17 < bridge> <Ewan> cross compiling is reasonably easy
13:17 < bridge> <Ewan> it‚Äôd just be a cmake toolchain file in this case
13:18 < bridge> <Ewan> as long as the compiler, utils and dependencies for aarch64 are installed
15:08 < bridge> <Jupstar ‚ú™> @ryozuki rust question of today:
15:08 < bridge> <Jupstar ‚ú™> have u already used vulkan with rust finally üò¨
15:12 < bridge> <teero777> https://media.discordapp.net/attachments/875490045316968538/1154304866882162718/IMG_8028.jpg
15:12 < bridge> <teero777> XD
15:14 < bridge> <Jupstar ‚ú™> the funny thing is. i recently thought:
15:14 < bridge> <Jupstar ‚ú™> If china would be really communistic. there should be more open source projects from china üòÇ
15:15 < bridge> <Jupstar ‚ú™> but i want to hear @learath2 's humble opinion
15:25 < bridge> <ryozuki> ye vulkano
15:27 < bridge> <teero777> Everytime I look into my gh recommendations I see at least one Chinese random project that has 3000 stars and all the docs are in Chinese xd
15:29 < bridge> <teero777> Everytime I look into my gh recommendations I see at least one chinese project that has 3000 stars and all the docs are in chinese xd
15:44 < bridge> <learath2> on what?
15:45 < ChillerDragon> @teero777 well its your recommendations so you must have starred some of those... gh algo knows what you want! My github for you page is full of hot girls
15:46 < ChillerDragon> oh and endless minecraft hack clients xd
16:02 < bridge> <Jupstar ‚ú™> shouldn't we _only_ see OSS projects from them? ^^
16:03 < bridge> <learath2> China is pretty big fan of capitalism
16:04 < bridge> <learath2> They‚Äôve been flirting with the neolibs since mr xiaoping
16:17 < bridge> <ryozuki> there are OSS projects in china
16:17 < bridge> <ryozuki> i think most are ML
16:17 < bridge> <ryozuki> rust is also widely used
16:18 < bridge> <ryozuki> i seen some of my blogpost translated to chinese in some sites
16:21 < bridge> <Jupstar ‚ú™> fame
16:22 < bridge> <ryozuki> ye
16:22 < bridge> <ryozuki> fame
16:22 < bridge> <ryozuki> suffering from success
16:22 < bridge> <ryozuki> i found out thansk to google search console
16:22 < bridge> <ryozuki> it tells backlinks
16:31 < bridge> <learath2> Fastjson is the one big oss project I can think of out of china
16:42 < bridge> <Jupstar ‚ú™> Java
16:42 < bridge> <Jupstar ‚ú™> fast & java in one setence
16:45 < bridge> <Jupstar ‚ú™> i'd need to touch so many images again for #7169
16:45 < bridge> <DDNet> https://github.com/ddnet/ddnet/pull/7169
16:46 < bridge> <Jupstar ‚ú™> does git support smth like a "from this commit, treat the repo as new" function? xd
16:50 < bridge> <Jupstar ‚ú™> @ryozuki rust should make a `take` like that from Option for Vec xd
16:50 < bridge> <Jupstar ‚ú™> 
16:50 < bridge> <Jupstar ‚ú™> makes it easy to move Vecs if moving itself is not possible
16:51 < bridge> <ryozuki> how would a take for vecs work
16:51 < bridge> <ryozuki> isnt it that simply pop
16:51 < bridge> <ryozuki> but the thing is a vector has the requirements that it needs to have the elements be contiguous
16:51 < bridge> <Jupstar ‚ú™> take the whole vector and leave default
16:51 < bridge> <Jupstar ‚ú™> so new vector
16:51 < bridge> <Jupstar ‚ú™> basically a mem_swap
16:51 < bridge> <ryozuki> i mean
16:52 < bridge> <ryozuki> u can do that
16:52 < bridge> <ryozuki> let me wip up code
16:53 < bridge> <Jupstar ‚ú™> well i use std::mem::take.. that's good enough
16:53 < bridge> <ryozuki> ```
16:53 < bridge> <ryozuki> fn main() {
16:53 < bridge> <ryozuki>     let mut a = vec![2, 3, 4];
16:53 < bridge> <ryozuki>     let mut b = vec![];
16:53 < bridge> <ryozuki>     std::mem::swap(&mut a, &mut b);
16:53 < bridge> <ryozuki> }
16:53 < bridge> <ryozuki> 
16:53 < bridge> <ryozuki> ```
16:53 < bridge> <ryozuki> u need to leave something
16:53 < bridge> <ryozuki> so here u use swap
16:53 < bridge> <ryozuki> the default vector as u mentioned
16:53 < bridge> <ryozuki> which here is b
16:53 < bridge> <Jupstar ‚ú™> yes
16:53 < bridge> <Jupstar ‚ú™> this does not look verbose to you? xd
16:53 < bridge> <ryozuki> if u want to be able to leave "uninitialized" vector u need to use MaybeUninit
16:54 < bridge> <Jupstar ‚ú™> std::mem::take is at least 1-liner üòÑ
16:54 < bridge> <ryozuki> i mean, u should just .clone
16:54 < bridge> <ryozuki> and then .clear
16:54 < bridge> <ryozuki> and if u wanna make sure the vector doesnt use the size
16:54 < bridge> <Jupstar ‚ú™> clone is expensive xd
16:54 < bridge> <ryozuki> .shrink_to_fit
16:54 < bridge> <ryozuki> wdym
16:54 < bridge> <Jupstar ‚ú™> then i have the same vec twice
16:55 < bridge> <ryozuki> but if u dont need that same vec twice
16:55 < bridge> <Jupstar ‚ú™> i just need to move it around basically, but moving itself not possible
16:55 < bridge> <ryozuki> just "move"
16:55 < bridge> <ryozuki> the original vector
16:55 < bridge> <ryozuki> anyway u can do what i meantioned about swap
16:55 < bridge> <ryozuki> Vec::new doesnt allocate btw
16:55 < bridge> <ryozuki> it allocates on the first insert
16:55 < bridge> <Jupstar ‚ú™> ^
16:56 < bridge> <ryozuki> if u want one liners use python
16:56 < bridge> <Jupstar ‚ú™> it is a 1-liner
16:56 < bridge> <Jupstar ‚ú™> lmao
16:56 < bridge> <Jupstar ‚ú™> it already exists
16:56 < bridge> <ryozuki> xd
16:56 < bridge> <Jupstar ‚ú™> it's just not a call to Vec, like Option
16:56 < bridge> <ryozuki> ohh
16:56 < bridge> <ryozuki> yeah
16:56 < bridge> <ryozuki> take does this
16:56 < bridge> <Jupstar ‚ú™> i better make this 1000 lines of code, rather than using python üòÇ
16:57 < bridge> <ryozuki> well i guess u can simply use mem take
16:57 < bridge> <ryozuki> so they decided to not put the method
16:57 < bridge> <Jupstar ‚ú™> but why did they with option üò¨
16:57 < bridge> <ryozuki> less methods = less api surface to maintain
16:57 < bridge> <ryozuki> i guess cuz take in option is rly common
16:57 < bridge> <ryozuki> and it makes more sense
16:57 < bridge> <ryozuki> because the default for option is none
16:57 < bridge> <ryozuki> u take on some
16:58 < bridge> <ryozuki> it has more meaning to it
16:59 < bridge> <Jupstar ‚ú™> @ryozuki do u prefer .iter().foreach
16:59 < bridge> <Jupstar ‚ú™> or 
16:59 < bridge> <Jupstar ‚ú™> for .. in ..
16:59 < bridge> <ryozuki> for in
16:59 < bridge> <ryozuki> hmm i usually dont rly use iterators for foreach
16:59 < bridge> <ryozuki> mostly filter,map,etc
16:59 < bridge> <ryozuki> but i wonder maybe in some cases foreach is faster
17:00 < bridge> <ryozuki> "The implementations of closures and iterators are such that runtime performance is not affected. This is part of Rust‚Äôs goal to strive to provide zero-cost abstractions."
17:00 < bridge> <ryozuki> this is arguign against iterators being slower
17:01 < bridge> <ryozuki> @jupeyy_keks btw i think ..= is slower in iterators
17:01 < bridge> <ryozuki> than ..
17:01 < bridge> <ryozuki> x..y
17:01 < bridge> <ryozuki> x..=y
17:01 < bridge> <Jupstar ‚ú™> i mean it's one iteration more xd
17:01 < bridge> <Jupstar ‚ú™> or is it slower than x..(y+1)
17:21 < bridge> <_voxeldoesart> @ryozuki whats your plan to expand rust in the ddnet code
20:27 < bridge> <cyberFighter> does this cause the server to shut down if u close your client
20:30 < bridge> <robyt3> No, that was already the case before, if you started the server from the client
21:18 < bridge> <steinchen99> Zillyhuhn real
21:18 < bridge> <steinchen99> https://discord.com/channels/252358080522747904/295908390956433410/1154858469661351997
22:00 < bridge> <_voxeldoesart> LOL
22:00 < bridge> <_voxeldoesart> https://cdn.discordapp.com/attachments/293493549758939136/1154869968761012335/image.png
22:01 < bridge> <furooooooooooooooooooooooooooooo> ü•π
23:31 < bridge> <_voxeldoesart> time to get flamed for this update too
23:32 < bridge> <_voxeldoesart> (i hope i got all the afk checks right please tell me if i forgot anything)
23:32 < bridge> <_voxeldoesart> (i hope i got all the json checks right please tell me if i forgot anything)
23:33 < bridge> <teero777> everything's wrong. you're fired!
23:36 < bridge> <teero777> seems fine
23:36 < bridge> <teero777> good change
23:51 < bridge> <furooooooooooooooooooooooooooooo> Looks nice, but I think variables with `AFK` in them should be changed to `Afk` instead. It's like that in other places :)
23:52 < bridge> <_voxeldoesart> Alright will do
23:58 < bridge> <_voxeldoesart> why is this a merge conflict?
23:58 < bridge> <_voxeldoesart> https://cdn.discordapp.com/attachments/293493549758939136/1154899667474202696/image.png
