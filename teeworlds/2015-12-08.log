12:04 <@matricks> hmm
12:04 <@matricks> I'm kinda curious on how to solve teeworlds network stuff in rust :)
12:05 <@matricks> I think you could generate a lot of the protocol from the source code
12:07 < rand> what do you mean by solving teeworlds network stuff ?
12:08 <@matricks> now, the teeworlds protocol is defined in a set of python files that generate code
12:08 <@matricks> I'm curious on how I would solve that in rust
12:08 < rand> ok
12:08 <@matricks> there are some shortcuts I took in the protocol to make it easier to work with
12:09 <@matricks> like that all the networked objects can only use 32bit ints
12:09 <@matricks> there is ofcause some really nice performance benefits that comes out from this as well
12:10 <@matricks> but using rust macros, this could be avoided, and perhaps make the protocol a bit more dynamic and tighter packed
12:21 <@matricks> not anything I would do, just hit my head :)
12:23 < nheir> :)
12:26 <@minus> heinrich5991: day 7 looks indeed somewhat more tricky
12:26 <@matricks> day 7? :D
12:26 <@minus> http://adventofcode.com/day/7
12:27 <@matricks> code problem each day? :D
12:27 <@minus> 2 actually, yes
12:27 <@minus> the first 5 are really simple
12:29 < nheir> day 8 is simpler
12:29 <@minus> heinrich5991: did you solve it already? if part 2 involves variable inputs it might almost make sense to build a graph from the instructions instead of just evaluating them
12:29 <@matricks> minus: oh, so you should implement a simulator for that logic?
12:30 <@minus> actually a graph doesn't really make sense
12:30 <@matricks> it's gonna became a graph
12:30 <@matricks> that you need to evaluate
12:30 <@matricks> the problem is that it can be circular
12:31 < nheir> it's not, fortunatly :)
12:31 <@minus> oh wall
12:31 <@minus> well*
12:31 <@minus> true
12:31 <@matricks> and if it can't become circular, you can implement it with a list
12:31 <@matricks> (this is done in bam actually)
12:31 <@minus> i just went and interpreted it as set of instructions
12:31 <@matricks> you can do this as a set of jobs in bam :D
12:32 <@matricks> and bam will solve the graph for you as long as it's not cyclic
12:32 <@matricks> implement AND, OR NOT, LSHIFT etc as jobs
12:32 <@matricks> it would be super simple :D
12:33 <@matricks> other way of doing it, do it with a list
12:33 <@matricks> and just sort it, and then evaluate it
12:34 <@matricks> would be nice if I could download the problems
12:35 <@matricks> would be nice entertainment on my flight to the us tomorrow
12:45 <@matricks> minus: are you doing the advent stuff?
12:51 <@minus> yeah
12:51 <@minus> i have 12* already!
12:51 <@matricks> seems like a bit of fun, might do it with rust
12:51 <@minus> heh
12:51 <@matricks> airplane entertainment :)
12:52 <@matricks> or work on bam...
12:55 <@heinrich5991> pff graphs
12:55 <@heinrich5991> if you assume that it's not circular, you can just recursively evaluate it
12:55 <@heinrich5991> minus: https://github.com/heinrich5991/adventofcode-2015/blob/master/07/1.py
12:58 <@minus> nice
12:59 <@matricks> heinrich5991: nic
12:59 <@matricks> nice
13:03 <@matricks> nice and tight solution really
13:03 <@matricks> just missing some error checking ;)
13:05 <@matricks> and very lazy parsing of the grammer :D
14:44 < nheir> adding 'd[wire] = result' can avoid double evaluation :3
14:47 <@minus> well, he has it lru cached anyway
14:47 <@minus> that's essentially the same
14:49 <@matricks> gonna do that later in rust :)
14:49 <@matricks> but I'm gonna solve it my way
14:50 < nheir> oh, indeed
14:52 <@matricks> btw, one of the best remastered songs I've heard, https://www.youtube.com/watch?v=rmLjdRaVxXg
14:54 <@heinrich5991> with proper error checking? I cbf to do error checking for that thing
14:54 <@minus> NES?
14:56 <@matricks> heinrich5991: cbf?
14:56 <@matricks> minus: original was to nes yes
14:56 <@matricks> care beyond fuck?
14:57 <@heinrich5991> couldn't be motivated :)
14:57 <@matricks> ahh, yeah
14:57 <@matricks> understandable
14:57 <@matricks> heinrich5991: no, but my solution is to put it into a list and sort it for execution order
14:57 <@heinrich5991> mh. that's the clean solution :)
14:58 <@minus> heinrich5…│ couldn't be motivated :) ← first time i see it as that. means can't be fucked to me
14:58 <@minus> oh
14:58 <@minus> you just transcribed
14:59 <@matricks> heinrich5991: but I'm gonna do it in rust! :D
15:00 <@heinrich5991> +1 for rust
15:00 <@heinrich5991> -1 for not the right tool for the right job IMO
15:00 <@matricks> heinrich5991: well, one of my jobs is to learn a bit more rust so..
15:00 <@heinrich5991> at least it's gonna perform better ^^
15:02 <@matricks> I would probably solve that with python as well if I just had todo it
15:06 <@matricks> and yes, I wouldn't have cared for the proper error checking either
19:37 < tyurd> anyone familiar with segfaults on apache2?
